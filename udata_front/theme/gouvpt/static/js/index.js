// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles

(function (modules, entry, mainEntry, parcelRequireName, globalName) {
  /* eslint-disable no-undef */
  var globalObject =
    typeof globalThis !== 'undefined'
      ? globalThis
      : typeof self !== 'undefined'
      ? self
      : typeof window !== 'undefined'
      ? window
      : typeof global !== 'undefined'
      ? global
      : {};
  /* eslint-enable no-undef */

  // Save the require from previous bundle to this closure if any
  var previousRequire =
    typeof globalObject[parcelRequireName] === 'function' &&
    globalObject[parcelRequireName];

  var cache = previousRequire.cache || {};
  // Do not use `require` to prevent Webpack from trying to bundle this call
  var nodeRequire =
    typeof module !== 'undefined' &&
    typeof module.require === 'function' &&
    module.require.bind(module);

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire =
          typeof globalObject[parcelRequireName] === 'function' &&
          globalObject[parcelRequireName];
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error("Cannot find module '" + name + "'");
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = (cache[name] = new newRequire.Module(name));

      modules[name][0].call(
        module.exports,
        localRequire,
        module,
        module.exports,
        this
      );
    }

    return cache[name].exports;

    function localRequire(x) {
      var res = localRequire.resolve(x);
      return res === false ? {} : newRequire(res);
    }

    function resolve(x) {
      var id = modules[name][1][x];
      return id != null ? id : x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [
      function (require, module) {
        module.exports = exports;
      },
      {},
    ];
  };

  Object.defineProperty(newRequire, 'root', {
    get: function () {
      return globalObject[parcelRequireName];
    },
  });

  globalObject[parcelRequireName] = newRequire;

  for (var i = 0; i < entry.length; i++) {
    newRequire(entry[i]);
  }

  if (mainEntry) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(mainEntry);

    // CommonJS
    if (typeof exports === 'object' && typeof module !== 'undefined') {
      module.exports = mainExports;

      // RequireJS
    } else if (typeof define === 'function' && define.amd) {
      define(function () {
        return mainExports;
      });

      // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }
})({"6NI8C":[function(require,module,exports) {
"use strict";
var global = arguments[3];
var HMR_HOST = null;
var HMR_PORT = 1235;
var HMR_SECURE = false;
var HMR_ENV_HASH = "d6ea1d42532a7575";
module.bundle.HMR_BUNDLE_ID = "7b7814f538e3d781";
/* global HMR_HOST, HMR_PORT, HMR_ENV_HASH, HMR_SECURE, chrome, browser, importScripts */ /*::
import type {
  HMRAsset,
  HMRMessage,
} from '@parcel/reporter-dev-server/src/HMRServer.js';
interface ParcelRequire {
  (string): mixed;
  cache: {|[string]: ParcelModule|};
  hotData: mixed;
  Module: any;
  parent: ?ParcelRequire;
  isParcelRequire: true;
  modules: {|[string]: [Function, {|[string]: string|}]|};
  HMR_BUNDLE_ID: string;
  root: ParcelRequire;
}
interface ParcelModule {
  hot: {|
    data: mixed,
    accept(cb: (Function) => void): void,
    dispose(cb: (mixed) => void): void,
    // accept(deps: Array<string> | string, cb: (Function) => void): void,
    // decline(): void,
    _acceptCallbacks: Array<(Function) => void>,
    _disposeCallbacks: Array<(mixed) => void>,
  |};
}
interface ExtensionContext {
  runtime: {|
    reload(): void,
  |};
}
declare var module: {bundle: ParcelRequire, ...};
declare var HMR_HOST: string;
declare var HMR_PORT: string;
declare var HMR_ENV_HASH: string;
declare var HMR_SECURE: boolean;
declare var chrome: ExtensionContext;
declare var browser: ExtensionContext;
*/ var OVERLAY_ID = "__parcel__error__overlay__";
var OldModule = module.bundle.Module;
function Module(moduleName) {
    OldModule.call(this, moduleName);
    this.hot = {
        data: module.bundle.hotData,
        _acceptCallbacks: [],
        _disposeCallbacks: [],
        accept: function(fn) {
            this._acceptCallbacks.push(fn || function() {});
        },
        dispose: function(fn) {
            this._disposeCallbacks.push(fn);
        }
    };
    module.bundle.hotData = undefined;
}
module.bundle.Module = Module;
var checkedAssets, acceptedAssets, assetsToAccept /*: Array<[ParcelRequire, string]> */ ;
function getHostname() {
    return HMR_HOST || (location.protocol.indexOf("http") === 0 ? location.hostname : "localhost");
}
function getPort() {
    return HMR_PORT || location.port;
} // eslint-disable-next-line no-redeclare
var parent = module.bundle.parent;
if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== "undefined") {
    var hostname = getHostname();
    var port = getPort();
    var protocol = HMR_SECURE || location.protocol == "https:" && !/localhost|127.0.0.1|0.0.0.0/.test(hostname) ? "wss" : "ws";
    var ws = new WebSocket(protocol + "://" + hostname + (port ? ":" + port : "") + "/"); // Safari doesn't support sourceURL in error stacks.
    // eval may also be disabled via CSP, so do a quick check.
    var supportsSourceURL = false;
    try {
        (0, eval)('throw new Error("test"); //# sourceURL=test.js');
    } catch (err) {
        supportsSourceURL = err.stack.includes("test.js");
    } // $FlowFixMe
    ws.onmessage = async function(event) {
        checkedAssets = {} /*: {|[string]: boolean|} */ ;
        acceptedAssets = {} /*: {|[string]: boolean|} */ ;
        assetsToAccept = [];
        var data = JSON.parse(event.data);
        if (data.type === "update") {
            // Remove error overlay if there is one
            if (typeof document !== "undefined") removeErrorOverlay();
            let assets = data.assets.filter((asset)=>asset.envHash === HMR_ENV_HASH); // Handle HMR Update
            let handled = assets.every((asset)=>{
                return asset.type === "css" || asset.type === "js" && hmrAcceptCheck(module.bundle.root, asset.id, asset.depsByBundle);
            });
            if (handled) {
                console.clear(); // Dispatch custom event so other runtimes (e.g React Refresh) are aware.
                if (typeof window !== "undefined" && typeof CustomEvent !== "undefined") window.dispatchEvent(new CustomEvent("parcelhmraccept"));
                await hmrApplyUpdates(assets);
                for(var i = 0; i < assetsToAccept.length; i++){
                    var id = assetsToAccept[i][1];
                    if (!acceptedAssets[id]) hmrAcceptRun(assetsToAccept[i][0], id);
                }
            } else if ("reload" in location) location.reload();
            else {
                // Web extension context
                var ext = typeof chrome === "undefined" ? typeof browser === "undefined" ? null : browser : chrome;
                if (ext && ext.runtime && ext.runtime.reload) ext.runtime.reload();
            }
        }
        if (data.type === "error") {
            // Log parcel errors to console
            for (let ansiDiagnostic of data.diagnostics.ansi){
                let stack = ansiDiagnostic.codeframe ? ansiDiagnostic.codeframe : ansiDiagnostic.stack;
                console.error("\uD83D\uDEA8 [parcel]: " + ansiDiagnostic.message + "\n" + stack + "\n\n" + ansiDiagnostic.hints.join("\n"));
            }
            if (typeof document !== "undefined") {
                // Render the fancy html overlay
                removeErrorOverlay();
                var overlay = createErrorOverlay(data.diagnostics.html); // $FlowFixMe
                document.body.appendChild(overlay);
            }
        }
    };
    ws.onerror = function(e) {
        console.error(e.message);
    };
    ws.onclose = function() {
        console.warn("[parcel] \uD83D\uDEA8 Connection to the HMR server was lost");
    };
}
function removeErrorOverlay() {
    var overlay = document.getElementById(OVERLAY_ID);
    if (overlay) {
        overlay.remove();
        console.log("[parcel] \u2728 Error resolved");
    }
}
function createErrorOverlay(diagnostics) {
    var overlay = document.createElement("div");
    overlay.id = OVERLAY_ID;
    let errorHTML = '<div style="background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;">';
    for (let diagnostic of diagnostics){
        let stack = diagnostic.frames.length ? diagnostic.frames.reduce((p, frame)=>{
            return `${p}
<a href="/__parcel_launch_editor?file=${encodeURIComponent(frame.location)}" style="text-decoration: underline; color: #888" onclick="fetch(this.href); return false">${frame.location}</a>
${frame.code}`;
        }, "") : diagnostic.stack;
        errorHTML += `
      <div>
        <div style="font-size: 18px; font-weight: bold; margin-top: 20px;">
          🚨 ${diagnostic.message}
        </div>
        <pre>${stack}</pre>
        <div>
          ${diagnostic.hints.map((hint)=>"<div>\uD83D\uDCA1 " + hint + "</div>").join("")}
        </div>
        ${diagnostic.documentation ? `<div>📝 <a style="color: violet" href="${diagnostic.documentation}" target="_blank">Learn more</a></div>` : ""}
      </div>
    `;
    }
    errorHTML += "</div>";
    overlay.innerHTML = errorHTML;
    return overlay;
}
function getParents(bundle, id) /*: Array<[ParcelRequire, string]> */ {
    var modules = bundle.modules;
    if (!modules) return [];
    var parents = [];
    var k, d, dep;
    for(k in modules)for(d in modules[k][1]){
        dep = modules[k][1][d];
        if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) parents.push([
            bundle,
            k
        ]);
    }
    if (bundle.parent) parents = parents.concat(getParents(bundle.parent, id));
    return parents;
}
function updateLink(link) {
    var newLink = link.cloneNode();
    newLink.onload = function() {
        if (link.parentNode !== null) // $FlowFixMe
        link.parentNode.removeChild(link);
    };
    newLink.setAttribute("href", link.getAttribute("href").split("?")[0] + "?" + Date.now()); // $FlowFixMe
    link.parentNode.insertBefore(newLink, link.nextSibling);
}
var cssTimeout = null;
function reloadCSS() {
    if (cssTimeout) return;
    cssTimeout = setTimeout(function() {
        var links = document.querySelectorAll('link[rel="stylesheet"]');
        for(var i = 0; i < links.length; i++){
            // $FlowFixMe[incompatible-type]
            var href = links[i].getAttribute("href");
            var hostname = getHostname();
            var servedFromHMRServer = hostname === "localhost" ? new RegExp("^(https?:\\/\\/(0.0.0.0|127.0.0.1)|localhost):" + getPort()).test(href) : href.indexOf(hostname + ":" + getPort());
            var absolute = /^https?:\/\//i.test(href) && href.indexOf(location.origin) !== 0 && !servedFromHMRServer;
            if (!absolute) updateLink(links[i]);
        }
        cssTimeout = null;
    }, 50);
}
async function hmrApplyUpdates(assets) {
    global.parcelHotUpdate = Object.create(null);
    let scriptsToRemove;
    try {
        // If sourceURL comments aren't supported in eval, we need to load
        // the update from the dev server over HTTP so that stack traces
        // are correct in errors/logs. This is much slower than eval, so
        // we only do it if needed (currently just Safari).
        // https://bugs.webkit.org/show_bug.cgi?id=137297
        // This path is also taken if a CSP disallows eval.
        if (!supportsSourceURL) {
            let promises = assets.map((asset)=>{
                if (asset.type === "js") {
                    if (typeof document !== "undefined") {
                        let script = document.createElement("script");
                        script.src = asset.url;
                        return new Promise((resolve, reject)=>{
                            var _document$head;
                            script.onload = ()=>resolve(script);
                            script.onerror = reject;
                            (_document$head = document.head) === null || _document$head === void 0 || _document$head.appendChild(script);
                        });
                    } else if (typeof importScripts === "function") return new Promise((resolve, reject)=>{
                        try {
                            importScripts(asset.url);
                        } catch (err) {
                            reject(err);
                        }
                    });
                }
            });
            scriptsToRemove = await Promise.all(promises);
        }
        assets.forEach(function(asset) {
            hmrApply(module.bundle.root, asset);
        });
    } finally{
        delete global.parcelHotUpdate;
        if (scriptsToRemove) scriptsToRemove.forEach((script)=>{
            if (script) {
                var _document$head2;
                (_document$head2 = document.head) === null || _document$head2 === void 0 || _document$head2.removeChild(script);
            }
        });
    }
}
function hmrApply(bundle, asset) {
    var modules = bundle.modules;
    if (!modules) return;
    if (asset.type === "css") reloadCSS();
    else if (asset.type === "js") {
        let deps = asset.depsByBundle[bundle.HMR_BUNDLE_ID];
        if (deps) {
            if (modules[asset.id]) {
                // Remove dependencies that are removed and will become orphaned.
                // This is necessary so that if the asset is added back again, the cache is gone, and we prevent a full page reload.
                let oldDeps = modules[asset.id][1];
                for(let dep in oldDeps)if (!deps[dep] || deps[dep] !== oldDeps[dep]) {
                    let id = oldDeps[dep];
                    let parents = getParents(module.bundle.root, id);
                    if (parents.length === 1) hmrDelete(module.bundle.root, id);
                }
            }
            if (supportsSourceURL) // Global eval. We would use `new Function` here but browser
            // support for source maps is better with eval.
            (0, eval)(asset.output);
            let fn = global.parcelHotUpdate[asset.id];
            modules[asset.id] = [
                fn,
                deps
            ];
        } else if (bundle.parent) hmrApply(bundle.parent, asset);
    }
}
function hmrDelete(bundle, id1) {
    let modules = bundle.modules;
    if (!modules) return;
    if (modules[id1]) {
        // Collect dependencies that will become orphaned when this module is deleted.
        let deps = modules[id1][1];
        let orphans = [];
        for(let dep in deps){
            let parents = getParents(module.bundle.root, deps[dep]);
            if (parents.length === 1) orphans.push(deps[dep]);
        } // Delete the module. This must be done before deleting dependencies in case of circular dependencies.
        delete modules[id1];
        delete bundle.cache[id1]; // Now delete the orphans.
        orphans.forEach((id)=>{
            hmrDelete(module.bundle.root, id);
        });
    } else if (bundle.parent) hmrDelete(bundle.parent, id1);
}
function hmrAcceptCheck(bundle, id, depsByBundle) {
    if (hmrAcceptCheckOne(bundle, id, depsByBundle)) return true;
     // Traverse parents breadth first. All possible ancestries must accept the HMR update, or we'll reload.
    let parents = getParents(module.bundle.root, id);
    let accepted = false;
    while(parents.length > 0){
        let v = parents.shift();
        let a = hmrAcceptCheckOne(v[0], v[1], null);
        if (a) // If this parent accepts, stop traversing upward, but still consider siblings.
        accepted = true;
        else {
            // Otherwise, queue the parents in the next level upward.
            let p = getParents(module.bundle.root, v[1]);
            if (p.length === 0) {
                // If there are no parents, then we've reached an entry without accepting. Reload.
                accepted = false;
                break;
            }
            parents.push(...p);
        }
    }
    return accepted;
}
function hmrAcceptCheckOne(bundle, id, depsByBundle) {
    var modules = bundle.modules;
    if (!modules) return;
    if (depsByBundle && !depsByBundle[bundle.HMR_BUNDLE_ID]) {
        // If we reached the root bundle without finding where the asset should go,
        // there's nothing to do. Mark as "accepted" so we don't reload the page.
        if (!bundle.parent) return true;
        return hmrAcceptCheck(bundle.parent, id, depsByBundle);
    }
    if (checkedAssets[id]) return true;
    checkedAssets[id] = true;
    var cached = bundle.cache[id];
    assetsToAccept.push([
        bundle,
        id
    ]);
    if (!cached || cached.hot && cached.hot._acceptCallbacks.length) return true;
}
function hmrAcceptRun(bundle, id) {
    var cached = bundle.cache[id];
    bundle.hotData = {};
    if (cached && cached.hot) cached.hot.data = bundle.hotData;
    if (cached && cached.hot && cached.hot._disposeCallbacks.length) cached.hot._disposeCallbacks.forEach(function(cb) {
        cb(bundle.hotData);
    });
    delete bundle.cache[id];
    bundle(id);
    cached = bundle.cache[id];
    if (cached && cached.hot && cached.hot._acceptCallbacks.length) cached.hot._acceptCallbacks.forEach(function(cb) {
        var assetsToAlsoAccept = cb(function() {
            return getParents(module.bundle.root, id);
        });
        if (assetsToAlsoAccept && assetsToAccept.length) // $FlowFixMe[method-unbinding]
        assetsToAccept.push.apply(assetsToAccept, assetsToAlsoAccept);
    });
    acceptedAssets[id] = true;
}

},{}],"8lOnX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _vue = require("vue");
var _dsfr = require("./dsfr");
var _dsfrModule = require("@gouvpt/dsfr/dist/dsfr/dsfr.module");
var _threadsVue = require("./components/discussions/threads.vue");
var _threadsVueDefault = parcelHelpers.interopDefault(_threadsVue);
var _menuSearchVue = require("./components/search/menu-search.vue");
var _menuSearchVueDefault = parcelHelpers.interopDefault(_menuSearchVue);
var _searchVue = require("./components/search/search.vue");
var _searchVueDefault = parcelHelpers.interopDefault(_searchVue);
var _featuredVue = require("./components/utils/featured.vue");
var _featuredVueDefault = parcelHelpers.interopDefault(_featuredVue);
var _followButtonVue = require("./components/utils/follow-button.vue");
var _followButtonVueDefault = parcelHelpers.interopDefault(_followButtonVue);
var _readMoreVue = require("./components/utils/read-more.vue");
var _readMoreVueDefault = parcelHelpers.interopDefault(_readMoreVue);
var _requestMembershipVue = require("./components/organization/request-membership.vue");
var _requestMembershipVueDefault = parcelHelpers.interopDefault(_requestMembershipVue);
var _resourcesVue = require("./components/dataset/resource/resources.vue");
var _resourcesVueDefault = parcelHelpers.interopDefault(_resourcesVue);
var _searchBarVue = require("./components/utils/search-bar.vue");
var _searchBarVueDefault = parcelHelpers.interopDefault(_searchBarVue);
var _captchaVue = require("./components/utils/captcha.vue");
var _captchaVueDefault = parcelHelpers.interopDefault(_captchaVue);
var _tabs = require("./components/vanilla/tabs");
var _tabsDefault = parcelHelpers.interopDefault(_tabs);
var _accordion = require("./components/vanilla/accordion");
var _accordionDefault = parcelHelpers.interopDefault(_accordion);
var _clipboard = require("./components/vanilla/clipboard");
var _clipboardDefault = parcelHelpers.interopDefault(_clipboard);
var _sortSearch = require("./components/vanilla/sort-search");
var _sortSearchDefault = parcelHelpers.interopDefault(_sortSearch);
var _vueFinalModal = require("vue-final-modal");
var _vueFinalModalDefault = parcelHelpers.interopDefault(_vueFinalModal);
var _vueToaster = require("@meforma/vue-toaster");
var _vueToasterDefault = parcelHelpers.interopDefault(_vueToaster);
var _api = require("./plugins/api");
var _apiDefault = parcelHelpers.interopDefault(_api);
var _eventbus = require("./plugins/eventbus");
var _eventbusDefault = parcelHelpers.interopDefault(_eventbus);
var _auth = require("./plugins/auth");
var _authDefault = parcelHelpers.interopDefault(_auth);
var _modals = require("./plugins/modals");
var _modalsDefault = parcelHelpers.interopDefault(_modals);
var _i18N = require("./plugins/i18n");
var _i18NDefault = parcelHelpers.interopDefault(_i18N);
var _bodyClass = require("./plugins/bodyClass");
var _bodyClassDefault = parcelHelpers.interopDefault(_bodyClass);
var _filters = require("./plugins/filters");
var _filtersDefault = parcelHelpers.interopDefault(_filters);
var _sentry = require("./sentry");
var _sentryDefault = parcelHelpers.interopDefault(_sentry);
/**
 * @interface Ref
 * @template T
 * @property {T} value
 */ /**
 * @typedef {Object} Ref
 * @property value - The referenced value
*/ const configAndMountApp = (el)=>{
    const app = (0, _vue.createApp)({});
    // Configure as early as possible in the app's lifecycle
    (0, _sentryDefault.default)(app);
    app.use((0, _apiDefault.default));
    app.use((0, _eventbusDefault.default));
    app.use((0, _authDefault.default));
    app.use((0, _vueFinalModalDefault.default)());
    app.use((0, _modalsDefault.default)); //Has to be loaded after VueFinalModal
    app.use((0, _i18NDefault.default));
    app.use((0, _bodyClassDefault.default));
    app.use((0, _filtersDefault.default));
    app.use((0, _vueToasterDefault.default), {
        duration: false,
        dismissible: true
    }).provide("toast", app.config.globalProperties.$toast);
    app.component("discussion-threads", (0, _threadsVueDefault.default));
    app.component("menu-search", (0, _menuSearchVueDefault.default));
    app.component("search", (0, _searchVueDefault.default));
    app.component("follow-button", (0, _followButtonVueDefault.default));
    app.component("featured-button", (0, _featuredVueDefault.default));
    app.component("read-more", (0, _readMoreVueDefault.default));
    app.component("request-membership", (0, _requestMembershipVueDefault.default));
    app.component("dataset-resources", (0, _resourcesVueDefault.default));
    app.component("search-bar", (0, _searchBarVueDefault.default));
    app.component("captcha", (0, _captchaVueDefault.default));
    // unset delimiters used in html templates to prevent injections using {{ }}
    app.config.compilerOptions.delimiters = [];
    const vm = app.mount(el);
};
const elements = document.querySelectorAll(".vuejs");
elements.forEach((el)=>{
    //We keep the div HTML from before trying to mount the VueJS App
    const previousHtml = el.innerHTML;
    try {
        configAndMountApp(el);
    } catch (e) {
        //If the mount wasn't successful, Vue will remove all HTML from the div. We'll put it back so you can use the website.
        el.innerHTML = previousHtml;
        console.log(`VueJS template compilation failed for element ${el.className}.
      Aborted the process and rolled back the HTML.
      See error(s) above and below (probably won't help you tho) :`);
        console.log(el);
        console.error(e);
        throw e;
    }
});
window.dsfr.start();
console.log("JS is injected !");

},{"vue":"hRjhg","./dsfr":"bXH0S","@gouvpt/dsfr/dist/dsfr/dsfr.module":"9MaxD","./components/discussions/threads.vue":"iFAyb","./components/search/menu-search.vue":"fJRlf","./components/search/search.vue":"JGfuh","./components/utils/featured.vue":"5gn4S","./components/utils/follow-button.vue":"hcdrh","./components/utils/read-more.vue":"3gHKy","./components/organization/request-membership.vue":"350VF","./components/dataset/resource/resources.vue":"dyYSn","./components/utils/search-bar.vue":"jyOE4","./components/utils/captcha.vue":"kn2tU","./components/vanilla/tabs":"c21na","./components/vanilla/accordion":"5mTLF","./components/vanilla/clipboard":"6aPmi","./components/vanilla/sort-search":"35vmY","vue-final-modal":"9ehTl","@meforma/vue-toaster":"ls5zD","./plugins/api":"8P8eo","./plugins/eventbus":"6CYPj","./plugins/auth":"bChCL","./plugins/modals":"jKRaI","./plugins/i18n":"34NkF","./plugins/bodyClass":"7HFro","./plugins/filters":"eqjCo","./sentry":"a6buL","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hRjhg":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var compilerDom = require("@vue/compiler-dom");
var runtimeDom = require("@vue/runtime-dom");
var shared = require("@vue/shared");
function _interopNamespace(e) {
    if (e && e.__esModule) return e;
    var n = Object.create(null);
    if (e) Object.keys(e).forEach(function(k) {
        n[k] = e[k];
    });
    n["default"] = e;
    return Object.freeze(n);
}
var runtimeDom__namespace = /*#__PURE__*/ _interopNamespace(runtimeDom);
// This entry is the "full-build" that includes both the runtime
const compileCache = Object.create(null);
function compileToFunction(template, options) {
    if (!shared.isString(template)) {
        if (template.nodeType) template = template.innerHTML;
        else {
            runtimeDom.warn(`invalid template option: `, template);
            return shared.NOOP;
        }
    }
    const key = template;
    const cached = compileCache[key];
    if (cached) return cached;
    if (template[0] === "#") {
        const el = document.querySelector(template);
        if (!el) runtimeDom.warn(`Template element not found or is empty: ${template}`);
        // __UNSAFE__
        // Reason: potential execution of JS expressions in in-DOM template.
        // The user must make sure the in-DOM template is trusted. If it's rendered
        // by the server, the template should not contain any user data.
        template = el ? el.innerHTML : ``;
    }
    const { code  } = compilerDom.compile(template, shared.extend({
        hoistStatic: true,
        onError: onError,
        onWarn: (e)=>onError(e, true)
    }, options));
    function onError(err, asWarning = false) {
        const message = asWarning ? err.message : `Template compilation error: ${err.message}`;
        const codeFrame = err.loc && shared.generateCodeFrame(template, err.loc.start.offset, err.loc.end.offset);
        runtimeDom.warn(codeFrame ? `${message}\n${codeFrame}` : message);
    }
    // The wildcard import results in a huge object with every export
    // with keys that cannot be mangled, and can be quite heavy size-wise.
    // In the global build we know `Vue` is available globally so we can avoid
    // the wildcard object.
    const render = new Function("Vue", code)(runtimeDom__namespace);
    render._rc = true;
    return compileCache[key] = render;
}
runtimeDom.registerRuntimeCompiler(compileToFunction);
Object.keys(runtimeDom).forEach(function(k) {
    if (k !== "default") exports[k] = runtimeDom[k];
});
exports.compile = compileToFunction;

},{"@vue/compiler-dom":"aaqi0","@vue/runtime-dom":"9wNvI","@vue/shared":"gKPJ6"}],"aaqi0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DOMDirectiveTransforms", ()=>DOMDirectiveTransforms);
parcelHelpers.export(exports, "DOMNodeTransforms", ()=>DOMNodeTransforms);
parcelHelpers.export(exports, "TRANSITION", ()=>TRANSITION);
parcelHelpers.export(exports, "TRANSITION_GROUP", ()=>TRANSITION_GROUP);
parcelHelpers.export(exports, "V_MODEL_CHECKBOX", ()=>V_MODEL_CHECKBOX);
parcelHelpers.export(exports, "V_MODEL_DYNAMIC", ()=>V_MODEL_DYNAMIC);
parcelHelpers.export(exports, "V_MODEL_RADIO", ()=>V_MODEL_RADIO);
parcelHelpers.export(exports, "V_MODEL_SELECT", ()=>V_MODEL_SELECT);
parcelHelpers.export(exports, "V_MODEL_TEXT", ()=>V_MODEL_TEXT);
parcelHelpers.export(exports, "V_ON_WITH_KEYS", ()=>V_ON_WITH_KEYS);
parcelHelpers.export(exports, "V_ON_WITH_MODIFIERS", ()=>V_ON_WITH_MODIFIERS);
parcelHelpers.export(exports, "V_SHOW", ()=>V_SHOW);
parcelHelpers.export(exports, "compile", ()=>compile);
parcelHelpers.export(exports, "createDOMCompilerError", ()=>createDOMCompilerError);
parcelHelpers.export(exports, "parse", ()=>parse);
parcelHelpers.export(exports, "parserOptions", ()=>parserOptions);
parcelHelpers.export(exports, "transformStyle", ()=>transformStyle);
var _compilerCore = require("@vue/compiler-core");
var _shared = require("@vue/shared");
parcelHelpers.exportAll(_compilerCore, exports);
const V_MODEL_RADIO = Symbol(`vModelRadio`);
const V_MODEL_CHECKBOX = Symbol(`vModelCheckbox`);
const V_MODEL_TEXT = Symbol(`vModelText`);
const V_MODEL_SELECT = Symbol(`vModelSelect`);
const V_MODEL_DYNAMIC = Symbol(`vModelDynamic`);
const V_ON_WITH_MODIFIERS = Symbol(`vOnModifiersGuard`);
const V_ON_WITH_KEYS = Symbol(`vOnKeysGuard`);
const V_SHOW = Symbol(`vShow`);
const TRANSITION = Symbol(`Transition`);
const TRANSITION_GROUP = Symbol(`TransitionGroup`);
(0, _compilerCore.registerRuntimeHelpers)({
    [V_MODEL_RADIO]: `vModelRadio`,
    [V_MODEL_CHECKBOX]: `vModelCheckbox`,
    [V_MODEL_TEXT]: `vModelText`,
    [V_MODEL_SELECT]: `vModelSelect`,
    [V_MODEL_DYNAMIC]: `vModelDynamic`,
    [V_ON_WITH_MODIFIERS]: `withModifiers`,
    [V_ON_WITH_KEYS]: `withKeys`,
    [V_SHOW]: `vShow`,
    [TRANSITION]: `Transition`,
    [TRANSITION_GROUP]: `TransitionGroup`
});
/* eslint-disable no-restricted-globals */ let decoder;
function decodeHtmlBrowser(raw, asAttr = false) {
    if (!decoder) decoder = document.createElement("div");
    if (asAttr) {
        decoder.innerHTML = `<div foo="${raw.replace(/"/g, "&quot;")}">`;
        return decoder.children[0].getAttribute("foo");
    } else {
        decoder.innerHTML = raw;
        return decoder.textContent;
    }
}
const isRawTextContainer = /*#__PURE__*/ (0, _shared.makeMap)("style,iframe,script,noscript", true);
const parserOptions = {
    isVoidTag: (0, _shared.isVoidTag),
    isNativeTag: (tag)=>(0, _shared.isHTMLTag)(tag) || (0, _shared.isSVGTag)(tag),
    isPreTag: (tag)=>tag === "pre",
    decodeEntities: decodeHtmlBrowser,
    isBuiltInComponent: (tag)=>{
        if ((0, _compilerCore.isBuiltInType)(tag, `Transition`)) return TRANSITION;
        else if ((0, _compilerCore.isBuiltInType)(tag, `TransitionGroup`)) return TRANSITION_GROUP;
    },
    // https://html.spec.whatwg.org/multipage/parsing.html#tree-construction-dispatcher
    getNamespace (tag, parent) {
        let ns = parent ? parent.ns : 0 /* HTML */ ;
        if (parent && ns === 2 /* MATH_ML */ ) {
            if (parent.tag === "annotation-xml") {
                if (tag === "svg") return 1 /* SVG */ ;
                if (parent.props.some((a)=>a.type === 6 /* ATTRIBUTE */  && a.name === "encoding" && a.value != null && (a.value.content === "text/html" || a.value.content === "application/xhtml+xml"))) ns = 0 /* HTML */ ;
            } else if (/^m(?:[ions]|text)$/.test(parent.tag) && tag !== "mglyph" && tag !== "malignmark") ns = 0 /* HTML */ ;
        } else if (parent && ns === 1 /* SVG */ ) {
            if (parent.tag === "foreignObject" || parent.tag === "desc" || parent.tag === "title") ns = 0 /* HTML */ ;
        }
        if (ns === 0 /* HTML */ ) {
            if (tag === "svg") return 1 /* SVG */ ;
            if (tag === "math") return 2 /* MATH_ML */ ;
        }
        return ns;
    },
    // https://html.spec.whatwg.org/multipage/parsing.html#parsing-html-fragments
    getTextMode ({ tag , ns  }) {
        if (ns === 0 /* HTML */ ) {
            if (tag === "textarea" || tag === "title") return 1 /* RCDATA */ ;
            if (isRawTextContainer(tag)) return 2 /* RAWTEXT */ ;
        }
        return 0 /* DATA */ ;
    }
};
// Parse inline CSS strings for static style attributes into an object.
// This is a NodeTransform since it works on the static `style` attribute and
// converts it into a dynamic equivalent:
// style="color: red" -> :style='{ "color": "red" }'
// It is then processed by `transformElement` and included in the generated
// props.
const transformStyle = (node)=>{
    if (node.type === 1 /* ELEMENT */ ) node.props.forEach((p, i)=>{
        if (p.type === 6 /* ATTRIBUTE */  && p.name === "style" && p.value) // replace p with an expression node
        node.props[i] = {
            type: 7 /* DIRECTIVE */ ,
            name: `bind`,
            arg: (0, _compilerCore.createSimpleExpression)(`style`, true, p.loc),
            exp: parseInlineCSS(p.value.content, p.loc),
            modifiers: [],
            loc: p.loc
        };
    });
};
const parseInlineCSS = (cssText, loc)=>{
    const normalized = (0, _shared.parseStringStyle)(cssText);
    return (0, _compilerCore.createSimpleExpression)(JSON.stringify(normalized), false, loc, 3 /* CAN_STRINGIFY */ );
};
function createDOMCompilerError(code, loc) {
    return (0, _compilerCore.createCompilerError)(code, loc, DOMErrorMessages);
}
const DOMErrorMessages = {
    [50 /* X_V_HTML_NO_EXPRESSION */ ]: `v-html is missing expression.`,
    [51 /* X_V_HTML_WITH_CHILDREN */ ]: `v-html will override element children.`,
    [52 /* X_V_TEXT_NO_EXPRESSION */ ]: `v-text is missing expression.`,
    [53 /* X_V_TEXT_WITH_CHILDREN */ ]: `v-text will override element children.`,
    [54 /* X_V_MODEL_ON_INVALID_ELEMENT */ ]: `v-model can only be used on <input>, <textarea> and <select> elements.`,
    [55 /* X_V_MODEL_ARG_ON_ELEMENT */ ]: `v-model argument is not supported on plain elements.`,
    [56 /* X_V_MODEL_ON_FILE_INPUT_ELEMENT */ ]: `v-model cannot be used on file inputs since they are read-only. Use a v-on:change listener instead.`,
    [57 /* X_V_MODEL_UNNECESSARY_VALUE */ ]: `Unnecessary value binding used alongside v-model. It will interfere with v-model's behavior.`,
    [58 /* X_V_SHOW_NO_EXPRESSION */ ]: `v-show is missing expression.`,
    [59 /* X_TRANSITION_INVALID_CHILDREN */ ]: `<Transition> expects exactly one child element or component.`,
    [60 /* X_IGNORED_SIDE_EFFECT_TAG */ ]: `Tags with side effect (<script> and <style>) are ignored in client component templates.`
};
const transformVHtml = (dir, node, context)=>{
    const { exp , loc  } = dir;
    if (!exp) context.onError(createDOMCompilerError(50 /* X_V_HTML_NO_EXPRESSION */ , loc));
    if (node.children.length) {
        context.onError(createDOMCompilerError(51 /* X_V_HTML_WITH_CHILDREN */ , loc));
        node.children.length = 0;
    }
    return {
        props: [
            (0, _compilerCore.createObjectProperty)((0, _compilerCore.createSimpleExpression)(`innerHTML`, true, loc), exp || (0, _compilerCore.createSimpleExpression)("", true))
        ]
    };
};
const transformVText = (dir, node, context)=>{
    const { exp , loc  } = dir;
    if (!exp) context.onError(createDOMCompilerError(52 /* X_V_TEXT_NO_EXPRESSION */ , loc));
    if (node.children.length) {
        context.onError(createDOMCompilerError(53 /* X_V_TEXT_WITH_CHILDREN */ , loc));
        node.children.length = 0;
    }
    return {
        props: [
            (0, _compilerCore.createObjectProperty)((0, _compilerCore.createSimpleExpression)(`textContent`, true), exp ? (0, _compilerCore.createCallExpression)(context.helperString((0, _compilerCore.TO_DISPLAY_STRING)), [
                exp
            ], loc) : (0, _compilerCore.createSimpleExpression)("", true))
        ]
    };
};
const transformModel = (dir, node, context)=>{
    const baseResult = (0, _compilerCore.transformModel)(dir, node, context);
    // base transform has errors OR component v-model (only need props)
    if (!baseResult.props.length || node.tagType === 1 /* COMPONENT */ ) return baseResult;
    if (dir.arg) context.onError(createDOMCompilerError(55 /* X_V_MODEL_ARG_ON_ELEMENT */ , dir.arg.loc));
    function checkDuplicatedValue() {
        const value = (0, _compilerCore.findProp)(node, "value");
        if (value) context.onError(createDOMCompilerError(57 /* X_V_MODEL_UNNECESSARY_VALUE */ , value.loc));
    }
    const { tag  } = node;
    const isCustomElement = context.isCustomElement(tag);
    if (tag === "input" || tag === "textarea" || tag === "select" || isCustomElement) {
        let directiveToUse = V_MODEL_TEXT;
        let isInvalidType = false;
        if (tag === "input" || isCustomElement) {
            const type = (0, _compilerCore.findProp)(node, `type`);
            if (type) {
                if (type.type === 7 /* DIRECTIVE */ ) // :type="foo"
                directiveToUse = V_MODEL_DYNAMIC;
                else if (type.value) switch(type.value.content){
                    case "radio":
                        directiveToUse = V_MODEL_RADIO;
                        break;
                    case "checkbox":
                        directiveToUse = V_MODEL_CHECKBOX;
                        break;
                    case "file":
                        isInvalidType = true;
                        context.onError(createDOMCompilerError(56 /* X_V_MODEL_ON_FILE_INPUT_ELEMENT */ , dir.loc));
                        break;
                    default:
                        checkDuplicatedValue();
                        break;
                }
            } else if ((0, _compilerCore.hasDynamicKeyVBind)(node)) // element has bindings with dynamic keys, which can possibly contain
            // "type".
            directiveToUse = V_MODEL_DYNAMIC;
            else checkDuplicatedValue();
        } else if (tag === "select") directiveToUse = V_MODEL_SELECT;
        else checkDuplicatedValue();
        // inject runtime directive
        // by returning the helper symbol via needRuntime
        // the import will replaced a resolveDirective call.
        if (!isInvalidType) baseResult.needRuntime = context.helper(directiveToUse);
    } else context.onError(createDOMCompilerError(54 /* X_V_MODEL_ON_INVALID_ELEMENT */ , dir.loc));
    // native vmodel doesn't need the `modelValue` props since they are also
    // passed to the runtime as `binding.value`. removing it reduces code size.
    baseResult.props = baseResult.props.filter((p)=>!(p.key.type === 4 /* SIMPLE_EXPRESSION */  && p.key.content === "modelValue"));
    return baseResult;
};
const isEventOptionModifier = /*#__PURE__*/ (0, _shared.makeMap)(`passive,once,capture`);
const isNonKeyModifier = /*#__PURE__*/ (0, _shared.makeMap)(// event propagation management
`stop,prevent,self,` + // system modifiers + exact
`ctrl,shift,alt,meta,exact,` + // mouse
`middle`);
// left & right could be mouse or key modifiers based on event type
const maybeKeyModifier = /*#__PURE__*/ (0, _shared.makeMap)("left,right");
const isKeyboardEvent = /*#__PURE__*/ (0, _shared.makeMap)(`onkeyup,onkeydown,onkeypress`, true);
const resolveModifiers = (key, modifiers, context, loc)=>{
    const keyModifiers = [];
    const nonKeyModifiers = [];
    const eventOptionModifiers = [];
    for(let i = 0; i < modifiers.length; i++){
        const modifier = modifiers[i];
        if (modifier === "native" && (0, _compilerCore.checkCompatEnabled)("COMPILER_V_ON_NATIVE" /* COMPILER_V_ON_NATIVE */ , context, loc)) eventOptionModifiers.push(modifier);
        else if (isEventOptionModifier(modifier)) // eventOptionModifiers: modifiers for addEventListener() options,
        // e.g. .passive & .capture
        eventOptionModifiers.push(modifier);
        else {
            // runtimeModifiers: modifiers that needs runtime guards
            if (maybeKeyModifier(modifier)) {
                if ((0, _compilerCore.isStaticExp)(key)) {
                    if (isKeyboardEvent(key.content)) keyModifiers.push(modifier);
                    else nonKeyModifiers.push(modifier);
                } else {
                    keyModifiers.push(modifier);
                    nonKeyModifiers.push(modifier);
                }
            } else if (isNonKeyModifier(modifier)) nonKeyModifiers.push(modifier);
            else keyModifiers.push(modifier);
        }
    }
    return {
        keyModifiers,
        nonKeyModifiers,
        eventOptionModifiers
    };
};
const transformClick = (key, event)=>{
    const isStaticClick = (0, _compilerCore.isStaticExp)(key) && key.content.toLowerCase() === "onclick";
    return isStaticClick ? (0, _compilerCore.createSimpleExpression)(event, true) : key.type !== 4 /* SIMPLE_EXPRESSION */  ? (0, _compilerCore.createCompoundExpression)([
        `(`,
        key,
        `) === "onClick" ? "${event}" : (`,
        key,
        `)`
    ]) : key;
};
const transformOn = (dir, node, context)=>{
    return (0, _compilerCore.transformOn)(dir, node, context, (baseResult)=>{
        const { modifiers  } = dir;
        if (!modifiers.length) return baseResult;
        let { key , value: handlerExp  } = baseResult.props[0];
        const { keyModifiers , nonKeyModifiers , eventOptionModifiers  } = resolveModifiers(key, modifiers, context, dir.loc);
        // normalize click.right and click.middle since they don't actually fire
        if (nonKeyModifiers.includes("right")) key = transformClick(key, `onContextmenu`);
        if (nonKeyModifiers.includes("middle")) key = transformClick(key, `onMouseup`);
        if (nonKeyModifiers.length) handlerExp = (0, _compilerCore.createCallExpression)(context.helper(V_ON_WITH_MODIFIERS), [
            handlerExp,
            JSON.stringify(nonKeyModifiers)
        ]);
        if (keyModifiers.length && (!(0, _compilerCore.isStaticExp)(key) || isKeyboardEvent(key.content))) handlerExp = (0, _compilerCore.createCallExpression)(context.helper(V_ON_WITH_KEYS), [
            handlerExp,
            JSON.stringify(keyModifiers)
        ]);
        if (eventOptionModifiers.length) {
            const modifierPostfix = eventOptionModifiers.map((0, _shared.capitalize)).join("");
            key = (0, _compilerCore.isStaticExp)(key) ? (0, _compilerCore.createSimpleExpression)(`${key.content}${modifierPostfix}`, true) : (0, _compilerCore.createCompoundExpression)([
                `(`,
                key,
                `) + "${modifierPostfix}"`
            ]);
        }
        return {
            props: [
                (0, _compilerCore.createObjectProperty)(key, handlerExp)
            ]
        };
    });
};
const transformShow = (dir, node, context)=>{
    const { exp , loc  } = dir;
    if (!exp) context.onError(createDOMCompilerError(58 /* X_V_SHOW_NO_EXPRESSION */ , loc));
    return {
        props: [],
        needRuntime: context.helper(V_SHOW)
    };
};
const warnTransitionChildren = (node, context)=>{
    if (node.type === 1 /* ELEMENT */  && node.tagType === 1 /* COMPONENT */ ) {
        const component = context.isBuiltInComponent(node.tag);
        if (component === TRANSITION) return ()=>{
            if (node.children.length && hasMultipleChildren(node)) context.onError(createDOMCompilerError(59 /* X_TRANSITION_INVALID_CHILDREN */ , {
                start: node.children[0].loc.start,
                end: node.children[node.children.length - 1].loc.end,
                source: ""
            }));
        };
    }
};
function hasMultipleChildren(node) {
    // #1352 filter out potential comment nodes.
    const children = node.children = node.children.filter((c)=>c.type !== 3 /* COMMENT */ );
    const child = children[0];
    return children.length !== 1 || child.type === 11 /* FOR */  || child.type === 9 /* IF */  && child.branches.some(hasMultipleChildren);
}
const ignoreSideEffectTags = (node, context)=>{
    if (node.type === 1 /* ELEMENT */  && node.tagType === 0 /* ELEMENT */  && (node.tag === "script" || node.tag === "style")) {
        context.onError(createDOMCompilerError(60 /* X_IGNORED_SIDE_EFFECT_TAG */ , node.loc));
        context.removeNode();
    }
};
const DOMNodeTransforms = [
    transformStyle,
    warnTransitionChildren
];
const DOMDirectiveTransforms = {
    cloak: (0, _compilerCore.noopDirectiveTransform),
    html: transformVHtml,
    text: transformVText,
    model: transformModel,
    on: transformOn,
    show: transformShow
};
function compile(template, options = {}) {
    return (0, _compilerCore.baseCompile)(template, (0, _shared.extend)({}, parserOptions, options, {
        nodeTransforms: [
            // ignore <script> and <tag>
            // this is not put inside DOMNodeTransforms because that list is used
            // by compiler-ssr to generate vnode fallback branches
            ignoreSideEffectTags,
            ...DOMNodeTransforms,
            ...options.nodeTransforms || []
        ],
        directiveTransforms: (0, _shared.extend)({}, DOMDirectiveTransforms, options.directiveTransforms || {}),
        transformHoist: null
    }));
}
function parse(template, options = {}) {
    return (0, _compilerCore.baseParse)(template, (0, _shared.extend)({}, parserOptions, options));
}

},{"@vue/compiler-core":"f8a1A","@vue/shared":"gKPJ6","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"f8a1A":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "generateCodeFrame", ()=>(0, _shared.generateCodeFrame));
parcelHelpers.export(exports, "BASE_TRANSITION", ()=>BASE_TRANSITION);
parcelHelpers.export(exports, "CAMELIZE", ()=>CAMELIZE);
parcelHelpers.export(exports, "CAPITALIZE", ()=>CAPITALIZE);
parcelHelpers.export(exports, "CREATE_BLOCK", ()=>CREATE_BLOCK);
parcelHelpers.export(exports, "CREATE_COMMENT", ()=>CREATE_COMMENT);
parcelHelpers.export(exports, "CREATE_ELEMENT_BLOCK", ()=>CREATE_ELEMENT_BLOCK);
parcelHelpers.export(exports, "CREATE_ELEMENT_VNODE", ()=>CREATE_ELEMENT_VNODE);
parcelHelpers.export(exports, "CREATE_SLOTS", ()=>CREATE_SLOTS);
parcelHelpers.export(exports, "CREATE_STATIC", ()=>CREATE_STATIC);
parcelHelpers.export(exports, "CREATE_TEXT", ()=>CREATE_TEXT);
parcelHelpers.export(exports, "CREATE_VNODE", ()=>CREATE_VNODE);
parcelHelpers.export(exports, "FRAGMENT", ()=>FRAGMENT);
parcelHelpers.export(exports, "GUARD_REACTIVE_PROPS", ()=>GUARD_REACTIVE_PROPS);
parcelHelpers.export(exports, "IS_MEMO_SAME", ()=>IS_MEMO_SAME);
parcelHelpers.export(exports, "IS_REF", ()=>IS_REF);
parcelHelpers.export(exports, "KEEP_ALIVE", ()=>KEEP_ALIVE);
parcelHelpers.export(exports, "MERGE_PROPS", ()=>MERGE_PROPS);
parcelHelpers.export(exports, "NORMALIZE_CLASS", ()=>NORMALIZE_CLASS);
parcelHelpers.export(exports, "NORMALIZE_PROPS", ()=>NORMALIZE_PROPS);
parcelHelpers.export(exports, "NORMALIZE_STYLE", ()=>NORMALIZE_STYLE);
parcelHelpers.export(exports, "OPEN_BLOCK", ()=>OPEN_BLOCK);
parcelHelpers.export(exports, "POP_SCOPE_ID", ()=>POP_SCOPE_ID);
parcelHelpers.export(exports, "PUSH_SCOPE_ID", ()=>PUSH_SCOPE_ID);
parcelHelpers.export(exports, "RENDER_LIST", ()=>RENDER_LIST);
parcelHelpers.export(exports, "RENDER_SLOT", ()=>RENDER_SLOT);
parcelHelpers.export(exports, "RESOLVE_COMPONENT", ()=>RESOLVE_COMPONENT);
parcelHelpers.export(exports, "RESOLVE_DIRECTIVE", ()=>RESOLVE_DIRECTIVE);
parcelHelpers.export(exports, "RESOLVE_DYNAMIC_COMPONENT", ()=>RESOLVE_DYNAMIC_COMPONENT);
parcelHelpers.export(exports, "RESOLVE_FILTER", ()=>RESOLVE_FILTER);
parcelHelpers.export(exports, "SET_BLOCK_TRACKING", ()=>SET_BLOCK_TRACKING);
parcelHelpers.export(exports, "SUSPENSE", ()=>SUSPENSE);
parcelHelpers.export(exports, "TELEPORT", ()=>TELEPORT);
parcelHelpers.export(exports, "TO_DISPLAY_STRING", ()=>TO_DISPLAY_STRING);
parcelHelpers.export(exports, "TO_HANDLERS", ()=>TO_HANDLERS);
parcelHelpers.export(exports, "TO_HANDLER_KEY", ()=>TO_HANDLER_KEY);
parcelHelpers.export(exports, "UNREF", ()=>UNREF);
parcelHelpers.export(exports, "WITH_CTX", ()=>WITH_CTX);
parcelHelpers.export(exports, "WITH_DIRECTIVES", ()=>WITH_DIRECTIVES);
parcelHelpers.export(exports, "WITH_MEMO", ()=>WITH_MEMO);
parcelHelpers.export(exports, "advancePositionWithClone", ()=>advancePositionWithClone);
parcelHelpers.export(exports, "advancePositionWithMutation", ()=>advancePositionWithMutation);
parcelHelpers.export(exports, "assert", ()=>assert);
parcelHelpers.export(exports, "baseCompile", ()=>baseCompile);
parcelHelpers.export(exports, "baseParse", ()=>baseParse);
parcelHelpers.export(exports, "buildProps", ()=>buildProps);
parcelHelpers.export(exports, "buildSlots", ()=>buildSlots);
parcelHelpers.export(exports, "checkCompatEnabled", ()=>checkCompatEnabled);
parcelHelpers.export(exports, "createArrayExpression", ()=>createArrayExpression);
parcelHelpers.export(exports, "createAssignmentExpression", ()=>createAssignmentExpression);
parcelHelpers.export(exports, "createBlockStatement", ()=>createBlockStatement);
parcelHelpers.export(exports, "createCacheExpression", ()=>createCacheExpression);
parcelHelpers.export(exports, "createCallExpression", ()=>createCallExpression);
parcelHelpers.export(exports, "createCompilerError", ()=>createCompilerError);
parcelHelpers.export(exports, "createCompoundExpression", ()=>createCompoundExpression);
parcelHelpers.export(exports, "createConditionalExpression", ()=>createConditionalExpression);
parcelHelpers.export(exports, "createForLoopParams", ()=>createForLoopParams);
parcelHelpers.export(exports, "createFunctionExpression", ()=>createFunctionExpression);
parcelHelpers.export(exports, "createIfStatement", ()=>createIfStatement);
parcelHelpers.export(exports, "createInterpolation", ()=>createInterpolation);
parcelHelpers.export(exports, "createObjectExpression", ()=>createObjectExpression);
parcelHelpers.export(exports, "createObjectProperty", ()=>createObjectProperty);
parcelHelpers.export(exports, "createReturnStatement", ()=>createReturnStatement);
parcelHelpers.export(exports, "createRoot", ()=>createRoot);
parcelHelpers.export(exports, "createSequenceExpression", ()=>createSequenceExpression);
parcelHelpers.export(exports, "createSimpleExpression", ()=>createSimpleExpression);
parcelHelpers.export(exports, "createStructuralDirectiveTransform", ()=>createStructuralDirectiveTransform);
parcelHelpers.export(exports, "createTemplateLiteral", ()=>createTemplateLiteral);
parcelHelpers.export(exports, "createTransformContext", ()=>createTransformContext);
parcelHelpers.export(exports, "createVNodeCall", ()=>createVNodeCall);
parcelHelpers.export(exports, "extractIdentifiers", ()=>extractIdentifiers);
parcelHelpers.export(exports, "findDir", ()=>findDir);
parcelHelpers.export(exports, "findProp", ()=>findProp);
parcelHelpers.export(exports, "generate", ()=>generate);
parcelHelpers.export(exports, "getBaseTransformPreset", ()=>getBaseTransformPreset);
parcelHelpers.export(exports, "getInnerRange", ()=>getInnerRange);
parcelHelpers.export(exports, "getMemoedVNodeCall", ()=>getMemoedVNodeCall);
parcelHelpers.export(exports, "getVNodeBlockHelper", ()=>getVNodeBlockHelper);
parcelHelpers.export(exports, "getVNodeHelper", ()=>getVNodeHelper);
parcelHelpers.export(exports, "hasDynamicKeyVBind", ()=>hasDynamicKeyVBind);
parcelHelpers.export(exports, "hasScopeRef", ()=>hasScopeRef);
parcelHelpers.export(exports, "helperNameMap", ()=>helperNameMap);
parcelHelpers.export(exports, "injectProp", ()=>injectProp);
parcelHelpers.export(exports, "isBindKey", ()=>isBindKey);
parcelHelpers.export(exports, "isBuiltInType", ()=>isBuiltInType);
parcelHelpers.export(exports, "isCoreComponent", ()=>isCoreComponent);
parcelHelpers.export(exports, "isFunctionType", ()=>isFunctionType);
parcelHelpers.export(exports, "isInDestructureAssignment", ()=>isInDestructureAssignment);
parcelHelpers.export(exports, "isMemberExpression", ()=>isMemberExpression);
parcelHelpers.export(exports, "isReferencedIdentifier", ()=>isReferencedIdentifier);
parcelHelpers.export(exports, "isSimpleIdentifier", ()=>isSimpleIdentifier);
parcelHelpers.export(exports, "isSlotOutlet", ()=>isSlotOutlet);
parcelHelpers.export(exports, "isStaticExp", ()=>isStaticExp);
parcelHelpers.export(exports, "isStaticProperty", ()=>isStaticProperty);
parcelHelpers.export(exports, "isStaticPropertyKey", ()=>isStaticPropertyKey);
parcelHelpers.export(exports, "isTemplateNode", ()=>isTemplateNode);
parcelHelpers.export(exports, "isText", ()=>isText);
parcelHelpers.export(exports, "isVSlot", ()=>isVSlot);
parcelHelpers.export(exports, "locStub", ()=>locStub);
parcelHelpers.export(exports, "makeBlock", ()=>makeBlock);
parcelHelpers.export(exports, "noopDirectiveTransform", ()=>noopDirectiveTransform);
parcelHelpers.export(exports, "processExpression", ()=>processExpression);
parcelHelpers.export(exports, "processFor", ()=>processFor);
parcelHelpers.export(exports, "processIf", ()=>processIf);
parcelHelpers.export(exports, "processSlotOutlet", ()=>processSlotOutlet);
parcelHelpers.export(exports, "registerRuntimeHelpers", ()=>registerRuntimeHelpers);
parcelHelpers.export(exports, "resolveComponentType", ()=>resolveComponentType);
parcelHelpers.export(exports, "toValidAssetId", ()=>toValidAssetId);
parcelHelpers.export(exports, "trackSlotScopes", ()=>trackSlotScopes);
parcelHelpers.export(exports, "trackVForSlotScopes", ()=>trackVForSlotScopes);
parcelHelpers.export(exports, "transform", ()=>transform);
parcelHelpers.export(exports, "transformBind", ()=>transformBind);
parcelHelpers.export(exports, "transformElement", ()=>transformElement);
parcelHelpers.export(exports, "transformExpression", ()=>transformExpression);
parcelHelpers.export(exports, "transformModel", ()=>transformModel);
parcelHelpers.export(exports, "transformOn", ()=>transformOn);
parcelHelpers.export(exports, "traverseNode", ()=>traverseNode);
parcelHelpers.export(exports, "walkBlockDeclarations", ()=>walkBlockDeclarations);
parcelHelpers.export(exports, "walkFunctionParams", ()=>walkFunctionParams);
parcelHelpers.export(exports, "walkIdentifiers", ()=>walkIdentifiers);
parcelHelpers.export(exports, "warnDeprecation", ()=>warnDeprecation);
var _shared = require("@vue/shared");
function defaultOnError(error) {
    throw error;
}
function defaultOnWarn(msg) {
    console.warn(`[Vue warn] ${msg.message}`);
}
function createCompilerError(code, loc, messages, additionalMessage) {
    const msg = (messages || errorMessages)[code] + (additionalMessage || ``);
    const error = new SyntaxError(String(msg));
    error.code = code;
    error.loc = loc;
    return error;
}
const errorMessages = {
    // parse errors
    [0 /* ABRUPT_CLOSING_OF_EMPTY_COMMENT */ ]: "Illegal comment.",
    [1 /* CDATA_IN_HTML_CONTENT */ ]: "CDATA section is allowed only in XML context.",
    [2 /* DUPLICATE_ATTRIBUTE */ ]: "Duplicate attribute.",
    [3 /* END_TAG_WITH_ATTRIBUTES */ ]: "End tag cannot have attributes.",
    [4 /* END_TAG_WITH_TRAILING_SOLIDUS */ ]: "Illegal '/' in tags.",
    [5 /* EOF_BEFORE_TAG_NAME */ ]: "Unexpected EOF in tag.",
    [6 /* EOF_IN_CDATA */ ]: "Unexpected EOF in CDATA section.",
    [7 /* EOF_IN_COMMENT */ ]: "Unexpected EOF in comment.",
    [8 /* EOF_IN_SCRIPT_HTML_COMMENT_LIKE_TEXT */ ]: "Unexpected EOF in script.",
    [9 /* EOF_IN_TAG */ ]: "Unexpected EOF in tag.",
    [10 /* INCORRECTLY_CLOSED_COMMENT */ ]: "Incorrectly closed comment.",
    [11 /* INCORRECTLY_OPENED_COMMENT */ ]: "Incorrectly opened comment.",
    [12 /* INVALID_FIRST_CHARACTER_OF_TAG_NAME */ ]: "Illegal tag name. Use '&lt;' to print '<'.",
    [13 /* MISSING_ATTRIBUTE_VALUE */ ]: "Attribute value was expected.",
    [14 /* MISSING_END_TAG_NAME */ ]: "End tag name was expected.",
    [15 /* MISSING_WHITESPACE_BETWEEN_ATTRIBUTES */ ]: "Whitespace was expected.",
    [16 /* NESTED_COMMENT */ ]: "Unexpected '<!--' in comment.",
    [17 /* UNEXPECTED_CHARACTER_IN_ATTRIBUTE_NAME */ ]: "Attribute name cannot contain U+0022 (\"), U+0027 ('), and U+003C (<).",
    [18 /* UNEXPECTED_CHARACTER_IN_UNQUOTED_ATTRIBUTE_VALUE */ ]: "Unquoted attribute value cannot contain U+0022 (\"), U+0027 ('), U+003C (<), U+003D (=), and U+0060 (`).",
    [19 /* UNEXPECTED_EQUALS_SIGN_BEFORE_ATTRIBUTE_NAME */ ]: "Attribute name cannot start with '='.",
    [21 /* UNEXPECTED_QUESTION_MARK_INSTEAD_OF_TAG_NAME */ ]: "'<?' is allowed only in XML context.",
    [20 /* UNEXPECTED_NULL_CHARACTER */ ]: `Unexpected null character.`,
    [22 /* UNEXPECTED_SOLIDUS_IN_TAG */ ]: "Illegal '/' in tags.",
    // Vue-specific parse errors
    [23 /* X_INVALID_END_TAG */ ]: "Invalid end tag.",
    [24 /* X_MISSING_END_TAG */ ]: "Element is missing end tag.",
    [25 /* X_MISSING_INTERPOLATION_END */ ]: "Interpolation end sign was not found.",
    [27 /* X_MISSING_DYNAMIC_DIRECTIVE_ARGUMENT_END */ ]: "End bracket for dynamic directive argument was not found. Note that dynamic directive argument cannot contain spaces.",
    [26 /* X_MISSING_DIRECTIVE_NAME */ ]: "Legal directive name was expected.",
    // transform errors
    [28 /* X_V_IF_NO_EXPRESSION */ ]: `v-if/v-else-if is missing expression.`,
    [29 /* X_V_IF_SAME_KEY */ ]: `v-if/else branches must use unique keys.`,
    [30 /* X_V_ELSE_NO_ADJACENT_IF */ ]: `v-else/v-else-if has no adjacent v-if.`,
    [31 /* X_V_FOR_NO_EXPRESSION */ ]: `v-for is missing expression.`,
    [32 /* X_V_FOR_MALFORMED_EXPRESSION */ ]: `v-for has invalid expression.`,
    [33 /* X_V_FOR_TEMPLATE_KEY_PLACEMENT */ ]: `<template v-for> key should be placed on the <template> tag.`,
    [34 /* X_V_BIND_NO_EXPRESSION */ ]: `v-bind is missing expression.`,
    [35 /* X_V_ON_NO_EXPRESSION */ ]: `v-on is missing expression.`,
    [36 /* X_V_SLOT_UNEXPECTED_DIRECTIVE_ON_SLOT_OUTLET */ ]: `Unexpected custom directive on <slot> outlet.`,
    [37 /* X_V_SLOT_MIXED_SLOT_USAGE */ ]: `Mixed v-slot usage on both the component and nested <template>.` + `When there are multiple named slots, all slots should use <template> ` + `syntax to avoid scope ambiguity.`,
    [38 /* X_V_SLOT_DUPLICATE_SLOT_NAMES */ ]: `Duplicate slot names found. `,
    [39 /* X_V_SLOT_EXTRANEOUS_DEFAULT_SLOT_CHILDREN */ ]: `Extraneous children found when component already has explicitly named ` + `default slot. These children will be ignored.`,
    [40 /* X_V_SLOT_MISPLACED */ ]: `v-slot can only be used on components or <template> tags.`,
    [41 /* X_V_MODEL_NO_EXPRESSION */ ]: `v-model is missing expression.`,
    [42 /* X_V_MODEL_MALFORMED_EXPRESSION */ ]: `v-model value must be a valid JavaScript member expression.`,
    [43 /* X_V_MODEL_ON_SCOPE_VARIABLE */ ]: `v-model cannot be used on v-for or v-slot scope variables because they are not writable.`,
    [44 /* X_INVALID_EXPRESSION */ ]: `Error parsing JavaScript expression: `,
    [45 /* X_KEEP_ALIVE_INVALID_CHILDREN */ ]: `<KeepAlive> expects exactly one child component.`,
    // generic errors
    [46 /* X_PREFIX_ID_NOT_SUPPORTED */ ]: `"prefixIdentifiers" option is not supported in this build of compiler.`,
    [47 /* X_MODULE_MODE_NOT_SUPPORTED */ ]: `ES module mode is not supported in this build of compiler.`,
    [48 /* X_CACHE_HANDLER_NOT_SUPPORTED */ ]: `"cacheHandlers" option is only supported when the "prefixIdentifiers" option is enabled.`,
    [49 /* X_SCOPE_ID_NOT_SUPPORTED */ ]: `"scopeId" option is only supported in module mode.`,
    // just to fullfill types
    [50 /* __EXTEND_POINT__ */ ]: ``
};
const FRAGMENT = Symbol(`Fragment`);
const TELEPORT = Symbol(`Teleport`);
const SUSPENSE = Symbol(`Suspense`);
const KEEP_ALIVE = Symbol(`KeepAlive`);
const BASE_TRANSITION = Symbol(`BaseTransition`);
const OPEN_BLOCK = Symbol(`openBlock`);
const CREATE_BLOCK = Symbol(`createBlock`);
const CREATE_ELEMENT_BLOCK = Symbol(`createElementBlock`);
const CREATE_VNODE = Symbol(`createVNode`);
const CREATE_ELEMENT_VNODE = Symbol(`createElementVNode`);
const CREATE_COMMENT = Symbol(`createCommentVNode`);
const CREATE_TEXT = Symbol(`createTextVNode`);
const CREATE_STATIC = Symbol(`createStaticVNode`);
const RESOLVE_COMPONENT = Symbol(`resolveComponent`);
const RESOLVE_DYNAMIC_COMPONENT = Symbol(`resolveDynamicComponent`);
const RESOLVE_DIRECTIVE = Symbol(`resolveDirective`);
const RESOLVE_FILTER = Symbol(`resolveFilter`);
const WITH_DIRECTIVES = Symbol(`withDirectives`);
const RENDER_LIST = Symbol(`renderList`);
const RENDER_SLOT = Symbol(`renderSlot`);
const CREATE_SLOTS = Symbol(`createSlots`);
const TO_DISPLAY_STRING = Symbol(`toDisplayString`);
const MERGE_PROPS = Symbol(`mergeProps`);
const NORMALIZE_CLASS = Symbol(`normalizeClass`);
const NORMALIZE_STYLE = Symbol(`normalizeStyle`);
const NORMALIZE_PROPS = Symbol(`normalizeProps`);
const GUARD_REACTIVE_PROPS = Symbol(`guardReactiveProps`);
const TO_HANDLERS = Symbol(`toHandlers`);
const CAMELIZE = Symbol(`camelize`);
const CAPITALIZE = Symbol(`capitalize`);
const TO_HANDLER_KEY = Symbol(`toHandlerKey`);
const SET_BLOCK_TRACKING = Symbol(`setBlockTracking`);
const PUSH_SCOPE_ID = Symbol(`pushScopeId`);
const POP_SCOPE_ID = Symbol(`popScopeId`);
const WITH_CTX = Symbol(`withCtx`);
const UNREF = Symbol(`unref`);
const IS_REF = Symbol(`isRef`);
const WITH_MEMO = Symbol(`withMemo`);
const IS_MEMO_SAME = Symbol(`isMemoSame`);
// Name mapping for runtime helpers that need to be imported from 'vue' in
// generated code. Make sure these are correctly exported in the runtime!
// Using `any` here because TS doesn't allow symbols as index type.
const helperNameMap = {
    [FRAGMENT]: `Fragment`,
    [TELEPORT]: `Teleport`,
    [SUSPENSE]: `Suspense`,
    [KEEP_ALIVE]: `KeepAlive`,
    [BASE_TRANSITION]: `BaseTransition`,
    [OPEN_BLOCK]: `openBlock`,
    [CREATE_BLOCK]: `createBlock`,
    [CREATE_ELEMENT_BLOCK]: `createElementBlock`,
    [CREATE_VNODE]: `createVNode`,
    [CREATE_ELEMENT_VNODE]: `createElementVNode`,
    [CREATE_COMMENT]: `createCommentVNode`,
    [CREATE_TEXT]: `createTextVNode`,
    [CREATE_STATIC]: `createStaticVNode`,
    [RESOLVE_COMPONENT]: `resolveComponent`,
    [RESOLVE_DYNAMIC_COMPONENT]: `resolveDynamicComponent`,
    [RESOLVE_DIRECTIVE]: `resolveDirective`,
    [RESOLVE_FILTER]: `resolveFilter`,
    [WITH_DIRECTIVES]: `withDirectives`,
    [RENDER_LIST]: `renderList`,
    [RENDER_SLOT]: `renderSlot`,
    [CREATE_SLOTS]: `createSlots`,
    [TO_DISPLAY_STRING]: `toDisplayString`,
    [MERGE_PROPS]: `mergeProps`,
    [NORMALIZE_CLASS]: `normalizeClass`,
    [NORMALIZE_STYLE]: `normalizeStyle`,
    [NORMALIZE_PROPS]: `normalizeProps`,
    [GUARD_REACTIVE_PROPS]: `guardReactiveProps`,
    [TO_HANDLERS]: `toHandlers`,
    [CAMELIZE]: `camelize`,
    [CAPITALIZE]: `capitalize`,
    [TO_HANDLER_KEY]: `toHandlerKey`,
    [SET_BLOCK_TRACKING]: `setBlockTracking`,
    [PUSH_SCOPE_ID]: `pushScopeId`,
    [POP_SCOPE_ID]: `popScopeId`,
    [WITH_CTX]: `withCtx`,
    [UNREF]: `unref`,
    [IS_REF]: `isRef`,
    [WITH_MEMO]: `withMemo`,
    [IS_MEMO_SAME]: `isMemoSame`
};
function registerRuntimeHelpers(helpers) {
    Object.getOwnPropertySymbols(helpers).forEach((s)=>{
        helperNameMap[s] = helpers[s];
    });
}
// AST Utilities ---------------------------------------------------------------
// Some expressions, e.g. sequence and conditional expressions, are never
// associated with template nodes, so their source locations are just a stub.
// Container types like CompoundExpression also don't need a real location.
const locStub = {
    source: "",
    start: {
        line: 1,
        column: 1,
        offset: 0
    },
    end: {
        line: 1,
        column: 1,
        offset: 0
    }
};
function createRoot(children, loc = locStub) {
    return {
        type: 0 /* ROOT */ ,
        children,
        helpers: [],
        components: [],
        directives: [],
        hoists: [],
        imports: [],
        cached: 0,
        temps: 0,
        codegenNode: undefined,
        loc
    };
}
function createVNodeCall(context, tag, props, children, patchFlag, dynamicProps, directives, isBlock = false, disableTracking = false, isComponent1 = false, loc = locStub) {
    if (context) {
        if (isBlock) {
            context.helper(OPEN_BLOCK);
            context.helper(getVNodeBlockHelper(context.inSSR, isComponent1));
        } else context.helper(getVNodeHelper(context.inSSR, isComponent1));
        if (directives) context.helper(WITH_DIRECTIVES);
    }
    return {
        type: 13 /* VNODE_CALL */ ,
        tag,
        props,
        children,
        patchFlag,
        dynamicProps,
        directives,
        isBlock,
        disableTracking,
        isComponent: isComponent1,
        loc
    };
}
function createArrayExpression(elements, loc = locStub) {
    return {
        type: 17 /* JS_ARRAY_EXPRESSION */ ,
        loc,
        elements
    };
}
function createObjectExpression(properties, loc = locStub) {
    return {
        type: 15 /* JS_OBJECT_EXPRESSION */ ,
        loc,
        properties
    };
}
function createObjectProperty(key, value) {
    return {
        type: 16 /* JS_PROPERTY */ ,
        loc: locStub,
        key: (0, _shared.isString)(key) ? createSimpleExpression(key, true) : key,
        value
    };
}
function createSimpleExpression(content, isStatic = false, loc = locStub, constType = 0 /* NOT_CONSTANT */ ) {
    return {
        type: 4 /* SIMPLE_EXPRESSION */ ,
        loc,
        content,
        isStatic,
        constType: isStatic ? 3 /* CAN_STRINGIFY */  : constType
    };
}
function createInterpolation(content, loc) {
    return {
        type: 5 /* INTERPOLATION */ ,
        loc,
        content: (0, _shared.isString)(content) ? createSimpleExpression(content, false, loc) : content
    };
}
function createCompoundExpression(children, loc = locStub) {
    return {
        type: 8 /* COMPOUND_EXPRESSION */ ,
        loc,
        children
    };
}
function createCallExpression(callee, args = [], loc = locStub) {
    return {
        type: 14 /* JS_CALL_EXPRESSION */ ,
        loc,
        callee,
        arguments: args
    };
}
function createFunctionExpression(params, returns, newline = false, isSlot = false, loc = locStub) {
    return {
        type: 18 /* JS_FUNCTION_EXPRESSION */ ,
        params,
        returns,
        newline,
        isSlot,
        loc
    };
}
function createConditionalExpression(test, consequent, alternate, newline = true) {
    return {
        type: 19 /* JS_CONDITIONAL_EXPRESSION */ ,
        test,
        consequent,
        alternate,
        newline,
        loc: locStub
    };
}
function createCacheExpression(index, value, isVNode = false) {
    return {
        type: 20 /* JS_CACHE_EXPRESSION */ ,
        index,
        value,
        isVNode,
        loc: locStub
    };
}
function createBlockStatement(body) {
    return {
        type: 21 /* JS_BLOCK_STATEMENT */ ,
        body,
        loc: locStub
    };
}
function createTemplateLiteral(elements) {
    return {
        type: 22 /* JS_TEMPLATE_LITERAL */ ,
        elements,
        loc: locStub
    };
}
function createIfStatement(test, consequent, alternate) {
    return {
        type: 23 /* JS_IF_STATEMENT */ ,
        test,
        consequent,
        alternate,
        loc: locStub
    };
}
function createAssignmentExpression(left, right) {
    return {
        type: 24 /* JS_ASSIGNMENT_EXPRESSION */ ,
        left,
        right,
        loc: locStub
    };
}
function createSequenceExpression(expressions) {
    return {
        type: 25 /* JS_SEQUENCE_EXPRESSION */ ,
        expressions,
        loc: locStub
    };
}
function createReturnStatement(returns) {
    return {
        type: 26 /* JS_RETURN_STATEMENT */ ,
        returns,
        loc: locStub
    };
}
const isStaticExp = (p)=>p.type === 4 /* SIMPLE_EXPRESSION */  && p.isStatic;
const isBuiltInType = (tag, expected)=>tag === expected || tag === (0, _shared.hyphenate)(expected);
function isCoreComponent(tag) {
    if (isBuiltInType(tag, "Teleport")) return TELEPORT;
    else if (isBuiltInType(tag, "Suspense")) return SUSPENSE;
    else if (isBuiltInType(tag, "KeepAlive")) return KEEP_ALIVE;
    else if (isBuiltInType(tag, "BaseTransition")) return BASE_TRANSITION;
}
const nonIdentifierRE = /^\d|[^\$\w]/;
const isSimpleIdentifier = (name)=>!nonIdentifierRE.test(name);
const validFirstIdentCharRE = /[A-Za-z_$\xA0-\uFFFF]/;
const validIdentCharRE = /[\.\?\w$\xA0-\uFFFF]/;
const whitespaceRE = /\s+[.[]\s*|\s*[.[]\s+/g;
/**
 * Simple lexer to check if an expression is a member expression. This is
 * lax and only checks validity at the root level (i.e. does not validate exps
 * inside square brackets), but it's ok since these are only used on template
 * expressions and false positives are invalid expressions in the first place.
 */ const isMemberExpression = (path)=>{
    // remove whitespaces around . or [ first
    path = path.trim().replace(whitespaceRE, (s)=>s.trim());
    let state = 0 /* inMemberExp */ ;
    let stateStack = [];
    let currentOpenBracketCount = 0;
    let currentOpenParensCount = 0;
    let currentStringType = null;
    for(let i = 0; i < path.length; i++){
        const char = path.charAt(i);
        switch(state){
            case 0 /* inMemberExp */ :
                if (char === "[") {
                    stateStack.push(state);
                    state = 1 /* inBrackets */ ;
                    currentOpenBracketCount++;
                } else if (char === "(") {
                    stateStack.push(state);
                    state = 2 /* inParens */ ;
                    currentOpenParensCount++;
                } else if (!(i === 0 ? validFirstIdentCharRE : validIdentCharRE).test(char)) return false;
                break;
            case 1 /* inBrackets */ :
                if (char === `'` || char === `"` || char === "`") {
                    stateStack.push(state);
                    state = 3 /* inString */ ;
                    currentStringType = char;
                } else if (char === `[`) currentOpenBracketCount++;
                else if (char === `]`) {
                    if (!--currentOpenBracketCount) state = stateStack.pop();
                }
                break;
            case 2 /* inParens */ :
                if (char === `'` || char === `"` || char === "`") {
                    stateStack.push(state);
                    state = 3 /* inString */ ;
                    currentStringType = char;
                } else if (char === `(`) currentOpenParensCount++;
                else if (char === `)`) {
                    // if the exp ends as a call then it should not be considered valid
                    if (i === path.length - 1) return false;
                    if (!--currentOpenParensCount) state = stateStack.pop();
                }
                break;
            case 3 /* inString */ :
                if (char === currentStringType) {
                    state = stateStack.pop();
                    currentStringType = null;
                }
                break;
        }
    }
    return !currentOpenBracketCount && !currentOpenParensCount;
};
function getInnerRange(loc, offset, length) {
    const source = loc.source.substr(offset, length);
    const newLoc = {
        source,
        start: advancePositionWithClone(loc.start, loc.source, offset),
        end: loc.end
    };
    if (length != null) newLoc.end = advancePositionWithClone(loc.start, loc.source, offset + length);
    return newLoc;
}
function advancePositionWithClone(pos, source, numberOfCharacters = source.length) {
    return advancePositionWithMutation((0, _shared.extend)({}, pos), source, numberOfCharacters);
}
// advance by mutation without cloning (for performance reasons), since this
// gets called a lot in the parser
function advancePositionWithMutation(pos, source, numberOfCharacters = source.length) {
    let linesCount = 0;
    let lastNewLinePos = -1;
    for(let i = 0; i < numberOfCharacters; i++)if (source.charCodeAt(i) === 10 /* newline char code */ ) {
        linesCount++;
        lastNewLinePos = i;
    }
    pos.offset += numberOfCharacters;
    pos.line += linesCount;
    pos.column = lastNewLinePos === -1 ? pos.column + numberOfCharacters : numberOfCharacters - lastNewLinePos;
    return pos;
}
function assert(condition, msg) {
    /* istanbul ignore if */ if (!condition) throw new Error(msg || `unexpected compiler condition`);
}
function findDir(node, name, allowEmpty = false) {
    for(let i = 0; i < node.props.length; i++){
        const p = node.props[i];
        if (p.type === 7 /* DIRECTIVE */  && (allowEmpty || p.exp) && ((0, _shared.isString)(name) ? p.name === name : name.test(p.name))) return p;
    }
}
function findProp(node, name, dynamicOnly = false, allowEmpty = false) {
    for(let i = 0; i < node.props.length; i++){
        const p = node.props[i];
        if (p.type === 6 /* ATTRIBUTE */ ) {
            if (dynamicOnly) continue;
            if (p.name === name && (p.value || allowEmpty)) return p;
        } else if (p.name === "bind" && (p.exp || allowEmpty) && isBindKey(p.arg, name)) return p;
    }
}
function isBindKey(arg, name) {
    return !!(arg && isStaticExp(arg) && arg.content === name);
}
function hasDynamicKeyVBind(node) {
    return node.props.some((p)=>p.type === 7 /* DIRECTIVE */  && p.name === "bind" && (!p.arg || p.arg.type !== 4 /* SIMPLE_EXPRESSION */  || !p.arg.isStatic // v-bind:[foo]
        ));
}
function isText(node) {
    return node.type === 5 /* INTERPOLATION */  || node.type === 2 /* TEXT */ ;
}
function isVSlot(p) {
    return p.type === 7 /* DIRECTIVE */  && p.name === "slot";
}
function isTemplateNode(node) {
    return node.type === 1 /* ELEMENT */  && node.tagType === 3 /* TEMPLATE */ ;
}
function isSlotOutlet(node) {
    return node.type === 1 /* ELEMENT */  && node.tagType === 2 /* SLOT */ ;
}
function getVNodeHelper(ssr, isComponent2) {
    return ssr || isComponent2 ? CREATE_VNODE : CREATE_ELEMENT_VNODE;
}
function getVNodeBlockHelper(ssr, isComponent3) {
    return ssr || isComponent3 ? CREATE_BLOCK : CREATE_ELEMENT_BLOCK;
}
const propsHelperSet = new Set([
    NORMALIZE_PROPS,
    GUARD_REACTIVE_PROPS
]);
function getUnnormalizedProps(props, callPath = []) {
    if (props && !(0, _shared.isString)(props) && props.type === 14 /* JS_CALL_EXPRESSION */ ) {
        const callee = props.callee;
        if (!(0, _shared.isString)(callee) && propsHelperSet.has(callee)) return getUnnormalizedProps(props.arguments[0], callPath.concat(props));
    }
    return [
        props,
        callPath
    ];
}
function injectProp(node, prop, context) {
    let propsWithInjection;
    const originalProps = node.type === 13 /* VNODE_CALL */  ? node.props : node.arguments[2];
    /**
     * 1. mergeProps(...)
     * 2. toHandlers(...)
     * 3. normalizeProps(...)
     * 4. normalizeProps(guardReactiveProps(...))
     *
     * we need to get the real props before normalization
     */ let props = originalProps;
    let callPath = [];
    let parentCall;
    if (props && !(0, _shared.isString)(props) && props.type === 14 /* JS_CALL_EXPRESSION */ ) {
        const ret = getUnnormalizedProps(props);
        props = ret[0];
        callPath = ret[1];
        parentCall = callPath[callPath.length - 1];
    }
    if (props == null || (0, _shared.isString)(props)) propsWithInjection = createObjectExpression([
        prop
    ]);
    else if (props.type === 14 /* JS_CALL_EXPRESSION */ ) {
        // merged props... add ours
        // only inject key to object literal if it's the first argument so that
        // if doesn't override user provided keys
        const first = props.arguments[0];
        if (!(0, _shared.isString)(first) && first.type === 15 /* JS_OBJECT_EXPRESSION */ ) first.properties.unshift(prop);
        else if (props.callee === TO_HANDLERS) // #2366
        propsWithInjection = createCallExpression(context.helper(MERGE_PROPS), [
            createObjectExpression([
                prop
            ]),
            props
        ]);
        else props.arguments.unshift(createObjectExpression([
            prop
        ]));
        !propsWithInjection && (propsWithInjection = props);
    } else if (props.type === 15 /* JS_OBJECT_EXPRESSION */ ) {
        let alreadyExists = false;
        // check existing key to avoid overriding user provided keys
        if (prop.key.type === 4 /* SIMPLE_EXPRESSION */ ) {
            const propKeyName = prop.key.content;
            alreadyExists = props.properties.some((p)=>p.key.type === 4 /* SIMPLE_EXPRESSION */  && p.key.content === propKeyName);
        }
        if (!alreadyExists) props.properties.unshift(prop);
        propsWithInjection = props;
    } else {
        // single v-bind with expression, return a merged replacement
        propsWithInjection = createCallExpression(context.helper(MERGE_PROPS), [
            createObjectExpression([
                prop
            ]),
            props
        ]);
        // in the case of nested helper call, e.g. `normalizeProps(guardReactiveProps(props))`,
        // it will be rewritten as `normalizeProps(mergeProps({ key: 0 }, props))`,
        // the `guardReactiveProps` will no longer be needed
        if (parentCall && parentCall.callee === GUARD_REACTIVE_PROPS) parentCall = callPath[callPath.length - 2];
    }
    if (node.type === 13 /* VNODE_CALL */ ) {
        if (parentCall) parentCall.arguments[0] = propsWithInjection;
        else node.props = propsWithInjection;
    } else if (parentCall) parentCall.arguments[0] = propsWithInjection;
    else node.arguments[2] = propsWithInjection;
}
function toValidAssetId(name, type) {
    // see issue#4422, we need adding identifier on validAssetId if variable `name` has specific character
    return `_${type}_${name.replace(/[^\w]/g, (searchValue, replaceValue)=>{
        return searchValue === "-" ? "_" : name.charCodeAt(replaceValue).toString();
    })}`;
}
// Check if a node contains expressions that reference current context scope ids
function hasScopeRef(node, ids) {
    if (!node || Object.keys(ids).length === 0) return false;
    switch(node.type){
        case 1 /* ELEMENT */ :
            for(let i = 0; i < node.props.length; i++){
                const p = node.props[i];
                if (p.type === 7 /* DIRECTIVE */  && (hasScopeRef(p.arg, ids) || hasScopeRef(p.exp, ids))) return true;
            }
            return node.children.some((c)=>hasScopeRef(c, ids));
        case 11 /* FOR */ :
            if (hasScopeRef(node.source, ids)) return true;
            return node.children.some((c)=>hasScopeRef(c, ids));
        case 9 /* IF */ :
            return node.branches.some((b)=>hasScopeRef(b, ids));
        case 10 /* IF_BRANCH */ :
            if (hasScopeRef(node.condition, ids)) return true;
            return node.children.some((c)=>hasScopeRef(c, ids));
        case 4 /* SIMPLE_EXPRESSION */ :
            return !node.isStatic && isSimpleIdentifier(node.content) && !!ids[node.content];
        case 8 /* COMPOUND_EXPRESSION */ :
            return node.children.some((c)=>(0, _shared.isObject)(c) && hasScopeRef(c, ids));
        case 5 /* INTERPOLATION */ :
        case 12 /* TEXT_CALL */ :
            return hasScopeRef(node.content, ids);
        case 2 /* TEXT */ :
        case 3 /* COMMENT */ :
            return false;
        default:
            return false;
    }
}
function getMemoedVNodeCall(node) {
    if (node.type === 14 /* JS_CALL_EXPRESSION */  && node.callee === WITH_MEMO) return node.arguments[1].returns;
    else return node;
}
function makeBlock(node, { helper , removeHelper , inSSR  }) {
    if (!node.isBlock) {
        node.isBlock = true;
        removeHelper(getVNodeHelper(inSSR, node.isComponent));
        helper(OPEN_BLOCK);
        helper(getVNodeBlockHelper(inSSR, node.isComponent));
    }
}
const deprecationData = {
    ["COMPILER_IS_ON_ELEMENT" /* COMPILER_IS_ON_ELEMENT */ ]: {
        message: `Platform-native elements with "is" prop will no longer be ` + `treated as components in Vue 3 unless the "is" value is explicitly ` + `prefixed with "vue:".`,
        link: `https://v3.vuejs.org/guide/migration/custom-elements-interop.html`
    },
    ["COMPILER_V_BIND_SYNC" /* COMPILER_V_BIND_SYNC */ ]: {
        message: (key)=>`.sync modifier for v-bind has been removed. Use v-model with ` + `argument instead. \`v-bind:${key}.sync\` should be changed to ` + `\`v-model:${key}\`.`,
        link: `https://v3.vuejs.org/guide/migration/v-model.html`
    },
    ["COMPILER_V_BIND_PROP" /* COMPILER_V_BIND_PROP */ ]: {
        message: `.prop modifier for v-bind has been removed and no longer necessary. ` + `Vue 3 will automatically set a binding as DOM property when appropriate.`
    },
    ["COMPILER_V_BIND_OBJECT_ORDER" /* COMPILER_V_BIND_OBJECT_ORDER */ ]: {
        message: `v-bind="obj" usage is now order sensitive and behaves like JavaScript ` + `object spread: it will now overwrite an existing non-mergeable attribute ` + `that appears before v-bind in the case of conflict. ` + `To retain 2.x behavior, move v-bind to make it the first attribute. ` + `You can also suppress this warning if the usage is intended.`,
        link: `https://v3.vuejs.org/guide/migration/v-bind.html`
    },
    ["COMPILER_V_ON_NATIVE" /* COMPILER_V_ON_NATIVE */ ]: {
        message: `.native modifier for v-on has been removed as is no longer necessary.`,
        link: `https://v3.vuejs.org/guide/migration/v-on-native-modifier-removed.html`
    },
    ["COMPILER_V_IF_V_FOR_PRECEDENCE" /* COMPILER_V_IF_V_FOR_PRECEDENCE */ ]: {
        message: `v-if / v-for precedence when used on the same element has changed ` + `in Vue 3: v-if now takes higher precedence and will no longer have ` + `access to v-for scope variables. It is best to avoid the ambiguity ` + `with <template> tags or use a computed property that filters v-for ` + `data source.`,
        link: `https://v3.vuejs.org/guide/migration/v-if-v-for.html`
    },
    ["COMPILER_V_FOR_REF" /* COMPILER_V_FOR_REF */ ]: {
        message: `Ref usage on v-for no longer creates array ref values in Vue 3. ` + `Consider using function refs or refactor to avoid ref usage altogether.`,
        link: `https://v3.vuejs.org/guide/migration/array-refs.html`
    },
    ["COMPILER_NATIVE_TEMPLATE" /* COMPILER_NATIVE_TEMPLATE */ ]: {
        message: `<template> with no special directives will render as a native template ` + `element instead of its inner content in Vue 3.`
    },
    ["COMPILER_INLINE_TEMPLATE" /* COMPILER_INLINE_TEMPLATE */ ]: {
        message: `"inline-template" has been removed in Vue 3.`,
        link: `https://v3.vuejs.org/guide/migration/inline-template-attribute.html`
    },
    ["COMPILER_FILTER" /* COMPILER_FILTERS */ ]: {
        message: `filters have been removed in Vue 3. ` + `The "|" symbol will be treated as native JavaScript bitwise OR operator. ` + `Use method calls or computed properties instead.`,
        link: `https://v3.vuejs.org/guide/migration/filters.html`
    }
};
function getCompatValue(key, context) {
    const config = context.options ? context.options.compatConfig : context.compatConfig;
    const value = config && config[key];
    if (key === "MODE") return value || 3; // compiler defaults to v3 behavior
    else return value;
}
function isCompatEnabled(key, context) {
    const mode = getCompatValue("MODE", context);
    const value = getCompatValue(key, context);
    // in v3 mode, only enable if explicitly set to true
    // otherwise enable for any non-false value
    return mode === 3 ? value === true : value !== false;
}
function checkCompatEnabled(key, context, loc, ...args) {
    const enabled = isCompatEnabled(key, context);
    if (enabled) warnDeprecation(key, context, loc, ...args);
    return enabled;
}
function warnDeprecation(key, context, loc, ...args) {
    const val = getCompatValue(key, context);
    if (val === "suppress-warning") return;
    const { message , link  } = deprecationData[key];
    const msg = `(deprecation ${key}) ${typeof message === "function" ? message(...args) : message}${link ? `\n  Details: ${link}` : ``}`;
    const err = new SyntaxError(msg);
    err.code = key;
    if (loc) err.loc = loc;
    context.onWarn(err);
}
// The default decoder only provides escapes for characters reserved as part of
// the template syntax, and is only used if the custom renderer did not provide
// a platform-specific decoder.
const decodeRE = /&(gt|lt|amp|apos|quot);/g;
const decodeMap = {
    gt: ">",
    lt: "<",
    amp: "&",
    apos: "'",
    quot: '"'
};
const defaultParserOptions = {
    delimiters: [
        `{{`,
        `}}`
    ],
    getNamespace: ()=>0 /* HTML */ ,
    getTextMode: ()=>0 /* DATA */ ,
    isVoidTag: (0, _shared.NO),
    isPreTag: (0, _shared.NO),
    isCustomElement: (0, _shared.NO),
    decodeEntities: (rawText)=>rawText.replace(decodeRE, (_, p1)=>decodeMap[p1]),
    onError: defaultOnError,
    onWarn: defaultOnWarn,
    comments: true
};
function baseParse(content, options = {}) {
    const context = createParserContext(content, options);
    const start = getCursor(context);
    return createRoot(parseChildren(context, 0 /* DATA */ , []), getSelection(context, start));
}
function createParserContext(content, rawOptions) {
    const options = (0, _shared.extend)({}, defaultParserOptions);
    let key;
    for(key in rawOptions)// @ts-ignore
    options[key] = rawOptions[key] === undefined ? defaultParserOptions[key] : rawOptions[key];
    return {
        options,
        column: 1,
        line: 1,
        offset: 0,
        originalSource: content,
        source: content,
        inPre: false,
        inVPre: false,
        onWarn: options.onWarn
    };
}
function parseChildren(context, mode, ancestors) {
    const parent = last(ancestors);
    const ns = parent ? parent.ns : 0 /* HTML */ ;
    const nodes = [];
    while(!isEnd(context, mode, ancestors)){
        const s = context.source;
        let node = undefined;
        if (mode === 0 /* DATA */  || mode === 1 /* RCDATA */ ) {
            if (!context.inVPre && startsWith(s, context.options.delimiters[0])) // '{{'
            node = parseInterpolation(context, mode);
            else if (mode === 0 /* DATA */  && s[0] === "<") {
                // https://html.spec.whatwg.org/multipage/parsing.html#tag-open-state
                if (s.length === 1) emitError(context, 5 /* EOF_BEFORE_TAG_NAME */ , 1);
                else if (s[1] === "!") {
                    // https://html.spec.whatwg.org/multipage/parsing.html#markup-declaration-open-state
                    if (startsWith(s, "<!--")) node = parseComment(context);
                    else if (startsWith(s, "<!DOCTYPE")) // Ignore DOCTYPE by a limitation.
                    node = parseBogusComment(context);
                    else if (startsWith(s, "<![CDATA[")) {
                        if (ns !== 0 /* HTML */ ) node = parseCDATA(context, ancestors);
                        else {
                            emitError(context, 1 /* CDATA_IN_HTML_CONTENT */ );
                            node = parseBogusComment(context);
                        }
                    } else {
                        emitError(context, 11 /* INCORRECTLY_OPENED_COMMENT */ );
                        node = parseBogusComment(context);
                    }
                } else if (s[1] === "/") {
                    // https://html.spec.whatwg.org/multipage/parsing.html#end-tag-open-state
                    if (s.length === 2) emitError(context, 5 /* EOF_BEFORE_TAG_NAME */ , 2);
                    else if (s[2] === ">") {
                        emitError(context, 14 /* MISSING_END_TAG_NAME */ , 2);
                        advanceBy(context, 3);
                        continue;
                    } else if (/[a-z]/i.test(s[2])) {
                        emitError(context, 23 /* X_INVALID_END_TAG */ );
                        parseTag(context, 1 /* End */ , parent);
                        continue;
                    } else {
                        emitError(context, 12 /* INVALID_FIRST_CHARACTER_OF_TAG_NAME */ , 2);
                        node = parseBogusComment(context);
                    }
                } else if (/[a-z]/i.test(s[1])) {
                    node = parseElement(context, ancestors);
                    // 2.x <template> with no directive compat
                    if (isCompatEnabled("COMPILER_NATIVE_TEMPLATE" /* COMPILER_NATIVE_TEMPLATE */ , context) && node && node.tag === "template" && !node.props.some((p)=>p.type === 7 /* DIRECTIVE */  && isSpecialTemplateDirective(p.name))) {
                        warnDeprecation("COMPILER_NATIVE_TEMPLATE" /* COMPILER_NATIVE_TEMPLATE */ , context, node.loc);
                        node = node.children;
                    }
                } else if (s[1] === "?") {
                    emitError(context, 21 /* UNEXPECTED_QUESTION_MARK_INSTEAD_OF_TAG_NAME */ , 1);
                    node = parseBogusComment(context);
                } else emitError(context, 12 /* INVALID_FIRST_CHARACTER_OF_TAG_NAME */ , 1);
            }
        }
        if (!node) node = parseText(context, mode);
        if ((0, _shared.isArray)(node)) for(let i = 0; i < node.length; i++)pushNode(nodes, node[i]);
        else pushNode(nodes, node);
    }
    // Whitespace handling strategy like v2
    let removedWhitespace = false;
    if (mode !== 2 /* RAWTEXT */  && mode !== 1 /* RCDATA */ ) {
        const shouldCondense = context.options.whitespace !== "preserve";
        for(let i = 0; i < nodes.length; i++){
            const node = nodes[i];
            if (!context.inPre && node.type === 2 /* TEXT */ ) {
                if (!/[^\t\r\n\f ]/.test(node.content)) {
                    const prev = nodes[i - 1];
                    const next = nodes[i + 1];
                    // Remove if:
                    // - the whitespace is the first or last node, or:
                    // - (condense mode) the whitespace is adjacent to a comment, or:
                    // - (condense mode) the whitespace is between two elements AND contains newline
                    if (!prev || !next || shouldCondense && (prev.type === 3 /* COMMENT */  || next.type === 3 /* COMMENT */  || prev.type === 1 /* ELEMENT */  && next.type === 1 /* ELEMENT */  && /[\r\n]/.test(node.content))) {
                        removedWhitespace = true;
                        nodes[i] = null;
                    } else // Otherwise, the whitespace is condensed into a single space
                    node.content = " ";
                } else if (shouldCondense) // in condense mode, consecutive whitespaces in text are condensed
                // down to a single space.
                node.content = node.content.replace(/[\t\r\n\f ]+/g, " ");
            } else if (node.type === 3 /* COMMENT */  && !context.options.comments) {
                removedWhitespace = true;
                nodes[i] = null;
            }
        }
        if (context.inPre && parent && context.options.isPreTag(parent.tag)) {
            // remove leading newline per html spec
            // https://html.spec.whatwg.org/multipage/grouping-content.html#the-pre-element
            const first = nodes[0];
            if (first && first.type === 2 /* TEXT */ ) first.content = first.content.replace(/^\r?\n/, "");
        }
    }
    return removedWhitespace ? nodes.filter(Boolean) : nodes;
}
function pushNode(nodes, node) {
    if (node.type === 2 /* TEXT */ ) {
        const prev = last(nodes);
        // Merge if both this and the previous node are text and those are
        // consecutive. This happens for cases like "a < b".
        if (prev && prev.type === 2 /* TEXT */  && prev.loc.end.offset === node.loc.start.offset) {
            prev.content += node.content;
            prev.loc.end = node.loc.end;
            prev.loc.source += node.loc.source;
            return;
        }
    }
    nodes.push(node);
}
function parseCDATA(context, ancestors) {
    advanceBy(context, 9);
    const nodes = parseChildren(context, 3 /* CDATA */ , ancestors);
    if (context.source.length === 0) emitError(context, 6 /* EOF_IN_CDATA */ );
    else advanceBy(context, 3);
    return nodes;
}
function parseComment(context) {
    const start = getCursor(context);
    let content;
    // Regular comment.
    const match = /--(\!)?>/.exec(context.source);
    if (!match) {
        content = context.source.slice(4);
        advanceBy(context, context.source.length);
        emitError(context, 7 /* EOF_IN_COMMENT */ );
    } else {
        if (match.index <= 3) emitError(context, 0 /* ABRUPT_CLOSING_OF_EMPTY_COMMENT */ );
        if (match[1]) emitError(context, 10 /* INCORRECTLY_CLOSED_COMMENT */ );
        content = context.source.slice(4, match.index);
        // Advancing with reporting nested comments.
        const s = context.source.slice(0, match.index);
        let prevIndex = 1, nestedIndex = 0;
        while((nestedIndex = s.indexOf("<!--", prevIndex)) !== -1){
            advanceBy(context, nestedIndex - prevIndex + 1);
            if (nestedIndex + 4 < s.length) emitError(context, 16 /* NESTED_COMMENT */ );
            prevIndex = nestedIndex + 1;
        }
        advanceBy(context, match.index + match[0].length - prevIndex + 1);
    }
    return {
        type: 3 /* COMMENT */ ,
        content,
        loc: getSelection(context, start)
    };
}
function parseBogusComment(context) {
    const start = getCursor(context);
    const contentStart = context.source[1] === "?" ? 1 : 2;
    let content;
    const closeIndex = context.source.indexOf(">");
    if (closeIndex === -1) {
        content = context.source.slice(contentStart);
        advanceBy(context, context.source.length);
    } else {
        content = context.source.slice(contentStart, closeIndex);
        advanceBy(context, closeIndex + 1);
    }
    return {
        type: 3 /* COMMENT */ ,
        content,
        loc: getSelection(context, start)
    };
}
function parseElement(context, ancestors) {
    // Start tag.
    const wasInPre = context.inPre;
    const wasInVPre = context.inVPre;
    const parent = last(ancestors);
    const element = parseTag(context, 0 /* Start */ , parent);
    const isPreBoundary = context.inPre && !wasInPre;
    const isVPreBoundary = context.inVPre && !wasInVPre;
    if (element.isSelfClosing || context.options.isVoidTag(element.tag)) {
        // #4030 self-closing <pre> tag
        if (isPreBoundary) context.inPre = false;
        if (isVPreBoundary) context.inVPre = false;
        return element;
    }
    // Children.
    ancestors.push(element);
    const mode = context.options.getTextMode(element, parent);
    const children = parseChildren(context, mode, ancestors);
    ancestors.pop();
    // 2.x inline-template compat
    {
        const inlineTemplateProp = element.props.find((p)=>p.type === 6 /* ATTRIBUTE */  && p.name === "inline-template");
        if (inlineTemplateProp && checkCompatEnabled("COMPILER_INLINE_TEMPLATE" /* COMPILER_INLINE_TEMPLATE */ , context, inlineTemplateProp.loc)) {
            const loc = getSelection(context, element.loc.end);
            inlineTemplateProp.value = {
                type: 2 /* TEXT */ ,
                content: loc.source,
                loc
            };
        }
    }
    element.children = children;
    // End tag.
    if (startsWithEndTagOpen(context.source, element.tag)) parseTag(context, 1 /* End */ , parent);
    else {
        emitError(context, 24 /* X_MISSING_END_TAG */ , 0, element.loc.start);
        if (context.source.length === 0 && element.tag.toLowerCase() === "script") {
            const first = children[0];
            if (first && startsWith(first.loc.source, "<!--")) emitError(context, 8 /* EOF_IN_SCRIPT_HTML_COMMENT_LIKE_TEXT */ );
        }
    }
    element.loc = getSelection(context, element.loc.start);
    if (isPreBoundary) context.inPre = false;
    if (isVPreBoundary) context.inVPre = false;
    return element;
}
const isSpecialTemplateDirective = /*#__PURE__*/ (0, _shared.makeMap)(`if,else,else-if,for,slot`);
function parseTag(context, type, parent) {
    // Tag open.
    const start = getCursor(context);
    const match = /^<\/?([a-z][^\t\r\n\f />]*)/i.exec(context.source);
    const tag = match[1];
    const ns = context.options.getNamespace(tag, parent);
    advanceBy(context, match[0].length);
    advanceSpaces(context);
    // save current state in case we need to re-parse attributes with v-pre
    const cursor = getCursor(context);
    const currentSource = context.source;
    // check <pre> tag
    if (context.options.isPreTag(tag)) context.inPre = true;
    // Attributes.
    let props = parseAttributes(context, type);
    // check v-pre
    if (type === 0 /* Start */  && !context.inVPre && props.some((p)=>p.type === 7 /* DIRECTIVE */  && p.name === "pre")) {
        context.inVPre = true;
        // reset context
        (0, _shared.extend)(context, cursor);
        context.source = currentSource;
        // re-parse attrs and filter out v-pre itself
        props = parseAttributes(context, type).filter((p)=>p.name !== "v-pre");
    }
    // Tag close.
    let isSelfClosing = false;
    if (context.source.length === 0) emitError(context, 9 /* EOF_IN_TAG */ );
    else {
        isSelfClosing = startsWith(context.source, "/>");
        if (type === 1 /* End */  && isSelfClosing) emitError(context, 4 /* END_TAG_WITH_TRAILING_SOLIDUS */ );
        advanceBy(context, isSelfClosing ? 2 : 1);
    }
    if (type === 1 /* End */ ) return;
    // 2.x deprecation checks
    if (isCompatEnabled("COMPILER_V_IF_V_FOR_PRECEDENCE" /* COMPILER_V_IF_V_FOR_PRECEDENCE */ , context)) {
        let hasIf = false;
        let hasFor = false;
        for(let i = 0; i < props.length; i++){
            const p = props[i];
            if (p.type === 7 /* DIRECTIVE */ ) {
                if (p.name === "if") hasIf = true;
                else if (p.name === "for") hasFor = true;
            }
            if (hasIf && hasFor) warnDeprecation("COMPILER_V_IF_V_FOR_PRECEDENCE" /* COMPILER_V_IF_V_FOR_PRECEDENCE */ , context, getSelection(context, start));
        }
    }
    let tagType = 0 /* ELEMENT */ ;
    if (!context.inVPre) {
        if (tag === "slot") tagType = 2 /* SLOT */ ;
        else if (tag === "template") {
            if (props.some((p)=>p.type === 7 /* DIRECTIVE */  && isSpecialTemplateDirective(p.name))) tagType = 3 /* TEMPLATE */ ;
        } else if (isComponent(tag, props, context)) tagType = 1 /* COMPONENT */ ;
    }
    return {
        type: 1 /* ELEMENT */ ,
        ns,
        tag,
        tagType,
        props,
        isSelfClosing,
        children: [],
        loc: getSelection(context, start),
        codegenNode: undefined // to be created during transform phase
    };
}
function isComponent(tag, props, context) {
    const options = context.options;
    if (options.isCustomElement(tag)) return false;
    if (tag === "component" || /^[A-Z]/.test(tag) || isCoreComponent(tag) || options.isBuiltInComponent && options.isBuiltInComponent(tag) || options.isNativeTag && !options.isNativeTag(tag)) return true;
    // at this point the tag should be a native tag, but check for potential "is"
    // casting
    for(let i = 0; i < props.length; i++){
        const p = props[i];
        if (p.type === 6 /* ATTRIBUTE */ ) {
            if (p.name === "is" && p.value) {
                if (p.value.content.startsWith("vue:")) return true;
                else if (checkCompatEnabled("COMPILER_IS_ON_ELEMENT" /* COMPILER_IS_ON_ELEMENT */ , context, p.loc)) return true;
            }
        } else {
            // directive
            // v-is (TODO Deprecate)
            if (p.name === "is") return true;
            else if (// :is on plain element - only treat as component in compat mode
            p.name === "bind" && isBindKey(p.arg, "is") && true && checkCompatEnabled("COMPILER_IS_ON_ELEMENT" /* COMPILER_IS_ON_ELEMENT */ , context, p.loc)) return true;
        }
    }
}
function parseAttributes(context, type) {
    const props = [];
    const attributeNames = new Set();
    while(context.source.length > 0 && !startsWith(context.source, ">") && !startsWith(context.source, "/>")){
        if (startsWith(context.source, "/")) {
            emitError(context, 22 /* UNEXPECTED_SOLIDUS_IN_TAG */ );
            advanceBy(context, 1);
            advanceSpaces(context);
            continue;
        }
        if (type === 1 /* End */ ) emitError(context, 3 /* END_TAG_WITH_ATTRIBUTES */ );
        const attr = parseAttribute(context, attributeNames);
        // Trim whitespace between class
        // https://github.com/vuejs/vue-next/issues/4251
        if (attr.type === 6 /* ATTRIBUTE */  && attr.value && attr.name === "class") attr.value.content = attr.value.content.replace(/\s+/g, " ").trim();
        if (type === 0 /* Start */ ) props.push(attr);
        if (/^[^\t\r\n\f />]/.test(context.source)) emitError(context, 15 /* MISSING_WHITESPACE_BETWEEN_ATTRIBUTES */ );
        advanceSpaces(context);
    }
    return props;
}
function parseAttribute(context, nameSet) {
    // Name.
    const start = getCursor(context);
    const match = /^[^\t\r\n\f />][^\t\r\n\f />=]*/.exec(context.source);
    const name = match[0];
    if (nameSet.has(name)) emitError(context, 2 /* DUPLICATE_ATTRIBUTE */ );
    nameSet.add(name);
    if (name[0] === "=") emitError(context, 19 /* UNEXPECTED_EQUALS_SIGN_BEFORE_ATTRIBUTE_NAME */ );
    {
        const pattern = /["'<]/g;
        let m;
        while(m = pattern.exec(name))emitError(context, 17 /* UNEXPECTED_CHARACTER_IN_ATTRIBUTE_NAME */ , m.index);
    }
    advanceBy(context, name.length);
    // Value
    let value = undefined;
    if (/^[\t\r\n\f ]*=/.test(context.source)) {
        advanceSpaces(context);
        advanceBy(context, 1);
        advanceSpaces(context);
        value = parseAttributeValue(context);
        if (!value) emitError(context, 13 /* MISSING_ATTRIBUTE_VALUE */ );
    }
    const loc = getSelection(context, start);
    if (!context.inVPre && /^(v-[A-Za-z0-9-]|:|\.|@|#)/.test(name)) {
        const match = /(?:^v-([a-z0-9-]+))?(?:(?::|^\.|^@|^#)(\[[^\]]+\]|[^\.]+))?(.+)?$/i.exec(name);
        let isPropShorthand = startsWith(name, ".");
        let dirName = match[1] || (isPropShorthand || startsWith(name, ":") ? "bind" : startsWith(name, "@") ? "on" : "slot");
        let arg;
        if (match[2]) {
            const isSlot = dirName === "slot";
            const startOffset = name.lastIndexOf(match[2]);
            const loc = getSelection(context, getNewPosition(context, start, startOffset), getNewPosition(context, start, startOffset + match[2].length + (isSlot && match[3] || "").length));
            let content = match[2];
            let isStatic = true;
            if (content.startsWith("[")) {
                isStatic = false;
                if (!content.endsWith("]")) {
                    emitError(context, 27 /* X_MISSING_DYNAMIC_DIRECTIVE_ARGUMENT_END */ );
                    content = content.substr(1);
                } else content = content.substr(1, content.length - 2);
            } else if (isSlot) // #1241 special case for v-slot: vuetify relies extensively on slot
            // names containing dots. v-slot doesn't have any modifiers and Vue 2.x
            // supports such usage so we are keeping it consistent with 2.x.
            content += match[3] || "";
            arg = {
                type: 4 /* SIMPLE_EXPRESSION */ ,
                content,
                isStatic,
                constType: isStatic ? 3 /* CAN_STRINGIFY */  : 0 /* NOT_CONSTANT */ ,
                loc
            };
        }
        if (value && value.isQuoted) {
            const valueLoc = value.loc;
            valueLoc.start.offset++;
            valueLoc.start.column++;
            valueLoc.end = advancePositionWithClone(valueLoc.start, value.content);
            valueLoc.source = valueLoc.source.slice(1, -1);
        }
        const modifiers = match[3] ? match[3].substr(1).split(".") : [];
        if (isPropShorthand) modifiers.push("prop");
        // 2.x compat v-bind:foo.sync -> v-model:foo
        if (dirName === "bind" && arg) {
            if (modifiers.includes("sync") && checkCompatEnabled("COMPILER_V_BIND_SYNC" /* COMPILER_V_BIND_SYNC */ , context, loc, arg.loc.source)) {
                dirName = "model";
                modifiers.splice(modifiers.indexOf("sync"), 1);
            }
            if (modifiers.includes("prop")) checkCompatEnabled("COMPILER_V_BIND_PROP" /* COMPILER_V_BIND_PROP */ , context, loc);
        }
        return {
            type: 7 /* DIRECTIVE */ ,
            name: dirName,
            exp: value && {
                type: 4 /* SIMPLE_EXPRESSION */ ,
                content: value.content,
                isStatic: false,
                // Treat as non-constant by default. This can be potentially set to
                // other values by `transformExpression` to make it eligible for hoisting.
                constType: 0 /* NOT_CONSTANT */ ,
                loc: value.loc
            },
            arg,
            modifiers,
            loc
        };
    }
    // missing directive name or illegal directive name
    if (!context.inVPre && startsWith(name, "v-")) emitError(context, 26 /* X_MISSING_DIRECTIVE_NAME */ );
    return {
        type: 6 /* ATTRIBUTE */ ,
        name,
        value: value && {
            type: 2 /* TEXT */ ,
            content: value.content,
            loc: value.loc
        },
        loc
    };
}
function parseAttributeValue(context) {
    const start = getCursor(context);
    let content;
    const quote = context.source[0];
    const isQuoted = quote === `"` || quote === `'`;
    if (isQuoted) {
        // Quoted value.
        advanceBy(context, 1);
        const endIndex = context.source.indexOf(quote);
        if (endIndex === -1) content = parseTextData(context, context.source.length, 4 /* ATTRIBUTE_VALUE */ );
        else {
            content = parseTextData(context, endIndex, 4 /* ATTRIBUTE_VALUE */ );
            advanceBy(context, 1);
        }
    } else {
        // Unquoted
        const match = /^[^\t\r\n\f >]+/.exec(context.source);
        if (!match) return undefined;
        const unexpectedChars = /["'<=`]/g;
        let m;
        while(m = unexpectedChars.exec(match[0]))emitError(context, 18 /* UNEXPECTED_CHARACTER_IN_UNQUOTED_ATTRIBUTE_VALUE */ , m.index);
        content = parseTextData(context, match[0].length, 4 /* ATTRIBUTE_VALUE */ );
    }
    return {
        content,
        isQuoted,
        loc: getSelection(context, start)
    };
}
function parseInterpolation(context, mode) {
    const [open, close] = context.options.delimiters;
    const closeIndex = context.source.indexOf(close, open.length);
    if (closeIndex === -1) {
        emitError(context, 25 /* X_MISSING_INTERPOLATION_END */ );
        return undefined;
    }
    const start = getCursor(context);
    advanceBy(context, open.length);
    const innerStart = getCursor(context);
    const innerEnd = getCursor(context);
    const rawContentLength = closeIndex - open.length;
    const rawContent = context.source.slice(0, rawContentLength);
    const preTrimContent = parseTextData(context, rawContentLength, mode);
    const content = preTrimContent.trim();
    const startOffset = preTrimContent.indexOf(content);
    if (startOffset > 0) advancePositionWithMutation(innerStart, rawContent, startOffset);
    const endOffset = rawContentLength - (preTrimContent.length - content.length - startOffset);
    advancePositionWithMutation(innerEnd, rawContent, endOffset);
    advanceBy(context, close.length);
    return {
        type: 5 /* INTERPOLATION */ ,
        content: {
            type: 4 /* SIMPLE_EXPRESSION */ ,
            isStatic: false,
            // Set `isConstant` to false by default and will decide in transformExpression
            constType: 0 /* NOT_CONSTANT */ ,
            content,
            loc: getSelection(context, innerStart, innerEnd)
        },
        loc: getSelection(context, start)
    };
}
function parseText(context, mode) {
    const endTokens = mode === 3 /* CDATA */  ? [
        "]]>"
    ] : [
        "<",
        context.options.delimiters[0]
    ];
    let endIndex = context.source.length;
    for(let i = 0; i < endTokens.length; i++){
        const index = context.source.indexOf(endTokens[i], 1);
        if (index !== -1 && endIndex > index) endIndex = index;
    }
    const start = getCursor(context);
    const content = parseTextData(context, endIndex, mode);
    return {
        type: 2 /* TEXT */ ,
        content,
        loc: getSelection(context, start)
    };
}
/**
 * Get text data with a given length from the current location.
 * This translates HTML entities in the text data.
 */ function parseTextData(context, length, mode) {
    const rawText = context.source.slice(0, length);
    advanceBy(context, length);
    if (mode === 2 /* RAWTEXT */  || mode === 3 /* CDATA */  || rawText.indexOf("&") === -1) return rawText;
    else // DATA or RCDATA containing "&"". Entity decoding required.
    return context.options.decodeEntities(rawText, mode === 4 /* ATTRIBUTE_VALUE */ );
}
function getCursor(context) {
    const { column , line , offset  } = context;
    return {
        column,
        line,
        offset
    };
}
function getSelection(context, start, end) {
    end = end || getCursor(context);
    return {
        start,
        end,
        source: context.originalSource.slice(start.offset, end.offset)
    };
}
function last(xs) {
    return xs[xs.length - 1];
}
function startsWith(source, searchString) {
    return source.startsWith(searchString);
}
function advanceBy(context, numberOfCharacters) {
    const { source  } = context;
    advancePositionWithMutation(context, source, numberOfCharacters);
    context.source = source.slice(numberOfCharacters);
}
function advanceSpaces(context) {
    const match = /^[\t\r\n\f ]+/.exec(context.source);
    if (match) advanceBy(context, match[0].length);
}
function getNewPosition(context, start, numberOfCharacters) {
    return advancePositionWithClone(start, context.originalSource.slice(start.offset, numberOfCharacters), numberOfCharacters);
}
function emitError(context, code, offset, loc = getCursor(context)) {
    if (offset) {
        loc.offset += offset;
        loc.column += offset;
    }
    context.options.onError(createCompilerError(code, {
        start: loc,
        end: loc,
        source: ""
    }));
}
function isEnd(context, mode, ancestors) {
    const s = context.source;
    switch(mode){
        case 0 /* DATA */ :
            if (startsWith(s, "</")) // TODO: probably bad performance
            for(let i = ancestors.length - 1; i >= 0; --i){
                if (startsWithEndTagOpen(s, ancestors[i].tag)) return true;
            }
            break;
        case 1 /* RCDATA */ :
        case 2 /* RAWTEXT */ :
            {
                const parent = last(ancestors);
                if (parent && startsWithEndTagOpen(s, parent.tag)) return true;
                break;
            }
        case 3 /* CDATA */ :
            if (startsWith(s, "]]>")) return true;
            break;
    }
    return !s;
}
function startsWithEndTagOpen(source, tag) {
    return startsWith(source, "</") && source.substr(2, tag.length).toLowerCase() === tag.toLowerCase() && /[\t\r\n\f />]/.test(source[2 + tag.length] || ">");
}
function hoistStatic(root, context) {
    walk(root, context, // Root node is unfortunately non-hoistable due to potential parent
    // fallthrough attributes.
    isSingleElementRoot(root, root.children[0]));
}
function isSingleElementRoot(root, child) {
    const { children  } = root;
    return children.length === 1 && child.type === 1 /* ELEMENT */  && !isSlotOutlet(child);
}
function walk(node, context, doNotHoistNode = false) {
    // Some transforms, e.g. transformAssetUrls from @vue/compiler-sfc, replaces
    // static bindings with expressions. These expressions are guaranteed to be
    // constant so they are still eligible for hoisting, but they are only
    // available at runtime and therefore cannot be evaluated ahead of time.
    // This is only a concern for pre-stringification (via transformHoist by
    // @vue/compiler-dom), but doing it here allows us to perform only one full
    // walk of the AST and allow `stringifyStatic` to stop walking as soon as its
    // stringficiation threshold is met.
    let canStringify = true;
    const { children  } = node;
    const originalCount = children.length;
    let hoistedCount = 0;
    for(let i = 0; i < children.length; i++){
        const child = children[i];
        // only plain elements & text calls are eligible for hoisting.
        if (child.type === 1 /* ELEMENT */  && child.tagType === 0 /* ELEMENT */ ) {
            const constantType = doNotHoistNode ? 0 /* NOT_CONSTANT */  : getConstantType(child, context);
            if (constantType > 0 /* NOT_CONSTANT */ ) {
                if (constantType < 3 /* CAN_STRINGIFY */ ) canStringify = false;
                if (constantType >= 2 /* CAN_HOIST */ ) {
                    child.codegenNode.patchFlag = -1 /* HOISTED */  + ` /* HOISTED */`;
                    child.codegenNode = context.hoist(child.codegenNode);
                    hoistedCount++;
                    continue;
                }
            } else {
                // node may contain dynamic children, but its props may be eligible for
                // hoisting.
                const codegenNode = child.codegenNode;
                if (codegenNode.type === 13 /* VNODE_CALL */ ) {
                    const flag = getPatchFlag(codegenNode);
                    if ((!flag || flag === 512 /* NEED_PATCH */  || flag === 1 /* TEXT */ ) && getGeneratedPropsConstantType(child, context) >= 2 /* CAN_HOIST */ ) {
                        const props = getNodeProps(child);
                        if (props) codegenNode.props = context.hoist(props);
                    }
                    if (codegenNode.dynamicProps) codegenNode.dynamicProps = context.hoist(codegenNode.dynamicProps);
                }
            }
        } else if (child.type === 12 /* TEXT_CALL */ ) {
            const contentType = getConstantType(child.content, context);
            if (contentType > 0) {
                if (contentType < 3 /* CAN_STRINGIFY */ ) canStringify = false;
                if (contentType >= 2 /* CAN_HOIST */ ) {
                    child.codegenNode = context.hoist(child.codegenNode);
                    hoistedCount++;
                }
            }
        }
        // walk further
        if (child.type === 1 /* ELEMENT */ ) {
            const isComponent4 = child.tagType === 1 /* COMPONENT */ ;
            if (isComponent4) context.scopes.vSlot++;
            walk(child, context);
            if (isComponent4) context.scopes.vSlot--;
        } else if (child.type === 11 /* FOR */ ) // Do not hoist v-for single child because it has to be a block
        walk(child, context, child.children.length === 1);
        else if (child.type === 9 /* IF */ ) for(let i1 = 0; i1 < child.branches.length; i1++)// Do not hoist v-if single child because it has to be a block
        walk(child.branches[i1], context, child.branches[i1].children.length === 1);
    }
    if (canStringify && hoistedCount && context.transformHoist) context.transformHoist(children, context, node);
    // all children were hoisted - the entire children array is hoistable.
    if (hoistedCount && hoistedCount === originalCount && node.type === 1 /* ELEMENT */  && node.tagType === 0 /* ELEMENT */  && node.codegenNode && node.codegenNode.type === 13 /* VNODE_CALL */  && (0, _shared.isArray)(node.codegenNode.children)) node.codegenNode.children = context.hoist(createArrayExpression(node.codegenNode.children));
}
function getConstantType(node, context) {
    const { constantCache  } = context;
    switch(node.type){
        case 1 /* ELEMENT */ :
            if (node.tagType !== 0 /* ELEMENT */ ) return 0 /* NOT_CONSTANT */ ;
            const cached = constantCache.get(node);
            if (cached !== undefined) return cached;
            const codegenNode = node.codegenNode;
            if (codegenNode.type !== 13 /* VNODE_CALL */ ) return 0 /* NOT_CONSTANT */ ;
            const flag = getPatchFlag(codegenNode);
            if (!flag) {
                let returnType = 3 /* CAN_STRINGIFY */ ;
                // Element itself has no patch flag. However we still need to check:
                // 1. Even for a node with no patch flag, it is possible for it to contain
                // non-hoistable expressions that refers to scope variables, e.g. compiler
                // injected keys or cached event handlers. Therefore we need to always
                // check the codegenNode's props to be sure.
                const generatedPropsType = getGeneratedPropsConstantType(node, context);
                if (generatedPropsType === 0 /* NOT_CONSTANT */ ) {
                    constantCache.set(node, 0 /* NOT_CONSTANT */ );
                    return 0 /* NOT_CONSTANT */ ;
                }
                if (generatedPropsType < returnType) returnType = generatedPropsType;
                // 2. its children.
                for(let i = 0; i < node.children.length; i++){
                    const childType = getConstantType(node.children[i], context);
                    if (childType === 0 /* NOT_CONSTANT */ ) {
                        constantCache.set(node, 0 /* NOT_CONSTANT */ );
                        return 0 /* NOT_CONSTANT */ ;
                    }
                    if (childType < returnType) returnType = childType;
                }
                // 3. if the type is not already CAN_SKIP_PATCH which is the lowest non-0
                // type, check if any of the props can cause the type to be lowered
                // we can skip can_patch because it's guaranteed by the absence of a
                // patchFlag.
                if (returnType > 1 /* CAN_SKIP_PATCH */ ) for(let i2 = 0; i2 < node.props.length; i2++){
                    const p = node.props[i2];
                    if (p.type === 7 /* DIRECTIVE */  && p.name === "bind" && p.exp) {
                        const expType = getConstantType(p.exp, context);
                        if (expType === 0 /* NOT_CONSTANT */ ) {
                            constantCache.set(node, 0 /* NOT_CONSTANT */ );
                            return 0 /* NOT_CONSTANT */ ;
                        }
                        if (expType < returnType) returnType = expType;
                    }
                }
                // only svg/foreignObject could be block here, however if they are
                // static then they don't need to be blocks since there will be no
                // nested updates.
                if (codegenNode.isBlock) {
                    context.removeHelper(OPEN_BLOCK);
                    context.removeHelper(getVNodeBlockHelper(context.inSSR, codegenNode.isComponent));
                    codegenNode.isBlock = false;
                    context.helper(getVNodeHelper(context.inSSR, codegenNode.isComponent));
                }
                constantCache.set(node, returnType);
                return returnType;
            } else {
                constantCache.set(node, 0 /* NOT_CONSTANT */ );
                return 0 /* NOT_CONSTANT */ ;
            }
        case 2 /* TEXT */ :
        case 3 /* COMMENT */ :
            return 3 /* CAN_STRINGIFY */ ;
        case 9 /* IF */ :
        case 11 /* FOR */ :
        case 10 /* IF_BRANCH */ :
            return 0 /* NOT_CONSTANT */ ;
        case 5 /* INTERPOLATION */ :
        case 12 /* TEXT_CALL */ :
            return getConstantType(node.content, context);
        case 4 /* SIMPLE_EXPRESSION */ :
            return node.constType;
        case 8 /* COMPOUND_EXPRESSION */ :
            let returnType = 3 /* CAN_STRINGIFY */ ;
            for(let i = 0; i < node.children.length; i++){
                const child = node.children[i];
                if ((0, _shared.isString)(child) || (0, _shared.isSymbol)(child)) continue;
                const childType = getConstantType(child, context);
                if (childType === 0 /* NOT_CONSTANT */ ) return 0 /* NOT_CONSTANT */ ;
                else if (childType < returnType) returnType = childType;
            }
            return returnType;
        default:
            return 0 /* NOT_CONSTANT */ ;
    }
}
const allowHoistedHelperSet = new Set([
    NORMALIZE_CLASS,
    NORMALIZE_STYLE,
    NORMALIZE_PROPS,
    GUARD_REACTIVE_PROPS
]);
function getConstantTypeOfHelperCall(value, context) {
    if (value.type === 14 /* JS_CALL_EXPRESSION */  && !(0, _shared.isString)(value.callee) && allowHoistedHelperSet.has(value.callee)) {
        const arg = value.arguments[0];
        if (arg.type === 4 /* SIMPLE_EXPRESSION */ ) return getConstantType(arg, context);
        else if (arg.type === 14 /* JS_CALL_EXPRESSION */ ) // in the case of nested helper call, e.g. `normalizeProps(guardReactiveProps(exp))`
        return getConstantTypeOfHelperCall(arg, context);
    }
    return 0 /* NOT_CONSTANT */ ;
}
function getGeneratedPropsConstantType(node, context) {
    let returnType = 3 /* CAN_STRINGIFY */ ;
    const props = getNodeProps(node);
    if (props && props.type === 15 /* JS_OBJECT_EXPRESSION */ ) {
        const { properties  } = props;
        for(let i = 0; i < properties.length; i++){
            const { key , value  } = properties[i];
            const keyType = getConstantType(key, context);
            if (keyType === 0 /* NOT_CONSTANT */ ) return keyType;
            if (keyType < returnType) returnType = keyType;
            let valueType;
            if (value.type === 4 /* SIMPLE_EXPRESSION */ ) valueType = getConstantType(value, context);
            else if (value.type === 14 /* JS_CALL_EXPRESSION */ ) // some helper calls can be hoisted,
            // such as the `normalizeProps` generated by the compiler for pre-normalize class,
            // in this case we need to respect the ConstanType of the helper's argments
            valueType = getConstantTypeOfHelperCall(value, context);
            else valueType = 0 /* NOT_CONSTANT */ ;
            if (valueType === 0 /* NOT_CONSTANT */ ) return valueType;
            if (valueType < returnType) returnType = valueType;
        }
    }
    return returnType;
}
function getNodeProps(node) {
    const codegenNode = node.codegenNode;
    if (codegenNode.type === 13 /* VNODE_CALL */ ) return codegenNode.props;
}
function getPatchFlag(node) {
    const flag = node.patchFlag;
    return flag ? parseInt(flag, 10) : undefined;
}
function createTransformContext(root, { filename ="" , prefixIdentifiers =false , hoistStatic: hoistStatic1 = false , cacheHandlers =false , nodeTransforms =[] , directiveTransforms ={} , transformHoist =null , isBuiltInComponent =(0, _shared.NOOP) , isCustomElement =(0, _shared.NOOP) , expressionPlugins =[] , scopeId =null , slotted =true , ssr =false , inSSR =false , ssrCssVars =`` , bindingMetadata =(0, _shared.EMPTY_OBJ) , inline =false , isTS =false , onError =defaultOnError , onWarn =defaultOnWarn , compatConfig  }) {
    const nameMatch = filename.replace(/\?.*$/, "").match(/([^/\\]+)\.\w+$/);
    const context = {
        // options
        selfName: nameMatch && (0, _shared.capitalize)((0, _shared.camelize)(nameMatch[1])),
        prefixIdentifiers,
        hoistStatic: hoistStatic1,
        cacheHandlers,
        nodeTransforms,
        directiveTransforms,
        transformHoist,
        isBuiltInComponent,
        isCustomElement,
        expressionPlugins,
        scopeId,
        slotted,
        ssr,
        inSSR,
        ssrCssVars,
        bindingMetadata,
        inline,
        isTS,
        onError,
        onWarn,
        compatConfig,
        // state
        root,
        helpers: new Map(),
        components: new Set(),
        directives: new Set(),
        hoists: [],
        imports: [],
        constantCache: new Map(),
        temps: 0,
        cached: 0,
        identifiers: Object.create(null),
        scopes: {
            vFor: 0,
            vSlot: 0,
            vPre: 0,
            vOnce: 0
        },
        parent: null,
        currentNode: root,
        childIndex: 0,
        inVOnce: false,
        // methods
        helper (name) {
            const count = context.helpers.get(name) || 0;
            context.helpers.set(name, count + 1);
            return name;
        },
        removeHelper (name) {
            const count = context.helpers.get(name);
            if (count) {
                const currentCount = count - 1;
                if (!currentCount) context.helpers.delete(name);
                else context.helpers.set(name, currentCount);
            }
        },
        helperString (name) {
            return `_${helperNameMap[context.helper(name)]}`;
        },
        replaceNode (node) {
            if (!context.currentNode) throw new Error(`Node being replaced is already removed.`);
            if (!context.parent) throw new Error(`Cannot replace root node.`);
            context.parent.children[context.childIndex] = context.currentNode = node;
        },
        removeNode (node) {
            if (!context.parent) throw new Error(`Cannot remove root node.`);
            const list = context.parent.children;
            const removalIndex = node ? list.indexOf(node) : context.currentNode ? context.childIndex : -1;
            /* istanbul ignore if */ if (removalIndex < 0) throw new Error(`node being removed is not a child of current parent`);
            if (!node || node === context.currentNode) {
                // current node removed
                context.currentNode = null;
                context.onNodeRemoved();
            } else // sibling node removed
            if (context.childIndex > removalIndex) {
                context.childIndex--;
                context.onNodeRemoved();
            }
            context.parent.children.splice(removalIndex, 1);
        },
        onNodeRemoved: ()=>{},
        addIdentifiers (exp) {},
        removeIdentifiers (exp) {},
        hoist (exp) {
            if ((0, _shared.isString)(exp)) exp = createSimpleExpression(exp);
            context.hoists.push(exp);
            const identifier = createSimpleExpression(`_hoisted_${context.hoists.length}`, false, exp.loc, 2 /* CAN_HOIST */ );
            identifier.hoisted = exp;
            return identifier;
        },
        cache (exp, isVNode = false) {
            return createCacheExpression(context.cached++, exp, isVNode);
        }
    };
    context.filters = new Set();
    return context;
}
function transform(root, options) {
    const context = createTransformContext(root, options);
    traverseNode(root, context);
    if (options.hoistStatic) hoistStatic(root, context);
    if (!options.ssr) createRootCodegen(root, context);
    // finalize meta information
    root.helpers = [
        ...context.helpers.keys()
    ];
    root.components = [
        ...context.components
    ];
    root.directives = [
        ...context.directives
    ];
    root.imports = context.imports;
    root.hoists = context.hoists;
    root.temps = context.temps;
    root.cached = context.cached;
    root.filters = [
        ...context.filters
    ];
}
function createRootCodegen(root, context) {
    const { helper  } = context;
    const { children  } = root;
    if (children.length === 1) {
        const child = children[0];
        // if the single child is an element, turn it into a block.
        if (isSingleElementRoot(root, child) && child.codegenNode) {
            // single element root is never hoisted so codegenNode will never be
            // SimpleExpressionNode
            const codegenNode = child.codegenNode;
            if (codegenNode.type === 13 /* VNODE_CALL */ ) makeBlock(codegenNode, context);
            root.codegenNode = codegenNode;
        } else // - single <slot/>, IfNode, ForNode: already blocks.
        // - single text node: always patched.
        // root codegen falls through via genNode()
        root.codegenNode = child;
    } else if (children.length > 1) {
        // root has multiple nodes - return a fragment block.
        let patchFlag = 64 /* STABLE_FRAGMENT */ ;
        let patchFlagText = (0, _shared.PatchFlagNames)[64 /* STABLE_FRAGMENT */ ];
        // check if the fragment actually contains a single valid child with
        // the rest being comments
        if (children.filter((c)=>c.type !== 3 /* COMMENT */ ).length === 1) {
            patchFlag |= 2048 /* DEV_ROOT_FRAGMENT */ ;
            patchFlagText += `, ${(0, _shared.PatchFlagNames)[2048 /* DEV_ROOT_FRAGMENT */ ]}`;
        }
        root.codegenNode = createVNodeCall(context, helper(FRAGMENT), undefined, root.children, patchFlag + ` /* ${patchFlagText} */`, undefined, undefined, true, undefined, false);
    }
}
function traverseChildren(parent, context) {
    let i = 0;
    const nodeRemoved = ()=>{
        i--;
    };
    for(; i < parent.children.length; i++){
        const child = parent.children[i];
        if ((0, _shared.isString)(child)) continue;
        context.parent = parent;
        context.childIndex = i;
        context.onNodeRemoved = nodeRemoved;
        traverseNode(child, context);
    }
}
function traverseNode(node, context) {
    context.currentNode = node;
    // apply transform plugins
    const { nodeTransforms  } = context;
    const exitFns = [];
    for(let i = 0; i < nodeTransforms.length; i++){
        const onExit = nodeTransforms[i](node, context);
        if (onExit) {
            if ((0, _shared.isArray)(onExit)) exitFns.push(...onExit);
            else exitFns.push(onExit);
        }
        if (!context.currentNode) // node was removed
        return;
        else // node may have been replaced
        node = context.currentNode;
    }
    switch(node.type){
        case 3 /* COMMENT */ :
            if (!context.ssr) // inject import for the Comment symbol, which is needed for creating
            // comment nodes with `createVNode`
            context.helper(CREATE_COMMENT);
            break;
        case 5 /* INTERPOLATION */ :
            // no need to traverse, but we need to inject toString helper
            if (!context.ssr) context.helper(TO_DISPLAY_STRING);
            break;
        // for container types, further traverse downwards
        case 9 /* IF */ :
            for(let i3 = 0; i3 < node.branches.length; i3++)traverseNode(node.branches[i3], context);
            break;
        case 10 /* IF_BRANCH */ :
        case 11 /* FOR */ :
        case 1 /* ELEMENT */ :
        case 0 /* ROOT */ :
            traverseChildren(node, context);
            break;
    }
    // exit transforms
    context.currentNode = node;
    let i4 = exitFns.length;
    while(i4--)exitFns[i4]();
}
function createStructuralDirectiveTransform(name, fn) {
    const matches = (0, _shared.isString)(name) ? (n)=>n === name : (n)=>name.test(n);
    return (node, context)=>{
        if (node.type === 1 /* ELEMENT */ ) {
            const { props  } = node;
            // structural directive transforms are not concerned with slots
            // as they are handled separately in vSlot.ts
            if (node.tagType === 3 /* TEMPLATE */  && props.some(isVSlot)) return;
            const exitFns = [];
            for(let i = 0; i < props.length; i++){
                const prop = props[i];
                if (prop.type === 7 /* DIRECTIVE */  && matches(prop.name)) {
                    // structural directives are removed to avoid infinite recursion
                    // also we remove them *before* applying so that it can further
                    // traverse itself in case it moves the node around
                    props.splice(i, 1);
                    i--;
                    const onExit = fn(node, prop, context);
                    if (onExit) exitFns.push(onExit);
                }
            }
            return exitFns;
        }
    };
}
const PURE_ANNOTATION = `/*#__PURE__*/`;
function createCodegenContext(ast, { mode ="function" , prefixIdentifiers =mode === "module" , sourceMap =false , filename =`template.vue.html` , scopeId =null , optimizeImports =false , runtimeGlobalName =`Vue` , runtimeModuleName =`vue` , ssr =false , isTS =false , inSSR =false  }) {
    const context = {
        mode,
        prefixIdentifiers,
        sourceMap,
        filename,
        scopeId,
        optimizeImports,
        runtimeGlobalName,
        runtimeModuleName,
        ssr,
        isTS,
        inSSR,
        source: ast.loc.source,
        code: ``,
        column: 1,
        line: 1,
        offset: 0,
        indentLevel: 0,
        pure: false,
        map: undefined,
        helper (key) {
            return `_${helperNameMap[key]}`;
        },
        push (code, node) {
            context.code += code;
        },
        indent () {
            newline(++context.indentLevel);
        },
        deindent (withoutNewLine = false) {
            if (withoutNewLine) --context.indentLevel;
            else newline(--context.indentLevel);
        },
        newline () {
            newline(context.indentLevel);
        }
    };
    function newline(n) {
        context.push("\n" + `  `.repeat(n));
    }
    return context;
}
function generate(ast, options = {}) {
    const context = createCodegenContext(ast, options);
    if (options.onContextCreated) options.onContextCreated(context);
    const { mode , push , prefixIdentifiers , indent , deindent , newline , scopeId , ssr  } = context;
    const hasHelpers = ast.helpers.length > 0;
    const useWithBlock = !prefixIdentifiers && mode !== "module";
    // preambles
    // in setup() inline mode, the preamble is generated in a sub context
    // and returned separately.
    const preambleContext = context;
    genFunctionPreamble(ast, preambleContext);
    // enter render function
    const functionName = ssr ? `ssrRender` : `render`;
    const args = ssr ? [
        "_ctx",
        "_push",
        "_parent",
        "_attrs"
    ] : [
        "_ctx",
        "_cache"
    ];
    const signature = args.join(", ");
    push(`function ${functionName}(${signature}) {`);
    indent();
    if (useWithBlock) {
        push(`with (_ctx) {`);
        indent();
        // function mode const declarations should be inside with block
        // also they should be renamed to avoid collision with user properties
        if (hasHelpers) {
            push(`const { ${ast.helpers.map((s)=>`${helperNameMap[s]}: _${helperNameMap[s]}`).join(", ")} } = _Vue`);
            push(`\n`);
            newline();
        }
    }
    // generate asset resolution statements
    if (ast.components.length) {
        genAssets(ast.components, "component", context);
        if (ast.directives.length || ast.temps > 0) newline();
    }
    if (ast.directives.length) {
        genAssets(ast.directives, "directive", context);
        if (ast.temps > 0) newline();
    }
    if (ast.filters && ast.filters.length) {
        newline();
        genAssets(ast.filters, "filter", context);
        newline();
    }
    if (ast.temps > 0) {
        push(`let `);
        for(let i = 0; i < ast.temps; i++)push(`${i > 0 ? `, ` : ``}_temp${i}`);
    }
    if (ast.components.length || ast.directives.length || ast.temps) {
        push(`\n`);
        newline();
    }
    // generate the VNode tree expression
    if (!ssr) push(`return `);
    if (ast.codegenNode) genNode(ast.codegenNode, context);
    else push(`null`);
    if (useWithBlock) {
        deindent();
        push(`}`);
    }
    deindent();
    push(`}`);
    return {
        ast,
        code: context.code,
        preamble: ``,
        // SourceMapGenerator does have toJSON() method but it's not in the types
        map: context.map ? context.map.toJSON() : undefined
    };
}
function genFunctionPreamble(ast, context) {
    const { ssr , prefixIdentifiers , push , newline , runtimeModuleName , runtimeGlobalName  } = context;
    const VueBinding = runtimeGlobalName;
    const aliasHelper = (s)=>`${helperNameMap[s]}: _${helperNameMap[s]}`;
    // Generate const declaration for helpers
    // In prefix mode, we place the const declaration at top so it's done
    // only once; But if we not prefixing, we place the declaration inside the
    // with block so it doesn't incur the `in` check cost for every helper access.
    if (ast.helpers.length > 0) {
        // "with" mode.
        // save Vue in a separate variable to avoid collision
        push(`const _Vue = ${VueBinding}\n`);
        // in "with" mode, helpers are declared inside the with block to avoid
        // has check cost, but hoists are lifted out of the function - we need
        // to provide the helper here.
        if (ast.hoists.length) {
            const staticHelpers = [
                CREATE_VNODE,
                CREATE_ELEMENT_VNODE,
                CREATE_COMMENT,
                CREATE_TEXT,
                CREATE_STATIC
            ].filter((helper)=>ast.helpers.includes(helper)).map(aliasHelper).join(", ");
            push(`const { ${staticHelpers} } = _Vue\n`);
        }
    }
    genHoists(ast.hoists, context);
    newline();
    push(`return `);
}
function genAssets(assets, type, { helper , push , newline , isTS  }) {
    const resolver = helper(type === "filter" ? RESOLVE_FILTER : type === "component" ? RESOLVE_COMPONENT : RESOLVE_DIRECTIVE);
    for(let i = 0; i < assets.length; i++){
        let id = assets[i];
        // potential component implicit self-reference inferred from SFC filename
        const maybeSelfReference = id.endsWith("__self");
        if (maybeSelfReference) id = id.slice(0, -6);
        push(`const ${toValidAssetId(id, type)} = ${resolver}(${JSON.stringify(id)}${maybeSelfReference ? `, true` : ``})${isTS ? `!` : ``}`);
        if (i < assets.length - 1) newline();
    }
}
function genHoists(hoists, context) {
    if (!hoists.length) return;
    context.pure = true;
    const { push , newline , helper , scopeId , mode  } = context;
    newline();
    hoists.forEach((exp, i)=>{
        if (exp) {
            push(`const _hoisted_${i + 1} = `);
            genNode(exp, context);
            newline();
        }
    });
    context.pure = false;
}
function isText$1(n) {
    return (0, _shared.isString)(n) || n.type === 4 /* SIMPLE_EXPRESSION */  || n.type === 2 /* TEXT */  || n.type === 5 /* INTERPOLATION */  || n.type === 8 /* COMPOUND_EXPRESSION */ ;
}
function genNodeListAsArray(nodes, context) {
    const multilines = nodes.length > 3 || nodes.some((n)=>(0, _shared.isArray)(n) || !isText$1(n));
    context.push(`[`);
    multilines && context.indent();
    genNodeList(nodes, context, multilines);
    multilines && context.deindent();
    context.push(`]`);
}
function genNodeList(nodes, context, multilines = false, comma = true) {
    const { push , newline  } = context;
    for(let i = 0; i < nodes.length; i++){
        const node = nodes[i];
        if ((0, _shared.isString)(node)) push(node);
        else if ((0, _shared.isArray)(node)) genNodeListAsArray(node, context);
        else genNode(node, context);
        if (i < nodes.length - 1) {
            if (multilines) {
                comma && push(",");
                newline();
            } else comma && push(", ");
        }
    }
}
function genNode(node, context) {
    if ((0, _shared.isString)(node)) {
        context.push(node);
        return;
    }
    if ((0, _shared.isSymbol)(node)) {
        context.push(context.helper(node));
        return;
    }
    switch(node.type){
        case 1 /* ELEMENT */ :
        case 9 /* IF */ :
        case 11 /* FOR */ :
            assert(node.codegenNode != null, `Codegen node is missing for element/if/for node. ` + `Apply appropriate transforms first.`);
            genNode(node.codegenNode, context);
            break;
        case 2 /* TEXT */ :
            genText(node, context);
            break;
        case 4 /* SIMPLE_EXPRESSION */ :
            genExpression(node, context);
            break;
        case 5 /* INTERPOLATION */ :
            genInterpolation(node, context);
            break;
        case 12 /* TEXT_CALL */ :
            genNode(node.codegenNode, context);
            break;
        case 8 /* COMPOUND_EXPRESSION */ :
            genCompoundExpression(node, context);
            break;
        case 3 /* COMMENT */ :
            genComment(node, context);
            break;
        case 13 /* VNODE_CALL */ :
            genVNodeCall(node, context);
            break;
        case 14 /* JS_CALL_EXPRESSION */ :
            genCallExpression(node, context);
            break;
        case 15 /* JS_OBJECT_EXPRESSION */ :
            genObjectExpression(node, context);
            break;
        case 17 /* JS_ARRAY_EXPRESSION */ :
            genArrayExpression(node, context);
            break;
        case 18 /* JS_FUNCTION_EXPRESSION */ :
            genFunctionExpression(node, context);
            break;
        case 19 /* JS_CONDITIONAL_EXPRESSION */ :
            genConditionalExpression(node, context);
            break;
        case 20 /* JS_CACHE_EXPRESSION */ :
            genCacheExpression(node, context);
            break;
        case 21 /* JS_BLOCK_STATEMENT */ :
            genNodeList(node.body, context, true, false);
            break;
        // SSR only types
        case 22 /* JS_TEMPLATE_LITERAL */ :
            break;
        case 23 /* JS_IF_STATEMENT */ :
            break;
        case 24 /* JS_ASSIGNMENT_EXPRESSION */ :
            break;
        case 25 /* JS_SEQUENCE_EXPRESSION */ :
            break;
        case 26 /* JS_RETURN_STATEMENT */ :
            break;
        /* istanbul ignore next */ case 10 /* IF_BRANCH */ :
            break;
        default:
            {
                assert(false, `unhandled codegen node type: ${node.type}`);
                // make sure we exhaust all possible types
                const exhaustiveCheck = node;
                return exhaustiveCheck;
            }
    }
}
function genText(node, context) {
    context.push(JSON.stringify(node.content), node);
}
function genExpression(node, context) {
    const { content , isStatic  } = node;
    context.push(isStatic ? JSON.stringify(content) : content, node);
}
function genInterpolation(node, context) {
    const { push , helper , pure  } = context;
    if (pure) push(PURE_ANNOTATION);
    push(`${helper(TO_DISPLAY_STRING)}(`);
    genNode(node.content, context);
    push(`)`);
}
function genCompoundExpression(node, context) {
    for(let i = 0; i < node.children.length; i++){
        const child = node.children[i];
        if ((0, _shared.isString)(child)) context.push(child);
        else genNode(child, context);
    }
}
function genExpressionAsPropertyKey(node, context) {
    const { push  } = context;
    if (node.type === 8 /* COMPOUND_EXPRESSION */ ) {
        push(`[`);
        genCompoundExpression(node, context);
        push(`]`);
    } else if (node.isStatic) {
        // only quote keys if necessary
        const text = isSimpleIdentifier(node.content) ? node.content : JSON.stringify(node.content);
        push(text, node);
    } else push(`[${node.content}]`, node);
}
function genComment(node, context) {
    const { push , helper , pure  } = context;
    if (pure) push(PURE_ANNOTATION);
    push(`${helper(CREATE_COMMENT)}(${JSON.stringify(node.content)})`, node);
}
function genVNodeCall(node, context) {
    const { push , helper , pure  } = context;
    const { tag , props , children , patchFlag , dynamicProps , directives , isBlock , disableTracking , isComponent: isComponent5  } = node;
    if (directives) push(helper(WITH_DIRECTIVES) + `(`);
    if (isBlock) push(`(${helper(OPEN_BLOCK)}(${disableTracking ? `true` : ``}), `);
    if (pure) push(PURE_ANNOTATION);
    const callHelper = isBlock ? getVNodeBlockHelper(context.inSSR, isComponent5) : getVNodeHelper(context.inSSR, isComponent5);
    push(helper(callHelper) + `(`, node);
    genNodeList(genNullableArgs([
        tag,
        props,
        children,
        patchFlag,
        dynamicProps
    ]), context);
    push(`)`);
    if (isBlock) push(`)`);
    if (directives) {
        push(`, `);
        genNode(directives, context);
        push(`)`);
    }
}
function genNullableArgs(args) {
    let i = args.length;
    while(i--){
        if (args[i] != null) break;
    }
    return args.slice(0, i + 1).map((arg)=>arg || `null`);
}
// JavaScript
function genCallExpression(node, context) {
    const { push , helper , pure  } = context;
    const callee = (0, _shared.isString)(node.callee) ? node.callee : helper(node.callee);
    if (pure) push(PURE_ANNOTATION);
    push(callee + `(`, node);
    genNodeList(node.arguments, context);
    push(`)`);
}
function genObjectExpression(node, context) {
    const { push , indent , deindent , newline  } = context;
    const { properties  } = node;
    if (!properties.length) {
        push(`{}`, node);
        return;
    }
    const multilines = properties.length > 1 || properties.some((p)=>p.value.type !== 4 /* SIMPLE_EXPRESSION */ );
    push(multilines ? `{` : `{ `);
    multilines && indent();
    for(let i = 0; i < properties.length; i++){
        const { key , value  } = properties[i];
        // key
        genExpressionAsPropertyKey(key, context);
        push(`: `);
        // value
        genNode(value, context);
        if (i < properties.length - 1) {
            // will only reach this if it's multilines
            push(`,`);
            newline();
        }
    }
    multilines && deindent();
    push(multilines ? `}` : ` }`);
}
function genArrayExpression(node, context) {
    genNodeListAsArray(node.elements, context);
}
function genFunctionExpression(node, context) {
    const { push , indent , deindent  } = context;
    const { params , returns , body , newline , isSlot  } = node;
    if (isSlot) // wrap slot functions with owner context
    push(`_${helperNameMap[WITH_CTX]}(`);
    push(`(`, node);
    if ((0, _shared.isArray)(params)) genNodeList(params, context);
    else if (params) genNode(params, context);
    push(`) => `);
    if (newline || body) {
        push(`{`);
        indent();
    }
    if (returns) {
        if (newline) push(`return `);
        if ((0, _shared.isArray)(returns)) genNodeListAsArray(returns, context);
        else genNode(returns, context);
    } else if (body) genNode(body, context);
    if (newline || body) {
        deindent();
        push(`}`);
    }
    if (isSlot) {
        if (node.isNonScopedSlot) push(`, undefined, true`);
        push(`)`);
    }
}
function genConditionalExpression(node, context) {
    const { test , consequent , alternate , newline: needNewline  } = node;
    const { push , indent , deindent , newline  } = context;
    if (test.type === 4 /* SIMPLE_EXPRESSION */ ) {
        const needsParens = !isSimpleIdentifier(test.content);
        needsParens && push(`(`);
        genExpression(test, context);
        needsParens && push(`)`);
    } else {
        push(`(`);
        genNode(test, context);
        push(`)`);
    }
    needNewline && indent();
    context.indentLevel++;
    needNewline || push(` `);
    push(`? `);
    genNode(consequent, context);
    context.indentLevel--;
    needNewline && newline();
    needNewline || push(` `);
    push(`: `);
    const isNested = alternate.type === 19 /* JS_CONDITIONAL_EXPRESSION */ ;
    if (!isNested) context.indentLevel++;
    genNode(alternate, context);
    if (!isNested) context.indentLevel--;
    needNewline && deindent(true);
}
function genCacheExpression(node, context) {
    const { push , helper , indent , deindent , newline  } = context;
    push(`_cache[${node.index}] || (`);
    if (node.isVNode) {
        indent();
        push(`${helper(SET_BLOCK_TRACKING)}(-1),`);
        newline();
    }
    push(`_cache[${node.index}] = `);
    genNode(node.value, context);
    if (node.isVNode) {
        push(`,`);
        newline();
        push(`${helper(SET_BLOCK_TRACKING)}(1),`);
        newline();
        push(`_cache[${node.index}]`);
        deindent();
    }
    push(`)`);
}
function walkIdentifiers(root, onIdentifier, includeAll = false, parentStack = [], knownIds = Object.create(null)) {
    return;
}
function isReferencedIdentifier(id, parent, parentStack) {
    return false;
}
function isInDestructureAssignment(parent, parentStack) {
    if (parent && (parent.type === "ObjectProperty" || parent.type === "ArrayPattern")) {
        let i = parentStack.length;
        while(i--){
            const p = parentStack[i];
            if (p.type === "AssignmentExpression") return true;
            else if (p.type !== "ObjectProperty" && !p.type.endsWith("Pattern")) break;
        }
    }
    return false;
}
function walkFunctionParams(node, onIdent) {
    for (const p of node.params)for (const id of extractIdentifiers(p))onIdent(id);
}
function walkBlockDeclarations(block, onIdent) {
    for (const stmt of block.body){
        if (stmt.type === "VariableDeclaration") {
            if (stmt.declare) continue;
            for (const decl of stmt.declarations)for (const id of extractIdentifiers(decl.id))onIdent(id);
        } else if (stmt.type === "FunctionDeclaration" || stmt.type === "ClassDeclaration") {
            if (stmt.declare || !stmt.id) continue;
            onIdent(stmt.id);
        }
    }
}
function extractIdentifiers(param, nodes = []) {
    switch(param.type){
        case "Identifier":
            nodes.push(param);
            break;
        case "MemberExpression":
            let object = param;
            while(object.type === "MemberExpression")object = object.object;
            nodes.push(object);
            break;
        case "ObjectPattern":
            for (const prop of param.properties)if (prop.type === "RestElement") extractIdentifiers(prop.argument, nodes);
            else extractIdentifiers(prop.value, nodes);
            break;
        case "ArrayPattern":
            param.elements.forEach((element)=>{
                if (element) extractIdentifiers(element, nodes);
            });
            break;
        case "RestElement":
            extractIdentifiers(param.argument, nodes);
            break;
        case "AssignmentPattern":
            extractIdentifiers(param.left, nodes);
            break;
    }
    return nodes;
}
const isFunctionType = (node)=>{
    return /Function(?:Expression|Declaration)$|Method$/.test(node.type);
};
const isStaticProperty = (node)=>node && (node.type === "ObjectProperty" || node.type === "ObjectMethod") && !node.computed;
const isStaticPropertyKey = (node, parent)=>isStaticProperty(parent) && parent.key === node;
// these keywords should not appear inside expressions, but operators like
// typeof, instanceof and in are allowed
const prohibitedKeywordRE = new RegExp("\\b" + "do,if,for,let,new,try,var,case,else,with,await,break,catch,class,const,super,throw,while,yield,delete,export,import,return,switch,default,extends,finally,continue,debugger,function,arguments,typeof,void".split(",").join("\\b|\\b") + "\\b");
// strip strings in expressions
const stripStringRE = /'(?:[^'\\]|\\.)*'|"(?:[^"\\]|\\.)*"|`(?:[^`\\]|\\.)*\$\{|\}(?:[^`\\]|\\.)*`|`(?:[^`\\]|\\.)*`/g;
/**
 * Validate a non-prefixed expression.
 * This is only called when using the in-browser runtime compiler since it
 * doesn't prefix expressions.
 */ function validateBrowserExpression(node, context, asParams = false, asRawStatements = false) {
    const exp = node.content;
    // empty expressions are validated per-directive since some directives
    // do allow empty expressions.
    if (!exp.trim()) return;
    try {
        new Function(asRawStatements ? ` ${exp} ` : `return ${asParams ? `(${exp}) => {}` : `(${exp})`}`);
    } catch (e) {
        let message = e.message;
        const keywordMatch = exp.replace(stripStringRE, "").match(prohibitedKeywordRE);
        if (keywordMatch) message = `avoid using JavaScript keyword as property name: "${keywordMatch[0]}"`;
        context.onError(createCompilerError(44 /* X_INVALID_EXPRESSION */ , node.loc, undefined, message));
    }
}
const transformExpression = (node, context)=>{
    if (node.type === 5 /* INTERPOLATION */ ) node.content = processExpression(node.content, context);
    else if (node.type === 1 /* ELEMENT */ ) // handle directives on element
    for(let i = 0; i < node.props.length; i++){
        const dir = node.props[i];
        // do not process for v-on & v-for since they are special handled
        if (dir.type === 7 /* DIRECTIVE */  && dir.name !== "for") {
            const exp = dir.exp;
            const arg = dir.arg;
            // do not process exp if this is v-on:arg - we need special handling
            // for wrapping inline statements.
            if (exp && exp.type === 4 /* SIMPLE_EXPRESSION */  && !(dir.name === "on" && arg)) dir.exp = processExpression(exp, context, // slot args must be processed as function params
            dir.name === "slot");
            if (arg && arg.type === 4 /* SIMPLE_EXPRESSION */  && !arg.isStatic) dir.arg = processExpression(arg, context);
        }
    }
};
// Important: since this function uses Node.js only dependencies, it should
// always be used with a leading !true check so that it can be
// tree-shaken from the browser build.
function processExpression(node, context, // some expressions like v-slot props & v-for aliases should be parsed as
// function params
asParams = false, // v-on handler values may contain multiple statements
asRawStatements = false, localVars = Object.create(context.identifiers)) {
    // simple in-browser validation (same logic in 2.x)
    validateBrowserExpression(node, context, asParams, asRawStatements);
    return node;
}
const transformIf = createStructuralDirectiveTransform(/^(if|else|else-if)$/, (node, dir, context)=>{
    return processIf(node, dir, context, (ifNode, branch, isRoot)=>{
        // #1587: We need to dynamically increment the key based on the current
        // node's sibling nodes, since chained v-if/else branches are
        // rendered at the same depth
        const siblings = context.parent.children;
        let i = siblings.indexOf(ifNode);
        let key = 0;
        while(i-- >= 0){
            const sibling = siblings[i];
            if (sibling && sibling.type === 9 /* IF */ ) key += sibling.branches.length;
        }
        // Exit callback. Complete the codegenNode when all children have been
        // transformed.
        return ()=>{
            if (isRoot) ifNode.codegenNode = createCodegenNodeForBranch(branch, key, context);
            else {
                // attach this branch's codegen node to the v-if root.
                const parentCondition = getParentCondition(ifNode.codegenNode);
                parentCondition.alternate = createCodegenNodeForBranch(branch, key + ifNode.branches.length - 1, context);
            }
        };
    });
});
// target-agnostic transform used for both Client and SSR
function processIf(node, dir, context, processCodegen) {
    if (dir.name !== "else" && (!dir.exp || !dir.exp.content.trim())) {
        const loc = dir.exp ? dir.exp.loc : node.loc;
        context.onError(createCompilerError(28 /* X_V_IF_NO_EXPRESSION */ , dir.loc));
        dir.exp = createSimpleExpression(`true`, false, loc);
    }
    if (dir.exp) validateBrowserExpression(dir.exp, context);
    if (dir.name === "if") {
        const branch = createIfBranch(node, dir);
        const ifNode = {
            type: 9 /* IF */ ,
            loc: node.loc,
            branches: [
                branch
            ]
        };
        context.replaceNode(ifNode);
        if (processCodegen) return processCodegen(ifNode, branch, true);
    } else {
        // locate the adjacent v-if
        const siblings = context.parent.children;
        const comments = [];
        let i = siblings.indexOf(node);
        while(i-- >= -1){
            const sibling = siblings[i];
            if (sibling && sibling.type === 3 /* COMMENT */ ) {
                context.removeNode(sibling);
                comments.unshift(sibling);
                continue;
            }
            if (sibling && sibling.type === 2 /* TEXT */  && !sibling.content.trim().length) {
                context.removeNode(sibling);
                continue;
            }
            if (sibling && sibling.type === 9 /* IF */ ) {
                // move the node to the if node's branches
                context.removeNode();
                const branch = createIfBranch(node, dir);
                if (comments.length && // #3619 ignore comments if the v-if is direct child of <transition>
                !(context.parent && context.parent.type === 1 /* ELEMENT */  && isBuiltInType(context.parent.tag, "transition"))) branch.children = [
                    ...comments,
                    ...branch.children
                ];
                {
                    const key = branch.userKey;
                    if (key) sibling.branches.forEach(({ userKey  })=>{
                        if (isSameKey(userKey, key)) context.onError(createCompilerError(29 /* X_V_IF_SAME_KEY */ , branch.userKey.loc));
                    });
                }
                sibling.branches.push(branch);
                const onExit = processCodegen && processCodegen(sibling, branch, false);
                // since the branch was removed, it will not be traversed.
                // make sure to traverse here.
                traverseNode(branch, context);
                // call on exit
                if (onExit) onExit();
                // make sure to reset currentNode after traversal to indicate this
                // node has been removed.
                context.currentNode = null;
            } else context.onError(createCompilerError(30 /* X_V_ELSE_NO_ADJACENT_IF */ , node.loc));
            break;
        }
    }
}
function createIfBranch(node, dir) {
    return {
        type: 10 /* IF_BRANCH */ ,
        loc: node.loc,
        condition: dir.name === "else" ? undefined : dir.exp,
        children: node.tagType === 3 /* TEMPLATE */  && !findDir(node, "for") ? node.children : [
            node
        ],
        userKey: findProp(node, `key`)
    };
}
function createCodegenNodeForBranch(branch, keyIndex, context) {
    if (branch.condition) return createConditionalExpression(branch.condition, createChildrenCodegenNode(branch, keyIndex, context), // make sure to pass in asBlock: true so that the comment node call
    // closes the current block.
    createCallExpression(context.helper(CREATE_COMMENT), [
        '"v-if"',
        "true"
    ]));
    else return createChildrenCodegenNode(branch, keyIndex, context);
}
function createChildrenCodegenNode(branch, keyIndex, context) {
    const { helper  } = context;
    const keyProperty = createObjectProperty(`key`, createSimpleExpression(`${keyIndex}`, false, locStub, 2 /* CAN_HOIST */ ));
    const { children  } = branch;
    const firstChild = children[0];
    const needFragmentWrapper = children.length !== 1 || firstChild.type !== 1 /* ELEMENT */ ;
    if (needFragmentWrapper) {
        if (children.length === 1 && firstChild.type === 11 /* FOR */ ) {
            // optimize away nested fragments when child is a ForNode
            const vnodeCall = firstChild.codegenNode;
            injectProp(vnodeCall, keyProperty, context);
            return vnodeCall;
        } else {
            let patchFlag = 64 /* STABLE_FRAGMENT */ ;
            let patchFlagText = (0, _shared.PatchFlagNames)[64 /* STABLE_FRAGMENT */ ];
            // check if the fragment actually contains a single valid child with
            // the rest being comments
            if (children.filter((c)=>c.type !== 3 /* COMMENT */ ).length === 1) {
                patchFlag |= 2048 /* DEV_ROOT_FRAGMENT */ ;
                patchFlagText += `, ${(0, _shared.PatchFlagNames)[2048 /* DEV_ROOT_FRAGMENT */ ]}`;
            }
            return createVNodeCall(context, helper(FRAGMENT), createObjectExpression([
                keyProperty
            ]), children, patchFlag + ` /* ${patchFlagText} */`, undefined, undefined, true, false, false, branch.loc);
        }
    } else {
        const ret = firstChild.codegenNode;
        const vnodeCall = getMemoedVNodeCall(ret);
        // Change createVNode to createBlock.
        if (vnodeCall.type === 13 /* VNODE_CALL */ ) makeBlock(vnodeCall, context);
        // inject branch key
        injectProp(vnodeCall, keyProperty, context);
        return ret;
    }
}
function isSameKey(a, b) {
    if (!a || a.type !== b.type) return false;
    if (a.type === 6 /* ATTRIBUTE */ ) {
        if (a.value.content !== b.value.content) return false;
    } else {
        // directive
        const exp = a.exp;
        const branchExp = b.exp;
        if (exp.type !== branchExp.type) return false;
        if (exp.type !== 4 /* SIMPLE_EXPRESSION */  || exp.isStatic !== branchExp.isStatic || exp.content !== branchExp.content) return false;
    }
    return true;
}
function getParentCondition(node) {
    while(true){
        if (node.type === 19 /* JS_CONDITIONAL_EXPRESSION */ ) {
            if (node.alternate.type === 19 /* JS_CONDITIONAL_EXPRESSION */ ) node = node.alternate;
            else return node;
        } else if (node.type === 20 /* JS_CACHE_EXPRESSION */ ) node = node.value;
    }
}
const transformFor = createStructuralDirectiveTransform("for", (node, dir, context)=>{
    const { helper , removeHelper  } = context;
    return processFor(node, dir, context, (forNode)=>{
        // create the loop render function expression now, and add the
        // iterator on exit after all children have been traversed
        const renderExp = createCallExpression(helper(RENDER_LIST), [
            forNode.source
        ]);
        const memo = findDir(node, "memo");
        const keyProp = findProp(node, `key`);
        const keyExp = keyProp && (keyProp.type === 6 /* ATTRIBUTE */  ? createSimpleExpression(keyProp.value.content, true) : keyProp.exp);
        const keyProperty = keyProp ? createObjectProperty(`key`, keyExp) : null;
        const isStableFragment = forNode.source.type === 4 /* SIMPLE_EXPRESSION */  && forNode.source.constType > 0 /* NOT_CONSTANT */ ;
        const fragmentFlag = isStableFragment ? 64 /* STABLE_FRAGMENT */  : keyProp ? 128 /* KEYED_FRAGMENT */  : 256 /* UNKEYED_FRAGMENT */ ;
        forNode.codegenNode = createVNodeCall(context, helper(FRAGMENT), undefined, renderExp, fragmentFlag + ` /* ${(0, _shared.PatchFlagNames)[fragmentFlag]} */`, undefined, undefined, true, !isStableFragment /* disableTracking */ , false, node.loc);
        return ()=>{
            // finish the codegen now that all children have been traversed
            let childBlock;
            const isTemplate = isTemplateNode(node);
            const { children  } = forNode;
            // check <template v-for> key placement
            if (isTemplate) node.children.some((c)=>{
                if (c.type === 1 /* ELEMENT */ ) {
                    const key = findProp(c, "key");
                    if (key) {
                        context.onError(createCompilerError(33 /* X_V_FOR_TEMPLATE_KEY_PLACEMENT */ , key.loc));
                        return true;
                    }
                }
            });
            const needFragmentWrapper = children.length !== 1 || children[0].type !== 1 /* ELEMENT */ ;
            const slotOutlet = isSlotOutlet(node) ? node : isTemplate && node.children.length === 1 && isSlotOutlet(node.children[0]) ? node.children[0] // api-extractor somehow fails to infer this
             : null;
            if (slotOutlet) {
                // <slot v-for="..."> or <template v-for="..."><slot/></template>
                childBlock = slotOutlet.codegenNode;
                if (isTemplate && keyProperty) // <template v-for="..." :key="..."><slot/></template>
                // we need to inject the key to the renderSlot() call.
                // the props for renderSlot is passed as the 3rd argument.
                injectProp(childBlock, keyProperty, context);
            } else if (needFragmentWrapper) // <template v-for="..."> with text or multi-elements
            // should generate a fragment block for each loop
            childBlock = createVNodeCall(context, helper(FRAGMENT), keyProperty ? createObjectExpression([
                keyProperty
            ]) : undefined, node.children, 64 /* STABLE_FRAGMENT */  + ` /* ${(0, _shared.PatchFlagNames)[64 /* STABLE_FRAGMENT */ ]} */`, undefined, undefined, true, undefined, false);
            else {
                // Normal element v-for. Directly use the child's codegenNode
                // but mark it as a block.
                childBlock = children[0].codegenNode;
                if (isTemplate && keyProperty) injectProp(childBlock, keyProperty, context);
                if (childBlock.isBlock !== !isStableFragment) {
                    if (childBlock.isBlock) {
                        // switch from block to vnode
                        removeHelper(OPEN_BLOCK);
                        removeHelper(getVNodeBlockHelper(context.inSSR, childBlock.isComponent));
                    } else // switch from vnode to block
                    removeHelper(getVNodeHelper(context.inSSR, childBlock.isComponent));
                }
                childBlock.isBlock = !isStableFragment;
                if (childBlock.isBlock) {
                    helper(OPEN_BLOCK);
                    helper(getVNodeBlockHelper(context.inSSR, childBlock.isComponent));
                } else helper(getVNodeHelper(context.inSSR, childBlock.isComponent));
            }
            if (memo) {
                const loop = createFunctionExpression(createForLoopParams(forNode.parseResult, [
                    createSimpleExpression(`_cached`)
                ]));
                loop.body = createBlockStatement([
                    createCompoundExpression([
                        `const _memo = (`,
                        memo.exp,
                        `)`
                    ]),
                    createCompoundExpression([
                        `if (_cached`,
                        ...keyExp ? [
                            ` && _cached.key === `,
                            keyExp
                        ] : [],
                        ` && ${context.helperString(IS_MEMO_SAME)}(_cached, _memo)) return _cached`
                    ]),
                    createCompoundExpression([
                        `const _item = `,
                        childBlock
                    ]),
                    createSimpleExpression(`_item.memo = _memo`),
                    createSimpleExpression(`return _item`)
                ]);
                renderExp.arguments.push(loop, createSimpleExpression(`_cache`), createSimpleExpression(String(context.cached++)));
            } else renderExp.arguments.push(createFunctionExpression(createForLoopParams(forNode.parseResult), childBlock, true));
        };
    });
});
// target-agnostic transform used for both Client and SSR
function processFor(node, dir, context, processCodegen) {
    if (!dir.exp) {
        context.onError(createCompilerError(31 /* X_V_FOR_NO_EXPRESSION */ , dir.loc));
        return;
    }
    const parseResult = parseForExpression(// can only be simple expression because vFor transform is applied
    // before expression transform.
    dir.exp, context);
    if (!parseResult) {
        context.onError(createCompilerError(32 /* X_V_FOR_MALFORMED_EXPRESSION */ , dir.loc));
        return;
    }
    const { addIdentifiers , removeIdentifiers , scopes  } = context;
    const { source , value , key , index  } = parseResult;
    const forNode = {
        type: 11 /* FOR */ ,
        loc: dir.loc,
        source,
        valueAlias: value,
        keyAlias: key,
        objectIndexAlias: index,
        parseResult,
        children: isTemplateNode(node) ? node.children : [
            node
        ]
    };
    context.replaceNode(forNode);
    // bookkeeping
    scopes.vFor++;
    const onExit = processCodegen && processCodegen(forNode);
    return ()=>{
        scopes.vFor--;
        if (onExit) onExit();
    };
}
const forAliasRE = /([\s\S]*?)\s+(?:in|of)\s+([\s\S]*)/;
// This regex doesn't cover the case if key or index aliases have destructuring,
// but those do not make sense in the first place, so this works in practice.
const forIteratorRE = /,([^,\}\]]*)(?:,([^,\}\]]*))?$/;
const stripParensRE = /^\(|\)$/g;
function parseForExpression(input, context) {
    const loc = input.loc;
    const exp = input.content;
    const inMatch = exp.match(forAliasRE);
    if (!inMatch) return;
    const [, LHS, RHS] = inMatch;
    const result = {
        source: createAliasExpression(loc, RHS.trim(), exp.indexOf(RHS, LHS.length)),
        value: undefined,
        key: undefined,
        index: undefined
    };
    validateBrowserExpression(result.source, context);
    let valueContent = LHS.trim().replace(stripParensRE, "").trim();
    const trimmedOffset = LHS.indexOf(valueContent);
    const iteratorMatch = valueContent.match(forIteratorRE);
    if (iteratorMatch) {
        valueContent = valueContent.replace(forIteratorRE, "").trim();
        const keyContent = iteratorMatch[1].trim();
        let keyOffset;
        if (keyContent) {
            keyOffset = exp.indexOf(keyContent, trimmedOffset + valueContent.length);
            result.key = createAliasExpression(loc, keyContent, keyOffset);
            validateBrowserExpression(result.key, context, true);
        }
        if (iteratorMatch[2]) {
            const indexContent = iteratorMatch[2].trim();
            if (indexContent) {
                result.index = createAliasExpression(loc, indexContent, exp.indexOf(indexContent, result.key ? keyOffset + keyContent.length : trimmedOffset + valueContent.length));
                validateBrowserExpression(result.index, context, true);
            }
        }
    }
    if (valueContent) {
        result.value = createAliasExpression(loc, valueContent, trimmedOffset);
        validateBrowserExpression(result.value, context, true);
    }
    return result;
}
function createAliasExpression(range, content, offset) {
    return createSimpleExpression(content, false, getInnerRange(range, offset, content.length));
}
function createForLoopParams({ value , key , index  }, memoArgs = []) {
    return createParamsList([
        value,
        key,
        index,
        ...memoArgs
    ]);
}
function createParamsList(args) {
    let i5 = args.length;
    while(i5--){
        if (args[i5]) break;
    }
    return args.slice(0, i5 + 1).map((arg, i)=>arg || createSimpleExpression(`_`.repeat(i + 1), false));
}
const defaultFallback = createSimpleExpression(`undefined`, false);
// A NodeTransform that:
// 1. Tracks scope identifiers for scoped slots so that they don't get prefixed
//    by transformExpression. This is only applied in non-browser builds with
//    { prefixIdentifiers: true }.
// 2. Track v-slot depths so that we know a slot is inside another slot.
//    Note the exit callback is executed before buildSlots() on the same node,
//    so only nested slots see positive numbers.
const trackSlotScopes = (node, context)=>{
    if (node.type === 1 /* ELEMENT */  && (node.tagType === 1 /* COMPONENT */  || node.tagType === 3 /* TEMPLATE */ )) {
        // We are only checking non-empty v-slot here
        // since we only care about slots that introduce scope variables.
        const vSlot = findDir(node, "slot");
        if (vSlot) {
            vSlot.exp;
            context.scopes.vSlot++;
            return ()=>{
                context.scopes.vSlot--;
            };
        }
    }
};
// A NodeTransform that tracks scope identifiers for scoped slots with v-for.
// This transform is only applied in non-browser builds with { prefixIdentifiers: true }
const trackVForSlotScopes = (node, context)=>{
    let vFor;
    if (isTemplateNode(node) && node.props.some(isVSlot) && (vFor = findDir(node, "for"))) {
        const result = vFor.parseResult = parseForExpression(vFor.exp, context);
        if (result) {
            const { value , key , index  } = result;
            const { addIdentifiers , removeIdentifiers  } = context;
            value && addIdentifiers(value);
            key && addIdentifiers(key);
            index && addIdentifiers(index);
            return ()=>{
                value && removeIdentifiers(value);
                key && removeIdentifiers(key);
                index && removeIdentifiers(index);
            };
        }
    }
};
const buildClientSlotFn = (props, children, loc)=>createFunctionExpression(props, children, false, true, children.length ? children[0].loc : loc);
// Instead of being a DirectiveTransform, v-slot processing is called during
// transformElement to build the slots object for a component.
function buildSlots(node1, context, buildSlotFn = buildClientSlotFn) {
    context.helper(WITH_CTX);
    const { children: children1 , loc  } = node1;
    const slotsProperties = [];
    const dynamicSlots = [];
    // If the slot is inside a v-for or another v-slot, force it to be dynamic
    // since it likely uses a scope variable.
    let hasDynamicSlots = context.scopes.vSlot > 0 || context.scopes.vFor > 0;
    // 1. Check for slot with slotProps on component itself.
    //    <Comp v-slot="{ prop }"/>
    const onComponentSlot = findDir(node1, "slot", true);
    if (onComponentSlot) {
        const { arg , exp  } = onComponentSlot;
        if (arg && !isStaticExp(arg)) hasDynamicSlots = true;
        slotsProperties.push(createObjectProperty(arg || createSimpleExpression("default", true), buildSlotFn(exp, children1, loc)));
    }
    // 2. Iterate through children and check for template slots
    //    <template v-slot:foo="{ prop }">
    let hasTemplateSlots = false;
    let hasNamedDefaultSlot = false;
    const implicitDefaultChildren = [];
    const seenSlotNames = new Set();
    for(let i = 0; i < children1.length; i++){
        const slotElement = children1[i];
        let slotDir;
        if (!isTemplateNode(slotElement) || !(slotDir = findDir(slotElement, "slot", true))) {
            // not a <template v-slot>, skip.
            if (slotElement.type !== 3 /* COMMENT */ ) implicitDefaultChildren.push(slotElement);
            continue;
        }
        if (onComponentSlot) {
            // already has on-component slot - this is incorrect usage.
            context.onError(createCompilerError(37 /* X_V_SLOT_MIXED_SLOT_USAGE */ , slotDir.loc));
            break;
        }
        hasTemplateSlots = true;
        const { children: slotChildren , loc: slotLoc  } = slotElement;
        const { arg: slotName = createSimpleExpression(`default`, true) , exp: slotProps , loc: dirLoc  } = slotDir;
        // check if name is dynamic.
        let staticSlotName;
        if (isStaticExp(slotName)) staticSlotName = slotName ? slotName.content : `default`;
        else hasDynamicSlots = true;
        const slotFunction = buildSlotFn(slotProps, slotChildren, slotLoc);
        // check if this slot is conditional (v-if/v-for)
        let vIf;
        let vElse;
        let vFor;
        if (vIf = findDir(slotElement, "if")) {
            hasDynamicSlots = true;
            dynamicSlots.push(createConditionalExpression(vIf.exp, buildDynamicSlot(slotName, slotFunction), defaultFallback));
        } else if (vElse = findDir(slotElement, /^else(-if)?$/, true)) {
            // find adjacent v-if
            let j = i;
            let prev;
            while(j--){
                prev = children1[j];
                if (prev.type !== 3 /* COMMENT */ ) break;
            }
            if (prev && isTemplateNode(prev) && findDir(prev, "if")) {
                // remove node
                children1.splice(i, 1);
                i--;
                // attach this slot to previous conditional
                let conditional = dynamicSlots[dynamicSlots.length - 1];
                while(conditional.alternate.type === 19 /* JS_CONDITIONAL_EXPRESSION */ )conditional = conditional.alternate;
                conditional.alternate = vElse.exp ? createConditionalExpression(vElse.exp, buildDynamicSlot(slotName, slotFunction), defaultFallback) : buildDynamicSlot(slotName, slotFunction);
            } else context.onError(createCompilerError(30 /* X_V_ELSE_NO_ADJACENT_IF */ , vElse.loc));
        } else if (vFor = findDir(slotElement, "for")) {
            hasDynamicSlots = true;
            const parseResult = vFor.parseResult || parseForExpression(vFor.exp, context);
            if (parseResult) // Render the dynamic slots as an array and add it to the createSlot()
            // args. The runtime knows how to handle it appropriately.
            dynamicSlots.push(createCallExpression(context.helper(RENDER_LIST), [
                parseResult.source,
                createFunctionExpression(createForLoopParams(parseResult), buildDynamicSlot(slotName, slotFunction), true)
            ]));
            else context.onError(createCompilerError(32 /* X_V_FOR_MALFORMED_EXPRESSION */ , vFor.loc));
        } else {
            // check duplicate static names
            if (staticSlotName) {
                if (seenSlotNames.has(staticSlotName)) {
                    context.onError(createCompilerError(38 /* X_V_SLOT_DUPLICATE_SLOT_NAMES */ , dirLoc));
                    continue;
                }
                seenSlotNames.add(staticSlotName);
                if (staticSlotName === "default") hasNamedDefaultSlot = true;
            }
            slotsProperties.push(createObjectProperty(slotName, slotFunction));
        }
    }
    if (!onComponentSlot) {
        const buildDefaultSlotProperty = (props, children)=>{
            const fn = buildSlotFn(props, children, loc);
            if (context.compatConfig) fn.isNonScopedSlot = true;
            return createObjectProperty(`default`, fn);
        };
        if (!hasTemplateSlots) // implicit default slot (on component)
        slotsProperties.push(buildDefaultSlotProperty(undefined, children1));
        else if (implicitDefaultChildren.length && // #3766
        // with whitespace: 'preserve', whitespaces between slots will end up in
        // implicitDefaultChildren. Ignore if all implicit children are whitespaces.
        implicitDefaultChildren.some((node)=>isNonWhitespaceContent(node))) {
            // implicit default slot (mixed with named slots)
            if (hasNamedDefaultSlot) context.onError(createCompilerError(39 /* X_V_SLOT_EXTRANEOUS_DEFAULT_SLOT_CHILDREN */ , implicitDefaultChildren[0].loc));
            else slotsProperties.push(buildDefaultSlotProperty(undefined, implicitDefaultChildren));
        }
    }
    const slotFlag = hasDynamicSlots ? 2 /* DYNAMIC */  : hasForwardedSlots(node1.children) ? 3 /* FORWARDED */  : 1 /* STABLE */ ;
    let slots = createObjectExpression(slotsProperties.concat(createObjectProperty(`_`, // 2 = compiled but dynamic = can skip normalization, but must run diff
    // 1 = compiled and static = can skip normalization AND diff as optimized
    createSimpleExpression(slotFlag + ` /* ${(0, _shared.slotFlagsText)[slotFlag]} */`, false))), loc);
    if (dynamicSlots.length) slots = createCallExpression(context.helper(CREATE_SLOTS), [
        slots,
        createArrayExpression(dynamicSlots)
    ]);
    return {
        slots,
        hasDynamicSlots
    };
}
function buildDynamicSlot(name, fn) {
    return createObjectExpression([
        createObjectProperty(`name`, name),
        createObjectProperty(`fn`, fn)
    ]);
}
function hasForwardedSlots(children) {
    for(let i = 0; i < children.length; i++){
        const child = children[i];
        switch(child.type){
            case 1 /* ELEMENT */ :
                if (child.tagType === 2 /* SLOT */  || hasForwardedSlots(child.children)) return true;
                break;
            case 9 /* IF */ :
                if (hasForwardedSlots(child.branches)) return true;
                break;
            case 10 /* IF_BRANCH */ :
            case 11 /* FOR */ :
                if (hasForwardedSlots(child.children)) return true;
                break;
        }
    }
    return false;
}
function isNonWhitespaceContent(node) {
    if (node.type !== 2 /* TEXT */  && node.type !== 12 /* TEXT_CALL */ ) return true;
    return node.type === 2 /* TEXT */  ? !!node.content.trim() : isNonWhitespaceContent(node.content);
}
// some directive transforms (e.g. v-model) may return a symbol for runtime
// import, which should be used instead of a resolveDirective call.
const directiveImportMap = new WeakMap();
// generate a JavaScript AST for this element's codegen
const transformElement = (node, context)=>{
    // perform the work on exit, after all child expressions have been
    // processed and merged.
    return function postTransformElement() {
        node = context.currentNode;
        if (!(node.type === 1 /* ELEMENT */  && (node.tagType === 0 /* ELEMENT */  || node.tagType === 1 /* COMPONENT */ ))) return;
        const { tag , props  } = node;
        const isComponent6 = node.tagType === 1 /* COMPONENT */ ;
        // The goal of the transform is to create a codegenNode implementing the
        // VNodeCall interface.
        let vnodeTag = isComponent6 ? resolveComponentType(node, context) : `"${tag}"`;
        const isDynamicComponent = (0, _shared.isObject)(vnodeTag) && vnodeTag.callee === RESOLVE_DYNAMIC_COMPONENT;
        let vnodeProps;
        let vnodeChildren;
        let vnodePatchFlag;
        let patchFlag = 0;
        let vnodeDynamicProps;
        let dynamicPropNames;
        let vnodeDirectives;
        let shouldUseBlock = // dynamic component may resolve to plain elements
        isDynamicComponent || vnodeTag === TELEPORT || vnodeTag === SUSPENSE || !isComponent6 && (tag === "svg" || tag === "foreignObject" || // #938: elements with dynamic keys should be forced into blocks
        findProp(node, "key", true));
        // props
        if (props.length > 0) {
            const propsBuildResult = buildProps(node, context);
            vnodeProps = propsBuildResult.props;
            patchFlag = propsBuildResult.patchFlag;
            dynamicPropNames = propsBuildResult.dynamicPropNames;
            const directives = propsBuildResult.directives;
            vnodeDirectives = directives && directives.length ? createArrayExpression(directives.map((dir)=>buildDirectiveArgs(dir, context))) : undefined;
        }
        // children
        if (node.children.length > 0) {
            if (vnodeTag === KEEP_ALIVE) {
                // Although a built-in component, we compile KeepAlive with raw children
                // instead of slot functions so that it can be used inside Transition
                // or other Transition-wrapping HOCs.
                // To ensure correct updates with block optimizations, we need to:
                // 1. Force keep-alive into a block. This avoids its children being
                //    collected by a parent block.
                shouldUseBlock = true;
                // 2. Force keep-alive to always be updated, since it uses raw children.
                patchFlag |= 1024 /* DYNAMIC_SLOTS */ ;
                if (node.children.length > 1) context.onError(createCompilerError(45 /* X_KEEP_ALIVE_INVALID_CHILDREN */ , {
                    start: node.children[0].loc.start,
                    end: node.children[node.children.length - 1].loc.end,
                    source: ""
                }));
            }
            const shouldBuildAsSlots = isComponent6 && // Teleport is not a real component and has dedicated runtime handling
            vnodeTag !== TELEPORT && // explained above.
            vnodeTag !== KEEP_ALIVE;
            if (shouldBuildAsSlots) {
                const { slots , hasDynamicSlots  } = buildSlots(node, context);
                vnodeChildren = slots;
                if (hasDynamicSlots) patchFlag |= 1024 /* DYNAMIC_SLOTS */ ;
            } else if (node.children.length === 1 && vnodeTag !== TELEPORT) {
                const child = node.children[0];
                const type = child.type;
                // check for dynamic text children
                const hasDynamicTextChild = type === 5 /* INTERPOLATION */  || type === 8 /* COMPOUND_EXPRESSION */ ;
                if (hasDynamicTextChild && getConstantType(child, context) === 0 /* NOT_CONSTANT */ ) patchFlag |= 1 /* TEXT */ ;
                // pass directly if the only child is a text node
                // (plain / interpolation / expression)
                if (hasDynamicTextChild || type === 2 /* TEXT */ ) vnodeChildren = child;
                else vnodeChildren = node.children;
            } else vnodeChildren = node.children;
        }
        // patchFlag & dynamicPropNames
        if (patchFlag !== 0) {
            {
                if (patchFlag < 0) // special flags (negative and mutually exclusive)
                vnodePatchFlag = patchFlag + ` /* ${(0, _shared.PatchFlagNames)[patchFlag]} */`;
                else {
                    // bitwise flags
                    const flagNames = Object.keys((0, _shared.PatchFlagNames)).map(Number).filter((n)=>n > 0 && patchFlag & n).map((n)=>(0, _shared.PatchFlagNames)[n]).join(`, `);
                    vnodePatchFlag = patchFlag + ` /* ${flagNames} */`;
                }
            }
            if (dynamicPropNames && dynamicPropNames.length) vnodeDynamicProps = stringifyDynamicPropNames(dynamicPropNames);
        }
        node.codegenNode = createVNodeCall(context, vnodeTag, vnodeProps, vnodeChildren, vnodePatchFlag, vnodeDynamicProps, vnodeDirectives, !!shouldUseBlock, false, isComponent6, node.loc);
    };
};
function resolveComponentType(node, context, ssr = false) {
    let { tag  } = node;
    // 1. dynamic component
    const isExplicitDynamic = isComponentTag(tag);
    const isProp = findProp(node, "is");
    if (isProp) {
        if (isExplicitDynamic || isCompatEnabled("COMPILER_IS_ON_ELEMENT" /* COMPILER_IS_ON_ELEMENT */ , context)) {
            const exp = isProp.type === 6 /* ATTRIBUTE */  ? isProp.value && createSimpleExpression(isProp.value.content, true) : isProp.exp;
            if (exp) return createCallExpression(context.helper(RESOLVE_DYNAMIC_COMPONENT), [
                exp
            ]);
        } else if (isProp.type === 6 /* ATTRIBUTE */  && isProp.value.content.startsWith("vue:")) // <button is="vue:xxx">
        // if not <component>, only is value that starts with "vue:" will be
        // treated as component by the parse phase and reach here, unless it's
        // compat mode where all is values are considered components
        tag = isProp.value.content.slice(4);
    }
    // 1.5 v-is (TODO: Deprecate)
    const isDir = !isExplicitDynamic && findDir(node, "is");
    if (isDir && isDir.exp) return createCallExpression(context.helper(RESOLVE_DYNAMIC_COMPONENT), [
        isDir.exp
    ]);
    // 2. built-in components (Teleport, Transition, KeepAlive, Suspense...)
    const builtIn = isCoreComponent(tag) || context.isBuiltInComponent(tag);
    if (builtIn) {
        // built-ins are simply fallthroughs / have special handling during ssr
        // so we don't need to import their runtime equivalents
        if (!ssr) context.helper(builtIn);
        return builtIn;
    }
    // 5. user component (resolve)
    context.helper(RESOLVE_COMPONENT);
    context.components.add(tag);
    return toValidAssetId(tag, `component`);
}
function buildProps(node, context, props = node.props, ssr = false) {
    const { tag , loc: elementLoc  } = node;
    const isComponent7 = node.tagType === 1 /* COMPONENT */ ;
    let properties = [];
    const mergeArgs = [];
    const runtimeDirectives = [];
    // patchFlag analysis
    let patchFlag = 0;
    let hasRef = false;
    let hasClassBinding = false;
    let hasStyleBinding = false;
    let hasHydrationEventBinding = false;
    let hasDynamicKeys = false;
    let hasVnodeHook = false;
    const dynamicPropNames = [];
    const analyzePatchFlag = ({ key , value  })=>{
        if (isStaticExp(key)) {
            const name = key.content;
            const isEventHandler = (0, _shared.isOn)(name);
            if (!isComponent7 && isEventHandler && // omit the flag for click handlers because hydration gives click
            // dedicated fast path.
            name.toLowerCase() !== "onclick" && // omit v-model handlers
            name !== "onUpdate:modelValue" && // omit onVnodeXXX hooks
            !(0, _shared.isReservedProp)(name)) hasHydrationEventBinding = true;
            if (isEventHandler && (0, _shared.isReservedProp)(name)) hasVnodeHook = true;
            if (value.type === 20 /* JS_CACHE_EXPRESSION */  || (value.type === 4 /* SIMPLE_EXPRESSION */  || value.type === 8 /* COMPOUND_EXPRESSION */ ) && getConstantType(value, context) > 0) // skip if the prop is a cached handler or has constant value
            return;
            if (name === "ref") hasRef = true;
            else if (name === "class") hasClassBinding = true;
            else if (name === "style") hasStyleBinding = true;
            else if (name !== "key" && !dynamicPropNames.includes(name)) dynamicPropNames.push(name);
            // treat the dynamic class and style binding of the component as dynamic props
            if (isComponent7 && (name === "class" || name === "style") && !dynamicPropNames.includes(name)) dynamicPropNames.push(name);
        } else hasDynamicKeys = true;
    };
    for(let i = 0; i < props.length; i++){
        // static attribute
        const prop = props[i];
        if (prop.type === 6 /* ATTRIBUTE */ ) {
            const { loc , name , value  } = prop;
            let valueNode = createSimpleExpression(value ? value.content : "", true, value ? value.loc : loc);
            if (name === "ref") hasRef = true;
            // skip is on <component>, or is="vue:xxx"
            if (name === "is" && (isComponentTag(tag) || value && value.content.startsWith("vue:") || isCompatEnabled("COMPILER_IS_ON_ELEMENT" /* COMPILER_IS_ON_ELEMENT */ , context))) continue;
            properties.push(createObjectProperty(createSimpleExpression(name, true, getInnerRange(loc, 0, name.length)), valueNode));
        } else {
            // directives
            const { name , arg: arg1 , exp , loc  } = prop;
            const isVBind = name === "bind";
            const isVOn = name === "on";
            // skip v-slot - it is handled by its dedicated transform.
            if (name === "slot") {
                if (!isComponent7) context.onError(createCompilerError(40 /* X_V_SLOT_MISPLACED */ , loc));
                continue;
            }
            // skip v-once/v-memo - they are handled by dedicated transforms.
            if (name === "once" || name === "memo") continue;
            // skip v-is and :is on <component>
            if (name === "is" || isVBind && isBindKey(arg1, "is") && (isComponentTag(tag) || isCompatEnabled("COMPILER_IS_ON_ELEMENT" /* COMPILER_IS_ON_ELEMENT */ , context))) continue;
            // skip v-on in SSR compilation
            if (isVOn && ssr) continue;
            // special case for v-bind and v-on with no argument
            if (!arg1 && (isVBind || isVOn)) {
                hasDynamicKeys = true;
                if (exp) {
                    if (properties.length) {
                        mergeArgs.push(createObjectExpression(dedupeProperties(properties), elementLoc));
                        properties = [];
                    }
                    if (isVBind) {
                        {
                            const hasOverridableKeys = mergeArgs.some((arg)=>{
                                if (arg.type === 15 /* JS_OBJECT_EXPRESSION */ ) return arg.properties.some(({ key  })=>{
                                    if (key.type !== 4 /* SIMPLE_EXPRESSION */  || !key.isStatic) return true;
                                    return key.content !== "class" && key.content !== "style" && !(0, _shared.isOn)(key.content);
                                });
                                else // dynamic expression
                                return true;
                            });
                            if (hasOverridableKeys) checkCompatEnabled("COMPILER_V_BIND_OBJECT_ORDER" /* COMPILER_V_BIND_OBJECT_ORDER */ , context, loc);
                        }
                        if (isCompatEnabled("COMPILER_V_BIND_OBJECT_ORDER" /* COMPILER_V_BIND_OBJECT_ORDER */ , context)) {
                            mergeArgs.unshift(exp);
                            continue;
                        }
                        mergeArgs.push(exp);
                    } else // v-on="obj" -> toHandlers(obj)
                    mergeArgs.push({
                        type: 14 /* JS_CALL_EXPRESSION */ ,
                        loc,
                        callee: context.helper(TO_HANDLERS),
                        arguments: [
                            exp
                        ]
                    });
                } else context.onError(createCompilerError(isVBind ? 34 /* X_V_BIND_NO_EXPRESSION */  : 35 /* X_V_ON_NO_EXPRESSION */ , loc));
                continue;
            }
            const directiveTransform = context.directiveTransforms[name];
            if (directiveTransform) {
                // has built-in directive transform.
                const { props , needRuntime  } = directiveTransform(prop, node, context);
                !ssr && props.forEach(analyzePatchFlag);
                properties.push(...props);
                if (needRuntime) {
                    runtimeDirectives.push(prop);
                    if ((0, _shared.isSymbol)(needRuntime)) directiveImportMap.set(prop, needRuntime);
                }
            } else // no built-in transform, this is a user custom directive.
            runtimeDirectives.push(prop);
        }
        if (prop.type === 6 /* ATTRIBUTE */  && prop.name === "ref" && context.scopes.vFor > 0 && checkCompatEnabled("COMPILER_V_FOR_REF" /* COMPILER_V_FOR_REF */ , context, prop.loc)) properties.push(createObjectProperty(createSimpleExpression("refInFor", true), createSimpleExpression("true", false)));
    }
    let propsExpression = undefined;
    // has v-bind="object" or v-on="object", wrap with mergeProps
    if (mergeArgs.length) {
        if (properties.length) mergeArgs.push(createObjectExpression(dedupeProperties(properties), elementLoc));
        if (mergeArgs.length > 1) propsExpression = createCallExpression(context.helper(MERGE_PROPS), mergeArgs, elementLoc);
        else // single v-bind with nothing else - no need for a mergeProps call
        propsExpression = mergeArgs[0];
    } else if (properties.length) propsExpression = createObjectExpression(dedupeProperties(properties), elementLoc);
    // patchFlag analysis
    if (hasDynamicKeys) patchFlag |= 16 /* FULL_PROPS */ ;
    else {
        if (hasClassBinding && !isComponent7) patchFlag |= 2 /* CLASS */ ;
        if (hasStyleBinding && !isComponent7) patchFlag |= 4 /* STYLE */ ;
        if (dynamicPropNames.length) patchFlag |= 8 /* PROPS */ ;
        if (hasHydrationEventBinding) patchFlag |= 32 /* HYDRATE_EVENTS */ ;
    }
    if ((patchFlag === 0 || patchFlag === 32 /* HYDRATE_EVENTS */ ) && (hasRef || hasVnodeHook || runtimeDirectives.length > 0)) patchFlag |= 512 /* NEED_PATCH */ ;
    // pre-normalize props, SSR is skipped for now
    if (!context.inSSR && propsExpression) switch(propsExpression.type){
        case 15 /* JS_OBJECT_EXPRESSION */ :
            // means that there is no v-bind,
            // but still need to deal with dynamic key binding
            let classKeyIndex = -1;
            let styleKeyIndex = -1;
            let hasDynamicKey = false;
            for(let i6 = 0; i6 < propsExpression.properties.length; i6++){
                const key = propsExpression.properties[i6].key;
                if (isStaticExp(key)) {
                    if (key.content === "class") classKeyIndex = i6;
                    else if (key.content === "style") styleKeyIndex = i6;
                } else if (!key.isHandlerKey) hasDynamicKey = true;
            }
            const classProp = propsExpression.properties[classKeyIndex];
            const styleProp = propsExpression.properties[styleKeyIndex];
            // no dynamic key
            if (!hasDynamicKey) {
                if (classProp && !isStaticExp(classProp.value)) classProp.value = createCallExpression(context.helper(NORMALIZE_CLASS), [
                    classProp.value
                ]);
                if (styleProp && !isStaticExp(styleProp.value) && (hasStyleBinding || // v-bind:style and style both exist,
                // v-bind:style with static literal object
                styleProp.value.type === 17 /* JS_ARRAY_EXPRESSION */ )) styleProp.value = createCallExpression(context.helper(NORMALIZE_STYLE), [
                    styleProp.value
                ]);
            } else // dynamic key binding, wrap with `normalizeProps`
            propsExpression = createCallExpression(context.helper(NORMALIZE_PROPS), [
                propsExpression
            ]);
            break;
        case 14 /* JS_CALL_EXPRESSION */ :
            break;
        default:
            // single v-bind
            propsExpression = createCallExpression(context.helper(NORMALIZE_PROPS), [
                createCallExpression(context.helper(GUARD_REACTIVE_PROPS), [
                    propsExpression
                ])
            ]);
            break;
    }
    return {
        props: propsExpression,
        directives: runtimeDirectives,
        patchFlag,
        dynamicPropNames
    };
}
// Dedupe props in an object literal.
// Literal duplicated attributes would have been warned during the parse phase,
// however, it's possible to encounter duplicated `onXXX` handlers with different
// modifiers. We also need to merge static and dynamic class / style attributes.
// - onXXX handlers / style: merge into array
// - class: merge into single expression with concatenation
function dedupeProperties(properties) {
    const knownProps = new Map();
    const deduped = [];
    for(let i = 0; i < properties.length; i++){
        const prop = properties[i];
        // dynamic keys are always allowed
        if (prop.key.type === 8 /* COMPOUND_EXPRESSION */  || !prop.key.isStatic) {
            deduped.push(prop);
            continue;
        }
        const name = prop.key.content;
        const existing = knownProps.get(name);
        if (existing) {
            if (name === "style" || name === "class" || name.startsWith("on")) mergeAsArray(existing, prop);
        } else {
            knownProps.set(name, prop);
            deduped.push(prop);
        }
    }
    return deduped;
}
function mergeAsArray(existing, incoming) {
    if (existing.value.type === 17 /* JS_ARRAY_EXPRESSION */ ) existing.value.elements.push(incoming.value);
    else existing.value = createArrayExpression([
        existing.value,
        incoming.value
    ], existing.loc);
}
function buildDirectiveArgs(dir, context) {
    const dirArgs = [];
    const runtime = directiveImportMap.get(dir);
    if (runtime) // built-in directive with runtime
    dirArgs.push(context.helperString(runtime));
    else {
        // inject statement for resolving directive
        context.helper(RESOLVE_DIRECTIVE);
        context.directives.add(dir.name);
        dirArgs.push(toValidAssetId(dir.name, `directive`));
    }
    const { loc  } = dir;
    if (dir.exp) dirArgs.push(dir.exp);
    if (dir.arg) {
        if (!dir.exp) dirArgs.push(`void 0`);
        dirArgs.push(dir.arg);
    }
    if (Object.keys(dir.modifiers).length) {
        if (!dir.arg) {
            if (!dir.exp) dirArgs.push(`void 0`);
            dirArgs.push(`void 0`);
        }
        const trueExpression = createSimpleExpression(`true`, false, loc);
        dirArgs.push(createObjectExpression(dir.modifiers.map((modifier)=>createObjectProperty(modifier, trueExpression)), loc));
    }
    return createArrayExpression(dirArgs, dir.loc);
}
function stringifyDynamicPropNames(props) {
    let propsNamesString = `[`;
    for(let i = 0, l = props.length; i < l; i++){
        propsNamesString += JSON.stringify(props[i]);
        if (i < l - 1) propsNamesString += ", ";
    }
    return propsNamesString + `]`;
}
function isComponentTag(tag) {
    return tag[0].toLowerCase() + tag.slice(1) === "component";
}
Object.freeze({});
Object.freeze([]);
const cacheStringFunction = (fn)=>{
    const cache = Object.create(null);
    return (str)=>{
        const hit = cache[str];
        return hit || (cache[str] = fn(str));
    };
};
const camelizeRE = /-(\w)/g;
/**
 * @private
 */ const camelize = cacheStringFunction((str)=>{
    return str.replace(camelizeRE, (_, c)=>c ? c.toUpperCase() : "");
});
const transformSlotOutlet = (node, context)=>{
    if (isSlotOutlet(node)) {
        const { children , loc  } = node;
        const { slotName , slotProps  } = processSlotOutlet(node, context);
        const slotArgs = [
            context.prefixIdentifiers ? `_ctx.$slots` : `$slots`,
            slotName
        ];
        if (slotProps) slotArgs.push(slotProps);
        if (children.length) {
            if (!slotProps) slotArgs.push(`{}`);
            slotArgs.push(createFunctionExpression([], children, false, false, loc));
        }
        if (context.scopeId && !context.slotted) {
            if (!slotProps) slotArgs.push(`{}`);
            if (!children.length) slotArgs.push(`undefined`);
            slotArgs.push(`true`);
        }
        node.codegenNode = createCallExpression(context.helper(RENDER_SLOT), slotArgs, loc);
    }
};
function processSlotOutlet(node, context) {
    let slotName = `"default"`;
    let slotProps = undefined;
    const nonNameProps = [];
    for(let i = 0; i < node.props.length; i++){
        const p = node.props[i];
        if (p.type === 6 /* ATTRIBUTE */ ) {
            if (p.value) {
                if (p.name === "name") slotName = JSON.stringify(p.value.content);
                else {
                    p.name = camelize(p.name);
                    nonNameProps.push(p);
                }
            }
        } else {
            if (p.name === "bind" && isBindKey(p.arg, "name")) {
                if (p.exp) slotName = p.exp;
            } else {
                if (p.name === "bind" && p.arg && isStaticExp(p.arg)) p.arg.content = camelize(p.arg.content);
                nonNameProps.push(p);
            }
        }
    }
    if (nonNameProps.length > 0) {
        const { props , directives  } = buildProps(node, context, nonNameProps);
        slotProps = props;
        if (directives.length) context.onError(createCompilerError(36 /* X_V_SLOT_UNEXPECTED_DIRECTIVE_ON_SLOT_OUTLET */ , directives[0].loc));
    }
    return {
        slotName,
        slotProps
    };
}
const fnExpRE = /^\s*([\w$_]+|\([^)]*?\))\s*=>|^\s*function(?:\s+[\w$]+)?\s*\(/;
const transformOn = (dir, node, context, augmentor)=>{
    const { loc , modifiers , arg  } = dir;
    if (!dir.exp && !modifiers.length) context.onError(createCompilerError(35 /* X_V_ON_NO_EXPRESSION */ , loc));
    let eventName;
    if (arg.type === 4 /* SIMPLE_EXPRESSION */ ) {
        if (arg.isStatic) {
            const rawName = arg.content;
            // for all event listeners, auto convert it to camelCase. See issue #2249
            eventName = createSimpleExpression((0, _shared.toHandlerKey)((0, _shared.camelize)(rawName)), true, arg.loc);
        } else // #2388
        eventName = createCompoundExpression([
            `${context.helperString(TO_HANDLER_KEY)}(`,
            arg,
            `)`
        ]);
    } else {
        // already a compound expression.
        eventName = arg;
        eventName.children.unshift(`${context.helperString(TO_HANDLER_KEY)}(`);
        eventName.children.push(`)`);
    }
    // handler processing
    let exp = dir.exp;
    if (exp && !exp.content.trim()) exp = undefined;
    let shouldCache = context.cacheHandlers && !exp && !context.inVOnce;
    if (exp) {
        const isMemberExp = isMemberExpression(exp.content);
        const isInlineStatement = !(isMemberExp || fnExpRE.test(exp.content));
        const hasMultipleStatements = exp.content.includes(`;`);
        validateBrowserExpression(exp, context, false, hasMultipleStatements);
        if (isInlineStatement || shouldCache && isMemberExp) // wrap inline statement in a function expression
        exp = createCompoundExpression([
            `${isInlineStatement ? `$event` : `${``}(...args)`} => ${hasMultipleStatements ? `{` : `(`}`,
            exp,
            hasMultipleStatements ? `}` : `)`
        ]);
    }
    let ret = {
        props: [
            createObjectProperty(eventName, exp || createSimpleExpression(`() => {}`, false, loc))
        ]
    };
    // apply extended compiler augmentor
    if (augmentor) ret = augmentor(ret);
    if (shouldCache) // cache handlers so that it's always the same handler being passed down.
    // this avoids unnecessary re-renders when users use inline handlers on
    // components.
    ret.props[0].value = context.cache(ret.props[0].value);
    // mark the key as handler for props normalization check
    ret.props.forEach((p)=>p.key.isHandlerKey = true);
    return ret;
};
// v-bind without arg is handled directly in ./transformElements.ts due to it affecting
// codegen for the entire props object. This transform here is only for v-bind
// *with* args.
const transformBind = (dir, _node, context)=>{
    const { exp , modifiers , loc  } = dir;
    const arg = dir.arg;
    if (arg.type !== 4 /* SIMPLE_EXPRESSION */ ) {
        arg.children.unshift(`(`);
        arg.children.push(`) || ""`);
    } else if (!arg.isStatic) arg.content = `${arg.content} || ""`;
    // .sync is replaced by v-model:arg
    if (modifiers.includes("camel")) {
        if (arg.type === 4 /* SIMPLE_EXPRESSION */ ) {
            if (arg.isStatic) arg.content = (0, _shared.camelize)(arg.content);
            else arg.content = `${context.helperString(CAMELIZE)}(${arg.content})`;
        } else {
            arg.children.unshift(`${context.helperString(CAMELIZE)}(`);
            arg.children.push(`)`);
        }
    }
    if (!context.inSSR) {
        if (modifiers.includes("prop")) injectPrefix(arg, ".");
        if (modifiers.includes("attr")) injectPrefix(arg, "^");
    }
    if (!exp || exp.type === 4 /* SIMPLE_EXPRESSION */  && !exp.content.trim()) {
        context.onError(createCompilerError(34 /* X_V_BIND_NO_EXPRESSION */ , loc));
        return {
            props: [
                createObjectProperty(arg, createSimpleExpression("", true, loc))
            ]
        };
    }
    return {
        props: [
            createObjectProperty(arg, exp)
        ]
    };
};
const injectPrefix = (arg, prefix)=>{
    if (arg.type === 4 /* SIMPLE_EXPRESSION */ ) {
        if (arg.isStatic) arg.content = prefix + arg.content;
        else arg.content = `\`${prefix}\${${arg.content}}\``;
    } else {
        arg.children.unshift(`'${prefix}' + (`);
        arg.children.push(`)`);
    }
};
// Merge adjacent text nodes and expressions into a single expression
// e.g. <div>abc {{ d }} {{ e }}</div> should have a single expression node as child.
const transformText = (node, context)=>{
    if (node.type === 0 /* ROOT */  || node.type === 1 /* ELEMENT */  || node.type === 11 /* FOR */  || node.type === 10 /* IF_BRANCH */ ) // perform the transform on node exit so that all expressions have already
    // been processed.
    return ()=>{
        const children = node.children;
        let currentContainer = undefined;
        let hasText = false;
        for(let i = 0; i < children.length; i++){
            const child = children[i];
            if (isText(child)) {
                hasText = true;
                for(let j = i + 1; j < children.length; j++){
                    const next = children[j];
                    if (isText(next)) {
                        if (!currentContainer) currentContainer = children[i] = {
                            type: 8 /* COMPOUND_EXPRESSION */ ,
                            loc: child.loc,
                            children: [
                                child
                            ]
                        };
                        // merge adjacent text node into current
                        currentContainer.children.push(` + `, next);
                        children.splice(j, 1);
                        j--;
                    } else {
                        currentContainer = undefined;
                        break;
                    }
                }
            }
        }
        if (!hasText || children.length === 1 && (node.type === 0 /* ROOT */  || node.type === 1 /* ELEMENT */  && node.tagType === 0 /* ELEMENT */  && // #3756
        // custom directives can potentially add DOM elements arbitrarily,
        // we need to avoid setting textContent of the element at runtime
        // to avoid accidentally overwriting the DOM elements added
        // by the user through custom directives.
        !node.props.find((p)=>p.type === 7 /* DIRECTIVE */  && !context.directiveTransforms[p.name]) && // in compat mode, <template> tags with no special directives
        // will be rendered as a fragment so its children must be
        // converted into vnodes.
        !(node.tag === "template"))) return;
        // pre-convert text nodes into createTextVNode(text) calls to avoid
        // runtime normalization.
        for(let i7 = 0; i7 < children.length; i7++){
            const child = children[i7];
            if (isText(child) || child.type === 8 /* COMPOUND_EXPRESSION */ ) {
                const callArgs = [];
                // createTextVNode defaults to single whitespace, so if it is a
                // single space the code could be an empty call to save bytes.
                if (child.type !== 2 /* TEXT */  || child.content !== " ") callArgs.push(child);
                // mark dynamic text with flag so it gets patched inside a block
                if (!context.ssr && getConstantType(child, context) === 0 /* NOT_CONSTANT */ ) callArgs.push(1 /* TEXT */  + ` /* ${(0, _shared.PatchFlagNames)[1 /* TEXT */ ]} */`);
                children[i7] = {
                    type: 12 /* TEXT_CALL */ ,
                    content: child,
                    loc: child.loc,
                    codegenNode: createCallExpression(context.helper(CREATE_TEXT), callArgs)
                };
            }
        }
    };
};
const seen = new WeakSet();
const transformOnce = (node, context)=>{
    if (node.type === 1 /* ELEMENT */  && findDir(node, "once", true)) {
        if (seen.has(node) || context.inVOnce) return;
        seen.add(node);
        context.inVOnce = true;
        context.helper(SET_BLOCK_TRACKING);
        return ()=>{
            context.inVOnce = false;
            const cur = context.currentNode;
            if (cur.codegenNode) cur.codegenNode = context.cache(cur.codegenNode, true);
        };
    }
};
const transformModel = (dir, node, context)=>{
    const { exp , arg  } = dir;
    if (!exp) {
        context.onError(createCompilerError(41 /* X_V_MODEL_NO_EXPRESSION */ , dir.loc));
        return createTransformProps();
    }
    const rawExp = exp.loc.source;
    const expString = exp.type === 4 /* SIMPLE_EXPRESSION */  ? exp.content : rawExp;
    // im SFC <script setup> inline mode, the exp may have been transformed into
    // _unref(exp)
    context.bindingMetadata[rawExp];
    const maybeRef = false /* SETUP_CONST */ ;
    if (!expString.trim() || !isMemberExpression(expString) && !maybeRef) {
        context.onError(createCompilerError(42 /* X_V_MODEL_MALFORMED_EXPRESSION */ , exp.loc));
        return createTransformProps();
    }
    const propName = arg ? arg : createSimpleExpression("modelValue", true);
    const eventName = arg ? isStaticExp(arg) ? `onUpdate:${arg.content}` : createCompoundExpression([
        '"onUpdate:" + ',
        arg
    ]) : `onUpdate:modelValue`;
    let assignmentExp;
    const eventArg = context.isTS ? `($event: any)` : `$event`;
    assignmentExp = createCompoundExpression([
        `${eventArg} => (`,
        exp,
        ` = $event)`
    ]);
    const props = [
        // modelValue: foo
        createObjectProperty(propName, dir.exp),
        // "onUpdate:modelValue": $event => (foo = $event)
        createObjectProperty(eventName, assignmentExp)
    ];
    // modelModifiers: { foo: true, "bar-baz": true }
    if (dir.modifiers.length && node.tagType === 1 /* COMPONENT */ ) {
        const modifiers = dir.modifiers.map((m)=>(isSimpleIdentifier(m) ? m : JSON.stringify(m)) + `: true`).join(`, `);
        const modifiersKey = arg ? isStaticExp(arg) ? `${arg.content}Modifiers` : createCompoundExpression([
            arg,
            ' + "Modifiers"'
        ]) : `modelModifiers`;
        props.push(createObjectProperty(modifiersKey, createSimpleExpression(`{ ${modifiers} }`, false, dir.loc, 2 /* CAN_HOIST */ )));
    }
    return createTransformProps(props);
};
function createTransformProps(props = []) {
    return {
        props
    };
}
const validDivisionCharRE = /[\w).+\-_$\]]/;
const transformFilter = (node, context)=>{
    if (!isCompatEnabled("COMPILER_FILTER" /* COMPILER_FILTERS */ , context)) return;
    if (node.type === 5 /* INTERPOLATION */ ) // filter rewrite is applied before expression transform so only
    // simple expressions are possible at this stage
    rewriteFilter(node.content, context);
    if (node.type === 1 /* ELEMENT */ ) node.props.forEach((prop)=>{
        if (prop.type === 7 /* DIRECTIVE */  && prop.name !== "for" && prop.exp) rewriteFilter(prop.exp, context);
    });
};
function rewriteFilter(node, context) {
    if (node.type === 4 /* SIMPLE_EXPRESSION */ ) parseFilter(node, context);
    else for(let i = 0; i < node.children.length; i++){
        const child = node.children[i];
        if (typeof child !== "object") continue;
        if (child.type === 4 /* SIMPLE_EXPRESSION */ ) parseFilter(child, context);
        else if (child.type === 8 /* COMPOUND_EXPRESSION */ ) rewriteFilter(node, context);
        else if (child.type === 5 /* INTERPOLATION */ ) rewriteFilter(child.content, context);
    }
}
function parseFilter(node, context) {
    const exp = node.content;
    let inSingle = false;
    let inDouble = false;
    let inTemplateString = false;
    let inRegex = false;
    let curly = 0;
    let square = 0;
    let paren = 0;
    let lastFilterIndex = 0;
    let c, prev, i, expression, filters = [];
    for(i = 0; i < exp.length; i++){
        prev = c;
        c = exp.charCodeAt(i);
        if (inSingle) {
            if (c === 0x27 && prev !== 0x5c) inSingle = false;
        } else if (inDouble) {
            if (c === 0x22 && prev !== 0x5c) inDouble = false;
        } else if (inTemplateString) {
            if (c === 0x60 && prev !== 0x5c) inTemplateString = false;
        } else if (inRegex) {
            if (c === 0x2f && prev !== 0x5c) inRegex = false;
        } else if (c === 0x7c && exp.charCodeAt(i + 1) !== 0x7c && exp.charCodeAt(i - 1) !== 0x7c && !curly && !square && !paren) {
            if (expression === undefined) {
                // first filter, end of expression
                lastFilterIndex = i + 1;
                expression = exp.slice(0, i).trim();
            } else pushFilter();
        } else {
            switch(c){
                case 0x22:
                    inDouble = true;
                    break; // "
                case 0x27:
                    inSingle = true;
                    break; // '
                case 0x60:
                    inTemplateString = true;
                    break; // `
                case 0x28:
                    paren++;
                    break; // (
                case 0x29:
                    paren--;
                    break; // )
                case 0x5b:
                    square++;
                    break; // [
                case 0x5d:
                    square--;
                    break; // ]
                case 0x7b:
                    curly++;
                    break; // {
                case 0x7d:
                    curly--;
                    break; // }
            }
            if (c === 0x2f) {
                // /
                let j = i - 1;
                let p;
                // find first non-whitespace prev char
                for(; j >= 0; j--){
                    p = exp.charAt(j);
                    if (p !== " ") break;
                }
                if (!p || !validDivisionCharRE.test(p)) inRegex = true;
            }
        }
    }
    if (expression === undefined) expression = exp.slice(0, i).trim();
    else if (lastFilterIndex !== 0) pushFilter();
    function pushFilter() {
        filters.push(exp.slice(lastFilterIndex, i).trim());
        lastFilterIndex = i + 1;
    }
    if (filters.length) {
        warnDeprecation("COMPILER_FILTER" /* COMPILER_FILTERS */ , context, node.loc);
        for(i = 0; i < filters.length; i++)expression = wrapFilter(expression, filters[i], context);
        node.content = expression;
    }
}
function wrapFilter(exp, filter, context) {
    context.helper(RESOLVE_FILTER);
    const i = filter.indexOf("(");
    if (i < 0) {
        context.filters.add(filter);
        return `${toValidAssetId(filter, "filter")}(${exp})`;
    } else {
        const name = filter.slice(0, i);
        const args = filter.slice(i + 1);
        context.filters.add(name);
        return `${toValidAssetId(name, "filter")}(${exp}${args !== ")" ? "," + args : args}`;
    }
}
const seen$1 = new WeakSet();
const transformMemo = (node, context)=>{
    if (node.type === 1 /* ELEMENT */ ) {
        const dir = findDir(node, "memo");
        if (!dir || seen$1.has(node)) return;
        seen$1.add(node);
        return ()=>{
            const codegenNode = node.codegenNode || context.currentNode.codegenNode;
            if (codegenNode && codegenNode.type === 13 /* VNODE_CALL */ ) {
                // non-component sub tree should be turned into a block
                if (node.tagType !== 1 /* COMPONENT */ ) makeBlock(codegenNode, context);
                node.codegenNode = createCallExpression(context.helper(WITH_MEMO), [
                    dir.exp,
                    createFunctionExpression(undefined, codegenNode),
                    `_cache`,
                    String(context.cached++)
                ]);
            }
        };
    }
};
function getBaseTransformPreset(prefixIdentifiers) {
    return [
        [
            transformOnce,
            transformIf,
            transformMemo,
            transformFor,
            transformFilter,
            transformExpression,
            transformSlotOutlet,
            transformElement,
            trackSlotScopes,
            transformText
        ],
        {
            on: transformOn,
            bind: transformBind,
            model: transformModel
        }
    ];
}
// we name it `baseCompile` so that higher order compilers like
// @vue/compiler-dom can export `compile` while re-exporting everything else.
function baseCompile(template, options = {}) {
    const onError = options.onError || defaultOnError;
    const isModuleMode = options.mode === "module";
    if (options.prefixIdentifiers === true) onError(createCompilerError(46 /* X_PREFIX_ID_NOT_SUPPORTED */ ));
    else if (isModuleMode) onError(createCompilerError(47 /* X_MODULE_MODE_NOT_SUPPORTED */ ));
    const prefixIdentifiers = false;
    if (options.cacheHandlers) onError(createCompilerError(48 /* X_CACHE_HANDLER_NOT_SUPPORTED */ ));
    if (options.scopeId && !isModuleMode) onError(createCompilerError(49 /* X_SCOPE_ID_NOT_SUPPORTED */ ));
    const ast = (0, _shared.isString)(template) ? baseParse(template, options) : template;
    const [nodeTransforms, directiveTransforms] = getBaseTransformPreset();
    transform(ast, (0, _shared.extend)({}, options, {
        prefixIdentifiers,
        nodeTransforms: [
            ...nodeTransforms,
            ...options.nodeTransforms || [] // user transforms
        ],
        directiveTransforms: (0, _shared.extend)({}, directiveTransforms, options.directiveTransforms || {} // user transforms
        )
    }));
    return generate(ast, (0, _shared.extend)({}, options, {
        prefixIdentifiers
    }));
}
const noopDirectiveTransform = ()=>({
        props: []
    });

},{"@vue/shared":"gKPJ6","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gKPJ6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "EMPTY_ARR", ()=>EMPTY_ARR);
parcelHelpers.export(exports, "EMPTY_OBJ", ()=>EMPTY_OBJ);
parcelHelpers.export(exports, "NO", ()=>NO);
parcelHelpers.export(exports, "NOOP", ()=>NOOP);
parcelHelpers.export(exports, "PatchFlagNames", ()=>PatchFlagNames);
parcelHelpers.export(exports, "babelParserDefaultPlugins", ()=>babelParserDefaultPlugins);
parcelHelpers.export(exports, "camelize", ()=>camelize);
parcelHelpers.export(exports, "capitalize", ()=>capitalize);
parcelHelpers.export(exports, "def", ()=>def);
parcelHelpers.export(exports, "escapeHtml", ()=>escapeHtml);
parcelHelpers.export(exports, "escapeHtmlComment", ()=>escapeHtmlComment);
parcelHelpers.export(exports, "extend", ()=>extend);
parcelHelpers.export(exports, "generateCodeFrame", ()=>generateCodeFrame);
parcelHelpers.export(exports, "getGlobalThis", ()=>getGlobalThis);
parcelHelpers.export(exports, "hasChanged", ()=>hasChanged);
parcelHelpers.export(exports, "hasOwn", ()=>hasOwn);
parcelHelpers.export(exports, "hyphenate", ()=>hyphenate);
parcelHelpers.export(exports, "includeBooleanAttr", ()=>includeBooleanAttr);
parcelHelpers.export(exports, "invokeArrayFns", ()=>invokeArrayFns);
parcelHelpers.export(exports, "isArray", ()=>isArray);
parcelHelpers.export(exports, "isBooleanAttr", ()=>isBooleanAttr);
parcelHelpers.export(exports, "isDate", ()=>isDate);
parcelHelpers.export(exports, "isFunction", ()=>isFunction);
parcelHelpers.export(exports, "isGloballyWhitelisted", ()=>isGloballyWhitelisted);
parcelHelpers.export(exports, "isHTMLTag", ()=>isHTMLTag);
parcelHelpers.export(exports, "isIntegerKey", ()=>isIntegerKey);
parcelHelpers.export(exports, "isKnownHtmlAttr", ()=>isKnownHtmlAttr);
parcelHelpers.export(exports, "isKnownSvgAttr", ()=>isKnownSvgAttr);
parcelHelpers.export(exports, "isMap", ()=>isMap);
parcelHelpers.export(exports, "isModelListener", ()=>isModelListener);
parcelHelpers.export(exports, "isNoUnitNumericStyleProp", ()=>isNoUnitNumericStyleProp);
parcelHelpers.export(exports, "isObject", ()=>isObject);
parcelHelpers.export(exports, "isOn", ()=>isOn);
parcelHelpers.export(exports, "isPlainObject", ()=>isPlainObject);
parcelHelpers.export(exports, "isPromise", ()=>isPromise);
parcelHelpers.export(exports, "isReservedProp", ()=>isReservedProp);
parcelHelpers.export(exports, "isSSRSafeAttrName", ()=>isSSRSafeAttrName);
parcelHelpers.export(exports, "isSVGTag", ()=>isSVGTag);
parcelHelpers.export(exports, "isSet", ()=>isSet);
parcelHelpers.export(exports, "isSpecialBooleanAttr", ()=>isSpecialBooleanAttr);
parcelHelpers.export(exports, "isString", ()=>isString);
parcelHelpers.export(exports, "isSymbol", ()=>isSymbol);
parcelHelpers.export(exports, "isVoidTag", ()=>isVoidTag);
parcelHelpers.export(exports, "looseEqual", ()=>looseEqual);
parcelHelpers.export(exports, "looseIndexOf", ()=>looseIndexOf);
parcelHelpers.export(exports, "makeMap", ()=>makeMap);
parcelHelpers.export(exports, "normalizeClass", ()=>normalizeClass);
parcelHelpers.export(exports, "normalizeProps", ()=>normalizeProps);
parcelHelpers.export(exports, "normalizeStyle", ()=>normalizeStyle);
parcelHelpers.export(exports, "objectToString", ()=>objectToString);
parcelHelpers.export(exports, "parseStringStyle", ()=>parseStringStyle);
parcelHelpers.export(exports, "propsToAttrMap", ()=>propsToAttrMap);
parcelHelpers.export(exports, "remove", ()=>remove);
parcelHelpers.export(exports, "slotFlagsText", ()=>slotFlagsText);
parcelHelpers.export(exports, "stringifyStyle", ()=>stringifyStyle);
parcelHelpers.export(exports, "toDisplayString", ()=>toDisplayString);
parcelHelpers.export(exports, "toHandlerKey", ()=>toHandlerKey);
parcelHelpers.export(exports, "toNumber", ()=>toNumber);
parcelHelpers.export(exports, "toRawType", ()=>toRawType);
parcelHelpers.export(exports, "toTypeString", ()=>toTypeString);
var global = arguments[3];
/**
 * Make a map and return a function for checking if a key
 * is in that map.
 * IMPORTANT: all calls of this function must be prefixed with
 * \/\*#\_\_PURE\_\_\*\/
 * So that rollup can tree-shake them if necessary.
 */ function makeMap(str, expectsLowerCase) {
    const map = Object.create(null);
    const list = str.split(",");
    for(let i = 0; i < list.length; i++)map[list[i]] = true;
    return expectsLowerCase ? (val)=>!!map[val.toLowerCase()] : (val)=>!!map[val];
}
/**
 * dev only flag -> name mapping
 */ const PatchFlagNames = {
    [1 /* TEXT */ ]: `TEXT`,
    [2 /* CLASS */ ]: `CLASS`,
    [4 /* STYLE */ ]: `STYLE`,
    [8 /* PROPS */ ]: `PROPS`,
    [16 /* FULL_PROPS */ ]: `FULL_PROPS`,
    [32 /* HYDRATE_EVENTS */ ]: `HYDRATE_EVENTS`,
    [64 /* STABLE_FRAGMENT */ ]: `STABLE_FRAGMENT`,
    [128 /* KEYED_FRAGMENT */ ]: `KEYED_FRAGMENT`,
    [256 /* UNKEYED_FRAGMENT */ ]: `UNKEYED_FRAGMENT`,
    [512 /* NEED_PATCH */ ]: `NEED_PATCH`,
    [1024 /* DYNAMIC_SLOTS */ ]: `DYNAMIC_SLOTS`,
    [2048 /* DEV_ROOT_FRAGMENT */ ]: `DEV_ROOT_FRAGMENT`,
    [-1 /* HOISTED */ ]: `HOISTED`,
    [-2 /* BAIL */ ]: `BAIL`
};
/**
 * Dev only
 */ const slotFlagsText = {
    [1 /* STABLE */ ]: "STABLE",
    [2 /* DYNAMIC */ ]: "DYNAMIC",
    [3 /* FORWARDED */ ]: "FORWARDED"
};
const GLOBALS_WHITE_LISTED = "Infinity,undefined,NaN,isFinite,isNaN,parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,BigInt";
const isGloballyWhitelisted = /*#__PURE__*/ makeMap(GLOBALS_WHITE_LISTED);
const range = 2;
function generateCodeFrame(source, start = 0, end = source.length) {
    // Split the content into individual lines but capture the newline sequence
    // that separated each line. This is important because the actual sequence is
    // needed to properly take into account the full line length for offset
    // comparison
    let lines = source.split(/(\r?\n)/);
    // Separate the lines and newline sequences into separate arrays for easier referencing
    const newlineSequences = lines.filter((_, idx)=>idx % 2 === 1);
    lines = lines.filter((_, idx)=>idx % 2 === 0);
    let count = 0;
    const res = [];
    for(let i = 0; i < lines.length; i++){
        count += lines[i].length + (newlineSequences[i] && newlineSequences[i].length || 0);
        if (count >= start) {
            for(let j = i - range; j <= i + range || end > count; j++){
                if (j < 0 || j >= lines.length) continue;
                const line = j + 1;
                res.push(`${line}${" ".repeat(Math.max(3 - String(line).length, 0))}|  ${lines[j]}`);
                const lineLength = lines[j].length;
                const newLineSeqLength = newlineSequences[j] && newlineSequences[j].length || 0;
                if (j === i) {
                    // push underline
                    const pad = start - (count - (lineLength + newLineSeqLength));
                    const length = Math.max(1, end > count ? lineLength - pad : end - start);
                    res.push(`   |  ` + " ".repeat(pad) + "^".repeat(length));
                } else if (j > i) {
                    if (end > count) {
                        const length = Math.max(Math.min(end - count, lineLength), 1);
                        res.push(`   |  ` + "^".repeat(length));
                    }
                    count += lineLength + newLineSeqLength;
                }
            }
            break;
        }
    }
    return res.join("\n");
}
/**
 * On the client we only need to offer special cases for boolean attributes that
 * have different names from their corresponding dom properties:
 * - itemscope -> N/A
 * - allowfullscreen -> allowFullscreen
 * - formnovalidate -> formNoValidate
 * - ismap -> isMap
 * - nomodule -> noModule
 * - novalidate -> noValidate
 * - readonly -> readOnly
 */ const specialBooleanAttrs = `itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly`;
const isSpecialBooleanAttr = /*#__PURE__*/ makeMap(specialBooleanAttrs);
/**
 * The full list is needed during SSR to produce the correct initial markup.
 */ const isBooleanAttr = /*#__PURE__*/ makeMap(specialBooleanAttrs + `,async,autofocus,autoplay,controls,default,defer,disabled,hidden,` + `loop,open,required,reversed,scoped,seamless,` + `checked,muted,multiple,selected`);
/**
 * Boolean attributes should be included if the value is truthy or ''.
 * e.g. <select multiple> compiles to { multiple: '' }
 */ function includeBooleanAttr(value) {
    return !!value || value === "";
}
const unsafeAttrCharRE = /[>/="'\u0009\u000a\u000c\u0020]/;
const attrValidationCache = {};
function isSSRSafeAttrName(name) {
    if (attrValidationCache.hasOwnProperty(name)) return attrValidationCache[name];
    const isUnsafe = unsafeAttrCharRE.test(name);
    if (isUnsafe) console.error(`unsafe attribute name: ${name}`);
    return attrValidationCache[name] = !isUnsafe;
}
const propsToAttrMap = {
    acceptCharset: "accept-charset",
    className: "class",
    htmlFor: "for",
    httpEquiv: "http-equiv"
};
/**
 * CSS properties that accept plain numbers
 */ const isNoUnitNumericStyleProp = /*#__PURE__*/ makeMap(`animation-iteration-count,border-image-outset,border-image-slice,` + `border-image-width,box-flex,box-flex-group,box-ordinal-group,column-count,` + `columns,flex,flex-grow,flex-positive,flex-shrink,flex-negative,flex-order,` + `grid-row,grid-row-end,grid-row-span,grid-row-start,grid-column,` + `grid-column-end,grid-column-span,grid-column-start,font-weight,line-clamp,` + `line-height,opacity,order,orphans,tab-size,widows,z-index,zoom,` + // SVG
`fill-opacity,flood-opacity,stop-opacity,stroke-dasharray,stroke-dashoffset,` + `stroke-miterlimit,stroke-opacity,stroke-width`);
/**
 * Known attributes, this is used for stringification of runtime static nodes
 * so that we don't stringify bindings that cannot be set from HTML.
 * Don't also forget to allow `data-*` and `aria-*`!
 * Generated from https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes
 */ const isKnownHtmlAttr = /*#__PURE__*/ makeMap(`accept,accept-charset,accesskey,action,align,allow,alt,async,` + `autocapitalize,autocomplete,autofocus,autoplay,background,bgcolor,` + `border,buffered,capture,challenge,charset,checked,cite,class,code,` + `codebase,color,cols,colspan,content,contenteditable,contextmenu,controls,` + `coords,crossorigin,csp,data,datetime,decoding,default,defer,dir,dirname,` + `disabled,download,draggable,dropzone,enctype,enterkeyhint,for,form,` + `formaction,formenctype,formmethod,formnovalidate,formtarget,headers,` + `height,hidden,high,href,hreflang,http-equiv,icon,id,importance,integrity,` + `ismap,itemprop,keytype,kind,label,lang,language,loading,list,loop,low,` + `manifest,max,maxlength,minlength,media,min,multiple,muted,name,novalidate,` + `open,optimum,pattern,ping,placeholder,poster,preload,radiogroup,readonly,` + `referrerpolicy,rel,required,reversed,rows,rowspan,sandbox,scope,scoped,` + `selected,shape,size,sizes,slot,span,spellcheck,src,srcdoc,srclang,srcset,` + `start,step,style,summary,tabindex,target,title,translate,type,usemap,` + `value,width,wrap`);
/**
 * Generated from https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute
 */ const isKnownSvgAttr = /*#__PURE__*/ makeMap(`xmlns,accent-height,accumulate,additive,alignment-baseline,alphabetic,amplitude,` + `arabic-form,ascent,attributeName,attributeType,azimuth,baseFrequency,` + `baseline-shift,baseProfile,bbox,begin,bias,by,calcMode,cap-height,class,` + `clip,clipPathUnits,clip-path,clip-rule,color,color-interpolation,` + `color-interpolation-filters,color-profile,color-rendering,` + `contentScriptType,contentStyleType,crossorigin,cursor,cx,cy,d,decelerate,` + `descent,diffuseConstant,direction,display,divisor,dominant-baseline,dur,dx,` + `dy,edgeMode,elevation,enable-background,end,exponent,fill,fill-opacity,` + `fill-rule,filter,filterRes,filterUnits,flood-color,flood-opacity,` + `font-family,font-size,font-size-adjust,font-stretch,font-style,` + `font-variant,font-weight,format,from,fr,fx,fy,g1,g2,glyph-name,` + `glyph-orientation-horizontal,glyph-orientation-vertical,glyphRef,` + `gradientTransform,gradientUnits,hanging,height,href,hreflang,horiz-adv-x,` + `horiz-origin-x,id,ideographic,image-rendering,in,in2,intercept,k,k1,k2,k3,` + `k4,kernelMatrix,kernelUnitLength,kerning,keyPoints,keySplines,keyTimes,` + `lang,lengthAdjust,letter-spacing,lighting-color,limitingConeAngle,local,` + `marker-end,marker-mid,marker-start,markerHeight,markerUnits,markerWidth,` + `mask,maskContentUnits,maskUnits,mathematical,max,media,method,min,mode,` + `name,numOctaves,offset,opacity,operator,order,orient,orientation,origin,` + `overflow,overline-position,overline-thickness,panose-1,paint-order,path,` + `pathLength,patternContentUnits,patternTransform,patternUnits,ping,` + `pointer-events,points,pointsAtX,pointsAtY,pointsAtZ,preserveAlpha,` + `preserveAspectRatio,primitiveUnits,r,radius,referrerPolicy,refX,refY,rel,` + `rendering-intent,repeatCount,repeatDur,requiredExtensions,requiredFeatures,` + `restart,result,rotate,rx,ry,scale,seed,shape-rendering,slope,spacing,` + `specularConstant,specularExponent,speed,spreadMethod,startOffset,` + `stdDeviation,stemh,stemv,stitchTiles,stop-color,stop-opacity,` + `strikethrough-position,strikethrough-thickness,string,stroke,` + `stroke-dasharray,stroke-dashoffset,stroke-linecap,stroke-linejoin,` + `stroke-miterlimit,stroke-opacity,stroke-width,style,surfaceScale,` + `systemLanguage,tabindex,tableValues,target,targetX,targetY,text-anchor,` + `text-decoration,text-rendering,textLength,to,transform,transform-origin,` + `type,u1,u2,underline-position,underline-thickness,unicode,unicode-bidi,` + `unicode-range,units-per-em,v-alphabetic,v-hanging,v-ideographic,` + `v-mathematical,values,vector-effect,version,vert-adv-y,vert-origin-x,` + `vert-origin-y,viewBox,viewTarget,visibility,width,widths,word-spacing,` + `writing-mode,x,x-height,x1,x2,xChannelSelector,xlink:actuate,xlink:arcrole,` + `xlink:href,xlink:role,xlink:show,xlink:title,xlink:type,xml:base,xml:lang,` + `xml:space,y,y1,y2,yChannelSelector,z,zoomAndPan`);
function normalizeStyle(value) {
    if (isArray(value)) {
        const res = {};
        for(let i = 0; i < value.length; i++){
            const item = value[i];
            const normalized = isString(item) ? parseStringStyle(item) : normalizeStyle(item);
            if (normalized) for(const key in normalized)res[key] = normalized[key];
        }
        return res;
    } else if (isString(value)) return value;
    else if (isObject(value)) return value;
}
const listDelimiterRE = /;(?![^(]*\))/g;
const propertyDelimiterRE = /:(.+)/;
function parseStringStyle(cssText) {
    const ret = {};
    cssText.split(listDelimiterRE).forEach((item)=>{
        if (item) {
            const tmp = item.split(propertyDelimiterRE);
            tmp.length > 1 && (ret[tmp[0].trim()] = tmp[1].trim());
        }
    });
    return ret;
}
function stringifyStyle(styles) {
    let ret = "";
    if (!styles || isString(styles)) return ret;
    for(const key in styles){
        const value = styles[key];
        const normalizedKey = key.startsWith(`--`) ? key : hyphenate(key);
        if (isString(value) || typeof value === "number" && isNoUnitNumericStyleProp(normalizedKey)) // only render valid values
        ret += `${normalizedKey}:${value};`;
    }
    return ret;
}
function normalizeClass(value) {
    let res = "";
    if (isString(value)) res = value;
    else if (isArray(value)) for(let i = 0; i < value.length; i++){
        const normalized = normalizeClass(value[i]);
        if (normalized) res += normalized + " ";
    }
    else if (isObject(value)) {
        for(const name in value)if (value[name]) res += name + " ";
    }
    return res.trim();
}
function normalizeProps(props) {
    if (!props) return null;
    let { class: klass , style  } = props;
    if (klass && !isString(klass)) props.class = normalizeClass(klass);
    if (style) props.style = normalizeStyle(style);
    return props;
}
// These tag configs are shared between compiler-dom and runtime-dom, so they
// https://developer.mozilla.org/en-US/docs/Web/HTML/Element
const HTML_TAGS = "html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,summary,template,blockquote,iframe,tfoot";
// https://developer.mozilla.org/en-US/docs/Web/SVG/Element
const SVG_TAGS = "svg,animate,animateMotion,animateTransform,circle,clipPath,color-profile,defs,desc,discard,ellipse,feBlend,feColorMatrix,feComponentTransfer,feComposite,feConvolveMatrix,feDiffuseLighting,feDisplacementMap,feDistanceLight,feDropShadow,feFlood,feFuncA,feFuncB,feFuncG,feFuncR,feGaussianBlur,feImage,feMerge,feMergeNode,feMorphology,feOffset,fePointLight,feSpecularLighting,feSpotLight,feTile,feTurbulence,filter,foreignObject,g,hatch,hatchpath,image,line,linearGradient,marker,mask,mesh,meshgradient,meshpatch,meshrow,metadata,mpath,path,pattern,polygon,polyline,radialGradient,rect,set,solidcolor,stop,switch,symbol,text,textPath,title,tspan,unknown,use,view";
const VOID_TAGS = "area,base,br,col,embed,hr,img,input,link,meta,param,source,track,wbr";
const isHTMLTag = /*#__PURE__*/ makeMap(HTML_TAGS);
const isSVGTag = /*#__PURE__*/ makeMap(SVG_TAGS);
const isVoidTag = /*#__PURE__*/ makeMap(VOID_TAGS);
const escapeRE = /["'&<>]/;
function escapeHtml(string) {
    const str = "" + string;
    const match = escapeRE.exec(str);
    if (!match) return str;
    let html = "";
    let escaped;
    let index;
    let lastIndex = 0;
    for(index = match.index; index < str.length; index++){
        switch(str.charCodeAt(index)){
            case 34:
                escaped = "&quot;";
                break;
            case 38:
                escaped = "&amp;";
                break;
            case 39:
                escaped = "&#39;";
                break;
            case 60:
                escaped = "&lt;";
                break;
            case 62:
                escaped = "&gt;";
                break;
            default:
                continue;
        }
        if (lastIndex !== index) html += str.substring(lastIndex, index);
        lastIndex = index + 1;
        html += escaped;
    }
    return lastIndex !== index ? html + str.substring(lastIndex, index) : html;
}
// https://www.w3.org/TR/html52/syntax.html#comments
const commentStripRE = /^-?>|<!--|-->|--!>|<!-$/g;
function escapeHtmlComment(src) {
    return src.replace(commentStripRE, "");
}
function looseCompareArrays(a, b) {
    if (a.length !== b.length) return false;
    let equal = true;
    for(let i = 0; equal && i < a.length; i++)equal = looseEqual(a[i], b[i]);
    return equal;
}
function looseEqual(a, b) {
    if (a === b) return true;
    let aValidType = isDate(a);
    let bValidType = isDate(b);
    if (aValidType || bValidType) return aValidType && bValidType ? a.getTime() === b.getTime() : false;
    aValidType = isArray(a);
    bValidType = isArray(b);
    if (aValidType || bValidType) return aValidType && bValidType ? looseCompareArrays(a, b) : false;
    aValidType = isObject(a);
    bValidType = isObject(b);
    if (aValidType || bValidType) {
        /* istanbul ignore if: this if will probably never be called */ if (!aValidType || !bValidType) return false;
        const aKeysCount = Object.keys(a).length;
        const bKeysCount = Object.keys(b).length;
        if (aKeysCount !== bKeysCount) return false;
        for(const key in a){
            const aHasKey = a.hasOwnProperty(key);
            const bHasKey = b.hasOwnProperty(key);
            if (aHasKey && !bHasKey || !aHasKey && bHasKey || !looseEqual(a[key], b[key])) return false;
        }
    }
    return String(a) === String(b);
}
function looseIndexOf(arr, val) {
    return arr.findIndex((item)=>looseEqual(item, val));
}
/**
 * For converting {{ interpolation }} values to displayed strings.
 * @private
 */ const toDisplayString = (val)=>{
    return val == null ? "" : isArray(val) || isObject(val) && (val.toString === objectToString || !isFunction(val.toString)) ? JSON.stringify(val, replacer, 2) : String(val);
};
const replacer = (_key, val1)=>{
    // can't use isRef here since @vue/shared has no deps
    if (val1 && val1.__v_isRef) return replacer(_key, val1.value);
    else if (isMap(val1)) return {
        [`Map(${val1.size})`]: [
            ...val1.entries()
        ].reduce((entries, [key, val])=>{
            entries[`${key} =>`] = val;
            return entries;
        }, {})
    };
    else if (isSet(val1)) return {
        [`Set(${val1.size})`]: [
            ...val1.values()
        ]
    };
    else if (isObject(val1) && !isArray(val1) && !isPlainObject(val1)) return String(val1);
    return val1;
};
/**
 * List of @babel/parser plugins that are used for template expression
 * transforms and SFC script transforms. By default we enable proposals slated
 * for ES2020. This will need to be updated as the spec moves forward.
 * Full list at https://babeljs.io/docs/en/next/babel-parser#plugins
 */ const babelParserDefaultPlugins = [
    "bigInt",
    "optionalChaining",
    "nullishCoalescingOperator"
];
const EMPTY_OBJ = Object.freeze({});
const EMPTY_ARR = Object.freeze([]);
const NOOP = ()=>{};
/**
 * Always return false.
 */ const NO = ()=>false;
const onRE = /^on[^a-z]/;
const isOn = (key)=>onRE.test(key);
const isModelListener = (key)=>key.startsWith("onUpdate:");
const extend = Object.assign;
const remove = (arr, el)=>{
    const i = arr.indexOf(el);
    if (i > -1) arr.splice(i, 1);
};
const hasOwnProperty = Object.prototype.hasOwnProperty;
const hasOwn = (val, key)=>hasOwnProperty.call(val, key);
const isArray = Array.isArray;
const isMap = (val)=>toTypeString(val) === "[object Map]";
const isSet = (val)=>toTypeString(val) === "[object Set]";
const isDate = (val)=>val instanceof Date;
const isFunction = (val)=>typeof val === "function";
const isString = (val)=>typeof val === "string";
const isSymbol = (val)=>typeof val === "symbol";
const isObject = (val)=>val !== null && typeof val === "object";
const isPromise = (val)=>{
    return isObject(val) && isFunction(val.then) && isFunction(val.catch);
};
const objectToString = Object.prototype.toString;
const toTypeString = (value)=>objectToString.call(value);
const toRawType = (value)=>{
    // extract "RawType" from strings like "[object RawType]"
    return toTypeString(value).slice(8, -1);
};
const isPlainObject = (val)=>toTypeString(val) === "[object Object]";
const isIntegerKey = (key)=>isString(key) && key !== "NaN" && key[0] !== "-" && "" + parseInt(key, 10) === key;
const isReservedProp = /*#__PURE__*/ makeMap(// the leading comma is intentional so empty string "" is also included
",key,ref,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted");
const cacheStringFunction = (fn)=>{
    const cache = Object.create(null);
    return (str)=>{
        const hit = cache[str];
        return hit || (cache[str] = fn(str));
    };
};
const camelizeRE = /-(\w)/g;
/**
 * @private
 */ const camelize = cacheStringFunction((str)=>{
    return str.replace(camelizeRE, (_, c)=>c ? c.toUpperCase() : "");
});
const hyphenateRE = /\B([A-Z])/g;
/**
 * @private
 */ const hyphenate = cacheStringFunction((str)=>str.replace(hyphenateRE, "-$1").toLowerCase());
/**
 * @private
 */ const capitalize = cacheStringFunction((str)=>str.charAt(0).toUpperCase() + str.slice(1));
/**
 * @private
 */ const toHandlerKey = cacheStringFunction((str)=>str ? `on${capitalize(str)}` : ``);
// compare whether a value has changed, accounting for NaN.
const hasChanged = (value, oldValue)=>!Object.is(value, oldValue);
const invokeArrayFns = (fns, arg)=>{
    for(let i = 0; i < fns.length; i++)fns[i](arg);
};
const def = (obj, key, value)=>{
    Object.defineProperty(obj, key, {
        configurable: true,
        enumerable: false,
        value
    });
};
const toNumber = (val)=>{
    const n = parseFloat(val);
    return isNaN(n) ? val : n;
};
let _globalThis;
const getGlobalThis = ()=>{
    return _globalThis || (_globalThis = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : {});
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gkKU3":[function(require,module,exports) {
exports.interopDefault = function(a) {
    return a && a.__esModule ? a : {
        default: a
    };
};
exports.defineInteropFlag = function(a) {
    Object.defineProperty(a, "__esModule", {
        value: true
    });
};
exports.exportAll = function(source, dest) {
    Object.keys(source).forEach(function(key) {
        if (key === "default" || key === "__esModule" || dest.hasOwnProperty(key)) return;
        Object.defineProperty(dest, key, {
            enumerable: true,
            get: function() {
                return source[key];
            }
        });
    });
    return dest;
};
exports.export = function(dest, destName, get) {
    Object.defineProperty(dest, destName, {
        enumerable: true,
        get: get
    });
};

},{}],"9wNvI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Transition", ()=>Transition);
parcelHelpers.export(exports, "TransitionGroup", ()=>TransitionGroup);
parcelHelpers.export(exports, "VueElement", ()=>VueElement);
parcelHelpers.export(exports, "createApp", ()=>createApp);
parcelHelpers.export(exports, "createSSRApp", ()=>createSSRApp);
parcelHelpers.export(exports, "defineCustomElement", ()=>defineCustomElement);
parcelHelpers.export(exports, "defineSSRCustomElement", ()=>defineSSRCustomElement);
parcelHelpers.export(exports, "hydrate", ()=>hydrate);
parcelHelpers.export(exports, "render", ()=>render);
parcelHelpers.export(exports, "useCssModule", ()=>useCssModule);
parcelHelpers.export(exports, "useCssVars", ()=>useCssVars);
parcelHelpers.export(exports, "vModelCheckbox", ()=>vModelCheckbox);
parcelHelpers.export(exports, "vModelDynamic", ()=>vModelDynamic);
parcelHelpers.export(exports, "vModelRadio", ()=>vModelRadio);
parcelHelpers.export(exports, "vModelSelect", ()=>vModelSelect);
parcelHelpers.export(exports, "vModelText", ()=>vModelText);
parcelHelpers.export(exports, "vShow", ()=>vShow);
parcelHelpers.export(exports, "withKeys", ()=>withKeys);
parcelHelpers.export(exports, "withModifiers", ()=>withModifiers);
var _runtimeCore = require("@vue/runtime-core");
var _shared = require("@vue/shared");
parcelHelpers.exportAll(_runtimeCore, exports);
const svgNS = "http://www.w3.org/2000/svg";
const doc = typeof document !== "undefined" ? document : null;
const staticTemplateCache = new Map();
const nodeOps = {
    insert: (child, parent, anchor)=>{
        parent.insertBefore(child, anchor || null);
    },
    remove: (child)=>{
        const parent = child.parentNode;
        if (parent) parent.removeChild(child);
    },
    createElement: (tag, isSVG, is, props)=>{
        const el = isSVG ? doc.createElementNS(svgNS, tag) : doc.createElement(tag, is ? {
            is
        } : undefined);
        if (tag === "select" && props && props.multiple != null) el.setAttribute("multiple", props.multiple);
        return el;
    },
    createText: (text)=>doc.createTextNode(text),
    createComment: (text)=>doc.createComment(text),
    setText: (node, text)=>{
        node.nodeValue = text;
    },
    setElementText: (el, text)=>{
        el.textContent = text;
    },
    parentNode: (node)=>node.parentNode,
    nextSibling: (node)=>node.nextSibling,
    querySelector: (selector)=>doc.querySelector(selector),
    setScopeId (el, id) {
        el.setAttribute(id, "");
    },
    cloneNode (el) {
        const cloned = el.cloneNode(true);
        // #3072
        // - in `patchDOMProp`, we store the actual value in the `el._value` property.
        // - normally, elements using `:value` bindings will not be hoisted, but if
        //   the bound value is a constant, e.g. `:value="true"` - they do get
        //   hoisted.
        // - in production, hoisted nodes are cloned when subsequent inserts, but
        //   cloneNode() does not copy the custom property we attached.
        // - This may need to account for other custom DOM properties we attach to
        //   elements in addition to `_value` in the future.
        if (`_value` in el) cloned._value = el._value;
        return cloned;
    },
    // __UNSAFE__
    // Reason: innerHTML.
    // Static content here can only come from compiled templates.
    // As long as the user only uses trusted templates, this is safe.
    insertStaticContent (content, parent, anchor, isSVG) {
        // <parent> before | first ... last | anchor </parent>
        const before = anchor ? anchor.previousSibling : parent.lastChild;
        let template = staticTemplateCache.get(content);
        if (!template) {
            const t = doc.createElement("template");
            t.innerHTML = isSVG ? `<svg>${content}</svg>` : content;
            template = t.content;
            if (isSVG) {
                // remove outer svg wrapper
                const wrapper = template.firstChild;
                while(wrapper.firstChild)template.appendChild(wrapper.firstChild);
                template.removeChild(wrapper);
            }
            staticTemplateCache.set(content, template);
        }
        parent.insertBefore(template.cloneNode(true), anchor);
        return [
            // first
            before ? before.nextSibling : parent.firstChild,
            // last
            anchor ? anchor.previousSibling : parent.lastChild
        ];
    }
};
// compiler should normalize class + :class bindings on the same element
// into a single binding ['staticClass', dynamic]
function patchClass(el, value, isSVG) {
    // directly setting className should be faster than setAttribute in theory
    // if this is an element during a transition, take the temporary transition
    // classes into account.
    const transitionClasses = el._vtc;
    if (transitionClasses) value = (value ? [
        value,
        ...transitionClasses
    ] : [
        ...transitionClasses
    ]).join(" ");
    if (value == null) el.removeAttribute("class");
    else if (isSVG) el.setAttribute("class", value);
    else el.className = value;
}
function patchStyle(el, prev, next) {
    const style = el.style;
    const currentDisplay = style.display;
    if (!next) el.removeAttribute("style");
    else if ((0, _shared.isString)(next)) {
        if (prev !== next) style.cssText = next;
    } else {
        for(const key in next)setStyle(style, key, next[key]);
        if (prev && !(0, _shared.isString)(prev)) {
            for(const key in prev)if (next[key] == null) setStyle(style, key, "");
        }
    }
    // indicates that the `display` of the element is controlled by `v-show`,
    // so we always keep the current `display` value regardless of the `style` value,
    // thus handing over control to `v-show`.
    if ("_vod" in el) style.display = currentDisplay;
}
const importantRE = /\s*!important$/;
function setStyle(style, name, val) {
    if ((0, _shared.isArray)(val)) val.forEach((v)=>setStyle(style, name, v));
    else if (name.startsWith("--")) // custom property definition
    style.setProperty(name, val);
    else {
        const prefixed = autoPrefix(style, name);
        if (importantRE.test(val)) // !important
        style.setProperty((0, _shared.hyphenate)(prefixed), val.replace(importantRE, ""), "important");
        else style[prefixed] = val;
    }
}
const prefixes = [
    "Webkit",
    "Moz",
    "ms"
];
const prefixCache = {};
function autoPrefix(style, rawName) {
    const cached = prefixCache[rawName];
    if (cached) return cached;
    let name = (0, _runtimeCore.camelize)(rawName);
    if (name !== "filter" && name in style) return prefixCache[rawName] = name;
    name = (0, _shared.capitalize)(name);
    for(let i = 0; i < prefixes.length; i++){
        const prefixed = prefixes[i] + name;
        if (prefixed in style) return prefixCache[rawName] = prefixed;
    }
    return rawName;
}
const xlinkNS = "http://www.w3.org/1999/xlink";
function patchAttr(el, key, value, isSVG, instance) {
    if (isSVG && key.startsWith("xlink:")) {
        if (value == null) el.removeAttributeNS(xlinkNS, key.slice(6, key.length));
        else el.setAttributeNS(xlinkNS, key, value);
    } else {
        // note we are only checking boolean attributes that don't have a
        // corresponding dom prop of the same name here.
        const isBoolean = (0, _shared.isSpecialBooleanAttr)(key);
        if (value == null || isBoolean && !(0, _shared.includeBooleanAttr)(value)) el.removeAttribute(key);
        else el.setAttribute(key, isBoolean ? "" : value);
    }
}
// __UNSAFE__
// functions. The user is responsible for using them with only trusted content.
function patchDOMProp(el, key, value, // the following args are passed only due to potential innerHTML/textContent
// overriding existing VNodes, in which case the old tree must be properly
// unmounted.
prevChildren, parentComponent, parentSuspense, unmountChildren) {
    if (key === "innerHTML" || key === "textContent") {
        if (prevChildren) unmountChildren(prevChildren, parentComponent, parentSuspense);
        el[key] = value == null ? "" : value;
        return;
    }
    if (key === "value" && el.tagName !== "PROGRESS") {
        // store value as _value as well since
        // non-string values will be stringified.
        el._value = value;
        const newValue = value == null ? "" : value;
        if (el.value !== newValue) el.value = newValue;
        if (value == null) el.removeAttribute(key);
        return;
    }
    if (value === "" || value == null) {
        const type = typeof el[key];
        if (type === "boolean") {
            // e.g. <select multiple> compiles to { multiple: '' }
            el[key] = (0, _shared.includeBooleanAttr)(value);
            return;
        } else if (value == null && type === "string") {
            // e.g. <div :id="null">
            el[key] = "";
            el.removeAttribute(key);
            return;
        } else if (type === "number") {
            // e.g. <img :width="null">
            // the value of some IDL attr must be greater than 0, e.g. input.size = 0 -> error
            try {
                el[key] = 0;
            } catch (_a) {}
            el.removeAttribute(key);
            return;
        }
    }
    // some properties perform value validation and throw
    try {
        el[key] = value;
    } catch (e) {
        (0, _runtimeCore.warn)(`Failed setting prop "${key}" on <${el.tagName.toLowerCase()}>: ` + `value ${value} is invalid.`, e);
    }
}
// Async edge case fix requires storing an event listener's attach timestamp.
let _getNow = Date.now;
let skipTimestampCheck = false;
if (typeof window !== "undefined") {
    // Determine what event timestamp the browser is using. Annoyingly, the
    // timestamp can either be hi-res (relative to page load) or low-res
    // (relative to UNIX epoch), so in order to compare time we have to use the
    // same timestamp type when saving the flush timestamp.
    if (_getNow() > document.createEvent("Event").timeStamp) // if the low-res timestamp which is bigger than the event timestamp
    // (which is evaluated AFTER) it means the event is using a hi-res timestamp,
    // and we need to use the hi-res version for event listeners as well.
    _getNow = ()=>performance.now();
    // #3485: Firefox <= 53 has incorrect Event.timeStamp implementation
    // and does not fire microtasks in between event propagation, so safe to exclude.
    const ffMatch = navigator.userAgent.match(/firefox\/(\d+)/i);
    skipTimestampCheck = !!(ffMatch && Number(ffMatch[1]) <= 53);
}
// To avoid the overhead of repeatedly calling performance.now(), we cache
// and use the same timestamp for all event listeners attached in the same tick.
let cachedNow = 0;
const p = Promise.resolve();
const reset = ()=>{
    cachedNow = 0;
};
const getNow = ()=>cachedNow || (p.then(reset), cachedNow = _getNow());
function addEventListener(el, event, handler, options) {
    el.addEventListener(event, handler, options);
}
function removeEventListener(el, event, handler, options) {
    el.removeEventListener(event, handler, options);
}
function patchEvent(el, rawName, prevValue, nextValue, instance = null) {
    // vei = vue event invokers
    const invokers = el._vei || (el._vei = {});
    const existingInvoker = invokers[rawName];
    if (nextValue && existingInvoker) // patch
    existingInvoker.value = nextValue;
    else {
        const [name, options] = parseName(rawName);
        if (nextValue) {
            // add
            const invoker = invokers[rawName] = createInvoker(nextValue, instance);
            addEventListener(el, name, invoker, options);
        } else if (existingInvoker) {
            // remove
            removeEventListener(el, name, existingInvoker, options);
            invokers[rawName] = undefined;
        }
    }
}
const optionsModifierRE = /(?:Once|Passive|Capture)$/;
function parseName(name) {
    let options;
    if (optionsModifierRE.test(name)) {
        options = {};
        let m;
        while(m = name.match(optionsModifierRE)){
            name = name.slice(0, name.length - m[0].length);
            options[m[0].toLowerCase()] = true;
        }
    }
    return [
        (0, _shared.hyphenate)(name.slice(2)),
        options
    ];
}
function createInvoker(initialValue, instance) {
    const invoker = (e)=>{
        // async edge case #6566: inner click event triggers patch, event handler
        // attached to outer element during patch, and triggered again. This
        // happens because browsers fire microtask ticks between event propagation.
        // the solution is simple: we save the timestamp when a handler is attached,
        // and the handler would only fire if the event passed to it was fired
        // AFTER it was attached.
        const timeStamp = e.timeStamp || _getNow();
        if (skipTimestampCheck || timeStamp >= invoker.attached - 1) (0, _runtimeCore.callWithAsyncErrorHandling)(patchStopImmediatePropagation(e, invoker.value), instance, 5 /* NATIVE_EVENT_HANDLER */ , [
            e
        ]);
    };
    invoker.value = initialValue;
    invoker.attached = getNow();
    return invoker;
}
function patchStopImmediatePropagation(e1, value) {
    if ((0, _shared.isArray)(value)) {
        const originalStop = e1.stopImmediatePropagation;
        e1.stopImmediatePropagation = ()=>{
            originalStop.call(e1);
            e1._stopped = true;
        };
        return value.map((fn)=>(e)=>!e._stopped && fn(e));
    } else return value;
}
const nativeOnRE = /^on[a-z]/;
const patchProp = (el, key, prevValue, nextValue, isSVG = false, prevChildren, parentComponent, parentSuspense, unmountChildren)=>{
    if (key === "class") patchClass(el, nextValue, isSVG);
    else if (key === "style") patchStyle(el, prevValue, nextValue);
    else if ((0, _shared.isOn)(key)) // ignore v-model listeners
    {
        if (!(0, _shared.isModelListener)(key)) patchEvent(el, key, prevValue, nextValue, parentComponent);
    } else if (key[0] === "." ? (key = key.slice(1), true) : key[0] === "^" ? (key = key.slice(1), false) : shouldSetAsProp(el, key, nextValue, isSVG)) patchDOMProp(el, key, nextValue, prevChildren, parentComponent, parentSuspense, unmountChildren);
    else {
        // special case for <input v-model type="checkbox"> with
        // :true-value & :false-value
        // store value as dom properties since non-string values will be
        // stringified.
        if (key === "true-value") el._trueValue = nextValue;
        else if (key === "false-value") el._falseValue = nextValue;
        patchAttr(el, key, nextValue, isSVG);
    }
};
function shouldSetAsProp(el, key, value, isSVG) {
    if (isSVG) {
        // most keys must be set as attribute on svg elements to work
        // ...except innerHTML & textContent
        if (key === "innerHTML" || key === "textContent") return true;
        // or native onclick with function values
        if (key in el && nativeOnRE.test(key) && (0, _shared.isFunction)(value)) return true;
        return false;
    }
    // spellcheck and draggable are numerated attrs, however their
    // corresponding DOM properties are actually booleans - this leads to
    // setting it with a string "false" value leading it to be coerced to
    // `true`, so we need to always treat them as attributes.
    // Note that `contentEditable` doesn't have this problem: its DOM
    // property is also enumerated string values.
    if (key === "spellcheck" || key === "draggable") return false;
    // #1787, #2840 form property on form elements is readonly and must be set as
    // attribute.
    if (key === "form") return false;
    // #1526 <input list> must be set as attribute
    if (key === "list" && el.tagName === "INPUT") return false;
    // #2766 <textarea type> must be set as attribute
    if (key === "type" && el.tagName === "TEXTAREA") return false;
    // native onclick with string value, must be set as attribute
    if (nativeOnRE.test(key) && (0, _shared.isString)(value)) return false;
    return key in el;
}
function defineCustomElement(options, hydate) {
    const Comp = (0, _runtimeCore.defineComponent)(options);
    class VueCustomElement extends VueElement {
        constructor(initialProps){
            super(Comp, initialProps, hydate);
        }
    }
    VueCustomElement.def = Comp;
    return VueCustomElement;
}
const defineSSRCustomElement = (options)=>{
    // @ts-ignore
    return defineCustomElement(options, hydrate);
};
const BaseClass = typeof HTMLElement !== "undefined" ? HTMLElement : class {
};
class VueElement extends BaseClass {
    constructor(_def, _props = {}, hydrate1){
        super();
        this._def = _def;
        this._props = _props;
        /**
         * @internal
         */ this._instance = null;
        this._connected = false;
        this._resolved = false;
        if (this.shadowRoot && hydrate1) hydrate1(this._createVNode(), this.shadowRoot);
        else {
            if (this.shadowRoot) (0, _runtimeCore.warn)(`Custom element has pre-rendered declarative shadow root but is not ` + `defined as hydratable. Use \`defineSSRCustomElement\`.`);
            this.attachShadow({
                mode: "open"
            });
        }
        // set initial attrs
        for(let i = 0; i < this.attributes.length; i++)this._setAttr(this.attributes[i].name);
        // watch future attr changes
        const observer = new MutationObserver((mutations)=>{
            for (const m of mutations)this._setAttr(m.attributeName);
        });
        observer.observe(this, {
            attributes: true
        });
    }
    connectedCallback() {
        this._connected = true;
        if (!this._instance) {
            this._resolveDef();
            render(this._createVNode(), this.shadowRoot);
        }
    }
    disconnectedCallback() {
        this._connected = false;
        (0, _runtimeCore.nextTick)(()=>{
            if (!this._connected) {
                render(null, this.shadowRoot);
                this._instance = null;
            }
        });
    }
    /**
     * resolve inner component definition (handle possible async component)
     */ _resolveDef() {
        if (this._resolved) return;
        const resolve = (def)=>{
            this._resolved = true;
            // check if there are props set pre-upgrade or connect
            for (const key of Object.keys(this))if (key[0] !== "_") this._setProp(key, this[key]);
            const { props , styles  } = def;
            // defining getter/setters on prototype
            const rawKeys = props ? (0, _shared.isArray)(props) ? props : Object.keys(props) : [];
            for (const key1 of rawKeys.map((0, _shared.camelize)))Object.defineProperty(this, key1, {
                get () {
                    return this._getProp(key1);
                },
                set (val) {
                    this._setProp(key1, val);
                }
            });
            this._applyStyles(styles);
        };
        const asyncDef = this._def.__asyncLoader;
        if (asyncDef) asyncDef().then(resolve);
        else resolve(this._def);
    }
    _setAttr(key) {
        this._setProp((0, _shared.camelize)(key), (0, _shared.toNumber)(this.getAttribute(key)), false);
    }
    /**
     * @internal
     */ _getProp(key) {
        return this._props[key];
    }
    /**
     * @internal
     */ _setProp(key, val, shouldReflect = true) {
        if (val !== this._props[key]) {
            this._props[key] = val;
            if (this._instance) render(this._createVNode(), this.shadowRoot);
            // reflect
            if (shouldReflect) {
                if (val === true) this.setAttribute((0, _shared.hyphenate)(key), "");
                else if (typeof val === "string" || typeof val === "number") this.setAttribute((0, _shared.hyphenate)(key), val + "");
                else if (!val) this.removeAttribute((0, _shared.hyphenate)(key));
            }
        }
    }
    _createVNode() {
        const vnode = (0, _runtimeCore.createVNode)(this._def, (0, _shared.extend)({}, this._props));
        if (!this._instance) vnode.ce = (instance)=>{
            this._instance = instance;
            instance.isCE = true;
            instance.ceReload = (newStyles)=>{
                // alawys reset styles
                if (this._styles) {
                    this._styles.forEach((s)=>this.shadowRoot.removeChild(s));
                    this._styles.length = 0;
                }
                this._applyStyles(newStyles);
                // if this is an async component, ceReload is called from the inner
                // component so no need to reload the async wrapper
                if (!this._def.__asyncLoader) {
                    // reload
                    this._instance = null;
                    render(this._createVNode(), this.shadowRoot);
                }
            };
            // intercept emit
            instance.emit = (event, ...args)=>{
                this.dispatchEvent(new CustomEvent(event, {
                    detail: args
                }));
            };
            // locate nearest Vue custom element parent for provide/inject
            let parent = this;
            while(parent = parent && (parent.parentNode || parent.host))if (parent instanceof VueElement) {
                instance.parent = parent._instance;
                break;
            }
        };
        return vnode;
    }
    _applyStyles(styles) {
        if (styles) styles.forEach((css)=>{
            const s = document.createElement("style");
            s.textContent = css;
            this.shadowRoot.appendChild(s);
            (this._styles || (this._styles = [])).push(s);
        });
    }
}
function useCssModule(name = "$style") {
    /* istanbul ignore else */ {
        const instance = (0, _runtimeCore.getCurrentInstance)();
        if (!instance) {
            (0, _runtimeCore.warn)(`useCssModule must be called inside setup()`);
            return 0, _shared.EMPTY_OBJ;
        }
        const modules = instance.type.__cssModules;
        if (!modules) {
            (0, _runtimeCore.warn)(`Current instance does not have CSS modules injected.`);
            return 0, _shared.EMPTY_OBJ;
        }
        const mod = modules[name];
        if (!mod) {
            (0, _runtimeCore.warn)(`Current instance does not have CSS module named "${name}".`);
            return 0, _shared.EMPTY_OBJ;
        }
        return mod;
    }
}
/**
 * Runtime helper for SFC's CSS variable injection feature.
 * @private
 */ function useCssVars(getter) {
    const instance = (0, _runtimeCore.getCurrentInstance)();
    /* istanbul ignore next */ if (!instance) {
        (0, _runtimeCore.warn)(`useCssVars is called without current active component instance.`);
        return;
    }
    const setVars = ()=>setVarsOnVNode(instance.subTree, getter(instance.proxy));
    (0, _runtimeCore.watchPostEffect)(setVars);
    (0, _runtimeCore.onMounted)(()=>{
        const ob = new MutationObserver(setVars);
        ob.observe(instance.subTree.el.parentNode, {
            childList: true
        });
        (0, _runtimeCore.onUnmounted)(()=>ob.disconnect());
    });
}
function setVarsOnVNode(vnode, vars) {
    if (vnode.shapeFlag & 128 /* SUSPENSE */ ) {
        const suspense = vnode.suspense;
        vnode = suspense.activeBranch;
        if (suspense.pendingBranch && !suspense.isHydrating) suspense.effects.push(()=>{
            setVarsOnVNode(suspense.activeBranch, vars);
        });
    }
    // drill down HOCs until it's a non-component vnode
    while(vnode.component)vnode = vnode.component.subTree;
    if (vnode.shapeFlag & 1 /* ELEMENT */  && vnode.el) setVarsOnNode(vnode.el, vars);
    else if (vnode.type === (0, _runtimeCore.Fragment)) vnode.children.forEach((c)=>setVarsOnVNode(c, vars));
    else if (vnode.type === (0, _runtimeCore.Static)) {
        let { el , anchor  } = vnode;
        while(el){
            setVarsOnNode(el, vars);
            if (el === anchor) break;
            el = el.nextSibling;
        }
    }
}
function setVarsOnNode(el, vars) {
    if (el.nodeType === 1) {
        const style = el.style;
        for(const key in vars)style.setProperty(`--${key}`, vars[key]);
    }
}
const TRANSITION = "transition";
const ANIMATION = "animation";
// DOM Transition is a higher-order-component based on the platform-agnostic
// base Transition component, with DOM-specific logic.
const Transition = (props, { slots  })=>(0, _runtimeCore.h)((0, _runtimeCore.BaseTransition), resolveTransitionProps(props), slots);
Transition.displayName = "Transition";
const DOMTransitionPropsValidators = {
    name: String,
    type: String,
    css: {
        type: Boolean,
        default: true
    },
    duration: [
        String,
        Number,
        Object
    ],
    enterFromClass: String,
    enterActiveClass: String,
    enterToClass: String,
    appearFromClass: String,
    appearActiveClass: String,
    appearToClass: String,
    leaveFromClass: String,
    leaveActiveClass: String,
    leaveToClass: String
};
const TransitionPropsValidators = Transition.props = /*#__PURE__*/ (0, _shared.extend)({}, (0, _runtimeCore.BaseTransition).props, DOMTransitionPropsValidators);
/**
 * #3227 Incoming hooks may be merged into arrays when wrapping Transition
 * with custom HOCs.
 */ const callHook = (hook, args = [])=>{
    if ((0, _shared.isArray)(hook)) hook.forEach((h)=>h(...args));
    else if (hook) hook(...args);
};
/**
 * Check if a hook expects a callback (2nd arg), which means the user
 * intends to explicitly control the end of the transition.
 */ const hasExplicitCallback = (hook)=>{
    return hook ? (0, _shared.isArray)(hook) ? hook.some((h)=>h.length > 1) : hook.length > 1 : false;
};
function resolveTransitionProps(rawProps) {
    const baseProps = {};
    for(const key in rawProps)if (!(key in DOMTransitionPropsValidators)) baseProps[key] = rawProps[key];
    if (rawProps.css === false) return baseProps;
    const { name ="v" , type , duration , enterFromClass =`${name}-enter-from` , enterActiveClass =`${name}-enter-active` , enterToClass =`${name}-enter-to` , appearFromClass =enterFromClass , appearActiveClass =enterActiveClass , appearToClass =enterToClass , leaveFromClass =`${name}-leave-from` , leaveActiveClass =`${name}-leave-active` , leaveToClass =`${name}-leave-to`  } = rawProps;
    const durations = normalizeDuration(duration);
    const enterDuration = durations && durations[0];
    const leaveDuration = durations && durations[1];
    const { onBeforeEnter , onEnter , onEnterCancelled , onLeave , onLeaveCancelled , onBeforeAppear =onBeforeEnter , onAppear =onEnter , onAppearCancelled =onEnterCancelled  } = baseProps;
    const finishEnter = (el, isAppear, done)=>{
        removeTransitionClass(el, isAppear ? appearToClass : enterToClass);
        removeTransitionClass(el, isAppear ? appearActiveClass : enterActiveClass);
        done && done();
    };
    const finishLeave = (el, done)=>{
        removeTransitionClass(el, leaveToClass);
        removeTransitionClass(el, leaveActiveClass);
        done && done();
    };
    const makeEnterHook = (isAppear)=>{
        return (el, done)=>{
            const hook = isAppear ? onAppear : onEnter;
            const resolve = ()=>finishEnter(el, isAppear, done);
            callHook(hook, [
                el,
                resolve
            ]);
            nextFrame(()=>{
                removeTransitionClass(el, isAppear ? appearFromClass : enterFromClass);
                addTransitionClass(el, isAppear ? appearToClass : enterToClass);
                if (!hasExplicitCallback(hook)) whenTransitionEnds(el, type, enterDuration, resolve);
            });
        };
    };
    return (0, _shared.extend)(baseProps, {
        onBeforeEnter (el) {
            callHook(onBeforeEnter, [
                el
            ]);
            addTransitionClass(el, enterFromClass);
            addTransitionClass(el, enterActiveClass);
        },
        onBeforeAppear (el) {
            callHook(onBeforeAppear, [
                el
            ]);
            addTransitionClass(el, appearFromClass);
            addTransitionClass(el, appearActiveClass);
        },
        onEnter: makeEnterHook(false),
        onAppear: makeEnterHook(true),
        onLeave (el, done) {
            const resolve = ()=>finishLeave(el, done);
            addTransitionClass(el, leaveFromClass);
            // force reflow so *-leave-from classes immediately take effect (#2593)
            forceReflow();
            addTransitionClass(el, leaveActiveClass);
            nextFrame(()=>{
                removeTransitionClass(el, leaveFromClass);
                addTransitionClass(el, leaveToClass);
                if (!hasExplicitCallback(onLeave)) whenTransitionEnds(el, type, leaveDuration, resolve);
            });
            callHook(onLeave, [
                el,
                resolve
            ]);
        },
        onEnterCancelled (el) {
            finishEnter(el, false);
            callHook(onEnterCancelled, [
                el
            ]);
        },
        onAppearCancelled (el) {
            finishEnter(el, true);
            callHook(onAppearCancelled, [
                el
            ]);
        },
        onLeaveCancelled (el) {
            finishLeave(el);
            callHook(onLeaveCancelled, [
                el
            ]);
        }
    });
}
function normalizeDuration(duration) {
    if (duration == null) return null;
    else if ((0, _shared.isObject)(duration)) return [
        NumberOf(duration.enter),
        NumberOf(duration.leave)
    ];
    else {
        const n = NumberOf(duration);
        return [
            n,
            n
        ];
    }
}
function NumberOf(val) {
    const res = (0, _shared.toNumber)(val);
    validateDuration(res);
    return res;
}
function validateDuration(val) {
    if (typeof val !== "number") (0, _runtimeCore.warn)(`<transition> explicit duration is not a valid number - ` + `got ${JSON.stringify(val)}.`);
    else if (isNaN(val)) (0, _runtimeCore.warn)(`<transition> explicit duration is NaN - ` + "the duration expression might be incorrect.");
}
function addTransitionClass(el, cls) {
    cls.split(/\s+/).forEach((c)=>c && el.classList.add(c));
    (el._vtc || (el._vtc = new Set())).add(cls);
}
function removeTransitionClass(el, cls) {
    cls.split(/\s+/).forEach((c)=>c && el.classList.remove(c));
    const { _vtc  } = el;
    if (_vtc) {
        _vtc.delete(cls);
        if (!_vtc.size) el._vtc = undefined;
    }
}
function nextFrame(cb) {
    requestAnimationFrame(()=>{
        requestAnimationFrame(cb);
    });
}
let endId = 0;
function whenTransitionEnds(el, expectedType, explicitTimeout, resolve) {
    const id = el._endId = ++endId;
    const resolveIfNotStale = ()=>{
        if (id === el._endId) resolve();
    };
    if (explicitTimeout) return setTimeout(resolveIfNotStale, explicitTimeout);
    const { type , timeout , propCount  } = getTransitionInfo(el, expectedType);
    if (!type) return resolve();
    const endEvent = type + "end";
    let ended = 0;
    const end = ()=>{
        el.removeEventListener(endEvent, onEnd);
        resolveIfNotStale();
    };
    const onEnd = (e)=>{
        if (e.target === el && ++ended >= propCount) end();
    };
    setTimeout(()=>{
        if (ended < propCount) end();
    }, timeout + 1);
    el.addEventListener(endEvent, onEnd);
}
function getTransitionInfo(el, expectedType) {
    const styles = window.getComputedStyle(el);
    // JSDOM may return undefined for transition properties
    const getStyleProperties = (key)=>(styles[key] || "").split(", ");
    const transitionDelays = getStyleProperties(TRANSITION + "Delay");
    const transitionDurations = getStyleProperties(TRANSITION + "Duration");
    const transitionTimeout = getTimeout(transitionDelays, transitionDurations);
    const animationDelays = getStyleProperties(ANIMATION + "Delay");
    const animationDurations = getStyleProperties(ANIMATION + "Duration");
    const animationTimeout = getTimeout(animationDelays, animationDurations);
    let type = null;
    let timeout = 0;
    let propCount = 0;
    /* istanbul ignore if */ if (expectedType === TRANSITION) {
        if (transitionTimeout > 0) {
            type = TRANSITION;
            timeout = transitionTimeout;
            propCount = transitionDurations.length;
        }
    } else if (expectedType === ANIMATION) {
        if (animationTimeout > 0) {
            type = ANIMATION;
            timeout = animationTimeout;
            propCount = animationDurations.length;
        }
    } else {
        timeout = Math.max(transitionTimeout, animationTimeout);
        type = timeout > 0 ? transitionTimeout > animationTimeout ? TRANSITION : ANIMATION : null;
        propCount = type ? type === TRANSITION ? transitionDurations.length : animationDurations.length : 0;
    }
    const hasTransform = type === TRANSITION && /\b(transform|all)(,|$)/.test(styles[TRANSITION + "Property"]);
    return {
        type,
        timeout,
        propCount,
        hasTransform
    };
}
function getTimeout(delays, durations) {
    while(delays.length < durations.length)delays = delays.concat(delays);
    return Math.max(...durations.map((d, i)=>toMs(d) + toMs(delays[i])));
}
// Old versions of Chromium (below 61.0.3163.100) formats floating pointer
// numbers in a locale-dependent way, using a comma instead of a dot.
// If comma is not replaced with a dot, the input will be rounded down
// (i.e. acting as a floor function) causing unexpected behaviors
function toMs(s) {
    return Number(s.slice(0, -1).replace(",", ".")) * 1000;
}
// synchronously force layout to put elements into a certain state
function forceReflow() {
    return document.body.offsetHeight;
}
const positionMap = new WeakMap();
const newPositionMap = new WeakMap();
const TransitionGroupImpl = {
    name: "TransitionGroup",
    props: /*#__PURE__*/ (0, _shared.extend)({}, TransitionPropsValidators, {
        tag: String,
        moveClass: String
    }),
    setup (props, { slots  }) {
        const instance = (0, _runtimeCore.getCurrentInstance)();
        const state = (0, _runtimeCore.useTransitionState)();
        let prevChildren;
        let children;
        (0, _runtimeCore.onUpdated)(()=>{
            // children is guaranteed to exist after initial render
            if (!prevChildren.length) return;
            const moveClass = props.moveClass || `${props.name || "v"}-move`;
            if (!hasCSSTransform(prevChildren[0].el, instance.vnode.el, moveClass)) return;
            // we divide the work into three loops to avoid mixing DOM reads and writes
            // in each iteration - which helps prevent layout thrashing.
            prevChildren.forEach(callPendingCbs);
            prevChildren.forEach(recordPosition);
            const movedChildren = prevChildren.filter(applyTranslation);
            // force reflow to put everything in position
            forceReflow();
            movedChildren.forEach((c)=>{
                const el = c.el;
                const style = el.style;
                addTransitionClass(el, moveClass);
                style.transform = style.webkitTransform = style.transitionDuration = "";
                const cb = el._moveCb = (e)=>{
                    if (e && e.target !== el) return;
                    if (!e || /transform$/.test(e.propertyName)) {
                        el.removeEventListener("transitionend", cb);
                        el._moveCb = null;
                        removeTransitionClass(el, moveClass);
                    }
                };
                el.addEventListener("transitionend", cb);
            });
        });
        return ()=>{
            const rawProps = (0, _runtimeCore.toRaw)(props);
            const cssTransitionProps = resolveTransitionProps(rawProps);
            let tag = rawProps.tag || (0, _runtimeCore.Fragment);
            prevChildren = children;
            children = slots.default ? (0, _runtimeCore.getTransitionRawChildren)(slots.default()) : [];
            for(let i = 0; i < children.length; i++){
                const child = children[i];
                if (child.key != null) (0, _runtimeCore.setTransitionHooks)(child, (0, _runtimeCore.resolveTransitionHooks)(child, cssTransitionProps, state, instance));
                else (0, _runtimeCore.warn)(`<TransitionGroup> children must be keyed.`);
            }
            if (prevChildren) for(let i1 = 0; i1 < prevChildren.length; i1++){
                const child = prevChildren[i1];
                (0, _runtimeCore.setTransitionHooks)(child, (0, _runtimeCore.resolveTransitionHooks)(child, cssTransitionProps, state, instance));
                positionMap.set(child, child.el.getBoundingClientRect());
            }
            return (0, _runtimeCore.createVNode)(tag, null, children);
        };
    }
};
const TransitionGroup = TransitionGroupImpl;
function callPendingCbs(c) {
    const el = c.el;
    if (el._moveCb) el._moveCb();
    if (el._enterCb) el._enterCb();
}
function recordPosition(c) {
    newPositionMap.set(c, c.el.getBoundingClientRect());
}
function applyTranslation(c) {
    const oldPos = positionMap.get(c);
    const newPos = newPositionMap.get(c);
    const dx = oldPos.left - newPos.left;
    const dy = oldPos.top - newPos.top;
    if (dx || dy) {
        const s = c.el.style;
        s.transform = s.webkitTransform = `translate(${dx}px,${dy}px)`;
        s.transitionDuration = "0s";
        return c;
    }
}
function hasCSSTransform(el, root, moveClass) {
    // Detect whether an element with the move class applied has
    // CSS transitions. Since the element may be inside an entering
    // transition at this very moment, we make a clone of it and remove
    // all other transition classes applied to ensure only the move class
    // is applied.
    const clone = el.cloneNode();
    if (el._vtc) el._vtc.forEach((cls)=>{
        cls.split(/\s+/).forEach((c)=>c && clone.classList.remove(c));
    });
    moveClass.split(/\s+/).forEach((c)=>c && clone.classList.add(c));
    clone.style.display = "none";
    const container = root.nodeType === 1 ? root : root.parentNode;
    container.appendChild(clone);
    const { hasTransform  } = getTransitionInfo(clone);
    container.removeChild(clone);
    return hasTransform;
}
const getModelAssigner = (vnode)=>{
    const fn = vnode.props["onUpdate:modelValue"];
    return (0, _shared.isArray)(fn) ? (value)=>(0, _shared.invokeArrayFns)(fn, value) : fn;
};
function onCompositionStart(e) {
    e.target.composing = true;
}
function onCompositionEnd(e) {
    const target = e.target;
    if (target.composing) {
        target.composing = false;
        trigger(target, "input");
    }
}
function trigger(el, type) {
    const e = document.createEvent("HTMLEvents");
    e.initEvent(type, true, true);
    el.dispatchEvent(e);
}
// We are exporting the v-model runtime directly as vnode hooks so that it can
// be tree-shaken in case v-model is never used.
const vModelText = {
    created (el, { modifiers: { lazy , trim , number  }  }, vnode) {
        el._assign = getModelAssigner(vnode);
        const castToNumber = number || vnode.props && vnode.props.type === "number";
        addEventListener(el, lazy ? "change" : "input", (e)=>{
            if (e.target.composing) return;
            let domValue = el.value;
            if (trim) domValue = domValue.trim();
            else if (castToNumber) domValue = (0, _shared.toNumber)(domValue);
            el._assign(domValue);
        });
        if (trim) addEventListener(el, "change", ()=>{
            el.value = el.value.trim();
        });
        if (!lazy) {
            addEventListener(el, "compositionstart", onCompositionStart);
            addEventListener(el, "compositionend", onCompositionEnd);
            // Safari < 10.2 & UIWebView doesn't fire compositionend when
            // switching focus before confirming composition choice
            // this also fixes the issue where some browsers e.g. iOS Chrome
            // fires "change" instead of "input" on autocomplete.
            addEventListener(el, "change", onCompositionEnd);
        }
    },
    // set value on mounted so it's after min/max for type="range"
    mounted (el, { value  }) {
        el.value = value == null ? "" : value;
    },
    beforeUpdate (el, { value , modifiers: { lazy , trim , number  }  }, vnode) {
        el._assign = getModelAssigner(vnode);
        // avoid clearing unresolved text. #2302
        if (el.composing) return;
        if (document.activeElement === el) {
            if (lazy) return;
            if (trim && el.value.trim() === value) return;
            if ((number || el.type === "number") && (0, _shared.toNumber)(el.value) === value) return;
        }
        const newValue = value == null ? "" : value;
        if (el.value !== newValue) el.value = newValue;
    }
};
const vModelCheckbox = {
    // #4096 array checkboxes need to be deep traversed
    deep: true,
    created (el, _, vnode) {
        el._assign = getModelAssigner(vnode);
        addEventListener(el, "change", ()=>{
            const modelValue = el._modelValue;
            const elementValue = getValue(el);
            const checked = el.checked;
            const assign = el._assign;
            if ((0, _shared.isArray)(modelValue)) {
                const index = (0, _shared.looseIndexOf)(modelValue, elementValue);
                const found = index !== -1;
                if (checked && !found) assign(modelValue.concat(elementValue));
                else if (!checked && found) {
                    const filtered = [
                        ...modelValue
                    ];
                    filtered.splice(index, 1);
                    assign(filtered);
                }
            } else if ((0, _shared.isSet)(modelValue)) {
                const cloned = new Set(modelValue);
                if (checked) cloned.add(elementValue);
                else cloned.delete(elementValue);
                assign(cloned);
            } else assign(getCheckboxValue(el, checked));
        });
    },
    // set initial checked on mount to wait for true-value/false-value
    mounted: setChecked,
    beforeUpdate (el, binding, vnode) {
        el._assign = getModelAssigner(vnode);
        setChecked(el, binding, vnode);
    }
};
function setChecked(el, { value , oldValue  }, vnode) {
    el._modelValue = value;
    if ((0, _shared.isArray)(value)) el.checked = (0, _shared.looseIndexOf)(value, vnode.props.value) > -1;
    else if ((0, _shared.isSet)(value)) el.checked = value.has(vnode.props.value);
    else if (value !== oldValue) el.checked = (0, _shared.looseEqual)(value, getCheckboxValue(el, true));
}
const vModelRadio = {
    created (el, { value  }, vnode) {
        el.checked = (0, _shared.looseEqual)(value, vnode.props.value);
        el._assign = getModelAssigner(vnode);
        addEventListener(el, "change", ()=>{
            el._assign(getValue(el));
        });
    },
    beforeUpdate (el, { value , oldValue  }, vnode) {
        el._assign = getModelAssigner(vnode);
        if (value !== oldValue) el.checked = (0, _shared.looseEqual)(value, vnode.props.value);
    }
};
const vModelSelect = {
    // <select multiple> value need to be deep traversed
    deep: true,
    created (el, { value , modifiers: { number  }  }, vnode) {
        const isSetModel = (0, _shared.isSet)(value);
        addEventListener(el, "change", ()=>{
            const selectedVal = Array.prototype.filter.call(el.options, (o)=>o.selected).map((o)=>number ? (0, _shared.toNumber)(getValue(o)) : getValue(o));
            el._assign(el.multiple ? isSetModel ? new Set(selectedVal) : selectedVal : selectedVal[0]);
        });
        el._assign = getModelAssigner(vnode);
    },
    // set value in mounted & updated because <select> relies on its children
    // <option>s.
    mounted (el, { value  }) {
        setSelected(el, value);
    },
    beforeUpdate (el, _binding, vnode) {
        el._assign = getModelAssigner(vnode);
    },
    updated (el, { value  }) {
        setSelected(el, value);
    }
};
function setSelected(el, value) {
    const isMultiple = el.multiple;
    if (isMultiple && !(0, _shared.isArray)(value) && !(0, _shared.isSet)(value)) {
        (0, _runtimeCore.warn)(`<select multiple v-model> expects an Array or Set value for its binding, ` + `but got ${Object.prototype.toString.call(value).slice(8, -1)}.`);
        return;
    }
    for(let i = 0, l = el.options.length; i < l; i++){
        const option = el.options[i];
        const optionValue = getValue(option);
        if (isMultiple) {
            if ((0, _shared.isArray)(value)) option.selected = (0, _shared.looseIndexOf)(value, optionValue) > -1;
            else option.selected = value.has(optionValue);
        } else if ((0, _shared.looseEqual)(getValue(option), value)) {
            if (el.selectedIndex !== i) el.selectedIndex = i;
            return;
        }
    }
    if (!isMultiple && el.selectedIndex !== -1) el.selectedIndex = -1;
}
// retrieve raw value set via :value bindings
function getValue(el) {
    return "_value" in el ? el._value : el.value;
}
// retrieve raw value for true-value and false-value set via :true-value or :false-value bindings
function getCheckboxValue(el, checked) {
    const key = checked ? "_trueValue" : "_falseValue";
    return key in el ? el[key] : checked;
}
const vModelDynamic = {
    created (el, binding, vnode) {
        callModelHook(el, binding, vnode, null, "created");
    },
    mounted (el, binding, vnode) {
        callModelHook(el, binding, vnode, null, "mounted");
    },
    beforeUpdate (el, binding, vnode, prevVNode) {
        callModelHook(el, binding, vnode, prevVNode, "beforeUpdate");
    },
    updated (el, binding, vnode, prevVNode) {
        callModelHook(el, binding, vnode, prevVNode, "updated");
    }
};
function callModelHook(el, binding, vnode, prevVNode, hook) {
    let modelToUse;
    switch(el.tagName){
        case "SELECT":
            modelToUse = vModelSelect;
            break;
        case "TEXTAREA":
            modelToUse = vModelText;
            break;
        default:
            switch(vnode.props && vnode.props.type){
                case "checkbox":
                    modelToUse = vModelCheckbox;
                    break;
                case "radio":
                    modelToUse = vModelRadio;
                    break;
                default:
                    modelToUse = vModelText;
            }
    }
    const fn = modelToUse[hook];
    fn && fn(el, binding, vnode, prevVNode);
}
const systemModifiers = [
    "ctrl",
    "shift",
    "alt",
    "meta"
];
const modifierGuards = {
    stop: (e)=>e.stopPropagation(),
    prevent: (e)=>e.preventDefault(),
    self: (e)=>e.target !== e.currentTarget,
    ctrl: (e)=>!e.ctrlKey,
    shift: (e)=>!e.shiftKey,
    alt: (e)=>!e.altKey,
    meta: (e)=>!e.metaKey,
    left: (e)=>"button" in e && e.button !== 0,
    middle: (e)=>"button" in e && e.button !== 1,
    right: (e)=>"button" in e && e.button !== 2,
    exact: (e, modifiers)=>systemModifiers.some((m)=>e[`${m}Key`] && !modifiers.includes(m))
};
/**
 * @private
 */ const withModifiers = (fn, modifiers)=>{
    return (event, ...args)=>{
        for(let i = 0; i < modifiers.length; i++){
            const guard = modifierGuards[modifiers[i]];
            if (guard && guard(event, modifiers)) return;
        }
        return fn(event, ...args);
    };
};
// Kept for 2.x compat.
// Note: IE11 compat for `spacebar` and `del` is removed for now.
const keyNames = {
    esc: "escape",
    space: " ",
    up: "arrow-up",
    left: "arrow-left",
    right: "arrow-right",
    down: "arrow-down",
    delete: "backspace"
};
/**
 * @private
 */ const withKeys = (fn, modifiers)=>{
    return (event)=>{
        if (!("key" in event)) return;
        const eventKey = (0, _shared.hyphenate)(event.key);
        if (modifiers.some((k)=>k === eventKey || keyNames[k] === eventKey)) return fn(event);
    };
};
const vShow = {
    beforeMount (el, { value  }, { transition  }) {
        el._vod = el.style.display === "none" ? "" : el.style.display;
        if (transition && value) transition.beforeEnter(el);
        else setDisplay(el, value);
    },
    mounted (el, { value  }, { transition  }) {
        if (transition && value) transition.enter(el);
    },
    updated (el, { value , oldValue  }, { transition  }) {
        if (!value === !oldValue) return;
        if (transition) {
            if (value) {
                transition.beforeEnter(el);
                setDisplay(el, true);
                transition.enter(el);
            } else transition.leave(el, ()=>{
                setDisplay(el, false);
            });
        } else setDisplay(el, value);
    },
    beforeUnmount (el, { value  }) {
        setDisplay(el, value);
    }
};
function setDisplay(el, value) {
    el.style.display = value ? el._vod : "none";
}
const rendererOptions = (0, _shared.extend)({
    patchProp
}, nodeOps);
// lazy create the renderer - this makes core renderer logic tree-shakable
// in case the user only imports reactivity utilities from Vue.
let renderer;
let enabledHydration = false;
function ensureRenderer() {
    return renderer || (renderer = (0, _runtimeCore.createRenderer)(rendererOptions));
}
function ensureHydrationRenderer() {
    renderer = enabledHydration ? renderer : (0, _runtimeCore.createHydrationRenderer)(rendererOptions);
    enabledHydration = true;
    return renderer;
}
// use explicit type casts here to avoid import() calls in rolled-up d.ts
const render = (...args)=>{
    ensureRenderer().render(...args);
};
const hydrate = (...args)=>{
    ensureHydrationRenderer().hydrate(...args);
};
const createApp = (...args)=>{
    const app = ensureRenderer().createApp(...args);
    injectNativeTagCheck(app);
    injectCompilerOptionsCheck(app);
    const { mount  } = app;
    app.mount = (containerOrSelector)=>{
        const container = normalizeContainer(containerOrSelector);
        if (!container) return;
        const component = app._component;
        if (!(0, _shared.isFunction)(component) && !component.render && !component.template) // __UNSAFE__
        // Reason: potential execution of JS expressions in in-DOM template.
        // The user must make sure the in-DOM template is trusted. If it's
        // rendered by the server, the template should not contain any user data.
        component.template = container.innerHTML;
        // clear content before mounting
        container.innerHTML = "";
        const proxy = mount(container, false, container instanceof SVGElement);
        if (container instanceof Element) {
            container.removeAttribute("v-cloak");
            container.setAttribute("data-v-app", "");
        }
        return proxy;
    };
    return app;
};
const createSSRApp = (...args)=>{
    const app = ensureHydrationRenderer().createApp(...args);
    injectNativeTagCheck(app);
    injectCompilerOptionsCheck(app);
    const { mount  } = app;
    app.mount = (containerOrSelector)=>{
        const container = normalizeContainer(containerOrSelector);
        if (container) return mount(container, true, container instanceof SVGElement);
    };
    return app;
};
function injectNativeTagCheck(app) {
    // Inject `isNativeTag`
    // this is used for component name validation (dev only)
    Object.defineProperty(app.config, "isNativeTag", {
        value: (tag)=>(0, _shared.isHTMLTag)(tag) || (0, _shared.isSVGTag)(tag),
        writable: false
    });
}
// dev only
function injectCompilerOptionsCheck(app) {
    if ((0, _runtimeCore.isRuntimeOnly)()) {
        const isCustomElement = app.config.isCustomElement;
        Object.defineProperty(app.config, "isCustomElement", {
            get () {
                return isCustomElement;
            },
            set () {
                (0, _runtimeCore.warn)(`The \`isCustomElement\` config option is deprecated. Use ` + `\`compilerOptions.isCustomElement\` instead.`);
            }
        });
        const compilerOptions = app.config.compilerOptions;
        const msg = `The \`compilerOptions\` config option is only respected when using ` + `a build of Vue.js that includes the runtime compiler (aka "full build"). ` + `Since you are using the runtime-only build, \`compilerOptions\` ` + `must be passed to \`@vue/compiler-dom\` in the build setup instead.\n` + `- For vue-loader: pass it via vue-loader's \`compilerOptions\` loader option.\n` + `- For vue-cli: see https://cli.vuejs.org/guide/webpack.html#modifying-options-of-a-loader\n` + `- For vite: pass it via @vitejs/plugin-vue options. See https://github.com/vitejs/vite/tree/main/packages/plugin-vue#example-for-passing-options-to-vuecompiler-dom`;
        Object.defineProperty(app.config, "compilerOptions", {
            get () {
                (0, _runtimeCore.warn)(msg);
                return compilerOptions;
            },
            set () {
                (0, _runtimeCore.warn)(msg);
            }
        });
    }
}
function normalizeContainer(container) {
    if ((0, _shared.isString)(container)) {
        const res = document.querySelector(container);
        if (!res) (0, _runtimeCore.warn)(`Failed to mount app: mount target selector "${container}" returned null.`);
        return res;
    }
    if (window.ShadowRoot && container instanceof window.ShadowRoot && container.mode === "closed") (0, _runtimeCore.warn)(`mounting on a ShadowRoot with \`{mode: "closed"}\` may lead to unpredictable bugs`);
    return container;
}

},{"@vue/runtime-core":"lmqBl","@vue/shared":"vz52D","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lmqBl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "EffectScope", ()=>(0, _reactivity.EffectScope));
parcelHelpers.export(exports, "ReactiveEffect", ()=>(0, _reactivity.ReactiveEffect));
parcelHelpers.export(exports, "computed", ()=>(0, _reactivity.computed));
parcelHelpers.export(exports, "customRef", ()=>(0, _reactivity.customRef));
parcelHelpers.export(exports, "effect", ()=>(0, _reactivity.effect));
parcelHelpers.export(exports, "effectScope", ()=>(0, _reactivity.effectScope));
parcelHelpers.export(exports, "getCurrentScope", ()=>(0, _reactivity.getCurrentScope));
parcelHelpers.export(exports, "isProxy", ()=>(0, _reactivity.isProxy));
parcelHelpers.export(exports, "isReactive", ()=>(0, _reactivity.isReactive));
parcelHelpers.export(exports, "isReadonly", ()=>(0, _reactivity.isReadonly));
parcelHelpers.export(exports, "isRef", ()=>(0, _reactivity.isRef));
parcelHelpers.export(exports, "markRaw", ()=>(0, _reactivity.markRaw));
parcelHelpers.export(exports, "onScopeDispose", ()=>(0, _reactivity.onScopeDispose));
parcelHelpers.export(exports, "proxyRefs", ()=>(0, _reactivity.proxyRefs));
parcelHelpers.export(exports, "reactive", ()=>(0, _reactivity.reactive));
parcelHelpers.export(exports, "readonly", ()=>(0, _reactivity.readonly));
parcelHelpers.export(exports, "ref", ()=>(0, _reactivity.ref));
parcelHelpers.export(exports, "shallowReactive", ()=>(0, _reactivity.shallowReactive));
parcelHelpers.export(exports, "shallowReadonly", ()=>(0, _reactivity.shallowReadonly));
parcelHelpers.export(exports, "shallowRef", ()=>(0, _reactivity.shallowRef));
parcelHelpers.export(exports, "stop", ()=>(0, _reactivity.stop));
parcelHelpers.export(exports, "toRaw", ()=>(0, _reactivity.toRaw));
parcelHelpers.export(exports, "toRef", ()=>(0, _reactivity.toRef));
parcelHelpers.export(exports, "toRefs", ()=>(0, _reactivity.toRefs));
parcelHelpers.export(exports, "triggerRef", ()=>(0, _reactivity.triggerRef));
parcelHelpers.export(exports, "unref", ()=>(0, _reactivity.unref));
parcelHelpers.export(exports, "camelize", ()=>(0, _shared.camelize));
parcelHelpers.export(exports, "capitalize", ()=>(0, _shared.capitalize));
parcelHelpers.export(exports, "normalizeClass", ()=>(0, _shared.normalizeClass));
parcelHelpers.export(exports, "normalizeProps", ()=>(0, _shared.normalizeProps));
parcelHelpers.export(exports, "normalizeStyle", ()=>(0, _shared.normalizeStyle));
parcelHelpers.export(exports, "toDisplayString", ()=>(0, _shared.toDisplayString));
parcelHelpers.export(exports, "toHandlerKey", ()=>(0, _shared.toHandlerKey));
parcelHelpers.export(exports, "BaseTransition", ()=>BaseTransition);
parcelHelpers.export(exports, "Comment", ()=>Comment);
parcelHelpers.export(exports, "Fragment", ()=>Fragment);
parcelHelpers.export(exports, "KeepAlive", ()=>KeepAlive);
parcelHelpers.export(exports, "Static", ()=>Static);
parcelHelpers.export(exports, "Suspense", ()=>Suspense);
parcelHelpers.export(exports, "Teleport", ()=>Teleport);
parcelHelpers.export(exports, "Text", ()=>Text);
parcelHelpers.export(exports, "callWithAsyncErrorHandling", ()=>callWithAsyncErrorHandling);
parcelHelpers.export(exports, "callWithErrorHandling", ()=>callWithErrorHandling);
parcelHelpers.export(exports, "cloneVNode", ()=>cloneVNode);
parcelHelpers.export(exports, "compatUtils", ()=>compatUtils);
parcelHelpers.export(exports, "createBlock", ()=>createBlock);
parcelHelpers.export(exports, "createCommentVNode", ()=>createCommentVNode);
parcelHelpers.export(exports, "createElementBlock", ()=>createElementBlock);
parcelHelpers.export(exports, "createElementVNode", ()=>createBaseVNode);
parcelHelpers.export(exports, "createHydrationRenderer", ()=>createHydrationRenderer);
parcelHelpers.export(exports, "createRenderer", ()=>createRenderer);
parcelHelpers.export(exports, "createSlots", ()=>createSlots);
parcelHelpers.export(exports, "createStaticVNode", ()=>createStaticVNode);
parcelHelpers.export(exports, "createTextVNode", ()=>createTextVNode);
parcelHelpers.export(exports, "createVNode", ()=>createVNode);
parcelHelpers.export(exports, "defineAsyncComponent", ()=>defineAsyncComponent);
parcelHelpers.export(exports, "defineComponent", ()=>defineComponent);
parcelHelpers.export(exports, "defineEmits", ()=>defineEmits);
parcelHelpers.export(exports, "defineExpose", ()=>defineExpose);
parcelHelpers.export(exports, "defineProps", ()=>defineProps);
parcelHelpers.export(exports, "devtools", ()=>devtools);
parcelHelpers.export(exports, "getCurrentInstance", ()=>getCurrentInstance);
parcelHelpers.export(exports, "getTransitionRawChildren", ()=>getTransitionRawChildren);
parcelHelpers.export(exports, "guardReactiveProps", ()=>guardReactiveProps);
parcelHelpers.export(exports, "h", ()=>h);
parcelHelpers.export(exports, "handleError", ()=>handleError);
parcelHelpers.export(exports, "initCustomFormatter", ()=>initCustomFormatter);
parcelHelpers.export(exports, "inject", ()=>inject);
parcelHelpers.export(exports, "isMemoSame", ()=>isMemoSame);
parcelHelpers.export(exports, "isRuntimeOnly", ()=>isRuntimeOnly);
parcelHelpers.export(exports, "isVNode", ()=>isVNode);
parcelHelpers.export(exports, "mergeDefaults", ()=>mergeDefaults);
parcelHelpers.export(exports, "mergeProps", ()=>mergeProps);
parcelHelpers.export(exports, "nextTick", ()=>nextTick);
parcelHelpers.export(exports, "onActivated", ()=>onActivated);
parcelHelpers.export(exports, "onBeforeMount", ()=>onBeforeMount);
parcelHelpers.export(exports, "onBeforeUnmount", ()=>onBeforeUnmount);
parcelHelpers.export(exports, "onBeforeUpdate", ()=>onBeforeUpdate);
parcelHelpers.export(exports, "onDeactivated", ()=>onDeactivated);
parcelHelpers.export(exports, "onErrorCaptured", ()=>onErrorCaptured);
parcelHelpers.export(exports, "onMounted", ()=>onMounted);
parcelHelpers.export(exports, "onRenderTracked", ()=>onRenderTracked);
parcelHelpers.export(exports, "onRenderTriggered", ()=>onRenderTriggered);
parcelHelpers.export(exports, "onServerPrefetch", ()=>onServerPrefetch);
parcelHelpers.export(exports, "onUnmounted", ()=>onUnmounted);
parcelHelpers.export(exports, "onUpdated", ()=>onUpdated);
parcelHelpers.export(exports, "openBlock", ()=>openBlock);
parcelHelpers.export(exports, "popScopeId", ()=>popScopeId);
parcelHelpers.export(exports, "provide", ()=>provide);
parcelHelpers.export(exports, "pushScopeId", ()=>pushScopeId);
parcelHelpers.export(exports, "queuePostFlushCb", ()=>queuePostFlushCb);
parcelHelpers.export(exports, "registerRuntimeCompiler", ()=>registerRuntimeCompiler);
parcelHelpers.export(exports, "renderList", ()=>renderList);
parcelHelpers.export(exports, "renderSlot", ()=>renderSlot);
parcelHelpers.export(exports, "resolveComponent", ()=>resolveComponent);
parcelHelpers.export(exports, "resolveDirective", ()=>resolveDirective);
parcelHelpers.export(exports, "resolveDynamicComponent", ()=>resolveDynamicComponent);
parcelHelpers.export(exports, "resolveFilter", ()=>resolveFilter);
parcelHelpers.export(exports, "resolveTransitionHooks", ()=>resolveTransitionHooks);
parcelHelpers.export(exports, "setBlockTracking", ()=>setBlockTracking);
parcelHelpers.export(exports, "setDevtoolsHook", ()=>setDevtoolsHook);
parcelHelpers.export(exports, "setTransitionHooks", ()=>setTransitionHooks);
parcelHelpers.export(exports, "ssrContextKey", ()=>ssrContextKey);
parcelHelpers.export(exports, "ssrUtils", ()=>ssrUtils);
parcelHelpers.export(exports, "toHandlers", ()=>toHandlers);
parcelHelpers.export(exports, "transformVNodeArgs", ()=>transformVNodeArgs);
parcelHelpers.export(exports, "useAttrs", ()=>useAttrs);
parcelHelpers.export(exports, "useSSRContext", ()=>useSSRContext);
parcelHelpers.export(exports, "useSlots", ()=>useSlots);
parcelHelpers.export(exports, "useTransitionState", ()=>useTransitionState);
parcelHelpers.export(exports, "version", ()=>version);
parcelHelpers.export(exports, "warn", ()=>warn);
parcelHelpers.export(exports, "watch", ()=>watch);
parcelHelpers.export(exports, "watchEffect", ()=>watchEffect);
parcelHelpers.export(exports, "watchPostEffect", ()=>watchPostEffect);
parcelHelpers.export(exports, "watchSyncEffect", ()=>watchSyncEffect);
parcelHelpers.export(exports, "withAsyncContext", ()=>withAsyncContext);
parcelHelpers.export(exports, "withCtx", ()=>withCtx);
parcelHelpers.export(exports, "withDefaults", ()=>withDefaults);
parcelHelpers.export(exports, "withDirectives", ()=>withDirectives);
parcelHelpers.export(exports, "withMemo", ()=>withMemo);
parcelHelpers.export(exports, "withScopeId", ()=>withScopeId);
var _reactivity = require("@vue/reactivity");
var _shared = require("@vue/shared");
var global = arguments[3];
/* eslint-disable no-restricted-globals */ let isHmrUpdating = false;
const hmrDirtyComponents = new Set();
{
    const globalObject = typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {};
    globalObject.__VUE_HMR_RUNTIME__ = {
        createRecord: tryWrap(createRecord),
        rerender: tryWrap(rerender),
        reload: tryWrap(reload)
    };
}const map = new Map();
function registerHMR(instance) {
    const id = instance.type.__hmrId;
    let record = map.get(id);
    if (!record) {
        createRecord(id);
        record = map.get(id);
    }
    record.add(instance);
}
function unregisterHMR(instance) {
    map.get(instance.type.__hmrId).delete(instance);
}
function createRecord(id) {
    if (map.has(id)) return false;
    map.set(id, new Set());
    return true;
}
function normalizeClassComponent(component) {
    return isClassComponent(component) ? component.__vccOpts : component;
}
function rerender(id, newRender) {
    const record = map.get(id);
    if (!record) return;
    [
        ...record
    ].forEach((instance)=>{
        if (newRender) {
            instance.render = newRender;
            normalizeClassComponent(instance.type).render = newRender;
        }
        instance.renderCache = [];
        // this flag forces child components with slot content to update
        isHmrUpdating = true;
        instance.update();
        isHmrUpdating = false;
    });
}
function reload(id, newComp) {
    const record = map.get(id);
    if (!record) return;
    newComp = normalizeClassComponent(newComp);
    // create a snapshot which avoids the set being mutated during updates
    const instances = [
        ...record
    ];
    for (const instance1 of instances){
        const oldComp = normalizeClassComponent(instance1.type);
        if (!hmrDirtyComponents.has(oldComp)) {
            // 1. Update existing comp definition to match new one
            (0, _shared.extend)(oldComp, newComp);
            for(const key in oldComp)if (key !== "__file" && !(key in newComp)) delete oldComp[key];
            // 2. mark definition dirty. This forces the renderer to replace the
            // component on patch.
            hmrDirtyComponents.add(oldComp);
        }
        // 3. invalidate options resolution cache
        instance1.appContext.optionsCache.delete(instance1.type);
        // 4. actually update
        if (instance1.ceReload) {
            // custom element
            hmrDirtyComponents.add(oldComp);
            instance1.ceReload(newComp.styles);
            hmrDirtyComponents.delete(oldComp);
        } else if (instance1.parent) {
            // 4. Force the parent instance to re-render. This will cause all updated
            // components to be unmounted and re-mounted. Queue the update so that we
            // don't end up forcing the same parent to re-render multiple times.
            queueJob(instance1.parent.update);
            // instance is the inner component of an async custom element
            // invoke to reset styles
            if (instance1.parent.type.__asyncLoader && instance1.parent.ceReload) instance1.parent.ceReload(newComp.styles);
        } else if (instance1.appContext.reload) // root instance mounted via createApp() has a reload method
        instance1.appContext.reload();
        else if (typeof window !== "undefined") // root instance inside tree created via raw render(). Force reload.
        window.location.reload();
        else console.warn("[HMR] Root or manually mounted instance modified. Full reload required.");
    }
    // 5. make sure to cleanup dirty hmr components after update
    queuePostFlushCb(()=>{
        for (const instance of instances)hmrDirtyComponents.delete(normalizeClassComponent(instance.type));
    });
}
function tryWrap(fn) {
    return (id, arg)=>{
        try {
            return fn(id, arg);
        } catch (e) {
            console.error(e);
            console.warn(`[HMR] Something went wrong during Vue component hot-reload. ` + `Full reload required.`);
        }
    };
}
let devtools;
function setDevtoolsHook(hook) {
    devtools = hook;
}
function devtoolsInitApp(app, version1) {
    // TODO queue if devtools is undefined
    if (!devtools) return;
    devtools.emit("app:init" /* APP_INIT */ , app, version1, {
        Fragment,
        Text,
        Comment,
        Static
    });
}
function devtoolsUnmountApp(app) {
    if (!devtools) return;
    devtools.emit("app:unmount" /* APP_UNMOUNT */ , app);
}
const devtoolsComponentAdded = /*#__PURE__*/ createDevtoolsComponentHook("component:added" /* COMPONENT_ADDED */ );
const devtoolsComponentUpdated = /*#__PURE__*/ createDevtoolsComponentHook("component:updated" /* COMPONENT_UPDATED */ );
const devtoolsComponentRemoved = /*#__PURE__*/ createDevtoolsComponentHook("component:removed" /* COMPONENT_REMOVED */ );
function createDevtoolsComponentHook(hook) {
    return (component)=>{
        if (!devtools) return;
        devtools.emit(hook, component.appContext.app, component.uid, component.parent ? component.parent.uid : undefined, component);
    };
}
const devtoolsPerfStart = /*#__PURE__*/ createDevtoolsPerformanceHook("perf:start" /* PERFORMANCE_START */ );
const devtoolsPerfEnd = /*#__PURE__*/ createDevtoolsPerformanceHook("perf:end" /* PERFORMANCE_END */ );
function createDevtoolsPerformanceHook(hook) {
    return (component, type, time)=>{
        if (!devtools) return;
        devtools.emit(hook, component.appContext.app, component.uid, component, type, time);
    };
}
function devtoolsComponentEmit(component, event, params) {
    if (!devtools) return;
    devtools.emit("component:emit" /* COMPONENT_EMIT */ , component.appContext.app, component, event, params);
}
const deprecationData = {
    ["GLOBAL_MOUNT" /* GLOBAL_MOUNT */ ]: {
        message: `The global app bootstrapping API has changed: vm.$mount() and the "el" ` + `option have been removed. Use createApp(RootComponent).mount() instead.`,
        link: `https://v3.vuejs.org/guide/migration/global-api.html#mounting-app-instance`
    },
    ["GLOBAL_MOUNT_CONTAINER" /* GLOBAL_MOUNT_CONTAINER */ ]: {
        message: `Vue detected directives on the mount container. ` + `In Vue 3, the container is no longer considered part of the template ` + `and will not be processed/replaced.`,
        link: `https://v3.vuejs.org/guide/migration/mount-changes.html`
    },
    ["GLOBAL_EXTEND" /* GLOBAL_EXTEND */ ]: {
        message: `Vue.extend() has been removed in Vue 3. ` + `Use defineComponent() instead.`,
        link: `https://v3.vuejs.org/api/global-api.html#definecomponent`
    },
    ["GLOBAL_PROTOTYPE" /* GLOBAL_PROTOTYPE */ ]: {
        message: `Vue.prototype is no longer available in Vue 3. ` + `Use app.config.globalProperties instead.`,
        link: `https://v3.vuejs.org/guide/migration/global-api.html#vue-prototype-replaced-by-config-globalproperties`
    },
    ["GLOBAL_SET" /* GLOBAL_SET */ ]: {
        message: `Vue.set() has been removed as it is no longer needed in Vue 3. ` + `Simply use native JavaScript mutations.`
    },
    ["GLOBAL_DELETE" /* GLOBAL_DELETE */ ]: {
        message: `Vue.delete() has been removed as it is no longer needed in Vue 3. ` + `Simply use native JavaScript mutations.`
    },
    ["GLOBAL_OBSERVABLE" /* GLOBAL_OBSERVABLE */ ]: {
        message: `Vue.observable() has been removed. ` + `Use \`import { reactive } from "vue"\` from Composition API instead.`,
        link: `https://v3.vuejs.org/api/basic-reactivity.html`
    },
    ["GLOBAL_PRIVATE_UTIL" /* GLOBAL_PRIVATE_UTIL */ ]: {
        message: `Vue.util has been removed. Please refactor to avoid its usage ` + `since it was an internal API even in Vue 2.`
    },
    ["CONFIG_SILENT" /* CONFIG_SILENT */ ]: {
        message: `config.silent has been removed because it is not good practice to ` + `intentionally suppress warnings. You can use your browser console's ` + `filter features to focus on relevant messages.`
    },
    ["CONFIG_DEVTOOLS" /* CONFIG_DEVTOOLS */ ]: {
        message: `config.devtools has been removed. To enable devtools for ` + `production, configure the __VUE_PROD_DEVTOOLS__ compile-time flag.`,
        link: `https://github.com/vuejs/vue-next/tree/master/packages/vue#bundler-build-feature-flags`
    },
    ["CONFIG_KEY_CODES" /* CONFIG_KEY_CODES */ ]: {
        message: `config.keyCodes has been removed. ` + `In Vue 3, you can directly use the kebab-case key names as v-on modifiers.`,
        link: `https://v3.vuejs.org/guide/migration/keycode-modifiers.html`
    },
    ["CONFIG_PRODUCTION_TIP" /* CONFIG_PRODUCTION_TIP */ ]: {
        message: `config.productionTip has been removed.`,
        link: `https://v3.vuejs.org/guide/migration/global-api.html#config-productiontip-removed`
    },
    ["CONFIG_IGNORED_ELEMENTS" /* CONFIG_IGNORED_ELEMENTS */ ]: {
        message: ()=>{
            let msg = `config.ignoredElements has been removed.`;
            if (isRuntimeOnly()) msg += ` Pass the "isCustomElement" option to @vue/compiler-dom instead.`;
            else msg += ` Use config.isCustomElement instead.`;
            return msg;
        },
        link: `https://v3.vuejs.org/guide/migration/global-api.html#config-ignoredelements-is-now-config-iscustomelement`
    },
    ["CONFIG_WHITESPACE" /* CONFIG_WHITESPACE */ ]: {
        // this warning is only relevant in the full build when using runtime
        // compilation, so it's put in the runtime compatConfig list.
        message: `Vue 3 compiler's whitespace option will default to "condense" instead of ` + `"preserve". To suppress this warning, provide an explicit value for ` + `\`config.compilerOptions.whitespace\`.`
    },
    ["CONFIG_OPTION_MERGE_STRATS" /* CONFIG_OPTION_MERGE_STRATS */ ]: {
        message: `config.optionMergeStrategies no longer exposes internal strategies. ` + `Use custom merge functions instead.`
    },
    ["INSTANCE_SET" /* INSTANCE_SET */ ]: {
        message: `vm.$set() has been removed as it is no longer needed in Vue 3. ` + `Simply use native JavaScript mutations.`
    },
    ["INSTANCE_DELETE" /* INSTANCE_DELETE */ ]: {
        message: `vm.$delete() has been removed as it is no longer needed in Vue 3. ` + `Simply use native JavaScript mutations.`
    },
    ["INSTANCE_DESTROY" /* INSTANCE_DESTROY */ ]: {
        message: `vm.$destroy() has been removed. Use app.unmount() instead.`,
        link: `https://v3.vuejs.org/api/application-api.html#unmount`
    },
    ["INSTANCE_EVENT_EMITTER" /* INSTANCE_EVENT_EMITTER */ ]: {
        message: `vm.$on/$once/$off() have been removed. ` + `Use an external event emitter library instead.`,
        link: `https://v3.vuejs.org/guide/migration/events-api.html`
    },
    ["INSTANCE_EVENT_HOOKS" /* INSTANCE_EVENT_HOOKS */ ]: {
        message: (event)=>`"${event}" lifecycle events are no longer supported. From templates, ` + `use the "vnode" prefix instead of "hook:". For example, @${event} ` + `should be changed to @vnode-${event.slice(5)}. ` + `From JavaScript, use Composition API to dynamically register lifecycle ` + `hooks.`,
        link: `https://v3.vuejs.org/guide/migration/vnode-lifecycle-events.html`
    },
    ["INSTANCE_CHILDREN" /* INSTANCE_CHILDREN */ ]: {
        message: `vm.$children has been removed. Consider refactoring your logic ` + `to avoid relying on direct access to child components.`,
        link: `https://v3.vuejs.org/guide/migration/children.html`
    },
    ["INSTANCE_LISTENERS" /* INSTANCE_LISTENERS */ ]: {
        message: `vm.$listeners has been removed. In Vue 3, parent v-on listeners are ` + `included in vm.$attrs and it is no longer necessary to separately use ` + `v-on="$listeners" if you are already using v-bind="$attrs". ` + `(Note: the Vue 3 behavior only applies if this compat config is disabled)`,
        link: `https://v3.vuejs.org/guide/migration/listeners-removed.html`
    },
    ["INSTANCE_SCOPED_SLOTS" /* INSTANCE_SCOPED_SLOTS */ ]: {
        message: `vm.$scopedSlots has been removed. Use vm.$slots instead.`,
        link: `https://v3.vuejs.org/guide/migration/slots-unification.html`
    },
    ["INSTANCE_ATTRS_CLASS_STYLE" /* INSTANCE_ATTRS_CLASS_STYLE */ ]: {
        message: (componentName)=>`Component <${componentName || "Anonymous"}> has \`inheritAttrs: false\` but is ` + `relying on class/style fallthrough from parent. In Vue 3, class/style ` + `are now included in $attrs and will no longer fallthrough when ` + `inheritAttrs is false. If you are already using v-bind="$attrs" on ` + `component root it should render the same end result. ` + `If you are binding $attrs to a non-root element and expecting ` + `class/style to fallthrough on root, you will need to now manually bind ` + `them on root via :class="$attrs.class".`,
        link: `https://v3.vuejs.org/guide/migration/attrs-includes-class-style.html`
    },
    ["OPTIONS_DATA_FN" /* OPTIONS_DATA_FN */ ]: {
        message: `The "data" option can no longer be a plain object. ` + `Always use a function.`,
        link: `https://v3.vuejs.org/guide/migration/data-option.html`
    },
    ["OPTIONS_DATA_MERGE" /* OPTIONS_DATA_MERGE */ ]: {
        message: (key)=>`Detected conflicting key "${key}" when merging data option values. ` + `In Vue 3, data keys are merged shallowly and will override one another.`,
        link: `https://v3.vuejs.org/guide/migration/data-option.html#mixin-merge-behavior-change`
    },
    ["OPTIONS_BEFORE_DESTROY" /* OPTIONS_BEFORE_DESTROY */ ]: {
        message: `\`beforeDestroy\` has been renamed to \`beforeUnmount\`.`
    },
    ["OPTIONS_DESTROYED" /* OPTIONS_DESTROYED */ ]: {
        message: `\`destroyed\` has been renamed to \`unmounted\`.`
    },
    ["WATCH_ARRAY" /* WATCH_ARRAY */ ]: {
        message: `"watch" option or vm.$watch on an array value will no longer ` + `trigger on array mutation unless the "deep" option is specified. ` + `If current usage is intended, you can disable the compat behavior and ` + `suppress this warning with:` + `\n\n  configureCompat({ ${"WATCH_ARRAY" /* WATCH_ARRAY */ }: false })\n`,
        link: `https://v3.vuejs.org/guide/migration/watch.html`
    },
    ["PROPS_DEFAULT_THIS" /* PROPS_DEFAULT_THIS */ ]: {
        message: (key)=>`props default value function no longer has access to "this". The compat ` + `build only offers access to this.$options.` + `(found in prop "${key}")`,
        link: `https://v3.vuejs.org/guide/migration/props-default-this.html`
    },
    ["CUSTOM_DIR" /* CUSTOM_DIR */ ]: {
        message: (legacyHook, newHook)=>`Custom directive hook "${legacyHook}" has been removed. ` + `Use "${newHook}" instead.`,
        link: `https://v3.vuejs.org/guide/migration/custom-directives.html`
    },
    ["V_FOR_REF" /* V_FOR_REF */ ]: {
        message: `Ref usage on v-for no longer creates array ref values in Vue 3. ` + `Consider using function refs or refactor to avoid ref usage altogether.`,
        link: `https://v3.vuejs.org/guide/migration/array-refs.html`
    },
    ["V_ON_KEYCODE_MODIFIER" /* V_ON_KEYCODE_MODIFIER */ ]: {
        message: `Using keyCode as v-on modifier is no longer supported. ` + `Use kebab-case key name modifiers instead.`,
        link: `https://v3.vuejs.org/guide/migration/keycode-modifiers.html`
    },
    ["ATTR_FALSE_VALUE" /* ATTR_FALSE_VALUE */ ]: {
        message: (name)=>`Attribute "${name}" with v-bind value \`false\` will render ` + `${name}="false" instead of removing it in Vue 3. To remove the attribute, ` + `use \`null\` or \`undefined\` instead. If the usage is intended, ` + `you can disable the compat behavior and suppress this warning with:` + `\n\n  configureCompat({ ${"ATTR_FALSE_VALUE" /* ATTR_FALSE_VALUE */ }: false })\n`,
        link: `https://v3.vuejs.org/guide/migration/attribute-coercion.html`
    },
    ["ATTR_ENUMERATED_COERCION" /* ATTR_ENUMERATED_COERCION */ ]: {
        message: (name, value, coerced)=>`Enumerated attribute "${name}" with v-bind value \`${value}\` will ` + `${value === null ? `be removed` : `render the value as-is`} instead of coercing the value to "${coerced}" in Vue 3. ` + `Always use explicit "true" or "false" values for enumerated attributes. ` + `If the usage is intended, ` + `you can disable the compat behavior and suppress this warning with:` + `\n\n  configureCompat({ ${"ATTR_ENUMERATED_COERCION" /* ATTR_ENUMERATED_COERCION */ }: false })\n`,
        link: `https://v3.vuejs.org/guide/migration/attribute-coercion.html`
    },
    ["TRANSITION_CLASSES" /* TRANSITION_CLASSES */ ]: {
        message: `` // this feature cannot be runtime-detected
    },
    ["TRANSITION_GROUP_ROOT" /* TRANSITION_GROUP_ROOT */ ]: {
        message: `<TransitionGroup> no longer renders a root <span> element by ` + `default if no "tag" prop is specified. If you do not rely on the span ` + `for styling, you can disable the compat behavior and suppress this ` + `warning with:` + `\n\n  configureCompat({ ${"TRANSITION_GROUP_ROOT" /* TRANSITION_GROUP_ROOT */ }: false })\n`,
        link: `https://v3.vuejs.org/guide/migration/transition-group.html`
    },
    ["COMPONENT_ASYNC" /* COMPONENT_ASYNC */ ]: {
        message: (comp)=>{
            const name = getComponentName(comp);
            return `Async component${name ? ` <${name}>` : `s`} should be explicitly created via \`defineAsyncComponent()\` ` + `in Vue 3. Plain functions will be treated as functional components in ` + `non-compat build. If you have already migrated all async component ` + `usage and intend to use plain functions for functional components, ` + `you can disable the compat behavior and suppress this ` + `warning with:` + `\n\n  configureCompat({ ${"COMPONENT_ASYNC" /* COMPONENT_ASYNC */ }: false })\n`;
        },
        link: `https://v3.vuejs.org/guide/migration/async-components.html`
    },
    ["COMPONENT_FUNCTIONAL" /* COMPONENT_FUNCTIONAL */ ]: {
        message: (comp)=>{
            const name = getComponentName(comp);
            return `Functional component${name ? ` <${name}>` : `s`} should be defined as a plain function in Vue 3. The "functional" ` + `option has been removed. NOTE: Before migrating to use plain ` + `functions for functional components, first make sure that all async ` + `components usage have been migrated and its compat behavior has ` + `been disabled.`;
        },
        link: `https://v3.vuejs.org/guide/migration/functional-components.html`
    },
    ["COMPONENT_V_MODEL" /* COMPONENT_V_MODEL */ ]: {
        message: (comp)=>{
            const configMsg = `opt-in to ` + `Vue 3 behavior on a per-component basis with \`compatConfig: { ${"COMPONENT_V_MODEL" /* COMPONENT_V_MODEL */ }: false }\`.`;
            if (comp.props && ((0, _shared.isArray)(comp.props) ? comp.props.includes("modelValue") : (0, _shared.hasOwn)(comp.props, "modelValue"))) return `Component delcares "modelValue" prop, which is Vue 3 usage, but ` + `is running under Vue 2 compat v-model behavior. You can ${configMsg}`;
            return `v-model usage on component has changed in Vue 3. Component that expects ` + `to work with v-model should now use the "modelValue" prop and emit the ` + `"update:modelValue" event. You can update the usage and then ${configMsg}`;
        },
        link: `https://v3.vuejs.org/guide/migration/v-model.html`
    },
    ["RENDER_FUNCTION" /* RENDER_FUNCTION */ ]: {
        message: `Vue 3's render function API has changed. ` + `You can opt-in to the new API with:` + `\n\n  configureCompat({ ${"RENDER_FUNCTION" /* RENDER_FUNCTION */ }: false })\n` + `\n  (This can also be done per-component via the "compatConfig" option.)`,
        link: `https://v3.vuejs.org/guide/migration/render-function-api.html`
    },
    ["FILTERS" /* FILTERS */ ]: {
        message: `filters have been removed in Vue 3. ` + `The "|" symbol will be treated as native JavaScript bitwise OR operator. ` + `Use method calls or computed properties instead.`,
        link: `https://v3.vuejs.org/guide/migration/filters.html`
    },
    ["PRIVATE_APIS" /* PRIVATE_APIS */ ]: {
        message: (name)=>`"${name}" is a Vue 2 private API that no longer exists in Vue 3. ` + `If you are seeing this warning only due to a dependency, you can ` + `suppress this warning via { PRIVATE_APIS: 'supress-warning' }.`
    }
};
const instanceWarned = Object.create(null);
const warnCount = Object.create(null);
function warnDeprecation(key, instance, ...args) {
    instance = instance || getCurrentInstance();
    // check user config
    const config = getCompatConfigForKey(key, instance);
    if (config === "suppress-warning") return;
    const dupKey = key + args.join("");
    let compId = instance && formatComponentName(instance, instance.type);
    if (compId === "Anonymous" && instance) compId = instance.uid;
    // skip if the same warning is emitted for the same component type
    const componentDupKey = dupKey + compId;
    if (componentDupKey in instanceWarned) return;
    instanceWarned[componentDupKey] = true;
    // same warning, but different component. skip the long message and just
    // log the key and count.
    if (dupKey in warnCount) {
        warn(`(deprecation ${key}) (${++warnCount[dupKey] + 1})`);
        return;
    }
    warnCount[dupKey] = 0;
    const { message , link  } = deprecationData[key];
    warn(`(deprecation ${key}) ${typeof message === "function" ? message(...args) : message}${link ? `\n  Details: ${link}` : ``}`);
    if (!isCompatEnabled(key, instance, true)) console.error(`^ The above deprecation's compat behavior is disabled and will likely ` + `lead to runtime errors.`);
}
const globalCompatConfig = {
    MODE: 2
};
function getCompatConfigForKey(key, instance) {
    const instanceConfig = instance && instance.type.compatConfig;
    if (instanceConfig && key in instanceConfig) return instanceConfig[key];
    return globalCompatConfig[key];
}
function isCompatEnabled(key, instance, enableForBuiltIn = false) {
    // skip compat for built-in components
    if (!enableForBuiltIn && instance && instance.type.__isBuiltIn) return false;
    const rawMode = getCompatConfigForKey("MODE", instance) || 2;
    const val = getCompatConfigForKey(key, instance);
    const mode = (0, _shared.isFunction)(rawMode) ? rawMode(instance && instance.type) : rawMode;
    if (mode === 2) return val !== false;
    else return val === true || val === "suppress-warning";
}
function emit(instance, event, ...rawArgs) {
    const props = instance.vnode.props || (0, _shared.EMPTY_OBJ);
    {
        const { emitsOptions , propsOptions: [propsOptions]  } = instance;
        if (emitsOptions) {
            if (!(event in emitsOptions) && true) {
                if (!propsOptions || !((0, _shared.toHandlerKey)(event) in propsOptions)) warn(`Component emitted event "${event}" but it is neither declared in ` + `the emits option nor as an "${(0, _shared.toHandlerKey)(event)}" prop.`);
            } else {
                const validator = emitsOptions[event];
                if ((0, _shared.isFunction)(validator)) {
                    const isValid = validator(...rawArgs);
                    if (!isValid) warn(`Invalid event arguments: event validation failed for event "${event}".`);
                }
            }
        }
    }
    let args = rawArgs;
    const isModelListener = event.startsWith("update:");
    // for v-model update:xxx events, apply modifiers on args
    const modelArg = isModelListener && event.slice(7);
    if (modelArg && modelArg in props) {
        const modifiersKey = `${modelArg === "modelValue" ? "model" : modelArg}Modifiers`;
        const { number , trim  } = props[modifiersKey] || (0, _shared.EMPTY_OBJ);
        if (trim) args = rawArgs.map((a)=>a.trim());
        else if (number) args = rawArgs.map((0, _shared.toNumber));
    }
    devtoolsComponentEmit(instance, event, args);
    {
        const lowerCaseEvent = event.toLowerCase();
        if (lowerCaseEvent !== event && props[(0, _shared.toHandlerKey)(lowerCaseEvent)]) warn(`Event "${lowerCaseEvent}" is emitted in component ` + `${formatComponentName(instance, instance.type)} but the handler is registered for "${event}". ` + `Note that HTML attributes are case-insensitive and you cannot use ` + `v-on to listen to camelCase events when using in-DOM templates. ` + `You should probably use "${(0, _shared.hyphenate)(event)}" instead of "${event}".`);
    }
    let handlerName;
    let handler = props[handlerName = (0, _shared.toHandlerKey)(event)] || // also try camelCase event handler (#2249)
    props[handlerName = (0, _shared.toHandlerKey)((0, _shared.camelize)(event))];
    // for v-model update:xxx events, also trigger kebab-case equivalent
    // for props passed via kebab-case
    if (!handler && isModelListener) handler = props[handlerName = (0, _shared.toHandlerKey)((0, _shared.hyphenate)(event))];
    if (handler) callWithAsyncErrorHandling(handler, instance, 6 /* COMPONENT_EVENT_HANDLER */ , args);
    const onceHandler = props[handlerName + `Once`];
    if (onceHandler) {
        if (!instance.emitted) instance.emitted = {};
        else if (instance.emitted[handlerName]) return;
        instance.emitted[handlerName] = true;
        callWithAsyncErrorHandling(onceHandler, instance, 6 /* COMPONENT_EVENT_HANDLER */ , args);
    }
}
function normalizeEmitsOptions(comp, appContext, asMixin = false) {
    const cache = appContext.emitsCache;
    const cached = cache.get(comp);
    if (cached !== undefined) return cached;
    const raw1 = comp.emits;
    let normalized = {};
    // apply mixin/extends props
    let hasExtends = false;
    if (__VUE_OPTIONS_API__ && !(0, _shared.isFunction)(comp)) {
        const extendEmits = (raw)=>{
            const normalizedFromExtend = normalizeEmitsOptions(raw, appContext, true);
            if (normalizedFromExtend) {
                hasExtends = true;
                (0, _shared.extend)(normalized, normalizedFromExtend);
            }
        };
        if (!asMixin && appContext.mixins.length) appContext.mixins.forEach(extendEmits);
        if (comp.extends) extendEmits(comp.extends);
        if (comp.mixins) comp.mixins.forEach(extendEmits);
    }
    if (!raw1 && !hasExtends) {
        cache.set(comp, null);
        return null;
    }
    if ((0, _shared.isArray)(raw1)) raw1.forEach((key)=>normalized[key] = null);
    else (0, _shared.extend)(normalized, raw1);
    cache.set(comp, normalized);
    return normalized;
}
// Check if an incoming prop key is a declared emit event listener.
// e.g. With `emits: { click: null }`, props named `onClick` and `onclick` are
// both considered matched listeners.
function isEmitListener(options, key) {
    if (!options || !(0, _shared.isOn)(key)) return false;
    key = key.slice(2).replace(/Once$/, "");
    return (0, _shared.hasOwn)(options, key[0].toLowerCase() + key.slice(1)) || (0, _shared.hasOwn)(options, (0, _shared.hyphenate)(key)) || (0, _shared.hasOwn)(options, key);
}
/**
 * mark the current rendering instance for asset resolution (e.g.
 * resolveComponent, resolveDirective) during render
 */ let currentRenderingInstance = null;
let currentScopeId = null;
/**
 * Note: rendering calls maybe nested. The function returns the parent rendering
 * instance if present, which should be restored after the render is done:
 *
 * ```js
 * const prev = setCurrentRenderingInstance(i)
 * // ...render
 * setCurrentRenderingInstance(prev)
 * ```
 */ function setCurrentRenderingInstance(instance) {
    const prev = currentRenderingInstance;
    currentRenderingInstance = instance;
    currentScopeId = instance && instance.type.__scopeId || null;
    return prev;
}
/**
 * Set scope id when creating hoisted vnodes.
 * @private compiler helper
 */ function pushScopeId(id) {
    currentScopeId = id;
}
/**
 * Technically we no longer need this after 3.0.8 but we need to keep the same
 * API for backwards compat w/ code generated by compilers.
 * @private
 */ function popScopeId() {
    currentScopeId = null;
}
/**
 * Only for backwards compat
 * @private
 */ const withScopeId = (_id)=>withCtx;
/**
 * Wrap a slot function to memoize current rendering instance
 * @private compiler helper
 */ function withCtx(fn, ctx = currentRenderingInstance, isNonScopedSlot // false only
) {
    if (!ctx) return fn;
    // already normalized
    if (fn._n) return fn;
    const renderFnWithContext = (...args)=>{
        // If a user calls a compiled slot inside a template expression (#1745), it
        // can mess up block tracking, so by default we disable block tracking and
        // force bail out when invoking a compiled slot (indicated by the ._d flag).
        // This isn't necessary if rendering a compiled `<slot>`, so we flip the
        // ._d flag off when invoking the wrapped fn inside `renderSlot`.
        if (renderFnWithContext._d) setBlockTracking(-1);
        const prevInstance = setCurrentRenderingInstance(ctx);
        const res = fn(...args);
        setCurrentRenderingInstance(prevInstance);
        if (renderFnWithContext._d) setBlockTracking(1);
        devtoolsComponentUpdated(ctx);
        return res;
    };
    // mark normalized to avoid duplicated wrapping
    renderFnWithContext._n = true;
    // mark this as compiled by default
    // this is used in vnode.ts -> normalizeChildren() to set the slot
    // rendering flag.
    renderFnWithContext._c = true;
    // disable block tracking by default
    renderFnWithContext._d = true;
    return renderFnWithContext;
}
/**
 * dev only flag to track whether $attrs was used during render.
 * If $attrs was used during render then the warning for failed attrs
 * fallthrough can be suppressed.
 */ let accessedAttrs = false;
function markAttrsAccessed() {
    accessedAttrs = true;
}
function renderComponentRoot(instance) {
    const { type: Component , vnode , proxy , withProxy , props , propsOptions: [propsOptions] , slots , attrs , emit: emit1 , render , renderCache , data , setupState , ctx , inheritAttrs  } = instance;
    let result;
    const prev = setCurrentRenderingInstance(instance);
    accessedAttrs = false;
    try {
        let fallthroughAttrs;
        if (vnode.shapeFlag & 4 /* STATEFUL_COMPONENT */ ) {
            // withProxy is a proxy with a different `has` trap only for
            // runtime-compiled render functions using `with` block.
            const proxyToUse = withProxy || proxy;
            result = normalizeVNode(render.call(proxyToUse, proxyToUse, renderCache, props, setupState, data, ctx));
            fallthroughAttrs = attrs;
        } else {
            // functional
            const render = Component;
            // in dev, mark attrs accessed if optional props (attrs === props)
            if (attrs === props) markAttrsAccessed();
            result = normalizeVNode(render.length > 1 ? render(props, {
                get attrs () {
                    markAttrsAccessed();
                    return attrs;
                },
                slots,
                emit: emit1
            }) : render(props, null));
            fallthroughAttrs = Component.props ? attrs : getFunctionalFallthrough(attrs);
        }
        // attr merging
        // in dev mode, comments are preserved, and it's possible for a template
        // to have comments along side the root element which makes it a fragment
        let root = result;
        let setRoot = undefined;
        if (result.patchFlag > 0 && result.patchFlag & 2048 /* DEV_ROOT_FRAGMENT */ ) [root, setRoot] = getChildRoot(result);
        if (fallthroughAttrs && inheritAttrs !== false) {
            const keys = Object.keys(fallthroughAttrs);
            const { shapeFlag  } = root;
            if (keys.length) {
                if (shapeFlag & 7 /* COMPONENT */ ) {
                    if (propsOptions && keys.some((0, _shared.isModelListener))) // If a v-model listener (onUpdate:xxx) has a corresponding declared
                    // prop, it indicates this component expects to handle v-model and
                    // it should not fallthrough.
                    // related: #1543, #1643, #1989
                    fallthroughAttrs = filterModelListeners(fallthroughAttrs, propsOptions);
                    root = cloneVNode(root, fallthroughAttrs);
                } else if (!accessedAttrs && root.type !== Comment) {
                    const allAttrs = Object.keys(attrs);
                    const eventAttrs = [];
                    const extraAttrs = [];
                    for(let i = 0, l = allAttrs.length; i < l; i++){
                        const key = allAttrs[i];
                        if ((0, _shared.isOn)(key)) // ignore v-model handlers when they fail to fallthrough
                        {
                            if (!(0, _shared.isModelListener)(key)) // remove `on`, lowercase first letter to reflect event casing
                            // accurately
                            eventAttrs.push(key[2].toLowerCase() + key.slice(3));
                        } else extraAttrs.push(key);
                    }
                    if (extraAttrs.length) warn(`Extraneous non-props attributes (` + `${extraAttrs.join(", ")}) ` + `were passed to component but could not be automatically inherited ` + `because component renders fragment or text root nodes.`);
                    if (eventAttrs.length) warn(`Extraneous non-emits event listeners (` + `${eventAttrs.join(", ")}) ` + `were passed to component but could not be automatically inherited ` + `because component renders fragment or text root nodes. ` + `If the listener is intended to be a component custom event listener only, ` + `declare it using the "emits" option.`);
                }
            }
        }
        // inherit directives
        if (vnode.dirs) {
            if (!isElementRoot(root)) warn(`Runtime directive used on component with non-element root node. ` + `The directives will not function as intended.`);
            root.dirs = root.dirs ? root.dirs.concat(vnode.dirs) : vnode.dirs;
        }
        // inherit transition data
        if (vnode.transition) {
            if (!isElementRoot(root)) warn(`Component inside <Transition> renders non-element root node ` + `that cannot be animated.`);
            root.transition = vnode.transition;
        }
        if (setRoot) setRoot(root);
        else result = root;
    } catch (err) {
        blockStack.length = 0;
        handleError(err, instance, 1 /* RENDER_FUNCTION */ );
        result = createVNode(Comment);
    }
    setCurrentRenderingInstance(prev);
    return result;
}
/**
 * dev only
 * In dev mode, template root level comments are rendered, which turns the
 * template into a fragment root, but we need to locate the single element
 * root for attrs and scope id processing.
 */ const getChildRoot = (vnode)=>{
    const rawChildren = vnode.children;
    const dynamicChildren = vnode.dynamicChildren;
    const childRoot = filterSingleRoot(rawChildren);
    if (!childRoot) return [
        vnode,
        undefined
    ];
    const index = rawChildren.indexOf(childRoot);
    const dynamicIndex = dynamicChildren ? dynamicChildren.indexOf(childRoot) : -1;
    const setRoot = (updatedRoot)=>{
        rawChildren[index] = updatedRoot;
        if (dynamicChildren) {
            if (dynamicIndex > -1) dynamicChildren[dynamicIndex] = updatedRoot;
            else if (updatedRoot.patchFlag > 0) vnode.dynamicChildren = [
                ...dynamicChildren,
                updatedRoot
            ];
        }
    };
    return [
        normalizeVNode(childRoot),
        setRoot
    ];
};
function filterSingleRoot(children) {
    let singleRoot;
    for(let i = 0; i < children.length; i++){
        const child = children[i];
        if (isVNode(child)) // ignore user comment
        {
            if (child.type !== Comment || child.children === "v-if") {
                if (singleRoot) // has more than 1 non-comment child, return now
                return;
                else singleRoot = child;
            }
        } else return;
    }
    return singleRoot;
}
const getFunctionalFallthrough = (attrs)=>{
    let res;
    for(const key in attrs)if (key === "class" || key === "style" || (0, _shared.isOn)(key)) (res || (res = {}))[key] = attrs[key];
    return res;
};
const filterModelListeners = (attrs, props)=>{
    const res = {};
    for(const key in attrs)if (!(0, _shared.isModelListener)(key) || !(key.slice(9) in props)) res[key] = attrs[key];
    return res;
};
const isElementRoot = (vnode)=>{
    return vnode.shapeFlag & 7 /* ELEMENT */  || vnode.type === Comment // potential v-if branch switch
    ;
};
function shouldUpdateComponent(prevVNode, nextVNode, optimized) {
    const { props: prevProps , children: prevChildren , component  } = prevVNode;
    const { props: nextProps , children: nextChildren , patchFlag  } = nextVNode;
    const emits = component.emitsOptions;
    // Parent component's render function was hot-updated. Since this may have
    // caused the child component's slots content to have changed, we need to
    // force the child to update as well.
    if ((prevChildren || nextChildren) && isHmrUpdating) return true;
    // force child update for runtime directive or transition on component vnode.
    if (nextVNode.dirs || nextVNode.transition) return true;
    if (optimized && patchFlag >= 0) {
        if (patchFlag & 1024 /* DYNAMIC_SLOTS */ ) // slot content that references values that might have changed,
        // e.g. in a v-for
        return true;
        if (patchFlag & 16 /* FULL_PROPS */ ) {
            if (!prevProps) return !!nextProps;
            // presence of this flag indicates props are always non-null
            return hasPropsChanged(prevProps, nextProps, emits);
        } else if (patchFlag & 8 /* PROPS */ ) {
            const dynamicProps = nextVNode.dynamicProps;
            for(let i = 0; i < dynamicProps.length; i++){
                const key = dynamicProps[i];
                if (nextProps[key] !== prevProps[key] && !isEmitListener(emits, key)) return true;
            }
        }
    } else {
        // this path is only taken by manually written render functions
        // so presence of any children leads to a forced update
        if (prevChildren || nextChildren) {
            if (!nextChildren || !nextChildren.$stable) return true;
        }
        if (prevProps === nextProps) return false;
        if (!prevProps) return !!nextProps;
        if (!nextProps) return true;
        return hasPropsChanged(prevProps, nextProps, emits);
    }
    return false;
}
function hasPropsChanged(prevProps, nextProps, emitsOptions) {
    const nextKeys = Object.keys(nextProps);
    if (nextKeys.length !== Object.keys(prevProps).length) return true;
    for(let i = 0; i < nextKeys.length; i++){
        const key = nextKeys[i];
        if (nextProps[key] !== prevProps[key] && !isEmitListener(emitsOptions, key)) return true;
    }
    return false;
}
function updateHOCHostEl({ vnode , parent  }, el // HostNode
) {
    while(parent && parent.subTree === vnode){
        (vnode = parent.vnode).el = el;
        parent = parent.parent;
    }
}
const isSuspense = (type)=>type.__isSuspense;
// Suspense exposes a component-like API, and is treated like a component
// in the compiler, but internally it's a special built-in type that hooks
// directly into the renderer.
const SuspenseImpl = {
    name: "Suspense",
    // In order to make Suspense tree-shakable, we need to avoid importing it
    // directly in the renderer. The renderer checks for the __isSuspense flag
    // on a vnode's type and calls the `process` method, passing in renderer
    // internals.
    __isSuspense: true,
    process (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, // platform-specific impl passed from renderer
    rendererInternals) {
        if (n1 == null) mountSuspense(n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, rendererInternals);
        else patchSuspense(n1, n2, container, anchor, parentComponent, isSVG, slotScopeIds, optimized, rendererInternals);
    },
    hydrate: hydrateSuspense,
    create: createSuspenseBoundary,
    normalize: normalizeSuspenseChildren
};
// Force-casted public typing for h and TSX props inference
const Suspense = SuspenseImpl;
function triggerEvent(vnode, name) {
    const eventListener = vnode.props && vnode.props[name];
    if ((0, _shared.isFunction)(eventListener)) eventListener();
}
function mountSuspense(vnode, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, rendererInternals) {
    const { p: patch , o: { createElement  }  } = rendererInternals;
    const hiddenContainer = createElement("div");
    const suspense = vnode.suspense = createSuspenseBoundary(vnode, parentSuspense, parentComponent, container, hiddenContainer, anchor, isSVG, slotScopeIds, optimized, rendererInternals);
    // start mounting the content subtree in an off-dom container
    patch(null, suspense.pendingBranch = vnode.ssContent, hiddenContainer, null, parentComponent, suspense, isSVG, slotScopeIds);
    // now check if we have encountered any async deps
    if (suspense.deps > 0) {
        // has async
        // invoke @fallback event
        triggerEvent(vnode, "onPending");
        triggerEvent(vnode, "onFallback");
        // mount the fallback tree
        patch(null, vnode.ssFallback, container, anchor, parentComponent, null, isSVG, slotScopeIds);
        setActiveBranch(suspense, vnode.ssFallback);
    } else // Suspense has no async deps. Just resolve.
    suspense.resolve();
}
function patchSuspense(n1, n2, container, anchor, parentComponent, isSVG, slotScopeIds, optimized, { p: patch , um: unmount , o: { createElement  }  }) {
    const suspense = n2.suspense = n1.suspense;
    suspense.vnode = n2;
    n2.el = n1.el;
    const newBranch = n2.ssContent;
    const newFallback = n2.ssFallback;
    const { activeBranch , pendingBranch , isInFallback , isHydrating  } = suspense;
    if (pendingBranch) {
        suspense.pendingBranch = newBranch;
        if (isSameVNodeType(newBranch, pendingBranch)) {
            // same root type but content may have changed.
            patch(pendingBranch, newBranch, suspense.hiddenContainer, null, parentComponent, suspense, isSVG, slotScopeIds, optimized);
            if (suspense.deps <= 0) suspense.resolve();
            else if (isInFallback) {
                patch(activeBranch, newFallback, container, anchor, parentComponent, null, isSVG, slotScopeIds, optimized);
                setActiveBranch(suspense, newFallback);
            }
        } else {
            // toggled before pending tree is resolved
            suspense.pendingId++;
            if (isHydrating) {
                // if toggled before hydration is finished, the current DOM tree is
                // no longer valid. set it as the active branch so it will be unmounted
                // when resolved
                suspense.isHydrating = false;
                suspense.activeBranch = pendingBranch;
            } else unmount(pendingBranch, parentComponent, suspense);
            // increment pending ID. this is used to invalidate async callbacks
            // reset suspense state
            suspense.deps = 0;
            // discard effects from pending branch
            suspense.effects.length = 0;
            // discard previous container
            suspense.hiddenContainer = createElement("div");
            if (isInFallback) {
                // already in fallback state
                patch(null, newBranch, suspense.hiddenContainer, null, parentComponent, suspense, isSVG, slotScopeIds, optimized);
                if (suspense.deps <= 0) suspense.resolve();
                else {
                    patch(activeBranch, newFallback, container, anchor, parentComponent, null, isSVG, slotScopeIds, optimized);
                    setActiveBranch(suspense, newFallback);
                }
            } else if (activeBranch && isSameVNodeType(newBranch, activeBranch)) {
                // toggled "back" to current active branch
                patch(activeBranch, newBranch, container, anchor, parentComponent, suspense, isSVG, slotScopeIds, optimized);
                // force resolve
                suspense.resolve(true);
            } else {
                // switched to a 3rd branch
                patch(null, newBranch, suspense.hiddenContainer, null, parentComponent, suspense, isSVG, slotScopeIds, optimized);
                if (suspense.deps <= 0) suspense.resolve();
            }
        }
    } else if (activeBranch && isSameVNodeType(newBranch, activeBranch)) {
        // root did not change, just normal patch
        patch(activeBranch, newBranch, container, anchor, parentComponent, suspense, isSVG, slotScopeIds, optimized);
        setActiveBranch(suspense, newBranch);
    } else {
        // root node toggled
        // invoke @pending event
        triggerEvent(n2, "onPending");
        // mount pending branch in off-dom container
        suspense.pendingBranch = newBranch;
        suspense.pendingId++;
        patch(null, newBranch, suspense.hiddenContainer, null, parentComponent, suspense, isSVG, slotScopeIds, optimized);
        if (suspense.deps <= 0) // incoming branch has no async deps, resolve now.
        suspense.resolve();
        else {
            const { timeout , pendingId  } = suspense;
            if (timeout > 0) setTimeout(()=>{
                if (suspense.pendingId === pendingId) suspense.fallback(newFallback);
            }, timeout);
            else if (timeout === 0) suspense.fallback(newFallback);
        }
    }
}
let hasWarned = false;
function createSuspenseBoundary(vnode1, parent1, parentComponent1, container1, hiddenContainer, anchor1, isSVG1, slotScopeIds, optimized, rendererInternals, isHydrating = false) {
    /* istanbul ignore if */ if (!hasWarned) {
        hasWarned = true;
        // @ts-ignore `console.info` cannot be null error
        console[console.info ? "info" : "log"](`<Suspense> is an experimental feature and its API will likely change.`);
    }
    const { p: patch , m: move , um: unmount , n: next , o: { parentNode , remove  }  } = rendererInternals;
    const timeout = (0, _shared.toNumber)(vnode1.props && vnode1.props.timeout);
    const suspense = {
        vnode: vnode1,
        parent: parent1,
        parentComponent: parentComponent1,
        isSVG: isSVG1,
        container: container1,
        hiddenContainer,
        anchor: anchor1,
        deps: 0,
        pendingId: 0,
        timeout: typeof timeout === "number" ? timeout : -1,
        activeBranch: null,
        pendingBranch: null,
        isInFallback: true,
        isHydrating,
        isUnmounted: false,
        effects: [],
        resolve (resume = false) {
            if (!resume && !suspense.pendingBranch) throw new Error(`suspense.resolve() is called without a pending branch.`);
            if (suspense.isUnmounted) throw new Error(`suspense.resolve() is called on an already unmounted suspense boundary.`);
            const { vnode , activeBranch , pendingBranch , pendingId , effects , parentComponent , container  } = suspense;
            if (suspense.isHydrating) suspense.isHydrating = false;
            else if (!resume) {
                const delayEnter = activeBranch && pendingBranch.transition && pendingBranch.transition.mode === "out-in";
                if (delayEnter) activeBranch.transition.afterLeave = ()=>{
                    if (pendingId === suspense.pendingId) move(pendingBranch, container, anchor, 0 /* ENTER */ );
                };
                // this is initial anchor on mount
                let { anchor  } = suspense;
                // unmount current active tree
                if (activeBranch) {
                    // if the fallback tree was mounted, it may have been moved
                    // as part of a parent suspense. get the latest anchor for insertion
                    anchor = next(activeBranch);
                    unmount(activeBranch, parentComponent, suspense, true);
                }
                if (!delayEnter) // move content from off-dom container to actual container
                move(pendingBranch, container, anchor, 0 /* ENTER */ );
            }
            setActiveBranch(suspense, pendingBranch);
            suspense.pendingBranch = null;
            suspense.isInFallback = false;
            // flush buffered effects
            // check if there is a pending parent suspense
            let parent = suspense.parent;
            let hasUnresolvedAncestor = false;
            while(parent){
                if (parent.pendingBranch) {
                    // found a pending parent suspense, merge buffered post jobs
                    // into that parent
                    parent.effects.push(...effects);
                    hasUnresolvedAncestor = true;
                    break;
                }
                parent = parent.parent;
            }
            // no pending parent suspense, flush all jobs
            if (!hasUnresolvedAncestor) queuePostFlushCb(effects);
            suspense.effects = [];
            // invoke @resolve event
            triggerEvent(vnode, "onResolve");
        },
        fallback (fallbackVNode) {
            if (!suspense.pendingBranch) return;
            const { vnode , activeBranch , parentComponent , container , isSVG  } = suspense;
            // invoke @fallback event
            triggerEvent(vnode, "onFallback");
            const anchor = next(activeBranch);
            const mountFallback = ()=>{
                if (!suspense.isInFallback) return;
                // mount the fallback tree
                patch(null, fallbackVNode, container, anchor, parentComponent, null, isSVG, slotScopeIds, optimized);
                setActiveBranch(suspense, fallbackVNode);
            };
            const delayEnter = fallbackVNode.transition && fallbackVNode.transition.mode === "out-in";
            if (delayEnter) activeBranch.transition.afterLeave = mountFallback;
            suspense.isInFallback = true;
            // unmount current active branch
            unmount(activeBranch, parentComponent, null, true // shouldRemove
            );
            if (!delayEnter) mountFallback();
        },
        move (container, anchor, type) {
            suspense.activeBranch && move(suspense.activeBranch, container, anchor, type);
            suspense.container = container;
        },
        next () {
            return suspense.activeBranch && next(suspense.activeBranch);
        },
        registerDep (instance, setupRenderEffect) {
            const isInPendingSuspense = !!suspense.pendingBranch;
            if (isInPendingSuspense) suspense.deps++;
            const hydratedEl = instance.vnode.el;
            instance.asyncDep.catch((err)=>{
                handleError(err, instance, 0 /* SETUP_FUNCTION */ );
            }).then((asyncSetupResult)=>{
                // retry when the setup() promise resolves.
                // component may have been unmounted before resolve.
                if (instance.isUnmounted || suspense.isUnmounted || suspense.pendingId !== instance.suspenseId) return;
                // retry from this component
                instance.asyncResolved = true;
                const { vnode  } = instance;
                pushWarningContext(vnode);
                handleSetupResult(instance, asyncSetupResult, false);
                if (hydratedEl) // vnode may have been replaced if an update happened before the
                // async dep is resolved.
                vnode.el = hydratedEl;
                const placeholder = !hydratedEl && instance.subTree.el;
                setupRenderEffect(instance, vnode, // component may have been moved before resolve.
                // if this is not a hydration, instance.subTree will be the comment
                // placeholder.
                parentNode(hydratedEl || instance.subTree.el), // anchor will not be used if this is hydration, so only need to
                // consider the comment placeholder case.
                hydratedEl ? null : next(instance.subTree), suspense, isSVG1, optimized);
                if (placeholder) remove(placeholder);
                updateHOCHostEl(instance, vnode.el);
                popWarningContext();
                // only decrease deps count if suspense is not already resolved
                if (isInPendingSuspense && --suspense.deps === 0) suspense.resolve();
            });
        },
        unmount (parentSuspense, doRemove) {
            suspense.isUnmounted = true;
            if (suspense.activeBranch) unmount(suspense.activeBranch, parentComponent1, parentSuspense, doRemove);
            if (suspense.pendingBranch) unmount(suspense.pendingBranch, parentComponent1, parentSuspense, doRemove);
        }
    };
    return suspense;
}
function hydrateSuspense(node, vnode, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, rendererInternals, hydrateNode) {
    /* eslint-disable no-restricted-globals */ const suspense = vnode.suspense = createSuspenseBoundary(vnode, parentSuspense, parentComponent, node.parentNode, document.createElement("div"), null, isSVG, slotScopeIds, optimized, rendererInternals, true);
    // there are two possible scenarios for server-rendered suspense:
    // - success: ssr content should be fully resolved
    // - failure: ssr content should be the fallback branch.
    // however, on the client we don't really know if it has failed or not
    // attempt to hydrate the DOM assuming it has succeeded, but we still
    // need to construct a suspense boundary first
    const result = hydrateNode(node, suspense.pendingBranch = vnode.ssContent, parentComponent, suspense, slotScopeIds, optimized);
    if (suspense.deps === 0) suspense.resolve();
    return result;
/* eslint-enable no-restricted-globals */ }
function normalizeSuspenseChildren(vnode) {
    const { shapeFlag , children  } = vnode;
    const isSlotChildren = shapeFlag & 32 /* SLOTS_CHILDREN */ ;
    vnode.ssContent = normalizeSuspenseSlot(isSlotChildren ? children.default : children);
    vnode.ssFallback = isSlotChildren ? normalizeSuspenseSlot(children.fallback) : createVNode(Comment);
}
function normalizeSuspenseSlot(s) {
    let block;
    if ((0, _shared.isFunction)(s)) {
        const isCompiledSlot = s._c;
        if (isCompiledSlot) {
            // disableTracking: false
            // allow block tracking for compiled slots
            // (see ./componentRenderContext.ts)
            s._d = false;
            openBlock();
        }
        s = s();
        if (isCompiledSlot) {
            s._d = true;
            block = currentBlock;
            closeBlock();
        }
    }
    if ((0, _shared.isArray)(s)) {
        const singleChild = filterSingleRoot(s);
        if (!singleChild) warn(`<Suspense> slots expect a single root node.`);
        s = singleChild;
    }
    s = normalizeVNode(s);
    if (block && !s.dynamicChildren) s.dynamicChildren = block.filter((c)=>c !== s);
    return s;
}
function queueEffectWithSuspense(fn, suspense) {
    if (suspense && suspense.pendingBranch) {
        if ((0, _shared.isArray)(fn)) suspense.effects.push(...fn);
        else suspense.effects.push(fn);
    } else queuePostFlushCb(fn);
}
function setActiveBranch(suspense, branch) {
    suspense.activeBranch = branch;
    const { vnode , parentComponent  } = suspense;
    const el = vnode.el = branch.el;
    // in case suspense is the root node of a component,
    // recursively update the HOC el
    if (parentComponent && parentComponent.subTree === vnode) {
        parentComponent.vnode.el = el;
        updateHOCHostEl(parentComponent, el);
    }
}
function provide(key, value) {
    if (!currentInstance) warn(`provide() can only be used inside setup().`);
    else {
        let provides = currentInstance.provides;
        // by default an instance inherits its parent's provides object
        // but when it needs to provide values of its own, it creates its
        // own provides object using parent provides object as prototype.
        // this way in `inject` we can simply look up injections from direct
        // parent and let the prototype chain do the work.
        const parentProvides = currentInstance.parent && currentInstance.parent.provides;
        if (parentProvides === provides) provides = currentInstance.provides = Object.create(parentProvides);
        // TS doesn't allow symbol as index type
        provides[key] = value;
    }
}
function inject(key, defaultValue, treatDefaultAsFactory = false) {
    // fallback to `currentRenderingInstance` so that this can be called in
    // a functional component
    const instance = currentInstance || currentRenderingInstance;
    if (instance) {
        // #2400
        // to support `app.use` plugins,
        // fallback to appContext's `provides` if the intance is at root
        const provides = instance.parent == null ? instance.vnode.appContext && instance.vnode.appContext.provides : instance.parent.provides;
        if (provides && key in provides) // TS doesn't allow symbol as index type
        return provides[key];
        else if (arguments.length > 1) return treatDefaultAsFactory && (0, _shared.isFunction)(defaultValue) ? defaultValue.call(instance.proxy) : defaultValue;
        else warn(`injection "${String(key)}" not found.`);
    } else warn(`inject() can only be used inside setup() or functional components.`);
}
function useTransitionState() {
    const state = {
        isMounted: false,
        isLeaving: false,
        isUnmounting: false,
        leavingVNodes: new Map()
    };
    onMounted(()=>{
        state.isMounted = true;
    });
    onBeforeUnmount(()=>{
        state.isUnmounting = true;
    });
    return state;
}
const TransitionHookValidator = [
    Function,
    Array
];
const BaseTransitionImpl = {
    name: `BaseTransition`,
    props: {
        mode: String,
        appear: Boolean,
        persisted: Boolean,
        // enter
        onBeforeEnter: TransitionHookValidator,
        onEnter: TransitionHookValidator,
        onAfterEnter: TransitionHookValidator,
        onEnterCancelled: TransitionHookValidator,
        // leave
        onBeforeLeave: TransitionHookValidator,
        onLeave: TransitionHookValidator,
        onAfterLeave: TransitionHookValidator,
        onLeaveCancelled: TransitionHookValidator,
        // appear
        onBeforeAppear: TransitionHookValidator,
        onAppear: TransitionHookValidator,
        onAfterAppear: TransitionHookValidator,
        onAppearCancelled: TransitionHookValidator
    },
    setup (props, { slots  }) {
        const instance = getCurrentInstance();
        const state = useTransitionState();
        let prevTransitionKey;
        return ()=>{
            const children = slots.default && getTransitionRawChildren(slots.default(), true);
            if (!children || !children.length) return;
            // warn multiple elements
            if (children.length > 1) warn("<transition> can only be used on a single element or component. Use <transition-group> for lists.");
            // there's no need to track reactivity for these props so use the raw
            // props for a bit better perf
            const rawProps = (0, _reactivity.toRaw)(props);
            const { mode  } = rawProps;
            // check mode
            if (mode && ![
                "in-out",
                "out-in",
                "default"
            ].includes(mode)) warn(`invalid <transition> mode: ${mode}`);
            // at this point children has a guaranteed length of 1.
            const child = children[0];
            if (state.isLeaving) return emptyPlaceholder(child);
            // in the case of <transition><keep-alive/></transition>, we need to
            // compare the type of the kept-alive children.
            const innerChild = getKeepAliveChild(child);
            if (!innerChild) return emptyPlaceholder(child);
            const enterHooks = resolveTransitionHooks(innerChild, rawProps, state, instance);
            setTransitionHooks(innerChild, enterHooks);
            const oldChild = instance.subTree;
            const oldInnerChild = oldChild && getKeepAliveChild(oldChild);
            let transitionKeyChanged = false;
            const { getTransitionKey  } = innerChild.type;
            if (getTransitionKey) {
                const key = getTransitionKey();
                if (prevTransitionKey === undefined) prevTransitionKey = key;
                else if (key !== prevTransitionKey) {
                    prevTransitionKey = key;
                    transitionKeyChanged = true;
                }
            }
            // handle mode
            if (oldInnerChild && oldInnerChild.type !== Comment && (!isSameVNodeType(innerChild, oldInnerChild) || transitionKeyChanged)) {
                const leavingHooks = resolveTransitionHooks(oldInnerChild, rawProps, state, instance);
                // update old tree's hooks in case of dynamic transition
                setTransitionHooks(oldInnerChild, leavingHooks);
                // switching between different views
                if (mode === "out-in") {
                    state.isLeaving = true;
                    // return placeholder node and queue update when leave finishes
                    leavingHooks.afterLeave = ()=>{
                        state.isLeaving = false;
                        instance.update();
                    };
                    return emptyPlaceholder(child);
                } else if (mode === "in-out" && innerChild.type !== Comment) leavingHooks.delayLeave = (el, earlyRemove, delayedLeave)=>{
                    const leavingVNodesCache = getLeavingNodesForType(state, oldInnerChild);
                    leavingVNodesCache[String(oldInnerChild.key)] = oldInnerChild;
                    // early removal callback
                    el._leaveCb = ()=>{
                        earlyRemove();
                        el._leaveCb = undefined;
                        delete enterHooks.delayedLeave;
                    };
                    enterHooks.delayedLeave = delayedLeave;
                };
            }
            return child;
        };
    }
};
// export the public type for h/tsx inference
// also to avoid inline import() in generated d.ts files
const BaseTransition = BaseTransitionImpl;
function getLeavingNodesForType(state, vnode) {
    const { leavingVNodes  } = state;
    let leavingVNodesCache = leavingVNodes.get(vnode.type);
    if (!leavingVNodesCache) {
        leavingVNodesCache = Object.create(null);
        leavingVNodes.set(vnode.type, leavingVNodesCache);
    }
    return leavingVNodesCache;
}
// The transition hooks are attached to the vnode as vnode.transition
// and will be called at appropriate timing in the renderer.
function resolveTransitionHooks(vnode2, props, state, instance) {
    const { appear , mode , persisted =false , onBeforeEnter , onEnter , onAfterEnter , onEnterCancelled , onBeforeLeave , onLeave , onAfterLeave , onLeaveCancelled , onBeforeAppear , onAppear , onAfterAppear , onAppearCancelled  } = props;
    const key1 = String(vnode2.key);
    const leavingVNodesCache = getLeavingNodesForType(state, vnode2);
    const callHook1 = (hook, args)=>{
        hook && callWithAsyncErrorHandling(hook, instance, 9 /* TRANSITION_HOOK */ , args);
    };
    const hooks = {
        mode,
        persisted,
        beforeEnter (el) {
            let hook = onBeforeEnter;
            if (!state.isMounted) {
                if (appear) hook = onBeforeAppear || onBeforeEnter;
                else return;
            }
            // for same element (v-show)
            if (el._leaveCb) el._leaveCb(true);
            // for toggled element with same key (v-if)
            const leavingVNode = leavingVNodesCache[key1];
            if (leavingVNode && isSameVNodeType(vnode2, leavingVNode) && leavingVNode.el._leaveCb) // force early removal (not cancelled)
            leavingVNode.el._leaveCb();
            callHook1(hook, [
                el
            ]);
        },
        enter (el) {
            let hook = onEnter;
            let afterHook = onAfterEnter;
            let cancelHook = onEnterCancelled;
            if (!state.isMounted) {
                if (appear) {
                    hook = onAppear || onEnter;
                    afterHook = onAfterAppear || onAfterEnter;
                    cancelHook = onAppearCancelled || onEnterCancelled;
                } else return;
            }
            let called = false;
            const done = el._enterCb = (cancelled)=>{
                if (called) return;
                called = true;
                if (cancelled) callHook1(cancelHook, [
                    el
                ]);
                else callHook1(afterHook, [
                    el
                ]);
                if (hooks.delayedLeave) hooks.delayedLeave();
                el._enterCb = undefined;
            };
            if (hook) {
                hook(el, done);
                if (hook.length <= 1) done();
            } else done();
        },
        leave (el, remove) {
            const key = String(vnode2.key);
            if (el._enterCb) el._enterCb(true);
            if (state.isUnmounting) return remove();
            callHook1(onBeforeLeave, [
                el
            ]);
            let called = false;
            const done = el._leaveCb = (cancelled)=>{
                if (called) return;
                called = true;
                remove();
                if (cancelled) callHook1(onLeaveCancelled, [
                    el
                ]);
                else callHook1(onAfterLeave, [
                    el
                ]);
                el._leaveCb = undefined;
                if (leavingVNodesCache[key] === vnode2) delete leavingVNodesCache[key];
            };
            leavingVNodesCache[key] = vnode2;
            if (onLeave) {
                onLeave(el, done);
                if (onLeave.length <= 1) done();
            } else done();
        },
        clone (vnode) {
            return resolveTransitionHooks(vnode, props, state, instance);
        }
    };
    return hooks;
}
// the placeholder really only handles one special case: KeepAlive
// in the case of a KeepAlive in a leave phase we need to return a KeepAlive
// placeholder with empty content to avoid the KeepAlive instance from being
// unmounted.
function emptyPlaceholder(vnode) {
    if (isKeepAlive(vnode)) {
        vnode = cloneVNode(vnode);
        vnode.children = null;
        return vnode;
    }
}
function getKeepAliveChild(vnode) {
    return isKeepAlive(vnode) ? vnode.children ? vnode.children[0] : undefined : vnode;
}
function setTransitionHooks(vnode, hooks) {
    if (vnode.shapeFlag & 6 /* COMPONENT */  && vnode.component) setTransitionHooks(vnode.component.subTree, hooks);
    else if (vnode.shapeFlag & 128 /* SUSPENSE */ ) {
        vnode.ssContent.transition = hooks.clone(vnode.ssContent);
        vnode.ssFallback.transition = hooks.clone(vnode.ssFallback);
    } else vnode.transition = hooks;
}
function getTransitionRawChildren(children, keepComment = false) {
    let ret = [];
    let keyedFragmentCount = 0;
    for(let i = 0; i < children.length; i++){
        const child = children[i];
        // handle fragment children case, e.g. v-for
        if (child.type === Fragment) {
            if (child.patchFlag & 128 /* KEYED_FRAGMENT */ ) keyedFragmentCount++;
            ret = ret.concat(getTransitionRawChildren(child.children, keepComment));
        } else if (keepComment || child.type !== Comment) ret.push(child);
    }
    // #1126 if a transition children list contains multiple sub fragments, these
    // fragments will be merged into a flat children array. Since each v-for
    // fragment may contain different static bindings inside, we need to de-op
    // these children to force full diffs to ensure correct behavior.
    if (keyedFragmentCount > 1) for(let i1 = 0; i1 < ret.length; i1++)ret[i1].patchFlag = -2 /* BAIL */ ;
    return ret;
}
// implementation, close to no-op
function defineComponent(options) {
    return (0, _shared.isFunction)(options) ? {
        setup: options,
        name: options.name
    } : options;
}
const isAsyncWrapper = (i)=>!!i.type.__asyncLoader;
function defineAsyncComponent(source) {
    if ((0, _shared.isFunction)(source)) source = {
        loader: source
    };
    const { loader , loadingComponent , errorComponent , delay =200 , timeout , suspensible =true , onError: userOnError  } = source;
    let pendingRequest = null;
    let resolvedComp;
    let retries = 0;
    const retry = ()=>{
        retries++;
        pendingRequest = null;
        return load();
    };
    const load = ()=>{
        let thisRequest;
        return pendingRequest || (thisRequest = pendingRequest = loader().catch((err)=>{
            err = err instanceof Error ? err : new Error(String(err));
            if (userOnError) return new Promise((resolve1, reject)=>{
                const userRetry = ()=>resolve1(retry());
                const userFail = ()=>reject(err);
                userOnError(err, userRetry, userFail, retries + 1);
            });
            else throw err;
        }).then((comp)=>{
            if (thisRequest !== pendingRequest && pendingRequest) return pendingRequest;
            if (!comp) warn(`Async component loader resolved to undefined. ` + `If you are using retry(), make sure to return its return value.`);
            // interop module default
            if (comp && (comp.__esModule || comp[Symbol.toStringTag] === "Module")) comp = comp.default;
            if (comp && !(0, _shared.isObject)(comp) && !(0, _shared.isFunction)(comp)) throw new Error(`Invalid async component load result: ${comp}`);
            resolvedComp = comp;
            return comp;
        }));
    };
    return defineComponent({
        name: "AsyncComponentWrapper",
        __asyncLoader: load,
        get __asyncResolved () {
            return resolvedComp;
        },
        setup () {
            const instance = currentInstance;
            // already resolved
            if (resolvedComp) return ()=>createInnerComp(resolvedComp, instance);
            const onError = (err)=>{
                pendingRequest = null;
                handleError(err, instance, 13 /* ASYNC_COMPONENT_LOADER */ , !errorComponent /* do not throw in dev if user provided error component */ );
            };
            // suspense-controlled or SSR.
            if (suspensible && instance.suspense || false) return load().then((comp)=>{
                return ()=>createInnerComp(comp, instance);
            }).catch((err)=>{
                onError(err);
                return ()=>errorComponent ? createVNode(errorComponent, {
                        error: err
                    }) : null;
            });
            const loaded = (0, _reactivity.ref)(false);
            const error = (0, _reactivity.ref)();
            const delayed = (0, _reactivity.ref)(!!delay);
            if (delay) setTimeout(()=>{
                delayed.value = false;
            }, delay);
            if (timeout != null) setTimeout(()=>{
                if (!loaded.value && !error.value) {
                    const err = new Error(`Async component timed out after ${timeout}ms.`);
                    onError(err);
                    error.value = err;
                }
            }, timeout);
            load().then(()=>{
                loaded.value = true;
                if (instance.parent && isKeepAlive(instance.parent.vnode)) // parent is keep-alive, force update so the loaded component's
                // name is taken into account
                queueJob(instance.parent.update);
            }).catch((err)=>{
                onError(err);
                error.value = err;
            });
            return ()=>{
                if (loaded.value && resolvedComp) return createInnerComp(resolvedComp, instance);
                else if (error.value && errorComponent) return createVNode(errorComponent, {
                    error: error.value
                });
                else if (loadingComponent && !delayed.value) return createVNode(loadingComponent);
            };
        }
    });
}
function createInnerComp(comp, { vnode: { ref , props , children  }  }) {
    const vnode = createVNode(comp, props, children);
    // ensure inner component inherits the async wrapper's ref owner
    vnode.ref = ref;
    return vnode;
}
const isKeepAlive = (vnode)=>vnode.type.__isKeepAlive;
const KeepAliveImpl = {
    name: `KeepAlive`,
    // Marker for special handling inside the renderer. We are not using a ===
    // check directly on KeepAlive in the renderer, because importing it directly
    // would prevent it from being tree-shaken.
    __isKeepAlive: true,
    props: {
        include: [
            String,
            RegExp,
            Array
        ],
        exclude: [
            String,
            RegExp,
            Array
        ],
        max: [
            String,
            Number
        ]
    },
    setup (props, { slots  }) {
        const instance2 = getCurrentInstance();
        // KeepAlive communicates with the instantiated renderer via the
        // ctx where the renderer passes in its internals,
        // and the KeepAlive instance exposes activate/deactivate implementations.
        // The whole point of this is to avoid importing KeepAlive directly in the
        // renderer to facilitate tree-shaking.
        const sharedContext = instance2.ctx;
        // if the internal renderer is not registered, it indicates that this is server-side rendering,
        // for KeepAlive, we just need to render its children
        if (!sharedContext.renderer) return slots.default;
        const cache = new Map();
        const keys = new Set();
        let current = null;
        instance2.__v_cache = cache;
        const parentSuspense = instance2.suspense;
        const { renderer: { p: patch , m: move , um: _unmount , o: { createElement  }  }  } = sharedContext;
        const storageContainer = createElement("div");
        sharedContext.activate = (vnode, container, anchor, isSVG, optimized)=>{
            const instance = vnode.component;
            move(vnode, container, anchor, 0 /* ENTER */ , parentSuspense);
            // in case props have changed
            patch(instance.vnode, vnode, container, anchor, instance, parentSuspense, isSVG, vnode.slotScopeIds, optimized);
            queuePostRenderEffect(()=>{
                instance.isDeactivated = false;
                if (instance.a) (0, _shared.invokeArrayFns)(instance.a);
                const vnodeHook = vnode.props && vnode.props.onVnodeMounted;
                if (vnodeHook) invokeVNodeHook(vnodeHook, instance.parent, vnode);
            }, parentSuspense);
            // Update components tree
            devtoolsComponentAdded(instance);
        };
        sharedContext.deactivate = (vnode)=>{
            const instance = vnode.component;
            move(vnode, storageContainer, null, 1 /* LEAVE */ , parentSuspense);
            queuePostRenderEffect(()=>{
                if (instance.da) (0, _shared.invokeArrayFns)(instance.da);
                const vnodeHook = vnode.props && vnode.props.onVnodeUnmounted;
                if (vnodeHook) invokeVNodeHook(vnodeHook, instance.parent, vnode);
                instance.isDeactivated = true;
            }, parentSuspense);
            // Update components tree
            devtoolsComponentAdded(instance);
        };
        function unmount(vnode) {
            // reset the shapeFlag so it can be properly unmounted
            resetShapeFlag(vnode);
            _unmount(vnode, instance2, parentSuspense);
        }
        function pruneCache(filter) {
            cache.forEach((vnode, key)=>{
                const name = getComponentName(vnode.type);
                if (name && (!filter || !filter(name))) pruneCacheEntry(key);
            });
        }
        function pruneCacheEntry(key) {
            const cached = cache.get(key);
            if (!current || cached.type !== current.type) unmount(cached);
            else if (current) // current active instance should no longer be kept-alive.
            // we can't unmount it now but it might be later, so reset its flag now.
            resetShapeFlag(current);
            cache.delete(key);
            keys.delete(key);
        }
        // prune cache on include/exclude prop change
        watch(()=>[
                props.include,
                props.exclude
            ], ([include, exclude])=>{
            include && pruneCache((name)=>matches(include, name));
            exclude && pruneCache((name)=>!matches(exclude, name));
        }, // prune post-render after `current` has been updated
        {
            flush: "post",
            deep: true
        });
        // cache sub tree after render
        let pendingCacheKey = null;
        const cacheSubtree = ()=>{
            // fix #1621, the pendingCacheKey could be 0
            if (pendingCacheKey != null) cache.set(pendingCacheKey, getInnerChild(instance2.subTree));
        };
        onMounted(cacheSubtree);
        onUpdated(cacheSubtree);
        onBeforeUnmount(()=>{
            cache.forEach((cached)=>{
                const { subTree , suspense  } = instance2;
                const vnode = getInnerChild(subTree);
                if (cached.type === vnode.type) {
                    // current instance will be unmounted as part of keep-alive's unmount
                    resetShapeFlag(vnode);
                    // but invoke its deactivated hook here
                    const da = vnode.component.da;
                    da && queuePostRenderEffect(da, suspense);
                    return;
                }
                unmount(cached);
            });
        });
        return ()=>{
            pendingCacheKey = null;
            if (!slots.default) return null;
            const children = slots.default();
            const rawVNode = children[0];
            if (children.length > 1) {
                warn(`KeepAlive should contain exactly one component child.`);
                current = null;
                return children;
            } else if (!isVNode(rawVNode) || !(rawVNode.shapeFlag & 4 /* STATEFUL_COMPONENT */ ) && !(rawVNode.shapeFlag & 128 /* SUSPENSE */ )) {
                current = null;
                return rawVNode;
            }
            let vnode = getInnerChild(rawVNode);
            const comp = vnode.type;
            // for async components, name check should be based in its loaded
            // inner component if available
            const name = getComponentName(isAsyncWrapper(vnode) ? vnode.type.__asyncResolved || {} : comp);
            const { include , exclude , max  } = props;
            if (include && (!name || !matches(include, name)) || exclude && name && matches(exclude, name)) {
                current = vnode;
                return rawVNode;
            }
            const key = vnode.key == null ? comp : vnode.key;
            const cachedVNode = cache.get(key);
            // clone vnode if it's reused because we are going to mutate it
            if (vnode.el) {
                vnode = cloneVNode(vnode);
                if (rawVNode.shapeFlag & 128 /* SUSPENSE */ ) rawVNode.ssContent = vnode;
            }
            // #1513 it's possible for the returned vnode to be cloned due to attr
            // fallthrough or scopeId, so the vnode here may not be the final vnode
            // that is mounted. Instead of caching it directly, we store the pending
            // key and cache `instance.subTree` (the normalized vnode) in
            // beforeMount/beforeUpdate hooks.
            pendingCacheKey = key;
            if (cachedVNode) {
                // copy over mounted state
                vnode.el = cachedVNode.el;
                vnode.component = cachedVNode.component;
                if (vnode.transition) // recursively update transition hooks on subTree
                setTransitionHooks(vnode, vnode.transition);
                // avoid vnode being mounted as fresh
                vnode.shapeFlag |= 512 /* COMPONENT_KEPT_ALIVE */ ;
                // make this key the freshest
                keys.delete(key);
                keys.add(key);
            } else {
                keys.add(key);
                // prune oldest entry
                if (max && keys.size > parseInt(max, 10)) pruneCacheEntry(keys.values().next().value);
            }
            // avoid vnode being unmounted
            vnode.shapeFlag |= 256 /* COMPONENT_SHOULD_KEEP_ALIVE */ ;
            current = vnode;
            return rawVNode;
        };
    }
};
// export the public type for h/tsx inference
// also to avoid inline import() in generated d.ts files
const KeepAlive = KeepAliveImpl;
function matches(pattern, name) {
    if ((0, _shared.isArray)(pattern)) return pattern.some((p)=>matches(p, name));
    else if ((0, _shared.isString)(pattern)) return pattern.split(",").indexOf(name) > -1;
    else if (pattern.test) return pattern.test(name);
    /* istanbul ignore next */ return false;
}
function onActivated(hook, target) {
    registerKeepAliveHook(hook, "a" /* ACTIVATED */ , target);
}
function onDeactivated(hook, target) {
    registerKeepAliveHook(hook, "da" /* DEACTIVATED */ , target);
}
function registerKeepAliveHook(hook, type, target = currentInstance) {
    // cache the deactivate branch check wrapper for injected hooks so the same
    // hook can be properly deduped by the scheduler. "__wdc" stands for "with
    // deactivation check".
    const wrappedHook = hook.__wdc || (hook.__wdc = ()=>{
        // only fire the hook if the target instance is NOT in a deactivated branch.
        let current = target;
        while(current){
            if (current.isDeactivated) return;
            current = current.parent;
        }
        hook();
    });
    injectHook(type, wrappedHook, target);
    // In addition to registering it on the target instance, we walk up the parent
    // chain and register it on all ancestor instances that are keep-alive roots.
    // This avoids the need to walk the entire component tree when invoking these
    // hooks, and more importantly, avoids the need to track child components in
    // arrays.
    if (target) {
        let current = target.parent;
        while(current && current.parent){
            if (isKeepAlive(current.parent.vnode)) injectToKeepAliveRoot(wrappedHook, type, target, current);
            current = current.parent;
        }
    }
}
function injectToKeepAliveRoot(hook, type, target, keepAliveRoot) {
    // injectHook wraps the original for error handling, so make sure to remove
    // the wrapped version.
    const injected = injectHook(type, hook, keepAliveRoot, true);
    onUnmounted(()=>{
        (0, _shared.remove)(keepAliveRoot[type], injected);
    }, target);
}
function resetShapeFlag(vnode) {
    let shapeFlag = vnode.shapeFlag;
    if (shapeFlag & 256 /* COMPONENT_SHOULD_KEEP_ALIVE */ ) shapeFlag -= 256 /* COMPONENT_SHOULD_KEEP_ALIVE */ ;
    if (shapeFlag & 512 /* COMPONENT_KEPT_ALIVE */ ) shapeFlag -= 512 /* COMPONENT_KEPT_ALIVE */ ;
    vnode.shapeFlag = shapeFlag;
}
function getInnerChild(vnode) {
    return vnode.shapeFlag & 128 /* SUSPENSE */  ? vnode.ssContent : vnode;
}
function injectHook(type, hook, target = currentInstance, prepend = false) {
    if (target) {
        const hooks = target[type] || (target[type] = []);
        // cache the error handling wrapper for injected hooks so the same hook
        // can be properly deduped by the scheduler. "__weh" stands for "with error
        // handling".
        const wrappedHook = hook.__weh || (hook.__weh = (...args)=>{
            if (target.isUnmounted) return;
            // disable tracking inside all lifecycle hooks
            // since they can potentially be called inside effects.
            (0, _reactivity.pauseTracking)();
            // Set currentInstance during hook invocation.
            // This assumes the hook does not synchronously trigger other hooks, which
            // can only be false when the user does something really funky.
            setCurrentInstance(target);
            const res = callWithAsyncErrorHandling(hook, target, type, args);
            unsetCurrentInstance();
            (0, _reactivity.resetTracking)();
            return res;
        });
        if (prepend) hooks.unshift(wrappedHook);
        else hooks.push(wrappedHook);
        return wrappedHook;
    } else {
        const apiName = (0, _shared.toHandlerKey)(ErrorTypeStrings[type].replace(/ hook$/, ""));
        warn(`${apiName} is called when there is no active component instance to be ` + `associated with. ` + `Lifecycle injection APIs can only be used during execution of setup().` + (` If you are using async setup(), make sure to register lifecycle ` + `hooks before the first await statement.`));
    }
}
const createHook = (lifecycle)=>(hook, target = currentInstance)=>// post-create lifecycle registrations are noops during SSR (except for serverPrefetch)
        (!isInSSRComponentSetup || lifecycle === "sp" /* SERVER_PREFETCH */ ) && injectHook(lifecycle, hook, target);
const onBeforeMount = createHook("bm" /* BEFORE_MOUNT */ );
const onMounted = createHook("m" /* MOUNTED */ );
const onBeforeUpdate = createHook("bu" /* BEFORE_UPDATE */ );
const onUpdated = createHook("u" /* UPDATED */ );
const onBeforeUnmount = createHook("bum" /* BEFORE_UNMOUNT */ );
const onUnmounted = createHook("um" /* UNMOUNTED */ );
const onServerPrefetch = createHook("sp" /* SERVER_PREFETCH */ );
const onRenderTriggered = createHook("rtg" /* RENDER_TRIGGERED */ );
const onRenderTracked = createHook("rtc" /* RENDER_TRACKED */ );
function onErrorCaptured(hook, target = currentInstance) {
    injectHook("ec" /* ERROR_CAPTURED */ , hook, target);
}
function createDuplicateChecker() {
    const cache = Object.create(null);
    return (type, key)=>{
        if (cache[key]) warn(`${type} property "${key}" is already defined in ${cache[key]}.`);
        else cache[key] = type;
    };
}
let shouldCacheAccess = true;
function applyOptions(instance) {
    const options = resolveMergedOptions(instance);
    const publicThis = instance.proxy;
    const ctx = instance.ctx;
    // do not cache property access on public proxy during state initialization
    shouldCacheAccess = false;
    // call beforeCreate first before accessing other options since
    // the hook may mutate resolved options (#2791)
    if (options.beforeCreate) callHook(options.beforeCreate, instance, "bc" /* BEFORE_CREATE */ );
    const { // state
    data: dataOptions , computed: computedOptions , methods , watch: watchOptions , provide: provideOptions , inject: injectOptions , // lifecycle
    created , beforeMount , mounted , beforeUpdate , updated , activated , deactivated , beforeDestroy , beforeUnmount , destroyed , unmounted , render , renderTracked , renderTriggered , errorCaptured , serverPrefetch , // public API
    expose , inheritAttrs , // assets
    components , directives , filters  } = options;
    const checkDuplicateProperties = createDuplicateChecker();
    {
        const [propsOptions] = instance.propsOptions;
        if (propsOptions) for(const key in propsOptions)checkDuplicateProperties("Props" /* PROPS */ , key);
    }
    // options initialization order (to be consistent with Vue 2):
    // - props (already done outside of this function)
    // - inject
    // - methods
    // - data (deferred since it relies on `this` access)
    // - computed
    // - watch (deferred since it relies on `this` access)
    if (injectOptions) resolveInjections(injectOptions, ctx, checkDuplicateProperties, instance.appContext.config.unwrapInjectedRef);
    if (methods) for(const key4 in methods){
        const methodHandler = methods[key4];
        if ((0, _shared.isFunction)(methodHandler)) {
            Object.defineProperty(ctx, key4, {
                value: methodHandler.bind(publicThis),
                configurable: true,
                enumerable: true,
                writable: true
            });
            checkDuplicateProperties("Methods" /* METHODS */ , key4);
        } else warn(`Method "${key4}" has type "${typeof methodHandler}" in the component definition. ` + `Did you reference the function correctly?`);
    }
    if (dataOptions) {
        if (!(0, _shared.isFunction)(dataOptions)) warn(`The data option must be a function. ` + `Plain object usage is no longer supported.`);
        const data = dataOptions.call(publicThis, publicThis);
        if ((0, _shared.isPromise)(data)) warn(`data() returned a Promise - note data() cannot be async; If you ` + `intend to perform data fetching before component renders, use ` + `async setup() + <Suspense>.`);
        if (!(0, _shared.isObject)(data)) warn(`data() should return an object.`);
        else {
            instance.data = (0, _reactivity.reactive)(data);
            for(const key in data){
                checkDuplicateProperties("Data" /* DATA */ , key);
                // expose data on ctx during dev
                if (key[0] !== "$" && key[0] !== "_") Object.defineProperty(ctx, key, {
                    configurable: true,
                    enumerable: true,
                    get: ()=>data[key],
                    set: (0, _shared.NOOP)
                });
            }
        }
    }
    // state initialization complete at this point - start caching access
    shouldCacheAccess = true;
    if (computedOptions) for(const key2 in computedOptions){
        const opt = computedOptions[key2];
        const get = (0, _shared.isFunction)(opt) ? opt.bind(publicThis, publicThis) : (0, _shared.isFunction)(opt.get) ? opt.get.bind(publicThis, publicThis) : (0, _shared.NOOP);
        if (get === (0, _shared.NOOP)) warn(`Computed property "${key2}" has no getter.`);
        const set = !(0, _shared.isFunction)(opt) && (0, _shared.isFunction)(opt.set) ? opt.set.bind(publicThis) : ()=>{
            warn(`Write operation failed: computed property "${key2}" is readonly.`);
        };
        const c = (0, _reactivity.computed)({
            get,
            set
        });
        Object.defineProperty(ctx, key2, {
            enumerable: true,
            configurable: true,
            get: ()=>c.value,
            set: (v)=>c.value = v
        });
        checkDuplicateProperties("Computed" /* COMPUTED */ , key2);
    }
    if (watchOptions) for(const key3 in watchOptions)createWatcher(watchOptions[key3], ctx, publicThis, key3);
    if (provideOptions) {
        const provides = (0, _shared.isFunction)(provideOptions) ? provideOptions.call(publicThis) : provideOptions;
        Reflect.ownKeys(provides).forEach((key)=>{
            provide(key, provides[key]);
        });
    }
    if (created) callHook(created, instance, "c" /* CREATED */ );
    function registerLifecycleHook(register, hook) {
        if ((0, _shared.isArray)(hook)) hook.forEach((_hook)=>register(_hook.bind(publicThis)));
        else if (hook) register(hook.bind(publicThis));
    }
    registerLifecycleHook(onBeforeMount, beforeMount);
    registerLifecycleHook(onMounted, mounted);
    registerLifecycleHook(onBeforeUpdate, beforeUpdate);
    registerLifecycleHook(onUpdated, updated);
    registerLifecycleHook(onActivated, activated);
    registerLifecycleHook(onDeactivated, deactivated);
    registerLifecycleHook(onErrorCaptured, errorCaptured);
    registerLifecycleHook(onRenderTracked, renderTracked);
    registerLifecycleHook(onRenderTriggered, renderTriggered);
    registerLifecycleHook(onBeforeUnmount, beforeUnmount);
    registerLifecycleHook(onUnmounted, unmounted);
    registerLifecycleHook(onServerPrefetch, serverPrefetch);
    if ((0, _shared.isArray)(expose)) {
        if (expose.length) {
            const exposed = instance.exposed || (instance.exposed = {});
            expose.forEach((key)=>{
                Object.defineProperty(exposed, key, {
                    get: ()=>publicThis[key],
                    set: (val)=>publicThis[key] = val
                });
            });
        } else if (!instance.exposed) instance.exposed = {};
    }
    // options that are handled when creating the instance but also need to be
    // applied from mixins
    if (render && instance.render === (0, _shared.NOOP)) instance.render = render;
    if (inheritAttrs != null) instance.inheritAttrs = inheritAttrs;
    // asset options.
    if (components) instance.components = components;
    if (directives) instance.directives = directives;
}
function resolveInjections(injectOptions, ctx, checkDuplicateProperties = (0, _shared.NOOP), unwrapRef = false) {
    if ((0, _shared.isArray)(injectOptions)) injectOptions = normalizeInject(injectOptions);
    for(const key in injectOptions){
        const opt = injectOptions[key];
        let injected;
        if ((0, _shared.isObject)(opt)) {
            if ("default" in opt) injected = inject(opt.from || key, opt.default, true);
            else injected = inject(opt.from || key);
        } else injected = inject(opt);
        if ((0, _reactivity.isRef)(injected)) {
            // TODO remove the check in 3.3
            if (unwrapRef) Object.defineProperty(ctx, key, {
                enumerable: true,
                configurable: true,
                get: ()=>injected.value,
                set: (v)=>injected.value = v
            });
            else {
                warn(`injected property "${key}" is a ref and will be auto-unwrapped ` + `and no longer needs \`.value\` in the next minor release. ` + `To opt-in to the new behavior now, ` + `set \`app.config.unwrapInjectedRef = true\` (this config is ` + `temporary and will not be needed in the future.)`);
                ctx[key] = injected;
            }
        } else ctx[key] = injected;
        checkDuplicateProperties("Inject" /* INJECT */ , key);
    }
}
function callHook(hook, instance, type) {
    callWithAsyncErrorHandling((0, _shared.isArray)(hook) ? hook.map((h1)=>h1.bind(instance.proxy)) : hook.bind(instance.proxy), instance, type);
}
function createWatcher(raw, ctx, publicThis, key) {
    const getter = key.includes(".") ? createPathGetter(publicThis, key) : ()=>publicThis[key];
    if ((0, _shared.isString)(raw)) {
        const handler = ctx[raw];
        if ((0, _shared.isFunction)(handler)) watch(getter, handler);
        else warn(`Invalid watch handler specified by key "${raw}"`, handler);
    } else if ((0, _shared.isFunction)(raw)) watch(getter, raw.bind(publicThis));
    else if ((0, _shared.isObject)(raw)) {
        if ((0, _shared.isArray)(raw)) raw.forEach((r)=>createWatcher(r, ctx, publicThis, key));
        else {
            const handler = (0, _shared.isFunction)(raw.handler) ? raw.handler.bind(publicThis) : ctx[raw.handler];
            if ((0, _shared.isFunction)(handler)) watch(getter, handler, raw);
            else warn(`Invalid watch handler specified by key "${raw.handler}"`, handler);
        }
    } else warn(`Invalid watch option: "${key}"`, raw);
}
/**
 * Resolve merged options and cache it on the component.
 * This is done only once per-component since the merging does not involve
 * instances.
 */ function resolveMergedOptions(instance) {
    const base = instance.type;
    const { mixins , extends: extendsOptions  } = base;
    const { mixins: globalMixins , optionsCache: cache , config: { optionMergeStrategies  }  } = instance.appContext;
    const cached = cache.get(base);
    let resolved;
    if (cached) resolved = cached;
    else if (!globalMixins.length && !mixins && !extendsOptions) resolved = base;
    else {
        resolved = {};
        if (globalMixins.length) globalMixins.forEach((m)=>mergeOptions(resolved, m, optionMergeStrategies, true));
        mergeOptions(resolved, base, optionMergeStrategies);
    }
    cache.set(base, resolved);
    return resolved;
}
function mergeOptions(to, from, strats, asMixin = false) {
    const { mixins , extends: extendsOptions  } = from;
    if (extendsOptions) mergeOptions(to, extendsOptions, strats, true);
    if (mixins) mixins.forEach((m)=>mergeOptions(to, m, strats, true));
    for(const key in from)if (asMixin && key === "expose") warn(`"expose" option is ignored when declared in mixins or extends. ` + `It should only be declared in the base component itself.`);
    else {
        const strat = internalOptionMergeStrats[key] || strats && strats[key];
        to[key] = strat ? strat(to[key], from[key]) : from[key];
    }
    return to;
}
const internalOptionMergeStrats = {
    data: mergeDataFn,
    props: mergeObjectOptions,
    emits: mergeObjectOptions,
    // objects
    methods: mergeObjectOptions,
    computed: mergeObjectOptions,
    // lifecycle
    beforeCreate: mergeAsArray,
    created: mergeAsArray,
    beforeMount: mergeAsArray,
    mounted: mergeAsArray,
    beforeUpdate: mergeAsArray,
    updated: mergeAsArray,
    beforeDestroy: mergeAsArray,
    beforeUnmount: mergeAsArray,
    destroyed: mergeAsArray,
    unmounted: mergeAsArray,
    activated: mergeAsArray,
    deactivated: mergeAsArray,
    errorCaptured: mergeAsArray,
    serverPrefetch: mergeAsArray,
    // assets
    components: mergeObjectOptions,
    directives: mergeObjectOptions,
    // watch
    watch: mergeWatchOptions,
    // provide / inject
    provide: mergeDataFn,
    inject: mergeInject
};
function mergeDataFn(to, from) {
    if (!from) return to;
    if (!to) return from;
    return function mergedDataFn() {
        return (0, _shared.extend)((0, _shared.isFunction)(to) ? to.call(this, this) : to, (0, _shared.isFunction)(from) ? from.call(this, this) : from);
    };
}
function mergeInject(to, from) {
    return mergeObjectOptions(normalizeInject(to), normalizeInject(from));
}
function normalizeInject(raw) {
    if ((0, _shared.isArray)(raw)) {
        const res = {};
        for(let i = 0; i < raw.length; i++)res[raw[i]] = raw[i];
        return res;
    }
    return raw;
}
function mergeAsArray(to, from) {
    return to ? [
        ...new Set([].concat(to, from))
    ] : from;
}
function mergeObjectOptions(to, from) {
    return to ? (0, _shared.extend)((0, _shared.extend)(Object.create(null), to), from) : from;
}
function mergeWatchOptions(to, from) {
    if (!to) return from;
    if (!from) return to;
    const merged = (0, _shared.extend)(Object.create(null), to);
    for(const key in from)merged[key] = mergeAsArray(to[key], from[key]);
    return merged;
}
function initProps(instance, rawProps, isStateful, isSSR = false) {
    const props = {};
    const attrs = {};
    (0, _shared.def)(attrs, InternalObjectKey, 1);
    instance.propsDefaults = Object.create(null);
    setFullProps(instance, rawProps, props, attrs);
    // ensure all declared prop keys are present
    for(const key in instance.propsOptions[0])if (!(key in props)) props[key] = undefined;
    validateProps(rawProps || {}, props, instance);
    if (isStateful) // stateful
    instance.props = isSSR ? props : (0, _reactivity.shallowReactive)(props);
    else if (!instance.type.props) // functional w/ optional props, props === attrs
    instance.props = attrs;
    else // functional w/ declared props
    instance.props = props;
    instance.attrs = attrs;
}
function updateProps(instance, rawProps, rawPrevProps, optimized) {
    const { props , attrs , vnode: { patchFlag  }  } = instance;
    const rawCurrentProps = (0, _reactivity.toRaw)(props);
    const [options] = instance.propsOptions;
    let hasAttrsChanged = false;
    if (// always force full diff in dev
    // - #1942 if hmr is enabled with sfc component
    // - vite#872 non-sfc component used by sfc component
    !(instance.type.__hmrId || instance.parent && instance.parent.type.__hmrId) && (optimized || patchFlag > 0) && !(patchFlag & 16 /* FULL_PROPS */ )) {
        if (patchFlag & 8 /* PROPS */ ) {
            // Compiler-generated props & no keys change, just set the updated
            // the props.
            const propsToUpdate = instance.vnode.dynamicProps;
            for(let i = 0; i < propsToUpdate.length; i++){
                let key = propsToUpdate[i];
                // PROPS flag guarantees rawProps to be non-null
                const value = rawProps[key];
                if (options) {
                    // attr / props separation was done on init and will be consistent
                    // in this code path, so just check if attrs have it.
                    if ((0, _shared.hasOwn)(attrs, key)) {
                        if (value !== attrs[key]) {
                            attrs[key] = value;
                            hasAttrsChanged = true;
                        }
                    } else {
                        const camelizedKey = (0, _shared.camelize)(key);
                        props[camelizedKey] = resolvePropValue(options, rawCurrentProps, camelizedKey, value, instance, false);
                    }
                } else if (value !== attrs[key]) {
                    attrs[key] = value;
                    hasAttrsChanged = true;
                }
            }
        }
    } else {
        // full props update.
        if (setFullProps(instance, rawProps, props, attrs)) hasAttrsChanged = true;
        // in case of dynamic props, check if we need to delete keys from
        // the props object
        let kebabKey;
        for(const key in rawCurrentProps)if (!rawProps || !(0, _shared.hasOwn)(rawProps, key) && ((kebabKey = (0, _shared.hyphenate)(key)) === key || !(0, _shared.hasOwn)(rawProps, kebabKey))) {
            if (options) {
                if (rawPrevProps && (rawPrevProps[key] !== undefined || // for kebab-case
                rawPrevProps[kebabKey] !== undefined)) props[key] = resolvePropValue(options, rawCurrentProps, key, undefined, instance, true);
            } else delete props[key];
        }
        // in the case of functional component w/o props declaration, props and
        // attrs point to the same object so it should already have been updated.
        if (attrs !== rawCurrentProps) {
            for(const key in attrs)if (!rawProps || !(0, _shared.hasOwn)(rawProps, key)) {
                delete attrs[key];
                hasAttrsChanged = true;
            }
        }
    }
    // trigger updates for $attrs in case it's used in component slots
    if (hasAttrsChanged) (0, _reactivity.trigger)(instance, "set" /* SET */ , "$attrs");
    validateProps(rawProps || {}, props, instance);
}
function setFullProps(instance, rawProps, props, attrs) {
    const [options, needCastKeys] = instance.propsOptions;
    let hasAttrsChanged = false;
    let rawCastValues;
    if (rawProps) for(let key in rawProps){
        // key, ref are reserved and never passed down
        if ((0, _shared.isReservedProp)(key)) continue;
        const value = rawProps[key];
        // prop option names are camelized during normalization, so to support
        // kebab -> camel conversion here we need to camelize the key.
        let camelKey;
        if (options && (0, _shared.hasOwn)(options, camelKey = (0, _shared.camelize)(key))) {
            if (!needCastKeys || !needCastKeys.includes(camelKey)) props[camelKey] = value;
            else (rawCastValues || (rawCastValues = {}))[camelKey] = value;
        } else if (!isEmitListener(instance.emitsOptions, key)) {
            if (value !== attrs[key]) {
                attrs[key] = value;
                hasAttrsChanged = true;
            }
        }
    }
    if (needCastKeys) {
        const rawCurrentProps = (0, _reactivity.toRaw)(props);
        const castValues = rawCastValues || (0, _shared.EMPTY_OBJ);
        for(let i = 0; i < needCastKeys.length; i++){
            const key = needCastKeys[i];
            props[key] = resolvePropValue(options, rawCurrentProps, key, castValues[key], instance, !(0, _shared.hasOwn)(castValues, key));
        }
    }
    return hasAttrsChanged;
}
function resolvePropValue(options, props, key, value, instance, isAbsent) {
    const opt = options[key];
    if (opt != null) {
        const hasDefault = (0, _shared.hasOwn)(opt, "default");
        // default values
        if (hasDefault && value === undefined) {
            const defaultValue = opt.default;
            if (opt.type !== Function && (0, _shared.isFunction)(defaultValue)) {
                const { propsDefaults  } = instance;
                if (key in propsDefaults) value = propsDefaults[key];
                else {
                    setCurrentInstance(instance);
                    value = propsDefaults[key] = defaultValue.call(null, props);
                    unsetCurrentInstance();
                }
            } else value = defaultValue;
        }
        // boolean casting
        if (opt[0 /* shouldCast */ ]) {
            if (isAbsent && !hasDefault) value = false;
            else if (opt[1 /* shouldCastTrue */ ] && (value === "" || value === (0, _shared.hyphenate)(key))) value = true;
        }
    }
    return value;
}
function normalizePropsOptions(comp, appContext, asMixin = false) {
    const cache = appContext.propsCache;
    const cached = cache.get(comp);
    if (cached) return cached;
    const raw2 = comp.props;
    const normalized = {};
    const needCastKeys = [];
    // apply mixin/extends props
    let hasExtends = false;
    if (__VUE_OPTIONS_API__ && !(0, _shared.isFunction)(comp)) {
        const extendProps = (raw)=>{
            hasExtends = true;
            const [props, keys] = normalizePropsOptions(raw, appContext, true);
            (0, _shared.extend)(normalized, props);
            if (keys) needCastKeys.push(...keys);
        };
        if (!asMixin && appContext.mixins.length) appContext.mixins.forEach(extendProps);
        if (comp.extends) extendProps(comp.extends);
        if (comp.mixins) comp.mixins.forEach(extendProps);
    }
    if (!raw2 && !hasExtends) {
        cache.set(comp, (0, _shared.EMPTY_ARR));
        return 0, _shared.EMPTY_ARR;
    }
    if ((0, _shared.isArray)(raw2)) for(let i = 0; i < raw2.length; i++){
        if (!(0, _shared.isString)(raw2[i])) warn(`props must be strings when using array syntax.`, raw2[i]);
        const normalizedKey = (0, _shared.camelize)(raw2[i]);
        if (validatePropName(normalizedKey)) normalized[normalizedKey] = (0, _shared.EMPTY_OBJ);
    }
    else if (raw2) {
        if (!(0, _shared.isObject)(raw2)) warn(`invalid props options`, raw2);
        for(const key in raw2){
            const normalizedKey = (0, _shared.camelize)(key);
            if (validatePropName(normalizedKey)) {
                const opt = raw2[key];
                const prop = normalized[normalizedKey] = (0, _shared.isArray)(opt) || (0, _shared.isFunction)(opt) ? {
                    type: opt
                } : opt;
                if (prop) {
                    const booleanIndex = getTypeIndex(Boolean, prop.type);
                    const stringIndex = getTypeIndex(String, prop.type);
                    prop[0 /* shouldCast */ ] = booleanIndex > -1;
                    prop[1 /* shouldCastTrue */ ] = stringIndex < 0 || booleanIndex < stringIndex;
                    // if the prop needs boolean casting or default value
                    if (booleanIndex > -1 || (0, _shared.hasOwn)(prop, "default")) needCastKeys.push(normalizedKey);
                }
            }
        }
    }
    const res = [
        normalized,
        needCastKeys
    ];
    cache.set(comp, res);
    return res;
}
function validatePropName(key) {
    if (key[0] !== "$") return true;
    else warn(`Invalid prop name: "${key}" is a reserved property.`);
    return false;
}
// use function string name to check type constructors
// so that it works across vms / iframes.
function getType(ctor) {
    const match = ctor && ctor.toString().match(/^\s*function (\w+)/);
    return match ? match[1] : ctor === null ? "null" : "";
}
function isSameType(a, b) {
    return getType(a) === getType(b);
}
function getTypeIndex(type, expectedTypes) {
    if ((0, _shared.isArray)(expectedTypes)) return expectedTypes.findIndex((t)=>isSameType(t, type));
    else if ((0, _shared.isFunction)(expectedTypes)) return isSameType(expectedTypes, type) ? 0 : -1;
    return -1;
}
/**
 * dev only
 */ function validateProps(rawProps, props, instance) {
    const resolvedValues = (0, _reactivity.toRaw)(props);
    const options = instance.propsOptions[0];
    for(const key in options){
        let opt = options[key];
        if (opt == null) continue;
        validateProp(key, resolvedValues[key], opt, !(0, _shared.hasOwn)(rawProps, key) && !(0, _shared.hasOwn)(rawProps, (0, _shared.hyphenate)(key)));
    }
}
/**
 * dev only
 */ function validateProp(name, value, prop, isAbsent) {
    const { type , required , validator  } = prop;
    // required!
    if (required && isAbsent) {
        warn('Missing required prop: "' + name + '"');
        return;
    }
    // missing but optional
    if (value == null && !prop.required) return;
    // type check
    if (type != null && type !== true) {
        let isValid = false;
        const types = (0, _shared.isArray)(type) ? type : [
            type
        ];
        const expectedTypes = [];
        // value is valid as long as one of the specified types match
        for(let i = 0; i < types.length && !isValid; i++){
            const { valid , expectedType  } = assertType(value, types[i]);
            expectedTypes.push(expectedType || "");
            isValid = valid;
        }
        if (!isValid) {
            warn(getInvalidTypeMessage(name, value, expectedTypes));
            return;
        }
    }
    // custom validator
    if (validator && !validator(value)) warn('Invalid prop: custom validator check failed for prop "' + name + '".');
}
const isSimpleType = /*#__PURE__*/ (0, _shared.makeMap)("String,Number,Boolean,Function,Symbol,BigInt");
/**
 * dev only
 */ function assertType(value, type) {
    let valid;
    const expectedType = getType(type);
    if (isSimpleType(expectedType)) {
        const t = typeof value;
        valid = t === expectedType.toLowerCase();
        // for primitive wrapper objects
        if (!valid && t === "object") valid = value instanceof type;
    } else if (expectedType === "Object") valid = (0, _shared.isObject)(value);
    else if (expectedType === "Array") valid = (0, _shared.isArray)(value);
    else if (expectedType === "null") valid = value === null;
    else valid = value instanceof type;
    return {
        valid,
        expectedType
    };
}
/**
 * dev only
 */ function getInvalidTypeMessage(name, value, expectedTypes) {
    let message = `Invalid prop: type check failed for prop "${name}".` + ` Expected ${expectedTypes.map((0, _shared.capitalize)).join(" | ")}`;
    const expectedType = expectedTypes[0];
    const receivedType = (0, _shared.toRawType)(value);
    const expectedValue = styleValue(value, expectedType);
    const receivedValue = styleValue(value, receivedType);
    // check if we need to specify expected value
    if (expectedTypes.length === 1 && isExplicable(expectedType) && !isBoolean(expectedType, receivedType)) message += ` with value ${expectedValue}`;
    message += `, got ${receivedType} `;
    // check if we need to specify received value
    if (isExplicable(receivedType)) message += `with value ${receivedValue}.`;
    return message;
}
/**
 * dev only
 */ function styleValue(value, type) {
    if (type === "String") return `"${value}"`;
    else if (type === "Number") return `${Number(value)}`;
    else return `${value}`;
}
/**
 * dev only
 */ function isExplicable(type) {
    const explicitTypes = [
        "string",
        "number",
        "boolean"
    ];
    return explicitTypes.some((elem)=>type.toLowerCase() === elem);
}
/**
 * dev only
 */ function isBoolean(...args) {
    return args.some((elem)=>elem.toLowerCase() === "boolean");
}
const isInternalKey = (key)=>key[0] === "_" || key === "$stable";
const normalizeSlotValue = (value)=>(0, _shared.isArray)(value) ? value.map(normalizeVNode) : [
        normalizeVNode(value)
    ];
const normalizeSlot = (key, rawSlot, ctx)=>{
    const normalized = withCtx((...args)=>{
        if (currentInstance) warn(`Slot "${key}" invoked outside of the render function: ` + `this will not track dependencies used in the slot. ` + `Invoke the slot function inside the render function instead.`);
        return normalizeSlotValue(rawSlot(...args));
    }, ctx);
    normalized._c = false;
    return normalized;
};
const normalizeObjectSlots = (rawSlots, slots, instance)=>{
    const ctx = rawSlots._ctx;
    for(const key in rawSlots){
        if (isInternalKey(key)) continue;
        const value = rawSlots[key];
        if ((0, _shared.isFunction)(value)) slots[key] = normalizeSlot(key, value, ctx);
        else if (value != null) {
            warn(`Non-function value encountered for slot "${key}". ` + `Prefer function slots for better performance.`);
            const normalized = normalizeSlotValue(value);
            slots[key] = ()=>normalized;
        }
    }
};
const normalizeVNodeSlots = (instance, children)=>{
    if (!isKeepAlive(instance.vnode) && true) warn(`Non-function value encountered for default slot. ` + `Prefer function slots for better performance.`);
    const normalized = normalizeSlotValue(children);
    instance.slots.default = ()=>normalized;
};
const initSlots = (instance, children)=>{
    if (instance.vnode.shapeFlag & 32 /* SLOTS_CHILDREN */ ) {
        const type = children._;
        if (type) {
            // users can get the shallow readonly version of the slots object through `this.$slots`,
            // we should avoid the proxy object polluting the slots of the internal instance
            instance.slots = (0, _reactivity.toRaw)(children);
            // make compiler marker non-enumerable
            (0, _shared.def)(children, "_", type);
        } else normalizeObjectSlots(children, instance.slots = {});
    } else {
        instance.slots = {};
        if (children) normalizeVNodeSlots(instance, children);
    }
    (0, _shared.def)(instance.slots, InternalObjectKey, 1);
};
const updateSlots = (instance, children, optimized)=>{
    const { vnode , slots  } = instance;
    let needDeletionCheck = true;
    let deletionComparisonTarget = (0, _shared.EMPTY_OBJ);
    if (vnode.shapeFlag & 32 /* SLOTS_CHILDREN */ ) {
        const type = children._;
        if (type) {
            // compiled slots.
            if (isHmrUpdating) // Parent was HMR updated so slot content may have changed.
            // force update slots and mark instance for hmr as well
            (0, _shared.extend)(slots, children);
            else if (optimized && type === 1 /* STABLE */ ) // compiled AND stable.
            // no need to update, and skip stale slots removal.
            needDeletionCheck = false;
            else {
                // compiled but dynamic (v-if/v-for on slots) - update slots, but skip
                // normalization.
                (0, _shared.extend)(slots, children);
                // #2893
                // when rendering the optimized slots by manually written render function,
                // we need to delete the `slots._` flag if necessary to make subsequent updates reliable,
                // i.e. let the `renderSlot` create the bailed Fragment
                if (!optimized && type === 1 /* STABLE */ ) delete slots._;
            }
        } else {
            needDeletionCheck = !children.$stable;
            normalizeObjectSlots(children, slots);
        }
        deletionComparisonTarget = children;
    } else if (children) {
        // non slot object children (direct value) passed to a component
        normalizeVNodeSlots(instance, children);
        deletionComparisonTarget = {
            default: 1
        };
    }
    // delete stale slots
    if (needDeletionCheck) {
        for(const key in slots)if (!isInternalKey(key) && !(key in deletionComparisonTarget)) delete slots[key];
    }
};
/**
Runtime helper for applying directives to a vnode. Example usage:

const comp = resolveComponent('comp')
const foo = resolveDirective('foo')
const bar = resolveDirective('bar')

return withDirectives(h(comp), [
  [foo, this.x],
  [bar, this.y]
])
*/ const isBuiltInDirective = /*#__PURE__*/ (0, _shared.makeMap)("bind,cloak,else-if,else,for,html,if,model,on,once,pre,show,slot,text");
function validateDirectiveName(name) {
    if (isBuiltInDirective(name)) warn("Do not use built-in directive ids as custom directive id: " + name);
}
/**
 * Adds directives to a VNode.
 */ function withDirectives(vnode, directives) {
    const internalInstance = currentRenderingInstance;
    if (internalInstance === null) {
        warn(`withDirectives can only be used inside render functions.`);
        return vnode;
    }
    const instance = internalInstance.proxy;
    const bindings = vnode.dirs || (vnode.dirs = []);
    for(let i = 0; i < directives.length; i++){
        let [dir, value, arg, modifiers = (0, _shared.EMPTY_OBJ)] = directives[i];
        if ((0, _shared.isFunction)(dir)) dir = {
            mounted: dir,
            updated: dir
        };
        if (dir.deep) traverse(value);
        bindings.push({
            dir,
            instance,
            value,
            oldValue: void 0,
            arg,
            modifiers
        });
    }
    return vnode;
}
function invokeDirectiveHook(vnode, prevVNode, instance, name) {
    const bindings = vnode.dirs;
    const oldBindings = prevVNode && prevVNode.dirs;
    for(let i = 0; i < bindings.length; i++){
        const binding = bindings[i];
        if (oldBindings) binding.oldValue = oldBindings[i].value;
        let hook = binding.dir[name];
        if (hook) {
            // disable tracking inside all lifecycle hooks
            // since they can potentially be called inside effects.
            (0, _reactivity.pauseTracking)();
            callWithAsyncErrorHandling(hook, instance, 8 /* DIRECTIVE_HOOK */ , [
                vnode.el,
                binding,
                vnode,
                prevVNode
            ]);
            (0, _reactivity.resetTracking)();
        }
    }
}
function createAppContext() {
    return {
        app: null,
        config: {
            isNativeTag: (0, _shared.NO),
            performance: false,
            globalProperties: {},
            optionMergeStrategies: {},
            errorHandler: undefined,
            warnHandler: undefined,
            compilerOptions: {}
        },
        mixins: [],
        components: {},
        directives: {},
        provides: Object.create(null),
        optionsCache: new WeakMap(),
        propsCache: new WeakMap(),
        emitsCache: new WeakMap()
    };
}
let uid = 0;
function createAppAPI(render, hydrate) {
    return function createApp(rootComponent, rootProps = null) {
        if (rootProps != null && !(0, _shared.isObject)(rootProps)) {
            warn(`root props passed to app.mount() must be an object.`);
            rootProps = null;
        }
        const context = createAppContext();
        const installedPlugins = new Set();
        let isMounted = false;
        const app = context.app = {
            _uid: uid++,
            _component: rootComponent,
            _props: rootProps,
            _container: null,
            _context: context,
            _instance: null,
            version,
            get config () {
                return context.config;
            },
            set config (v){
                warn(`app.config cannot be replaced. Modify individual options instead.`);
            },
            use (plugin, ...options) {
                if (installedPlugins.has(plugin)) warn(`Plugin has already been applied to target app.`);
                else if (plugin && (0, _shared.isFunction)(plugin.install)) {
                    installedPlugins.add(plugin);
                    plugin.install(app, ...options);
                } else if ((0, _shared.isFunction)(plugin)) {
                    installedPlugins.add(plugin);
                    plugin(app, ...options);
                } else warn(`A plugin must either be a function or an object with an "install" ` + `function.`);
                return app;
            },
            mixin (mixin) {
                if (__VUE_OPTIONS_API__) {
                    if (!context.mixins.includes(mixin)) context.mixins.push(mixin);
                    else warn("Mixin has already been applied to target app" + (mixin.name ? `: ${mixin.name}` : ""));
                } else warn("Mixins are only available in builds supporting Options API");
                return app;
            },
            component (name, component) {
                validateComponentName(name, context.config);
                if (!component) return context.components[name];
                if (context.components[name]) warn(`Component "${name}" has already been registered in target app.`);
                context.components[name] = component;
                return app;
            },
            directive (name, directive) {
                validateDirectiveName(name);
                if (!directive) return context.directives[name];
                if (context.directives[name]) warn(`Directive "${name}" has already been registered in target app.`);
                context.directives[name] = directive;
                return app;
            },
            mount (rootContainer, isHydrate, isSVG) {
                if (!isMounted) {
                    const vnode = createVNode(rootComponent, rootProps);
                    // store app context on the root VNode.
                    // this will be set on the root instance on initial mount.
                    vnode.appContext = context;
                    context.reload = ()=>{
                        render(cloneVNode(vnode), rootContainer, isSVG);
                    };
                    if (isHydrate && hydrate) hydrate(vnode, rootContainer);
                    else render(vnode, rootContainer, isSVG);
                    isMounted = true;
                    app._container = rootContainer;
                    rootContainer.__vue_app__ = app;
                    app._instance = vnode.component;
                    devtoolsInitApp(app, version);
                    return vnode.component.proxy;
                } else warn(`App has already been mounted.\n` + `If you want to remount the same app, move your app creation logic ` + `into a factory function and create fresh app instances for each ` + `mount - e.g. \`const createMyApp = () => createApp(App)\``);
            },
            unmount () {
                if (isMounted) {
                    render(null, app._container);
                    app._instance = null;
                    devtoolsUnmountApp(app);
                    delete app._container.__vue_app__;
                } else warn(`Cannot unmount an app that is not mounted.`);
            },
            provide (key, value) {
                if (key in context.provides) warn(`App already provides property with key "${String(key)}". ` + `It will be overwritten with the new value.`);
                // TypeScript doesn't allow symbols as index type
                // https://github.com/Microsoft/TypeScript/issues/24587
                context.provides[key] = value;
                return app;
            }
        };
        return app;
    };
}
let hasMismatch = false;
const isSVGContainer = (container)=>/svg/.test(container.namespaceURI) && container.tagName !== "foreignObject";
const isComment = (node)=>node.nodeType === 8 /* COMMENT */ ;
// Note: hydration is DOM-specific
// But we have to place it in core due to tight coupling with core - splitting
// it out creates a ton of unnecessary complexity.
// Hydration also depends on some renderer internal logic which needs to be
// passed in via arguments.
function createHydrationFunctions(rendererInternals) {
    const { mt: mountComponent , p: patch , o: { patchProp , nextSibling , parentNode , remove , insert , createComment  }  } = rendererInternals;
    const hydrate = (vnode, container)=>{
        if (!container.hasChildNodes()) {
            warn(`Attempting to hydrate existing markup but container is empty. ` + `Performing full mount instead.`);
            patch(null, vnode, container);
            flushPostFlushCbs();
            return;
        }
        hasMismatch = false;
        hydrateNode(container.firstChild, vnode, null, null, null);
        flushPostFlushCbs();
        if (hasMismatch && true) // this error should show up in production
        console.error(`Hydration completed but contains mismatches.`);
    };
    const hydrateNode = (node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized = false)=>{
        const isFragmentStart = isComment(node) && node.data === "[";
        const onMismatch = ()=>handleMismatch(node, vnode, parentComponent, parentSuspense, slotScopeIds, isFragmentStart);
        const { type , ref , shapeFlag  } = vnode;
        const domType = node.nodeType;
        vnode.el = node;
        let nextNode = null;
        switch(type){
            case Text:
                if (domType !== 3 /* TEXT */ ) nextNode = onMismatch();
                else {
                    if (node.data !== vnode.children) {
                        hasMismatch = true;
                        warn(`Hydration text mismatch:` + `\n- Client: ${JSON.stringify(node.data)}` + `\n- Server: ${JSON.stringify(vnode.children)}`);
                        node.data = vnode.children;
                    }
                    nextNode = nextSibling(node);
                }
                break;
            case Comment:
                if (domType !== 8 /* COMMENT */  || isFragmentStart) nextNode = onMismatch();
                else nextNode = nextSibling(node);
                break;
            case Static:
                if (domType !== 1 /* ELEMENT */ ) nextNode = onMismatch();
                else {
                    // determine anchor, adopt content
                    nextNode = node;
                    // if the static vnode has its content stripped during build,
                    // adopt it from the server-rendered HTML.
                    const needToAdoptContent = !vnode.children.length;
                    for(let i = 0; i < vnode.staticCount; i++){
                        if (needToAdoptContent) vnode.children += nextNode.outerHTML;
                        if (i === vnode.staticCount - 1) vnode.anchor = nextNode;
                        nextNode = nextSibling(nextNode);
                    }
                    return nextNode;
                }
                break;
            case Fragment:
                if (!isFragmentStart) nextNode = onMismatch();
                else nextNode = hydrateFragment(node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized);
                break;
            default:
                if (shapeFlag & 1 /* ELEMENT */ ) {
                    if (domType !== 1 /* ELEMENT */  || vnode.type.toLowerCase() !== node.tagName.toLowerCase()) nextNode = onMismatch();
                    else nextNode = hydrateElement(node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized);
                } else if (shapeFlag & 6 /* COMPONENT */ ) {
                    // when setting up the render effect, if the initial vnode already
                    // has .el set, the component will perform hydration instead of mount
                    // on its sub-tree.
                    vnode.slotScopeIds = slotScopeIds;
                    const container = parentNode(node);
                    mountComponent(vnode, container, null, parentComponent, parentSuspense, isSVGContainer(container), optimized);
                    // component may be async, so in the case of fragments we cannot rely
                    // on component's rendered output to determine the end of the fragment
                    // instead, we do a lookahead to find the end anchor node.
                    nextNode = isFragmentStart ? locateClosingAsyncAnchor(node) : nextSibling(node);
                    // #3787
                    // if component is async, it may get moved / unmounted before its
                    // inner component is loaded, so we need to give it a placeholder
                    // vnode that matches its adopted DOM.
                    if (isAsyncWrapper(vnode)) {
                        let subTree;
                        if (isFragmentStart) {
                            subTree = createVNode(Fragment);
                            subTree.anchor = nextNode ? nextNode.previousSibling : container.lastChild;
                        } else subTree = node.nodeType === 3 ? createTextVNode("") : createVNode("div");
                        subTree.el = node;
                        vnode.component.subTree = subTree;
                    }
                } else if (shapeFlag & 64 /* TELEPORT */ ) {
                    if (domType !== 8 /* COMMENT */ ) nextNode = onMismatch();
                    else nextNode = vnode.type.hydrate(node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized, rendererInternals, hydrateChildren);
                } else if (shapeFlag & 128 /* SUSPENSE */ ) nextNode = vnode.type.hydrate(node, vnode, parentComponent, parentSuspense, isSVGContainer(parentNode(node)), slotScopeIds, optimized, rendererInternals, hydrateNode);
                else warn("Invalid HostVNode type:", type, `(${typeof type})`);
        }
        if (ref != null) setRef(ref, null, parentSuspense, vnode);
        return nextNode;
    };
    const hydrateElement = (el, vnode, parentComponent, parentSuspense, slotScopeIds, optimized)=>{
        optimized = optimized || !!vnode.dynamicChildren;
        const { type , props , patchFlag , shapeFlag , dirs  } = vnode;
        // #4006 for form elements with non-string v-model value bindings
        // e.g. <option :value="obj">, <input type="checkbox" :true-value="1">
        const forcePatchValue = type === "input" && dirs || type === "option";
        // skip props & children if this is hoisted static nodes
        if (forcePatchValue || patchFlag !== -1 /* HOISTED */ ) {
            if (dirs) invokeDirectiveHook(vnode, null, parentComponent, "created");
            // props
            if (props) {
                if (forcePatchValue || !optimized || patchFlag & 48 /* HYDRATE_EVENTS */ ) {
                    for(const key in props)if (forcePatchValue && key.endsWith("value") || (0, _shared.isOn)(key) && !(0, _shared.isReservedProp)(key)) patchProp(el, key, null, props[key]);
                } else if (props.onClick) // Fast path for click listeners (which is most often) to avoid
                // iterating through props.
                patchProp(el, "onClick", null, props.onClick);
            }
            // vnode / directive hooks
            let vnodeHooks;
            if (vnodeHooks = props && props.onVnodeBeforeMount) invokeVNodeHook(vnodeHooks, parentComponent, vnode);
            if (dirs) invokeDirectiveHook(vnode, null, parentComponent, "beforeMount");
            if ((vnodeHooks = props && props.onVnodeMounted) || dirs) queueEffectWithSuspense(()=>{
                vnodeHooks && invokeVNodeHook(vnodeHooks, parentComponent, vnode);
                dirs && invokeDirectiveHook(vnode, null, parentComponent, "mounted");
            }, parentSuspense);
            // children
            if (shapeFlag & 16 /* ARRAY_CHILDREN */  && // skip if element has innerHTML / textContent
            !(props && (props.innerHTML || props.textContent))) {
                let next = hydrateChildren(el.firstChild, vnode, el, parentComponent, parentSuspense, slotScopeIds, optimized);
                let hasWarned1 = false;
                while(next){
                    hasMismatch = true;
                    if (!hasWarned1) {
                        warn(`Hydration children mismatch in <${vnode.type}>: ` + `server rendered element contains more child nodes than client vdom.`);
                        hasWarned1 = true;
                    }
                    // The SSRed DOM contains more nodes than it should. Remove them.
                    const cur = next;
                    next = next.nextSibling;
                    remove(cur);
                }
            } else if (shapeFlag & 8 /* TEXT_CHILDREN */ ) {
                if (el.textContent !== vnode.children) {
                    hasMismatch = true;
                    warn(`Hydration text content mismatch in <${vnode.type}>:\n` + `- Client: ${el.textContent}\n` + `- Server: ${vnode.children}`);
                    el.textContent = vnode.children;
                }
            }
        }
        return el.nextSibling;
    };
    const hydrateChildren = (node, parentVNode, container, parentComponent, parentSuspense, slotScopeIds, optimized)=>{
        optimized = optimized || !!parentVNode.dynamicChildren;
        const children = parentVNode.children;
        const l = children.length;
        let hasWarned2 = false;
        for(let i = 0; i < l; i++){
            const vnode = optimized ? children[i] : children[i] = normalizeVNode(children[i]);
            if (node) node = hydrateNode(node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized);
            else if (vnode.type === Text && !vnode.children) continue;
            else {
                hasMismatch = true;
                if (!hasWarned2) {
                    warn(`Hydration children mismatch in <${container.tagName.toLowerCase()}>: ` + `server rendered element contains fewer child nodes than client vdom.`);
                    hasWarned2 = true;
                }
                // the SSRed DOM didn't contain enough nodes. Mount the missing ones.
                patch(null, vnode, container, null, parentComponent, parentSuspense, isSVGContainer(container), slotScopeIds);
            }
        }
        return node;
    };
    const hydrateFragment = (node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized)=>{
        const { slotScopeIds: fragmentSlotScopeIds  } = vnode;
        if (fragmentSlotScopeIds) slotScopeIds = slotScopeIds ? slotScopeIds.concat(fragmentSlotScopeIds) : fragmentSlotScopeIds;
        const container = parentNode(node);
        const next = hydrateChildren(nextSibling(node), vnode, container, parentComponent, parentSuspense, slotScopeIds, optimized);
        if (next && isComment(next) && next.data === "]") return nextSibling(vnode.anchor = next);
        else {
            // fragment didn't hydrate successfully, since we didn't get a end anchor
            // back. This should have led to node/children mismatch warnings.
            hasMismatch = true;
            // since the anchor is missing, we need to create one and insert it
            insert(vnode.anchor = createComment(`]`), container, next);
            return next;
        }
    };
    const handleMismatch = (node, vnode, parentComponent, parentSuspense, slotScopeIds, isFragment)=>{
        hasMismatch = true;
        warn(`Hydration node mismatch:\n- Client vnode:`, vnode.type, `\n- Server rendered DOM:`, node, node.nodeType === 3 /* TEXT */  ? `(text)` : isComment(node) && node.data === "[" ? `(start of fragment)` : ``);
        vnode.el = null;
        if (isFragment) {
            // remove excessive fragment nodes
            const end = locateClosingAsyncAnchor(node);
            while(true){
                const next = nextSibling(node);
                if (next && next !== end) remove(next);
                else break;
            }
        }
        const next = nextSibling(node);
        const container = parentNode(node);
        remove(node);
        patch(null, vnode, container, next, parentComponent, parentSuspense, isSVGContainer(container), slotScopeIds);
        return next;
    };
    const locateClosingAsyncAnchor = (node)=>{
        let match = 0;
        while(node){
            node = nextSibling(node);
            if (node && isComment(node)) {
                if (node.data === "[") match++;
                if (node.data === "]") {
                    if (match === 0) return nextSibling(node);
                    else match--;
                }
            }
        }
        return node;
    };
    return [
        hydrate,
        hydrateNode
    ];
}
let supported;
let perf;
function startMeasure(instance, type) {
    if (instance.appContext.config.performance && isSupported()) perf.mark(`vue-${type}-${instance.uid}`);
    devtoolsPerfStart(instance, type, supported ? perf.now() : Date.now());
}
function endMeasure(instance, type) {
    if (instance.appContext.config.performance && isSupported()) {
        const startTag = `vue-${type}-${instance.uid}`;
        const endTag = startTag + `:end`;
        perf.mark(endTag);
        perf.measure(`<${formatComponentName(instance, instance.type)}> ${type}`, startTag, endTag);
        perf.clearMarks(startTag);
        perf.clearMarks(endTag);
    }
    devtoolsPerfEnd(instance, type, supported ? perf.now() : Date.now());
}
function isSupported() {
    if (supported !== undefined) return supported;
    /* eslint-disable no-restricted-globals */ if (typeof window !== "undefined" && window.performance) {
        supported = true;
        perf = window.performance;
    } else supported = false;
    /* eslint-enable no-restricted-globals */ return supported;
}
/**
 * This is only called in esm-bundler builds.
 * It is called when a renderer is created, in `baseCreateRenderer` so that
 * importing runtime-core is side-effects free.
 *
 * istanbul-ignore-next
 */ function initFeatureFlags() {
    let needWarn = false;
    if (typeof __VUE_OPTIONS_API__ !== "boolean") {
        needWarn = true;
        (0, _shared.getGlobalThis)().__VUE_OPTIONS_API__ = true;
    }
    if (typeof __VUE_PROD_DEVTOOLS__ !== "boolean") {
        needWarn = true;
        (0, _shared.getGlobalThis)().__VUE_PROD_DEVTOOLS__ = false;
    }
    if (needWarn) console.warn(`You are running the esm-bundler build of Vue. It is recommended to ` + `configure your bundler to explicitly replace feature flag globals ` + `with boolean literals to get proper tree-shaking in the final bundle. ` + `See http://link.vuejs.org/feature-flags for more details.`);
}
const queuePostRenderEffect = queueEffectWithSuspense;
/**
 * The createRenderer function accepts two generic arguments:
 * HostNode and HostElement, corresponding to Node and Element types in the
 * host environment. For example, for runtime-dom, HostNode would be the DOM
 * `Node` interface and HostElement would be the DOM `Element` interface.
 *
 * Custom renderers can pass in the platform specific types like this:
 *
 * ``` js
 * const { render, createApp } = createRenderer<Node, Element>({
 *   patchProp,
 *   ...nodeOps
 * })
 * ```
 */ function createRenderer(options) {
    return baseCreateRenderer(options);
}
// Separate API for creating hydration-enabled renderer.
// Hydration logic is only used when calling this function, making it
// tree-shakable.
function createHydrationRenderer(options) {
    return baseCreateRenderer(options, createHydrationFunctions);
}
// implementation
function baseCreateRenderer(options, createHydrationFns) {
    initFeatureFlags();
    {
        const target = (0, _shared.getGlobalThis)();
        target.__VUE__ = true;
        setDevtoolsHook(target.__VUE_DEVTOOLS_GLOBAL_HOOK__);
    }
    const { insert: hostInsert , remove: hostRemove , patchProp: hostPatchProp , createElement: hostCreateElement , createText: hostCreateText , createComment: hostCreateComment , setText: hostSetText , setElementText: hostSetElementText , parentNode: hostParentNode , nextSibling: hostNextSibling , setScopeId: hostSetScopeId = (0, _shared.NOOP) , cloneNode: hostCloneNode , insertStaticContent: hostInsertStaticContent  } = options;
    // Note: functions inside this closure should use `const xxx = () => {}`
    // style in order to prevent being inlined by minifiers.
    const patch = (n1, n2, container, anchor = null, parentComponent = null, parentSuspense = null, isSVG = false, slotScopeIds = null, optimized = isHmrUpdating ? false : !!n2.dynamicChildren)=>{
        if (n1 === n2) return;
        // patching & not same type, unmount old tree
        if (n1 && !isSameVNodeType(n1, n2)) {
            anchor = getNextHostNode(n1);
            unmount(n1, parentComponent, parentSuspense, true);
            n1 = null;
        }
        if (n2.patchFlag === -2 /* BAIL */ ) {
            optimized = false;
            n2.dynamicChildren = null;
        }
        const { type , ref , shapeFlag  } = n2;
        switch(type){
            case Text:
                processText(n1, n2, container, anchor);
                break;
            case Comment:
                processCommentNode(n1, n2, container, anchor);
                break;
            case Static:
                if (n1 == null) mountStaticNode(n2, container, anchor, isSVG);
                else patchStaticNode(n1, n2, container, isSVG);
                break;
            case Fragment:
                processFragment(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
                break;
            default:
                if (shapeFlag & 1 /* ELEMENT */ ) processElement(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
                else if (shapeFlag & 6 /* COMPONENT */ ) processComponent(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
                else if (shapeFlag & 64 /* TELEPORT */ ) type.process(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, internals);
                else if (shapeFlag & 128 /* SUSPENSE */ ) type.process(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, internals);
                else warn("Invalid VNode type:", type, `(${typeof type})`);
        }
        // set ref
        if (ref != null && parentComponent) setRef(ref, n1 && n1.ref, parentSuspense, n2 || n1, !n2);
    };
    const processText = (n1, n2, container, anchor)=>{
        if (n1 == null) hostInsert(n2.el = hostCreateText(n2.children), container, anchor);
        else {
            const el = n2.el = n1.el;
            if (n2.children !== n1.children) hostSetText(el, n2.children);
        }
    };
    const processCommentNode = (n1, n2, container, anchor)=>{
        if (n1 == null) hostInsert(n2.el = hostCreateComment(n2.children || ""), container, anchor);
        else // there's no support for dynamic comments
        n2.el = n1.el;
    };
    const mountStaticNode = (n2, container, anchor, isSVG)=>{
        [n2.el, n2.anchor] = hostInsertStaticContent(n2.children, container, anchor, isSVG);
    };
    /**
     * Dev / HMR only
     */ const patchStaticNode = (n1, n2, container, isSVG)=>{
        // static nodes are only patched during dev for HMR
        if (n2.children !== n1.children) {
            const anchor = hostNextSibling(n1.anchor);
            // remove existing
            removeStaticNode(n1);
            [n2.el, n2.anchor] = hostInsertStaticContent(n2.children, container, anchor, isSVG);
        } else {
            n2.el = n1.el;
            n2.anchor = n1.anchor;
        }
    };
    const moveStaticNode = ({ el , anchor  }, container, nextSibling)=>{
        let next;
        while(el && el !== anchor){
            next = hostNextSibling(el);
            hostInsert(el, container, nextSibling);
            el = next;
        }
        hostInsert(anchor, container, nextSibling);
    };
    const removeStaticNode = ({ el , anchor  })=>{
        let next;
        while(el && el !== anchor){
            next = hostNextSibling(el);
            hostRemove(el);
            el = next;
        }
        hostRemove(anchor);
    };
    const processElement = (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized)=>{
        isSVG = isSVG || n2.type === "svg";
        if (n1 == null) mountElement(n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
        else patchElement(n1, n2, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
    };
    const mountElement = (vnode, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized)=>{
        let el;
        let vnodeHook;
        const { type , props , shapeFlag , transition , patchFlag , dirs  } = vnode;
        el = vnode.el = hostCreateElement(vnode.type, isSVG, props && props.is, props);
        // mount children first, since some props may rely on child content
        // being already rendered, e.g. `<select value>`
        if (shapeFlag & 8 /* TEXT_CHILDREN */ ) hostSetElementText(el, vnode.children);
        else if (shapeFlag & 16 /* ARRAY_CHILDREN */ ) mountChildren(vnode.children, el, null, parentComponent, parentSuspense, isSVG && type !== "foreignObject", slotScopeIds, optimized);
        if (dirs) invokeDirectiveHook(vnode, null, parentComponent, "created");
        // props
        if (props) {
            for(const key in props)if (key !== "value" && !(0, _shared.isReservedProp)(key)) hostPatchProp(el, key, null, props[key], isSVG, vnode.children, parentComponent, parentSuspense, unmountChildren);
            /**
                 * Special case for setting value on DOM elements:
                 * - it can be order-sensitive (e.g. should be set *after* min/max, #2325, #4024)
                 * - it needs to be forced (#1471)
                 * #2353 proposes adding another renderer option to configure this, but
                 * the properties affects are so finite it is worth special casing it
                 * here to reduce the complexity. (Special casing it also should not
                 * affect non-DOM renderers)
                 */ if ("value" in props) hostPatchProp(el, "value", null, props.value);
            if (vnodeHook = props.onVnodeBeforeMount) invokeVNodeHook(vnodeHook, parentComponent, vnode);
        }
        // scopeId
        setScopeId(el, vnode, vnode.scopeId, slotScopeIds, parentComponent);
        Object.defineProperty(el, "__vnode", {
            value: vnode,
            enumerable: false
        });
        Object.defineProperty(el, "__vueParentComponent", {
            value: parentComponent,
            enumerable: false
        });
        if (dirs) invokeDirectiveHook(vnode, null, parentComponent, "beforeMount");
        // #1583 For inside suspense + suspense not resolved case, enter hook should call when suspense resolved
        // #1689 For inside suspense + suspense resolved case, just call it
        const needCallTransitionHooks = (!parentSuspense || parentSuspense && !parentSuspense.pendingBranch) && transition && !transition.persisted;
        if (needCallTransitionHooks) transition.beforeEnter(el);
        hostInsert(el, container, anchor);
        if ((vnodeHook = props && props.onVnodeMounted) || needCallTransitionHooks || dirs) queuePostRenderEffect(()=>{
            vnodeHook && invokeVNodeHook(vnodeHook, parentComponent, vnode);
            needCallTransitionHooks && transition.enter(el);
            dirs && invokeDirectiveHook(vnode, null, parentComponent, "mounted");
        }, parentSuspense);
    };
    const setScopeId = (el, vnode, scopeId, slotScopeIds, parentComponent)=>{
        if (scopeId) hostSetScopeId(el, scopeId);
        if (slotScopeIds) for(let i = 0; i < slotScopeIds.length; i++)hostSetScopeId(el, slotScopeIds[i]);
        if (parentComponent) {
            let subTree = parentComponent.subTree;
            if (subTree.patchFlag > 0 && subTree.patchFlag & 2048 /* DEV_ROOT_FRAGMENT */ ) subTree = filterSingleRoot(subTree.children) || subTree;
            if (vnode === subTree) {
                const parentVNode = parentComponent.vnode;
                setScopeId(el, parentVNode, parentVNode.scopeId, parentVNode.slotScopeIds, parentComponent.parent);
            }
        }
    };
    const mountChildren = (children, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, start = 0)=>{
        for(let i = start; i < children.length; i++){
            const child = children[i] = optimized ? cloneIfMounted(children[i]) : normalizeVNode(children[i]);
            patch(null, child, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
        }
    };
    const patchElement = (n1, n2, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized)=>{
        const el = n2.el = n1.el;
        let { patchFlag , dynamicChildren , dirs  } = n2;
        // #1426 take the old vnode's patch flag into account since user may clone a
        // compiler-generated vnode, which de-opts to FULL_PROPS
        patchFlag |= n1.patchFlag & 16 /* FULL_PROPS */ ;
        const oldProps = n1.props || (0, _shared.EMPTY_OBJ);
        const newProps = n2.props || (0, _shared.EMPTY_OBJ);
        let vnodeHook;
        if (vnodeHook = newProps.onVnodeBeforeUpdate) invokeVNodeHook(vnodeHook, parentComponent, n2, n1);
        if (dirs) invokeDirectiveHook(n2, n1, parentComponent, "beforeUpdate");
        if (isHmrUpdating) {
            // HMR updated, force full diff
            patchFlag = 0;
            optimized = false;
            dynamicChildren = null;
        }
        const areChildrenSVG = isSVG && n2.type !== "foreignObject";
        if (dynamicChildren) {
            patchBlockChildren(n1.dynamicChildren, dynamicChildren, el, parentComponent, parentSuspense, areChildrenSVG, slotScopeIds);
            if (parentComponent && parentComponent.type.__hmrId) traverseStaticChildren(n1, n2);
        } else if (!optimized) // full diff
        patchChildren(n1, n2, el, null, parentComponent, parentSuspense, areChildrenSVG, slotScopeIds, false);
        if (patchFlag > 0) {
            // the presence of a patchFlag means this element's render code was
            // generated by the compiler and can take the fast path.
            // in this path old node and new node are guaranteed to have the same shape
            // (i.e. at the exact same position in the source template)
            if (patchFlag & 16 /* FULL_PROPS */ ) // element props contain dynamic keys, full diff needed
            patchProps(el, n2, oldProps, newProps, parentComponent, parentSuspense, isSVG);
            else {
                // class
                // this flag is matched when the element has dynamic class bindings.
                if (patchFlag & 2 /* CLASS */ ) {
                    if (oldProps.class !== newProps.class) hostPatchProp(el, "class", null, newProps.class, isSVG);
                }
                // style
                // this flag is matched when the element has dynamic style bindings
                if (patchFlag & 4 /* STYLE */ ) hostPatchProp(el, "style", oldProps.style, newProps.style, isSVG);
                // props
                // This flag is matched when the element has dynamic prop/attr bindings
                // other than class and style. The keys of dynamic prop/attrs are saved for
                // faster iteration.
                // Note dynamic keys like :[foo]="bar" will cause this optimization to
                // bail out and go through a full diff because we need to unset the old key
                if (patchFlag & 8 /* PROPS */ ) {
                    // if the flag is present then dynamicProps must be non-null
                    const propsToUpdate = n2.dynamicProps;
                    for(let i = 0; i < propsToUpdate.length; i++){
                        const key = propsToUpdate[i];
                        const prev = oldProps[key];
                        const next = newProps[key];
                        // #1471 force patch value
                        if (next !== prev || key === "value") hostPatchProp(el, key, prev, next, isSVG, n1.children, parentComponent, parentSuspense, unmountChildren);
                    }
                }
            }
            // text
            // This flag is matched when the element has only dynamic text children.
            if (patchFlag & 1 /* TEXT */ ) {
                if (n1.children !== n2.children) hostSetElementText(el, n2.children);
            }
        } else if (!optimized && dynamicChildren == null) // unoptimized, full diff
        patchProps(el, n2, oldProps, newProps, parentComponent, parentSuspense, isSVG);
        if ((vnodeHook = newProps.onVnodeUpdated) || dirs) queuePostRenderEffect(()=>{
            vnodeHook && invokeVNodeHook(vnodeHook, parentComponent, n2, n1);
            dirs && invokeDirectiveHook(n2, n1, parentComponent, "updated");
        }, parentSuspense);
    };
    // The fast path for blocks.
    const patchBlockChildren = (oldChildren, newChildren, fallbackContainer, parentComponent, parentSuspense, isSVG, slotScopeIds)=>{
        for(let i = 0; i < newChildren.length; i++){
            const oldVNode = oldChildren[i];
            const newVNode = newChildren[i];
            // Determine the container (parent element) for the patch.
            const container = // oldVNode may be an errored async setup() component inside Suspense
            // which will not have a mounted element
            oldVNode.el && (oldVNode.type === Fragment || // - In the case of different nodes, there is going to be a replacement
            // which also requires the correct parent container
            !isSameVNodeType(oldVNode, newVNode) || // - In the case of a component, it could contain anything.
            oldVNode.shapeFlag & 70 /* TELEPORT */ ) ? hostParentNode(oldVNode.el) : // just pass the block element here to avoid a DOM parentNode call.
            fallbackContainer;
            patch(oldVNode, newVNode, container, null, parentComponent, parentSuspense, isSVG, slotScopeIds, true);
        }
    };
    const patchProps = (el, vnode, oldProps, newProps, parentComponent, parentSuspense, isSVG)=>{
        if (oldProps !== newProps) {
            for(const key in newProps){
                // empty string is not valid prop
                if ((0, _shared.isReservedProp)(key)) continue;
                const next = newProps[key];
                const prev = oldProps[key];
                // defer patching value
                if (next !== prev && key !== "value") hostPatchProp(el, key, prev, next, isSVG, vnode.children, parentComponent, parentSuspense, unmountChildren);
            }
            if (oldProps !== (0, _shared.EMPTY_OBJ)) {
                for(const key in oldProps)if (!(0, _shared.isReservedProp)(key) && !(key in newProps)) hostPatchProp(el, key, oldProps[key], null, isSVG, vnode.children, parentComponent, parentSuspense, unmountChildren);
            }
            if ("value" in newProps) hostPatchProp(el, "value", oldProps.value, newProps.value);
        }
    };
    const processFragment = (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized)=>{
        const fragmentStartAnchor = n2.el = n1 ? n1.el : hostCreateText("");
        const fragmentEndAnchor = n2.anchor = n1 ? n1.anchor : hostCreateText("");
        let { patchFlag , dynamicChildren , slotScopeIds: fragmentSlotScopeIds  } = n2;
        if (isHmrUpdating) {
            // HMR updated, force full diff
            patchFlag = 0;
            optimized = false;
            dynamicChildren = null;
        }
        // check if this is a slot fragment with :slotted scope ids
        if (fragmentSlotScopeIds) slotScopeIds = slotScopeIds ? slotScopeIds.concat(fragmentSlotScopeIds) : fragmentSlotScopeIds;
        if (n1 == null) {
            hostInsert(fragmentStartAnchor, container, anchor);
            hostInsert(fragmentEndAnchor, container, anchor);
            // a fragment can only have array children
            // since they are either generated by the compiler, or implicitly created
            // from arrays.
            mountChildren(n2.children, container, fragmentEndAnchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
        } else if (patchFlag > 0 && patchFlag & 64 /* STABLE_FRAGMENT */  && dynamicChildren && // #2715 the previous fragment could've been a BAILed one as a result
        // of renderSlot() with no valid children
        n1.dynamicChildren) {
            // a stable fragment (template root or <template v-for>) doesn't need to
            // patch children order, but it may contain dynamicChildren.
            patchBlockChildren(n1.dynamicChildren, dynamicChildren, container, parentComponent, parentSuspense, isSVG, slotScopeIds);
            if (parentComponent && parentComponent.type.__hmrId) traverseStaticChildren(n1, n2);
            else if (// #2080 if the stable fragment has a key, it's a <template v-for> that may
            //  get moved around. Make sure all root level vnodes inherit el.
            // #2134 or if it's a component root, it may also get moved around
            // as the component is being moved.
            n2.key != null || parentComponent && n2 === parentComponent.subTree) traverseStaticChildren(n1, n2, true);
        } else // keyed / unkeyed, or manual fragments.
        // for keyed & unkeyed, since they are compiler generated from v-for,
        // each child is guaranteed to be a block so the fragment will never
        // have dynamicChildren.
        patchChildren(n1, n2, container, fragmentEndAnchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
    };
    const processComponent = (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized)=>{
        n2.slotScopeIds = slotScopeIds;
        if (n1 == null) {
            if (n2.shapeFlag & 512 /* COMPONENT_KEPT_ALIVE */ ) parentComponent.ctx.activate(n2, container, anchor, isSVG, optimized);
            else mountComponent(n2, container, anchor, parentComponent, parentSuspense, isSVG, optimized);
        } else updateComponent(n1, n2, optimized);
    };
    const mountComponent = (initialVNode, container, anchor, parentComponent, parentSuspense, isSVG, optimized)=>{
        const instance = initialVNode.component = createComponentInstance(initialVNode, parentComponent, parentSuspense);
        if (instance.type.__hmrId) registerHMR(instance);
        pushWarningContext(initialVNode);
        startMeasure(instance, `mount`);
        // inject renderer internals for keepAlive
        if (isKeepAlive(initialVNode)) instance.ctx.renderer = internals;
        startMeasure(instance, `init`);
        setupComponent(instance);
        endMeasure(instance, `init`);
        // setup() is async. This component relies on async logic to be resolved
        // before proceeding
        if (instance.asyncDep) {
            parentSuspense && parentSuspense.registerDep(instance, setupRenderEffect);
            // Give it a placeholder if this is not hydration
            // TODO handle self-defined fallback
            if (!initialVNode.el) {
                const placeholder = instance.subTree = createVNode(Comment);
                processCommentNode(null, placeholder, container, anchor);
            }
            return;
        }
        setupRenderEffect(instance, initialVNode, container, anchor, parentSuspense, isSVG, optimized);
        popWarningContext();
        endMeasure(instance, `mount`);
    };
    const updateComponent = (n1, n2, optimized)=>{
        const instance = n2.component = n1.component;
        if (shouldUpdateComponent(n1, n2, optimized)) {
            if (instance.asyncDep && !instance.asyncResolved) {
                pushWarningContext(n2);
                updateComponentPreRender(instance, n2, optimized);
                popWarningContext();
                return;
            } else {
                // normal update
                instance.next = n2;
                // in case the child component is also queued, remove it to avoid
                // double updating the same child component in the same flush.
                invalidateJob(instance.update);
                // instance.update is the reactive effect.
                instance.update();
            }
        } else {
            // no update needed. just copy over properties
            n2.component = n1.component;
            n2.el = n1.el;
            instance.vnode = n2;
        }
    };
    const setupRenderEffect = (instance, initialVNode, container, anchor, parentSuspense, isSVG, optimized)=>{
        const componentUpdateFn = ()=>{
            if (!instance.isMounted) {
                let vnodeHook;
                const { el , props  } = initialVNode;
                const { bm , m , parent  } = instance;
                const isAsyncWrapperVNode = isAsyncWrapper(initialVNode);
                effect.allowRecurse = false;
                // beforeMount hook
                if (bm) (0, _shared.invokeArrayFns)(bm);
                // onVnodeBeforeMount
                if (!isAsyncWrapperVNode && (vnodeHook = props && props.onVnodeBeforeMount)) invokeVNodeHook(vnodeHook, parent, initialVNode);
                effect.allowRecurse = true;
                if (el && hydrateNode) {
                    // vnode has adopted host node - perform hydration instead of mount.
                    const hydrateSubTree = ()=>{
                        startMeasure(instance, `render`);
                        instance.subTree = renderComponentRoot(instance);
                        endMeasure(instance, `render`);
                        startMeasure(instance, `hydrate`);
                        hydrateNode(el, instance.subTree, instance, parentSuspense, null);
                        endMeasure(instance, `hydrate`);
                    };
                    if (isAsyncWrapperVNode) initialVNode.type.__asyncLoader().then(// note: we are moving the render call into an async callback,
                    // which means it won't track dependencies - but it's ok because
                    // a server-rendered async wrapper is already in resolved state
                    // and it will never need to change.
                    ()=>!instance.isUnmounted && hydrateSubTree());
                    else hydrateSubTree();
                } else {
                    startMeasure(instance, `render`);
                    const subTree = instance.subTree = renderComponentRoot(instance);
                    endMeasure(instance, `render`);
                    startMeasure(instance, `patch`);
                    patch(null, subTree, container, anchor, instance, parentSuspense, isSVG);
                    endMeasure(instance, `patch`);
                    initialVNode.el = subTree.el;
                }
                // mounted hook
                if (m) queuePostRenderEffect(m, parentSuspense);
                // onVnodeMounted
                if (!isAsyncWrapperVNode && (vnodeHook = props && props.onVnodeMounted)) {
                    const scopedInitialVNode = initialVNode;
                    queuePostRenderEffect(()=>invokeVNodeHook(vnodeHook, parent, scopedInitialVNode), parentSuspense);
                }
                // activated hook for keep-alive roots.
                // #1742 activated hook must be accessed after first render
                // since the hook may be injected by a child keep-alive
                if (initialVNode.shapeFlag & 256 /* COMPONENT_SHOULD_KEEP_ALIVE */ ) instance.a && queuePostRenderEffect(instance.a, parentSuspense);
                instance.isMounted = true;
                devtoolsComponentAdded(instance);
                // #2458: deference mount-only object parameters to prevent memleaks
                initialVNode = container = anchor = null;
            } else {
                // updateComponent
                // This is triggered by mutation of component's own state (next: null)
                // OR parent calling processComponent (next: VNode)
                let { next , bu , u , parent , vnode  } = instance;
                let originNext = next;
                let vnodeHook;
                pushWarningContext(next || instance.vnode);
                // Disallow component effect recursion during pre-lifecycle hooks.
                effect.allowRecurse = false;
                if (next) {
                    next.el = vnode.el;
                    updateComponentPreRender(instance, next, optimized);
                } else next = vnode;
                // beforeUpdate hook
                if (bu) (0, _shared.invokeArrayFns)(bu);
                // onVnodeBeforeUpdate
                if (vnodeHook = next.props && next.props.onVnodeBeforeUpdate) invokeVNodeHook(vnodeHook, parent, next, vnode);
                effect.allowRecurse = true;
                startMeasure(instance, `render`);
                const nextTree = renderComponentRoot(instance);
                endMeasure(instance, `render`);
                const prevTree = instance.subTree;
                instance.subTree = nextTree;
                startMeasure(instance, `patch`);
                patch(prevTree, nextTree, // parent may have changed if it's in a teleport
                hostParentNode(prevTree.el), // anchor may have changed if it's in a fragment
                getNextHostNode(prevTree), instance, parentSuspense, isSVG);
                endMeasure(instance, `patch`);
                next.el = nextTree.el;
                if (originNext === null) // self-triggered update. In case of HOC, update parent component
                // vnode el. HOC is indicated by parent instance's subTree pointing
                // to child component's vnode
                updateHOCHostEl(instance, nextTree.el);
                // updated hook
                if (u) queuePostRenderEffect(u, parentSuspense);
                // onVnodeUpdated
                if (vnodeHook = next.props && next.props.onVnodeUpdated) queuePostRenderEffect(()=>invokeVNodeHook(vnodeHook, parent, next, vnode), parentSuspense);
                devtoolsComponentUpdated(instance);
                popWarningContext();
            }
        };
        // create reactive effect for rendering
        const effect = new (0, _reactivity.ReactiveEffect)(componentUpdateFn, ()=>queueJob(instance.update), instance.scope // track it in component's effect scope
        );
        const update = instance.update = effect.run.bind(effect);
        update.id = instance.uid;
        // allowRecurse
        // #1801, #2043 component render effects should allow recursive updates
        effect.allowRecurse = update.allowRecurse = true;
        effect.onTrack = instance.rtc ? (e)=>(0, _shared.invokeArrayFns)(instance.rtc, e) : void 0;
        effect.onTrigger = instance.rtg ? (e)=>(0, _shared.invokeArrayFns)(instance.rtg, e) : void 0;
        // @ts-ignore (for scheduler)
        update.ownerInstance = instance;
        update();
    };
    const updateComponentPreRender = (instance, nextVNode, optimized)=>{
        nextVNode.component = instance;
        const prevProps = instance.vnode.props;
        instance.vnode = nextVNode;
        instance.next = null;
        updateProps(instance, nextVNode.props, prevProps, optimized);
        updateSlots(instance, nextVNode.children, optimized);
        (0, _reactivity.pauseTracking)();
        // props update may have triggered pre-flush watchers.
        // flush them before the render update.
        flushPreFlushCbs(undefined, instance.update);
        (0, _reactivity.resetTracking)();
    };
    const patchChildren = (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized = false)=>{
        const c1 = n1 && n1.children;
        const prevShapeFlag = n1 ? n1.shapeFlag : 0;
        const c2 = n2.children;
        const { patchFlag , shapeFlag  } = n2;
        // fast path
        if (patchFlag > 0) {
            if (patchFlag & 128 /* KEYED_FRAGMENT */ ) {
                // this could be either fully-keyed or mixed (some keyed some not)
                // presence of patchFlag means children are guaranteed to be arrays
                patchKeyedChildren(c1, c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
                return;
            } else if (patchFlag & 256 /* UNKEYED_FRAGMENT */ ) {
                // unkeyed
                patchUnkeyedChildren(c1, c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
                return;
            }
        }
        // children has 3 possibilities: text, array or no children.
        if (shapeFlag & 8 /* TEXT_CHILDREN */ ) {
            // text children fast path
            if (prevShapeFlag & 16 /* ARRAY_CHILDREN */ ) unmountChildren(c1, parentComponent, parentSuspense);
            if (c2 !== c1) hostSetElementText(container, c2);
        } else if (prevShapeFlag & 16 /* ARRAY_CHILDREN */ ) {
            // prev children was array
            if (shapeFlag & 16 /* ARRAY_CHILDREN */ ) // two arrays, cannot assume anything, do full diff
            patchKeyedChildren(c1, c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
            else // no new children, just unmount old
            unmountChildren(c1, parentComponent, parentSuspense, true);
        } else {
            // prev children was text OR null
            // new children is array OR null
            if (prevShapeFlag & 8 /* TEXT_CHILDREN */ ) hostSetElementText(container, "");
            // mount new if array
            if (shapeFlag & 16 /* ARRAY_CHILDREN */ ) mountChildren(c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
        }
    };
    const patchUnkeyedChildren = (c1, c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized)=>{
        c1 = c1 || (0, _shared.EMPTY_ARR);
        c2 = c2 || (0, _shared.EMPTY_ARR);
        const oldLength = c1.length;
        const newLength = c2.length;
        const commonLength = Math.min(oldLength, newLength);
        let i;
        for(i = 0; i < commonLength; i++){
            const nextChild = c2[i] = optimized ? cloneIfMounted(c2[i]) : normalizeVNode(c2[i]);
            patch(c1[i], nextChild, container, null, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
        }
        if (oldLength > newLength) // remove old
        unmountChildren(c1, parentComponent, parentSuspense, true, false, commonLength);
        else // mount new
        mountChildren(c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, commonLength);
    };
    // can be all-keyed or mixed
    const patchKeyedChildren = (c1, c2, container, parentAnchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized)=>{
        let i = 0;
        const l2 = c2.length;
        let e1 = c1.length - 1; // prev ending index
        let e2 = l2 - 1; // next ending index
        // 1. sync from start
        // (a b) c
        // (a b) d e
        while(i <= e1 && i <= e2){
            const n1 = c1[i];
            const n2 = c2[i] = optimized ? cloneIfMounted(c2[i]) : normalizeVNode(c2[i]);
            if (isSameVNodeType(n1, n2)) patch(n1, n2, container, null, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
            else break;
            i++;
        }
        // 2. sync from end
        // a (b c)
        // d e (b c)
        while(i <= e1 && i <= e2){
            const n1 = c1[e1];
            const n2 = c2[e2] = optimized ? cloneIfMounted(c2[e2]) : normalizeVNode(c2[e2]);
            if (isSameVNodeType(n1, n2)) patch(n1, n2, container, null, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
            else break;
            e1--;
            e2--;
        }
        // 3. common sequence + mount
        // (a b)
        // (a b) c
        // i = 2, e1 = 1, e2 = 2
        // (a b)
        // c (a b)
        // i = 0, e1 = -1, e2 = 0
        if (i > e1) {
            if (i <= e2) {
                const nextPos = e2 + 1;
                const anchor = nextPos < l2 ? c2[nextPos].el : parentAnchor;
                while(i <= e2){
                    patch(null, c2[i] = optimized ? cloneIfMounted(c2[i]) : normalizeVNode(c2[i]), container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
                    i++;
                }
            }
        } else if (i > e2) while(i <= e1){
            unmount(c1[i], parentComponent, parentSuspense, true);
            i++;
        }
        else {
            const s1 = i; // prev starting index
            const s2 = i; // next starting index
            // 5.1 build key:index map for newChildren
            const keyToNewIndexMap = new Map();
            for(i = s2; i <= e2; i++){
                const nextChild = c2[i] = optimized ? cloneIfMounted(c2[i]) : normalizeVNode(c2[i]);
                if (nextChild.key != null) {
                    if (keyToNewIndexMap.has(nextChild.key)) warn(`Duplicate keys found during update:`, JSON.stringify(nextChild.key), `Make sure keys are unique.`);
                    keyToNewIndexMap.set(nextChild.key, i);
                }
            }
            // 5.2 loop through old children left to be patched and try to patch
            // matching nodes & remove nodes that are no longer present
            let j;
            let patched = 0;
            const toBePatched = e2 - s2 + 1;
            let moved = false;
            // used to track whether any node has moved
            let maxNewIndexSoFar = 0;
            // works as Map<newIndex, oldIndex>
            // Note that oldIndex is offset by +1
            // and oldIndex = 0 is a special value indicating the new node has
            // no corresponding old node.
            // used for determining longest stable subsequence
            const newIndexToOldIndexMap = new Array(toBePatched);
            for(i = 0; i < toBePatched; i++)newIndexToOldIndexMap[i] = 0;
            for(i = s1; i <= e1; i++){
                const prevChild = c1[i];
                if (patched >= toBePatched) {
                    // all new children have been patched so this can only be a removal
                    unmount(prevChild, parentComponent, parentSuspense, true);
                    continue;
                }
                let newIndex;
                if (prevChild.key != null) newIndex = keyToNewIndexMap.get(prevChild.key);
                else {
                    // key-less node, try to locate a key-less node of the same type
                    for(j = s2; j <= e2; j++)if (newIndexToOldIndexMap[j - s2] === 0 && isSameVNodeType(prevChild, c2[j])) {
                        newIndex = j;
                        break;
                    }
                }
                if (newIndex === undefined) unmount(prevChild, parentComponent, parentSuspense, true);
                else {
                    newIndexToOldIndexMap[newIndex - s2] = i + 1;
                    if (newIndex >= maxNewIndexSoFar) maxNewIndexSoFar = newIndex;
                    else moved = true;
                    patch(prevChild, c2[newIndex], container, null, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
                    patched++;
                }
            }
            // 5.3 move and mount
            // generate longest stable subsequence only when nodes have moved
            const increasingNewIndexSequence = moved ? getSequence(newIndexToOldIndexMap) : (0, _shared.EMPTY_ARR);
            j = increasingNewIndexSequence.length - 1;
            // looping backwards so that we can use last patched node as anchor
            for(i = toBePatched - 1; i >= 0; i--){
                const nextIndex = s2 + i;
                const nextChild = c2[nextIndex];
                const anchor = nextIndex + 1 < l2 ? c2[nextIndex + 1].el : parentAnchor;
                if (newIndexToOldIndexMap[i] === 0) // mount new
                patch(null, nextChild, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
                else if (moved) {
                    // move if:
                    // There is no stable subsequence (e.g. a reverse)
                    // OR current node is not among the stable sequence
                    if (j < 0 || i !== increasingNewIndexSequence[j]) move(nextChild, container, anchor, 2 /* REORDER */ );
                    else j--;
                }
            }
        }
    };
    const move = (vnode, container, anchor, moveType, parentSuspense = null)=>{
        const { el , type , transition , children , shapeFlag  } = vnode;
        if (shapeFlag & 6 /* COMPONENT */ ) {
            move(vnode.component.subTree, container, anchor, moveType);
            return;
        }
        if (shapeFlag & 128 /* SUSPENSE */ ) {
            vnode.suspense.move(container, anchor, moveType);
            return;
        }
        if (shapeFlag & 64 /* TELEPORT */ ) {
            type.move(vnode, container, anchor, internals);
            return;
        }
        if (type === Fragment) {
            hostInsert(el, container, anchor);
            for(let i = 0; i < children.length; i++)move(children[i], container, anchor, moveType);
            hostInsert(vnode.anchor, container, anchor);
            return;
        }
        if (type === Static) {
            moveStaticNode(vnode, container, anchor);
            return;
        }
        // single nodes
        const needTransition = moveType !== 2 /* REORDER */  && shapeFlag & 1 /* ELEMENT */  && transition;
        if (needTransition) {
            if (moveType === 0 /* ENTER */ ) {
                transition.beforeEnter(el);
                hostInsert(el, container, anchor);
                queuePostRenderEffect(()=>transition.enter(el), parentSuspense);
            } else {
                const { leave , delayLeave , afterLeave  } = transition;
                const remove = ()=>hostInsert(el, container, anchor);
                const performLeave = ()=>{
                    leave(el, ()=>{
                        remove();
                        afterLeave && afterLeave();
                    });
                };
                if (delayLeave) delayLeave(el, remove, performLeave);
                else performLeave();
            }
        } else hostInsert(el, container, anchor);
    };
    const unmount = (vnode, parentComponent, parentSuspense, doRemove = false, optimized = false)=>{
        const { type , props , ref , children , dynamicChildren , shapeFlag , patchFlag , dirs  } = vnode;
        // unset ref
        if (ref != null) setRef(ref, null, parentSuspense, vnode, true);
        if (shapeFlag & 256 /* COMPONENT_SHOULD_KEEP_ALIVE */ ) {
            parentComponent.ctx.deactivate(vnode);
            return;
        }
        const shouldInvokeDirs = shapeFlag & 1 /* ELEMENT */  && dirs;
        const shouldInvokeVnodeHook = !isAsyncWrapper(vnode);
        let vnodeHook;
        if (shouldInvokeVnodeHook && (vnodeHook = props && props.onVnodeBeforeUnmount)) invokeVNodeHook(vnodeHook, parentComponent, vnode);
        if (shapeFlag & 6 /* COMPONENT */ ) unmountComponent(vnode.component, parentSuspense, doRemove);
        else {
            if (shapeFlag & 128 /* SUSPENSE */ ) {
                vnode.suspense.unmount(parentSuspense, doRemove);
                return;
            }
            if (shouldInvokeDirs) invokeDirectiveHook(vnode, null, parentComponent, "beforeUnmount");
            if (shapeFlag & 64 /* TELEPORT */ ) vnode.type.remove(vnode, parentComponent, parentSuspense, optimized, internals, doRemove);
            else if (dynamicChildren && (type !== Fragment || patchFlag > 0 && patchFlag & 64 /* STABLE_FRAGMENT */ )) // fast path for block nodes: only need to unmount dynamic children.
            unmountChildren(dynamicChildren, parentComponent, parentSuspense, false, true);
            else if (type === Fragment && patchFlag & 384 /* UNKEYED_FRAGMENT */  || !optimized && shapeFlag & 16 /* ARRAY_CHILDREN */ ) unmountChildren(children, parentComponent, parentSuspense);
            if (doRemove) remove1(vnode);
        }
        if (shouldInvokeVnodeHook && (vnodeHook = props && props.onVnodeUnmounted) || shouldInvokeDirs) queuePostRenderEffect(()=>{
            vnodeHook && invokeVNodeHook(vnodeHook, parentComponent, vnode);
            shouldInvokeDirs && invokeDirectiveHook(vnode, null, parentComponent, "unmounted");
        }, parentSuspense);
    };
    const remove1 = (vnode)=>{
        const { type , el , anchor , transition  } = vnode;
        if (type === Fragment) {
            removeFragment(el, anchor);
            return;
        }
        if (type === Static) {
            removeStaticNode(vnode);
            return;
        }
        const performRemove = ()=>{
            hostRemove(el);
            if (transition && !transition.persisted && transition.afterLeave) transition.afterLeave();
        };
        if (vnode.shapeFlag & 1 /* ELEMENT */  && transition && !transition.persisted) {
            const { leave , delayLeave  } = transition;
            const performLeave = ()=>leave(el, performRemove);
            if (delayLeave) delayLeave(vnode.el, performRemove, performLeave);
            else performLeave();
        } else performRemove();
    };
    const removeFragment = (cur, end)=>{
        // For fragments, directly remove all contained DOM nodes.
        // (fragment child nodes cannot have transition)
        let next;
        while(cur !== end){
            next = hostNextSibling(cur);
            hostRemove(cur);
            cur = next;
        }
        hostRemove(end);
    };
    const unmountComponent = (instance, parentSuspense, doRemove)=>{
        if (instance.type.__hmrId) unregisterHMR(instance);
        const { bum , scope , update , subTree , um  } = instance;
        // beforeUnmount hook
        if (bum) (0, _shared.invokeArrayFns)(bum);
        // stop effects in component scope
        scope.stop();
        // update may be null if a component is unmounted before its async
        // setup has resolved.
        if (update) {
            // so that scheduler will no longer invoke it
            update.active = false;
            unmount(subTree, instance, parentSuspense, doRemove);
        }
        // unmounted hook
        if (um) queuePostRenderEffect(um, parentSuspense);
        queuePostRenderEffect(()=>{
            instance.isUnmounted = true;
        }, parentSuspense);
        // A component with async dep inside a pending suspense is unmounted before
        // its async dep resolves. This should remove the dep from the suspense, and
        // cause the suspense to resolve immediately if that was the last dep.
        if (parentSuspense && parentSuspense.pendingBranch && !parentSuspense.isUnmounted && instance.asyncDep && !instance.asyncResolved && instance.suspenseId === parentSuspense.pendingId) {
            parentSuspense.deps--;
            if (parentSuspense.deps === 0) parentSuspense.resolve();
        }
        devtoolsComponentRemoved(instance);
    };
    const unmountChildren = (children, parentComponent, parentSuspense, doRemove = false, optimized = false, start = 0)=>{
        for(let i = start; i < children.length; i++)unmount(children[i], parentComponent, parentSuspense, doRemove, optimized);
    };
    const getNextHostNode = (vnode)=>{
        if (vnode.shapeFlag & 6 /* COMPONENT */ ) return getNextHostNode(vnode.component.subTree);
        if (vnode.shapeFlag & 128 /* SUSPENSE */ ) return vnode.suspense.next();
        return hostNextSibling(vnode.anchor || vnode.el);
    };
    const render = (vnode, container, isSVG)=>{
        if (vnode == null) {
            if (container._vnode) unmount(container._vnode, null, null, true);
        } else patch(container._vnode || null, vnode, container, null, null, null, isSVG);
        flushPostFlushCbs();
        container._vnode = vnode;
    };
    const internals = {
        p: patch,
        um: unmount,
        m: move,
        r: remove1,
        mt: mountComponent,
        mc: mountChildren,
        pc: patchChildren,
        pbc: patchBlockChildren,
        n: getNextHostNode,
        o: options
    };
    let hydrate;
    let hydrateNode;
    if (createHydrationFns) [hydrate, hydrateNode] = createHydrationFns(internals);
    return {
        render,
        hydrate,
        createApp: createAppAPI(render, hydrate)
    };
}
function setRef(rawRef, oldRawRef, parentSuspense, vnode, isUnmount = false) {
    if ((0, _shared.isArray)(rawRef)) {
        rawRef.forEach((r, i)=>setRef(r, oldRawRef && ((0, _shared.isArray)(oldRawRef) ? oldRawRef[i] : oldRawRef), parentSuspense, vnode, isUnmount));
        return;
    }
    if (isAsyncWrapper(vnode) && !isUnmount) // when mounting async components, nothing needs to be done,
    // because the template ref is forwarded to inner component
    return;
    const refValue = vnode.shapeFlag & 4 /* STATEFUL_COMPONENT */  ? getExposeProxy(vnode.component) || vnode.component.proxy : vnode.el;
    const value = isUnmount ? null : refValue;
    const { i: owner , r: ref  } = rawRef;
    if (!owner) {
        warn(`Missing ref owner context. ref cannot be used on hoisted vnodes. ` + `A vnode with ref must be created inside the render function.`);
        return;
    }
    const oldRef = oldRawRef && oldRawRef.r;
    const refs = owner.refs === (0, _shared.EMPTY_OBJ) ? owner.refs = {} : owner.refs;
    const setupState = owner.setupState;
    // dynamic ref changed. unset old ref
    if (oldRef != null && oldRef !== ref) {
        if ((0, _shared.isString)(oldRef)) {
            refs[oldRef] = null;
            if ((0, _shared.hasOwn)(setupState, oldRef)) setupState[oldRef] = null;
        } else if ((0, _reactivity.isRef)(oldRef)) oldRef.value = null;
    }
    if ((0, _shared.isString)(ref)) {
        const doSet = ()=>{
            refs[ref] = value;
            if ((0, _shared.hasOwn)(setupState, ref)) setupState[ref] = value;
        };
        // #1789: for non-null values, set them after render
        // null values means this is unmount and it should not overwrite another
        // ref with the same key
        if (value) {
            doSet.id = -1;
            queuePostRenderEffect(doSet, parentSuspense);
        } else doSet();
    } else if ((0, _reactivity.isRef)(ref)) {
        const doSet = ()=>{
            ref.value = value;
        };
        if (value) {
            doSet.id = -1;
            queuePostRenderEffect(doSet, parentSuspense);
        } else doSet();
    } else if ((0, _shared.isFunction)(ref)) callWithErrorHandling(ref, owner, 12 /* FUNCTION_REF */ , [
        value,
        refs
    ]);
    else warn("Invalid template ref type:", value, `(${typeof value})`);
}
function invokeVNodeHook(hook, instance, vnode, prevVNode = null) {
    callWithAsyncErrorHandling(hook, instance, 7 /* VNODE_HOOK */ , [
        vnode,
        prevVNode
    ]);
}
/**
 * #1156
 * When a component is HMR-enabled, we need to make sure that all static nodes
 * inside a block also inherit the DOM element from the previous tree so that
 * HMR updates (which are full updates) can retrieve the element for patching.
 *
 * #2080
 * Inside keyed `template` fragment static children, if a fragment is moved,
 * the children will always moved so that need inherit el form previous nodes
 * to ensure correct moved position.
 */ function traverseStaticChildren(n1, n2, shallow = false) {
    const ch1 = n1.children;
    const ch2 = n2.children;
    if ((0, _shared.isArray)(ch1) && (0, _shared.isArray)(ch2)) for(let i = 0; i < ch1.length; i++){
        // this is only called in the optimized path so array children are
        // guaranteed to be vnodes
        const c1 = ch1[i];
        let c2 = ch2[i];
        if (c2.shapeFlag & 1 /* ELEMENT */  && !c2.dynamicChildren) {
            if (c2.patchFlag <= 0 || c2.patchFlag === 32 /* HYDRATE_EVENTS */ ) {
                c2 = ch2[i] = cloneIfMounted(ch2[i]);
                c2.el = c1.el;
            }
            if (!shallow) traverseStaticChildren(c1, c2);
        }
        // also inherit for comment nodes, but not placeholders (e.g. v-if which
        // would have received .el during block patch)
        if (c2.type === Comment && !c2.el) c2.el = c1.el;
    }
}
// https://en.wikipedia.org/wiki/Longest_increasing_subsequence
function getSequence(arr) {
    const p = arr.slice();
    const result = [
        0
    ];
    let i, j, u, v, c;
    const len = arr.length;
    for(i = 0; i < len; i++){
        const arrI = arr[i];
        if (arrI !== 0) {
            j = result[result.length - 1];
            if (arr[j] < arrI) {
                p[i] = j;
                result.push(i);
                continue;
            }
            u = 0;
            v = result.length - 1;
            while(u < v){
                c = u + v >> 1;
                if (arr[result[c]] < arrI) u = c + 1;
                else v = c;
            }
            if (arrI < arr[result[u]]) {
                if (u > 0) p[i] = result[u - 1];
                result[u] = i;
            }
        }
    }
    u = result.length;
    v = result[u - 1];
    while(u-- > 0){
        result[u] = v;
        v = p[v];
    }
    return result;
}
const isTeleport = (type)=>type.__isTeleport;
const isTeleportDisabled = (props)=>props && (props.disabled || props.disabled === "");
const isTargetSVG = (target)=>typeof SVGElement !== "undefined" && target instanceof SVGElement;
const resolveTarget = (props, select)=>{
    const targetSelector = props && props.to;
    if ((0, _shared.isString)(targetSelector)) {
        if (!select) {
            warn(`Current renderer does not support string target for Teleports. ` + `(missing querySelector renderer option)`);
            return null;
        } else {
            const target = select(targetSelector);
            if (!target) warn(`Failed to locate Teleport target with selector "${targetSelector}". ` + `Note the target element must exist before the component is mounted - ` + `i.e. the target cannot be rendered by the component itself, and ` + `ideally should be outside of the entire Vue component tree.`);
            return target;
        }
    } else {
        if (!targetSelector && !isTeleportDisabled(props)) warn(`Invalid Teleport target: ${targetSelector}`);
        return targetSelector;
    }
};
const TeleportImpl = {
    __isTeleport: true,
    process (n1, n2, container2, anchor2, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, internals) {
        const { mc: mountChildren , pc: patchChildren , pbc: patchBlockChildren , o: { insert , querySelector , createText , createComment  }  } = internals;
        const disabled = isTeleportDisabled(n2.props);
        let { shapeFlag , children , dynamicChildren  } = n2;
        // #3302
        // HMR updated, force full diff
        if (isHmrUpdating) {
            optimized = false;
            dynamicChildren = null;
        }
        if (n1 == null) {
            // insert anchors in the main view
            const placeholder = n2.el = createComment("teleport start");
            const mainAnchor = n2.anchor = createComment("teleport end");
            insert(placeholder, container2, anchor2);
            insert(mainAnchor, container2, anchor2);
            const target = n2.target = resolveTarget(n2.props, querySelector);
            const targetAnchor = n2.targetAnchor = createText("");
            if (target) {
                insert(targetAnchor, target);
                // #2652 we could be teleporting from a non-SVG tree into an SVG tree
                isSVG = isSVG || isTargetSVG(target);
            } else if (!disabled) warn("Invalid Teleport target on mount:", target, `(${typeof target})`);
            const mount = (container, anchor)=>{
                // Teleport *always* has Array children. This is enforced in both the
                // compiler and vnode children normalization.
                if (shapeFlag & 16 /* ARRAY_CHILDREN */ ) mountChildren(children, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
            };
            if (disabled) mount(container2, mainAnchor);
            else if (target) mount(target, targetAnchor);
        } else {
            // update content
            n2.el = n1.el;
            const mainAnchor = n2.anchor = n1.anchor;
            const target = n2.target = n1.target;
            const targetAnchor = n2.targetAnchor = n1.targetAnchor;
            const wasDisabled = isTeleportDisabled(n1.props);
            const currentContainer = wasDisabled ? container2 : target;
            const currentAnchor = wasDisabled ? mainAnchor : targetAnchor;
            isSVG = isSVG || isTargetSVG(target);
            if (dynamicChildren) {
                // fast path when the teleport happens to be a block root
                patchBlockChildren(n1.dynamicChildren, dynamicChildren, currentContainer, parentComponent, parentSuspense, isSVG, slotScopeIds);
                // even in block tree mode we need to make sure all root-level nodes
                // in the teleport inherit previous DOM references so that they can
                // be moved in future patches.
                traverseStaticChildren(n1, n2, true);
            } else if (!optimized) patchChildren(n1, n2, currentContainer, currentAnchor, parentComponent, parentSuspense, isSVG, slotScopeIds, false);
            if (disabled) {
                if (!wasDisabled) // enabled -> disabled
                // move into main container
                moveTeleport(n2, container2, mainAnchor, internals, 1 /* TOGGLE */ );
            } else {
                // target changed
                if ((n2.props && n2.props.to) !== (n1.props && n1.props.to)) {
                    const nextTarget = n2.target = resolveTarget(n2.props, querySelector);
                    if (nextTarget) moveTeleport(n2, nextTarget, null, internals, 0 /* TARGET_CHANGE */ );
                    else warn("Invalid Teleport target on update:", target, `(${typeof target})`);
                } else if (wasDisabled) // disabled -> enabled
                // move into teleport target
                moveTeleport(n2, target, targetAnchor, internals, 1 /* TOGGLE */ );
            }
        }
    },
    remove (vnode, parentComponent, parentSuspense, optimized, { um: unmount , o: { remove: hostRemove  }  }, doRemove) {
        const { shapeFlag , children , anchor , targetAnchor , target , props  } = vnode;
        if (target) hostRemove(targetAnchor);
        // an unmounted teleport should always remove its children if not disabled
        if (doRemove || !isTeleportDisabled(props)) {
            hostRemove(anchor);
            if (shapeFlag & 16 /* ARRAY_CHILDREN */ ) for(let i = 0; i < children.length; i++){
                const child = children[i];
                unmount(child, parentComponent, parentSuspense, true, !!child.dynamicChildren);
            }
        }
    },
    move: moveTeleport,
    hydrate: hydrateTeleport
};
function moveTeleport(vnode, container, parentAnchor, { o: { insert  } , m: move  }, moveType = 2 /* REORDER */ ) {
    // move target anchor if this is a target change.
    if (moveType === 0 /* TARGET_CHANGE */ ) insert(vnode.targetAnchor, container, parentAnchor);
    const { el , anchor , shapeFlag , children , props  } = vnode;
    const isReorder = moveType === 2 /* REORDER */ ;
    // move main view anchor if this is a re-order.
    if (isReorder) insert(el, container, parentAnchor);
    // if this is a re-order and teleport is enabled (content is in target)
    // do not move children. So the opposite is: only move children if this
    // is not a reorder, or the teleport is disabled
    if (!isReorder || isTeleportDisabled(props)) {
        // Teleport has either Array children or no children.
        if (shapeFlag & 16 /* ARRAY_CHILDREN */ ) for(let i = 0; i < children.length; i++)move(children[i], container, parentAnchor, 2 /* REORDER */ );
    }
    // move main view anchor if this is a re-order.
    if (isReorder) insert(anchor, container, parentAnchor);
}
function hydrateTeleport(node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized, { o: { nextSibling , parentNode , querySelector  }  }, hydrateChildren) {
    const target = vnode.target = resolveTarget(vnode.props, querySelector);
    if (target) {
        // if multiple teleports rendered to the same target element, we need to
        // pick up from where the last teleport finished instead of the first node
        const targetNode = target._lpa || target.firstChild;
        if (vnode.shapeFlag & 16 /* ARRAY_CHILDREN */ ) {
            if (isTeleportDisabled(vnode.props)) {
                vnode.anchor = hydrateChildren(nextSibling(node), vnode, parentNode(node), parentComponent, parentSuspense, slotScopeIds, optimized);
                vnode.targetAnchor = targetNode;
            } else {
                vnode.anchor = nextSibling(node);
                vnode.targetAnchor = hydrateChildren(targetNode, vnode, target, parentComponent, parentSuspense, slotScopeIds, optimized);
            }
            target._lpa = vnode.targetAnchor && nextSibling(vnode.targetAnchor);
        }
    }
    return vnode.anchor && nextSibling(vnode.anchor);
}
// Force-casted public typing for h and TSX props inference
const Teleport = TeleportImpl;
const COMPONENTS = "components";
const DIRECTIVES = "directives";
/**
 * @private
 */ function resolveComponent(name, maybeSelfReference) {
    return resolveAsset(COMPONENTS, name, true, maybeSelfReference) || name;
}
const NULL_DYNAMIC_COMPONENT = Symbol();
/**
 * @private
 */ function resolveDynamicComponent(component) {
    if ((0, _shared.isString)(component)) return resolveAsset(COMPONENTS, component, false) || component;
    else // invalid types will fallthrough to createVNode and raise warning
    return component || NULL_DYNAMIC_COMPONENT;
}
/**
 * @private
 */ function resolveDirective(name) {
    return resolveAsset(DIRECTIVES, name);
}
// implementation
function resolveAsset(type, name, warnMissing = true, maybeSelfReference = false) {
    const instance = currentRenderingInstance || currentInstance;
    if (instance) {
        const Component = instance.type;
        // explicit self name has highest priority
        if (type === COMPONENTS) {
            const selfName = getComponentName(Component);
            if (selfName && (selfName === name || selfName === (0, _shared.camelize)(name) || selfName === (0, _shared.capitalize)((0, _shared.camelize)(name)))) return Component;
        }
        const res = // local registration
        // check instance[type] first which is resolved for options API
        resolve(instance[type] || Component[type], name) || // global registration
        resolve(instance.appContext[type], name);
        if (!res && maybeSelfReference) // fallback to implicit self-reference
        return Component;
        if (warnMissing && !res) warn(`Failed to resolve ${type.slice(0, -1)}: ${name}`);
        return res;
    } else warn(`resolve${(0, _shared.capitalize)(type.slice(0, -1))} ` + `can only be used in render() or setup().`);
}
function resolve(registry, name) {
    return registry && (registry[name] || registry[(0, _shared.camelize)(name)] || registry[(0, _shared.capitalize)((0, _shared.camelize)(name))]);
}
const Fragment = Symbol("Fragment");
const Text = Symbol("Text");
const Comment = Symbol("Comment");
const Static = Symbol("Static");
// Since v-if and v-for are the two possible ways node structure can dynamically
// change, once we consider v-if branches and each v-for fragment a block, we
// can divide a template into nested blocks, and within each block the node
// structure would be stable. This allows us to skip most children diffing
// and only worry about the dynamic nodes (indicated by patch flags).
const blockStack = [];
let currentBlock = null;
/**
 * Open a block.
 * This must be called before `createBlock`. It cannot be part of `createBlock`
 * because the children of the block are evaluated before `createBlock` itself
 * is called. The generated code typically looks like this:
 *
 * ```js
 * function render() {
 *   return (openBlock(),createBlock('div', null, [...]))
 * }
 * ```
 * disableTracking is true when creating a v-for fragment block, since a v-for
 * fragment always diffs its children.
 *
 * @private
 */ function openBlock(disableTracking = false) {
    blockStack.push(currentBlock = disableTracking ? null : []);
}
function closeBlock() {
    blockStack.pop();
    currentBlock = blockStack[blockStack.length - 1] || null;
}
// Whether we should be tracking dynamic child nodes inside a block.
// Only tracks when this value is > 0
// We are not using a simple boolean because this value may need to be
// incremented/decremented by nested usage of v-once (see below)
let isBlockTreeEnabled = 1;
/**
 * Block tracking sometimes needs to be disabled, for example during the
 * creation of a tree that needs to be cached by v-once. The compiler generates
 * code like this:
 *
 * ``` js
 * _cache[1] || (
 *   setBlockTracking(-1),
 *   _cache[1] = createVNode(...),
 *   setBlockTracking(1),
 *   _cache[1]
 * )
 * ```
 *
 * @private
 */ function setBlockTracking(value) {
    isBlockTreeEnabled += value;
}
function setupBlock(vnode) {
    // save current block children on the block vnode
    vnode.dynamicChildren = isBlockTreeEnabled > 0 ? currentBlock || (0, _shared.EMPTY_ARR) : null;
    // close block
    closeBlock();
    // a block is always going to be patched, so track it as a child of its
    // parent block
    if (isBlockTreeEnabled > 0 && currentBlock) currentBlock.push(vnode);
    return vnode;
}
/**
 * @private
 */ function createElementBlock(type, props, children, patchFlag, dynamicProps, shapeFlag) {
    return setupBlock(createBaseVNode(type, props, children, patchFlag, dynamicProps, shapeFlag, true));
}
/**
 * Create a block root vnode. Takes the same exact arguments as `createVNode`.
 * A block root keeps track of dynamic nodes within the block in the
 * `dynamicChildren` array.
 *
 * @private
 */ function createBlock(type, props, children, patchFlag, dynamicProps) {
    return setupBlock(createVNode(type, props, children, patchFlag, dynamicProps, true));
}
function isVNode(value) {
    return value ? value.__v_isVNode === true : false;
}
function isSameVNodeType(n1, n2) {
    if (n2.shapeFlag & 6 /* COMPONENT */  && hmrDirtyComponents.has(n2.type)) // HMR only: if the component has been hot-updated, force a reload.
    return false;
    return n1.type === n2.type && n1.key === n2.key;
}
let vnodeArgsTransformer;
/**
 * Internal API for registering an arguments transform for createVNode
 * used for creating stubs in the test-utils
 * It is *internal* but needs to be exposed for test-utils to pick up proper
 * typings
 */ function transformVNodeArgs(transformer) {
    vnodeArgsTransformer = transformer;
}
const createVNodeWithArgsTransform = (...args)=>{
    return _createVNode(...vnodeArgsTransformer ? vnodeArgsTransformer(args, currentRenderingInstance) : args);
};
const InternalObjectKey = `__vInternal`;
const normalizeKey = ({ key  })=>key != null ? key : null;
const normalizeRef = ({ ref  })=>{
    return ref != null ? (0, _shared.isString)(ref) || (0, _reactivity.isRef)(ref) || (0, _shared.isFunction)(ref) ? {
        i: currentRenderingInstance,
        r: ref
    } : ref : null;
};
function createBaseVNode(type, props = null, children = null, patchFlag = 0, dynamicProps = null, shapeFlag = type === Fragment ? 0 : 1 /* ELEMENT */ , isBlockNode = false, needFullChildrenNormalization = false) {
    const vnode = {
        __v_isVNode: true,
        __v_skip: true,
        type,
        props,
        key: props && normalizeKey(props),
        ref: props && normalizeRef(props),
        scopeId: currentScopeId,
        slotScopeIds: null,
        children,
        component: null,
        suspense: null,
        ssContent: null,
        ssFallback: null,
        dirs: null,
        transition: null,
        el: null,
        anchor: null,
        target: null,
        targetAnchor: null,
        staticCount: 0,
        shapeFlag,
        patchFlag,
        dynamicProps,
        dynamicChildren: null,
        appContext: null
    };
    if (needFullChildrenNormalization) {
        normalizeChildren(vnode, children);
        // normalize suspense children
        if (shapeFlag & 128 /* SUSPENSE */ ) type.normalize(vnode);
    } else if (children) // compiled element vnode - if children is passed, only possible types are
    // string or Array.
    vnode.shapeFlag |= (0, _shared.isString)(children) ? 8 /* TEXT_CHILDREN */  : 16 /* ARRAY_CHILDREN */ ;
    // validate key
    if (vnode.key !== vnode.key) warn(`VNode created with invalid key (NaN). VNode type:`, vnode.type);
    // track vnode for block tree
    if (isBlockTreeEnabled > 0 && // avoid a block node from tracking itself
    !isBlockNode && // has current parent block
    currentBlock && (vnode.patchFlag > 0 || shapeFlag & 6 /* COMPONENT */ ) && // the EVENTS flag is only for hydration and if it is the only flag, the
    // vnode should not be considered dynamic due to handler caching.
    vnode.patchFlag !== 32 /* HYDRATE_EVENTS */ ) currentBlock.push(vnode);
    return vnode;
}
const createVNode = createVNodeWithArgsTransform;
function _createVNode(type, props = null, children = null, patchFlag = 0, dynamicProps = null, isBlockNode = false) {
    if (!type || type === NULL_DYNAMIC_COMPONENT) {
        if (!type) warn(`Invalid vnode type when creating vnode: ${type}.`);
        type = Comment;
    }
    if (isVNode(type)) {
        // createVNode receiving an existing vnode. This happens in cases like
        // <component :is="vnode"/>
        // #2078 make sure to merge refs during the clone instead of overwriting it
        const cloned = cloneVNode(type, props, true);
        if (children) normalizeChildren(cloned, children);
        return cloned;
    }
    // class component normalization.
    if (isClassComponent(type)) type = type.__vccOpts;
    // class & style normalization.
    if (props) {
        // for reactive or proxy objects, we need to clone it to enable mutation.
        props = guardReactiveProps(props);
        let { class: klass , style  } = props;
        if (klass && !(0, _shared.isString)(klass)) props.class = (0, _shared.normalizeClass)(klass);
        if ((0, _shared.isObject)(style)) {
            // reactive state objects need to be cloned since they are likely to be
            // mutated
            if ((0, _reactivity.isProxy)(style) && !(0, _shared.isArray)(style)) style = (0, _shared.extend)({}, style);
            props.style = (0, _shared.normalizeStyle)(style);
        }
    }
    // encode the vnode type information into a bitmap
    const shapeFlag = (0, _shared.isString)(type) ? 1 /* ELEMENT */  : isSuspense(type) ? 128 /* SUSPENSE */  : isTeleport(type) ? 64 /* TELEPORT */  : (0, _shared.isObject)(type) ? 4 /* STATEFUL_COMPONENT */  : (0, _shared.isFunction)(type) ? 2 /* FUNCTIONAL_COMPONENT */  : 0;
    if (shapeFlag & 4 /* STATEFUL_COMPONENT */  && (0, _reactivity.isProxy)(type)) {
        type = (0, _reactivity.toRaw)(type);
        warn(`Vue received a Component which was made a reactive object. This can ` + `lead to unnecessary performance overhead, and should be avoided by ` + `marking the component with \`markRaw\` or using \`shallowRef\` ` + `instead of \`ref\`.`, `\nComponent that was made reactive: `, type);
    }
    return createBaseVNode(type, props, children, patchFlag, dynamicProps, shapeFlag, isBlockNode, true);
}
function guardReactiveProps(props) {
    if (!props) return null;
    return (0, _reactivity.isProxy)(props) || InternalObjectKey in props ? (0, _shared.extend)({}, props) : props;
}
function cloneVNode(vnode, extraProps, mergeRef = false) {
    // This is intentionally NOT using spread or extend to avoid the runtime
    // key enumeration cost.
    const { props , ref , patchFlag , children  } = vnode;
    const mergedProps = extraProps ? mergeProps(props || {}, extraProps) : props;
    const cloned = {
        __v_isVNode: true,
        __v_skip: true,
        type: vnode.type,
        props: mergedProps,
        key: mergedProps && normalizeKey(mergedProps),
        ref: extraProps && extraProps.ref ? // if the vnode itself already has a ref, cloneVNode will need to merge
        // the refs so the single vnode can be set on multiple refs
        mergeRef && ref ? (0, _shared.isArray)(ref) ? ref.concat(normalizeRef(extraProps)) : [
            ref,
            normalizeRef(extraProps)
        ] : normalizeRef(extraProps) : ref,
        scopeId: vnode.scopeId,
        slotScopeIds: vnode.slotScopeIds,
        children: patchFlag === -1 /* HOISTED */  && (0, _shared.isArray)(children) ? children.map(deepCloneVNode) : children,
        target: vnode.target,
        targetAnchor: vnode.targetAnchor,
        staticCount: vnode.staticCount,
        shapeFlag: vnode.shapeFlag,
        // if the vnode is cloned with extra props, we can no longer assume its
        // existing patch flag to be reliable and need to add the FULL_PROPS flag.
        // note: perserve flag for fragments since they use the flag for children
        // fast paths only.
        patchFlag: extraProps && vnode.type !== Fragment ? patchFlag === -1 // hoisted node
         ? 16 /* FULL_PROPS */  : patchFlag | 16 /* FULL_PROPS */  : patchFlag,
        dynamicProps: vnode.dynamicProps,
        dynamicChildren: vnode.dynamicChildren,
        appContext: vnode.appContext,
        dirs: vnode.dirs,
        transition: vnode.transition,
        // These should technically only be non-null on mounted VNodes. However,
        // they *should* be copied for kept-alive vnodes. So we just always copy
        // them since them being non-null during a mount doesn't affect the logic as
        // they will simply be overwritten.
        component: vnode.component,
        suspense: vnode.suspense,
        ssContent: vnode.ssContent && cloneVNode(vnode.ssContent),
        ssFallback: vnode.ssFallback && cloneVNode(vnode.ssFallback),
        el: vnode.el,
        anchor: vnode.anchor
    };
    return cloned;
}
/**
 * Dev only, for HMR of hoisted vnodes reused in v-for
 * https://github.com/vitejs/vite/issues/2022
 */ function deepCloneVNode(vnode) {
    const cloned = cloneVNode(vnode);
    if ((0, _shared.isArray)(vnode.children)) cloned.children = vnode.children.map(deepCloneVNode);
    return cloned;
}
/**
 * @private
 */ function createTextVNode(text = " ", flag = 0) {
    return createVNode(Text, null, text, flag);
}
/**
 * @private
 */ function createStaticVNode(content, numberOfNodes) {
    // A static vnode can contain multiple stringified elements, and the number
    // of elements is necessary for hydration.
    const vnode = createVNode(Static, null, content);
    vnode.staticCount = numberOfNodes;
    return vnode;
}
/**
 * @private
 */ function createCommentVNode(text = "", // when used as the v-else branch, the comment node must be created as a
// block to ensure correct updates.
asBlock = false) {
    return asBlock ? (openBlock(), createBlock(Comment, null, text)) : createVNode(Comment, null, text);
}
function normalizeVNode(child) {
    if (child == null || typeof child === "boolean") // empty placeholder
    return createVNode(Comment);
    else if ((0, _shared.isArray)(child)) // fragment
    return createVNode(Fragment, null, // #3666, avoid reference pollution when reusing vnode
    child.slice());
    else if (typeof child === "object") // already vnode, this should be the most common since compiled templates
    // always produce all-vnode children arrays
    return cloneIfMounted(child);
    else // strings and numbers
    return createVNode(Text, null, String(child));
}
// optimized normalization for template-compiled render fns
function cloneIfMounted(child) {
    return child.el === null || child.memo ? child : cloneVNode(child);
}
function normalizeChildren(vnode, children) {
    let type = 0;
    const { shapeFlag  } = vnode;
    if (children == null) children = null;
    else if ((0, _shared.isArray)(children)) type = 16 /* ARRAY_CHILDREN */ ;
    else if (typeof children === "object") {
        if (shapeFlag & 65 /* TELEPORT */ ) {
            // Normalize slot to plain children for plain element and Teleport
            const slot = children.default;
            if (slot) {
                // _c marker is added by withCtx() indicating this is a compiled slot
                slot._c && (slot._d = false);
                normalizeChildren(vnode, slot());
                slot._c && (slot._d = true);
            }
            return;
        } else {
            type = 32 /* SLOTS_CHILDREN */ ;
            const slotFlag = children._;
            if (!slotFlag && !(InternalObjectKey in children)) children._ctx = currentRenderingInstance;
            else if (slotFlag === 3 /* FORWARDED */  && currentRenderingInstance) {
                // a child component receives forwarded slots from the parent.
                // its slot type is determined by its parent's slot type.
                if (currentRenderingInstance.slots._ === 1 /* STABLE */ ) children._ = 1 /* STABLE */ ;
                else {
                    children._ = 2 /* DYNAMIC */ ;
                    vnode.patchFlag |= 1024 /* DYNAMIC_SLOTS */ ;
                }
            }
        }
    } else if ((0, _shared.isFunction)(children)) {
        children = {
            default: children,
            _ctx: currentRenderingInstance
        };
        type = 32 /* SLOTS_CHILDREN */ ;
    } else {
        children = String(children);
        // force teleport children to array so it can be moved around
        if (shapeFlag & 64 /* TELEPORT */ ) {
            type = 16 /* ARRAY_CHILDREN */ ;
            children = [
                createTextVNode(children)
            ];
        } else type = 8 /* TEXT_CHILDREN */ ;
    }
    vnode.children = children;
    vnode.shapeFlag |= type;
}
function mergeProps(...args) {
    const ret = {};
    for(let i = 0; i < args.length; i++){
        const toMerge = args[i];
        for(const key in toMerge){
            if (key === "class") {
                if (ret.class !== toMerge.class) ret.class = (0, _shared.normalizeClass)([
                    ret.class,
                    toMerge.class
                ]);
            } else if (key === "style") ret.style = (0, _shared.normalizeStyle)([
                ret.style,
                toMerge.style
            ]);
            else if ((0, _shared.isOn)(key)) {
                const existing = ret[key];
                const incoming = toMerge[key];
                if (existing !== incoming) ret[key] = existing ? [].concat(existing, incoming) : incoming;
            } else if (key !== "") ret[key] = toMerge[key];
        }
    }
    return ret;
}
/**
 * Actual implementation
 */ function renderList(source, renderItem, cache, index) {
    let ret;
    const cached = cache && cache[index];
    if ((0, _shared.isArray)(source) || (0, _shared.isString)(source)) {
        ret = new Array(source.length);
        for(let i = 0, l = source.length; i < l; i++)ret[i] = renderItem(source[i], i, undefined, cached && cached[i]);
    } else if (typeof source === "number") {
        if (!Number.isInteger(source)) {
            warn(`The v-for range expect an integer value but got ${source}.`);
            return [];
        }
        ret = new Array(source);
        for(let i = 0; i < source; i++)ret[i] = renderItem(i + 1, i, undefined, cached && cached[i]);
    } else if ((0, _shared.isObject)(source)) {
        if (source[Symbol.iterator]) ret = Array.from(source, (item, i)=>renderItem(item, i, undefined, cached && cached[i]));
        else {
            const keys = Object.keys(source);
            ret = new Array(keys.length);
            for(let i = 0, l = keys.length; i < l; i++){
                const key = keys[i];
                ret[i] = renderItem(source[key], key, i, cached && cached[i]);
            }
        }
    } else ret = [];
    if (cache) cache[index] = ret;
    return ret;
}
/**
 * Compiler runtime helper for creating dynamic slots object
 * @private
 */ function createSlots(slots, dynamicSlots) {
    for(let i = 0; i < dynamicSlots.length; i++){
        const slot = dynamicSlots[i];
        // array of dynamic slot generated by <template v-for="..." #[...]>
        if ((0, _shared.isArray)(slot)) for(let j = 0; j < slot.length; j++)slots[slot[j].name] = slot[j].fn;
        else if (slot) // conditional single slot generated by <template v-if="..." #foo>
        slots[slot.name] = slot.fn;
    }
    return slots;
}
/**
 * Compiler runtime helper for rendering `<slot/>`
 * @private
 */ function renderSlot(slots, name, props = {}, // this is not a user-facing function, so the fallback is always generated by
// the compiler and guaranteed to be a function returning an array
fallback, noSlotted) {
    if (currentRenderingInstance.isCE) return createVNode("slot", name === "default" ? null : {
        name
    }, fallback && fallback());
    let slot = slots[name];
    if (slot && slot.length > 1) {
        warn(`SSR-optimized slot function detected in a non-SSR-optimized render ` + `function. You need to mark this component with $dynamic-slots in the ` + `parent template.`);
        slot = ()=>[];
    }
    // a compiled slot disables block tracking by default to avoid manual
    // invocation interfering with template-based block tracking, but in
    // `renderSlot` we can be sure that it's template-based so we can force
    // enable it.
    if (slot && slot._c) slot._d = false;
    openBlock();
    const validSlotContent = slot && ensureValidVNode(slot(props));
    const rendered = createBlock(Fragment, {
        key: props.key || `_${name}`
    }, validSlotContent || (fallback ? fallback() : []), validSlotContent && slots._ === 1 /* STABLE */  ? 64 /* STABLE_FRAGMENT */  : -2 /* BAIL */ );
    if (!noSlotted && rendered.scopeId) rendered.slotScopeIds = [
        rendered.scopeId + "-s"
    ];
    if (slot && slot._c) slot._d = true;
    return rendered;
}
function ensureValidVNode(vnodes) {
    return vnodes.some((child)=>{
        if (!isVNode(child)) return true;
        if (child.type === Comment) return false;
        if (child.type === Fragment && !ensureValidVNode(child.children)) return false;
        return true;
    }) ? vnodes : null;
}
/**
 * For prefixing keys in v-on="obj" with "on"
 * @private
 */ function toHandlers(obj) {
    const ret = {};
    if (!(0, _shared.isObject)(obj)) {
        warn(`v-on with no argument expects an object value.`);
        return ret;
    }
    for(const key in obj)ret[(0, _shared.toHandlerKey)(key)] = obj[key];
    return ret;
}
/**
 * #2437 In Vue 3, functional components do not have a public instance proxy but
 * they exist in the internal parent chain. For code that relies on traversing
 * public $parent chains, skip functional ones and go to the parent instead.
 */ const getPublicInstance = (i)=>{
    if (!i) return null;
    if (isStatefulComponent(i)) return getExposeProxy(i) || i.proxy;
    return getPublicInstance(i.parent);
};
const publicPropertiesMap = (0, _shared.extend)(Object.create(null), {
    $: (i)=>i,
    $el: (i)=>i.vnode.el,
    $data: (i)=>i.data,
    $props: (i)=>(0, _reactivity.shallowReadonly)(i.props),
    $attrs: (i)=>(0, _reactivity.shallowReadonly)(i.attrs),
    $slots: (i)=>(0, _reactivity.shallowReadonly)(i.slots),
    $refs: (i)=>(0, _reactivity.shallowReadonly)(i.refs),
    $parent: (i)=>getPublicInstance(i.parent),
    $root: (i)=>getPublicInstance(i.root),
    $emit: (i)=>i.emit,
    $options: (i)=>__VUE_OPTIONS_API__ ? resolveMergedOptions(i) : i.type,
    $forceUpdate: (i)=>()=>queueJob(i.update),
    $nextTick: (i)=>nextTick.bind(i.proxy),
    $watch: (i)=>__VUE_OPTIONS_API__ ? instanceWatch.bind(i) : (0, _shared.NOOP)
});
const PublicInstanceProxyHandlers = {
    get ({ _: instance  }, key) {
        const { ctx , setupState , data , props , accessCache , type , appContext  } = instance;
        // for internal formatters to know that this is a Vue instance
        if (key === "__isVue") return true;
        // prioritize <script setup> bindings during dev.
        // this allows even properties that start with _ or $ to be used - so that
        // it aligns with the production behavior where the render fn is inlined and
        // indeed has access to all declared variables.
        if (setupState !== (0, _shared.EMPTY_OBJ) && setupState.__isScriptSetup && (0, _shared.hasOwn)(setupState, key)) return setupState[key];
        // data / props / ctx
        // This getter gets called for every property access on the render context
        // during render and is a major hotspot. The most expensive part of this
        // is the multiple hasOwn() calls. It's much faster to do a simple property
        // access on a plain object, so we use an accessCache object (with null
        // prototype) to memoize what access type a key corresponds to.
        let normalizedProps;
        if (key[0] !== "$") {
            const n = accessCache[key];
            if (n !== undefined) switch(n){
                case 0 /* SETUP */ :
                    return setupState[key];
                case 1 /* DATA */ :
                    return data[key];
                case 3 /* CONTEXT */ :
                    return ctx[key];
                case 2 /* PROPS */ :
                    return props[key];
            }
            else if (setupState !== (0, _shared.EMPTY_OBJ) && (0, _shared.hasOwn)(setupState, key)) {
                accessCache[key] = 0 /* SETUP */ ;
                return setupState[key];
            } else if (data !== (0, _shared.EMPTY_OBJ) && (0, _shared.hasOwn)(data, key)) {
                accessCache[key] = 1 /* DATA */ ;
                return data[key];
            } else if (// only cache other properties when instance has declared (thus stable)
            // props
            (normalizedProps = instance.propsOptions[0]) && (0, _shared.hasOwn)(normalizedProps, key)) {
                accessCache[key] = 2 /* PROPS */ ;
                return props[key];
            } else if (ctx !== (0, _shared.EMPTY_OBJ) && (0, _shared.hasOwn)(ctx, key)) {
                accessCache[key] = 3 /* CONTEXT */ ;
                return ctx[key];
            } else if (!__VUE_OPTIONS_API__ || shouldCacheAccess) accessCache[key] = 4 /* OTHER */ ;
        }
        const publicGetter = publicPropertiesMap[key];
        let cssModule, globalProperties;
        // public $xxx properties
        if (publicGetter) {
            if (key === "$attrs") {
                (0, _reactivity.track)(instance, "get" /* GET */ , key);
                markAttrsAccessed();
            }
            return publicGetter(instance);
        } else if (// css module (injected by vue-loader)
        (cssModule = type.__cssModules) && (cssModule = cssModule[key])) return cssModule;
        else if (ctx !== (0, _shared.EMPTY_OBJ) && (0, _shared.hasOwn)(ctx, key)) {
            // user may set custom properties to `this` that start with `$`
            accessCache[key] = 3 /* CONTEXT */ ;
            return ctx[key];
        } else if (globalProperties = appContext.config.globalProperties, (0, _shared.hasOwn)(globalProperties, key)) return globalProperties[key];
        else if (currentRenderingInstance && (!(0, _shared.isString)(key) || // #1091 avoid internal isRef/isVNode checks on component instance leading
        // to infinite warning loop
        key.indexOf("__v") !== 0)) {
            if (data !== (0, _shared.EMPTY_OBJ) && (key[0] === "$" || key[0] === "_") && (0, _shared.hasOwn)(data, key)) warn(`Property ${JSON.stringify(key)} must be accessed via $data because it starts with a reserved ` + `character ("$" or "_") and is not proxied on the render context.`);
            else if (instance === currentRenderingInstance) warn(`Property ${JSON.stringify(key)} was accessed during render ` + `but is not defined on instance.`);
        }
    },
    set ({ _: instance  }, key, value) {
        const { data , setupState , ctx  } = instance;
        if (setupState !== (0, _shared.EMPTY_OBJ) && (0, _shared.hasOwn)(setupState, key)) setupState[key] = value;
        else if (data !== (0, _shared.EMPTY_OBJ) && (0, _shared.hasOwn)(data, key)) data[key] = value;
        else if ((0, _shared.hasOwn)(instance.props, key)) {
            warn(`Attempting to mutate prop "${key}". Props are readonly.`, instance);
            return false;
        }
        if (key[0] === "$" && key.slice(1) in instance) {
            warn(`Attempting to mutate public property "${key}". ` + `Properties starting with $ are reserved and readonly.`, instance);
            return false;
        } else if (key in instance.appContext.config.globalProperties) Object.defineProperty(ctx, key, {
            enumerable: true,
            configurable: true,
            value
        });
        else ctx[key] = value;
        return true;
    },
    has ({ _: { data , setupState , accessCache , ctx , appContext , propsOptions  }  }, key) {
        let normalizedProps;
        return accessCache[key] !== undefined || data !== (0, _shared.EMPTY_OBJ) && (0, _shared.hasOwn)(data, key) || setupState !== (0, _shared.EMPTY_OBJ) && (0, _shared.hasOwn)(setupState, key) || (normalizedProps = propsOptions[0]) && (0, _shared.hasOwn)(normalizedProps, key) || (0, _shared.hasOwn)(ctx, key) || (0, _shared.hasOwn)(publicPropertiesMap, key) || (0, _shared.hasOwn)(appContext.config.globalProperties, key);
    }
};
PublicInstanceProxyHandlers.ownKeys = (target)=>{
    warn(`Avoid app logic that relies on enumerating keys on a component instance. ` + `The keys will be empty in production mode to avoid performance overhead.`);
    return Reflect.ownKeys(target);
};
const RuntimeCompiledPublicInstanceProxyHandlers = /*#__PURE__*/ (0, _shared.extend)({}, PublicInstanceProxyHandlers, {
    get (target, key) {
        // fast path for unscopables when using `with` block
        if (key === Symbol.unscopables) return;
        return PublicInstanceProxyHandlers.get(target, key, target);
    },
    has (_, key) {
        const has = key[0] !== "_" && !(0, _shared.isGloballyWhitelisted)(key);
        if (!has && PublicInstanceProxyHandlers.has(_, key)) warn(`Property ${JSON.stringify(key)} should not start with _ which is a reserved prefix for Vue internals.`);
        return has;
    }
});
// dev only
// In dev mode, the proxy target exposes the same properties as seen on `this`
// for easier console inspection. In prod mode it will be an empty object so
// these properties definitions can be skipped.
function createDevRenderContext(instance) {
    const target = {};
    // expose internal instance for proxy handlers
    Object.defineProperty(target, `_`, {
        configurable: true,
        enumerable: false,
        get: ()=>instance
    });
    // expose public properties
    Object.keys(publicPropertiesMap).forEach((key)=>{
        Object.defineProperty(target, key, {
            configurable: true,
            enumerable: false,
            get: ()=>publicPropertiesMap[key](instance),
            // intercepted by the proxy so no need for implementation,
            // but needed to prevent set errors
            set: (0, _shared.NOOP)
        });
    });
    return target;
}
// dev only
function exposePropsOnRenderContext(instance) {
    const { ctx , propsOptions: [propsOptions]  } = instance;
    if (propsOptions) Object.keys(propsOptions).forEach((key)=>{
        Object.defineProperty(ctx, key, {
            enumerable: true,
            configurable: true,
            get: ()=>instance.props[key],
            set: (0, _shared.NOOP)
        });
    });
}
// dev only
function exposeSetupStateOnRenderContext(instance) {
    const { ctx , setupState  } = instance;
    Object.keys((0, _reactivity.toRaw)(setupState)).forEach((key)=>{
        if (!setupState.__isScriptSetup && (key[0] === "$" || key[0] === "_")) {
            warn(`setup() return property ${JSON.stringify(key)} should not start with "$" or "_" ` + `which are reserved prefixes for Vue internals.`);
            return;
        }
        Object.defineProperty(ctx, key, {
            enumerable: true,
            configurable: true,
            get: ()=>setupState[key],
            set: (0, _shared.NOOP)
        });
    });
}
const emptyAppContext = createAppContext();
let uid$1 = 0;
function createComponentInstance(vnode, parent, suspense) {
    const type = vnode.type;
    // inherit parent app context - or - if root, adopt from root vnode
    const appContext = (parent ? parent.appContext : vnode.appContext) || emptyAppContext;
    const instance = {
        uid: uid$1++,
        vnode,
        type,
        parent,
        appContext,
        root: null,
        next: null,
        subTree: null,
        update: null,
        scope: new (0, _reactivity.EffectScope)(true),
        render: null,
        proxy: null,
        exposed: null,
        exposeProxy: null,
        withProxy: null,
        provides: parent ? parent.provides : Object.create(appContext.provides),
        accessCache: null,
        renderCache: [],
        // local resovled assets
        components: null,
        directives: null,
        // resolved props and emits options
        propsOptions: normalizePropsOptions(type, appContext),
        emitsOptions: normalizeEmitsOptions(type, appContext),
        // emit
        emit: null,
        emitted: null,
        // props default value
        propsDefaults: (0, _shared.EMPTY_OBJ),
        // inheritAttrs
        inheritAttrs: type.inheritAttrs,
        // state
        ctx: (0, _shared.EMPTY_OBJ),
        data: (0, _shared.EMPTY_OBJ),
        props: (0, _shared.EMPTY_OBJ),
        attrs: (0, _shared.EMPTY_OBJ),
        slots: (0, _shared.EMPTY_OBJ),
        refs: (0, _shared.EMPTY_OBJ),
        setupState: (0, _shared.EMPTY_OBJ),
        setupContext: null,
        // suspense related
        suspense,
        suspenseId: suspense ? suspense.pendingId : 0,
        asyncDep: null,
        asyncResolved: false,
        // lifecycle hooks
        // not using enums here because it results in computed properties
        isMounted: false,
        isUnmounted: false,
        isDeactivated: false,
        bc: null,
        c: null,
        bm: null,
        m: null,
        bu: null,
        u: null,
        um: null,
        bum: null,
        da: null,
        a: null,
        rtg: null,
        rtc: null,
        ec: null,
        sp: null
    };
    instance.ctx = createDevRenderContext(instance);
    instance.root = parent ? parent.root : instance;
    instance.emit = emit.bind(null, instance);
    // apply custom element special handling
    if (vnode.ce) vnode.ce(instance);
    return instance;
}
let currentInstance = null;
const getCurrentInstance = ()=>currentInstance || currentRenderingInstance;
const setCurrentInstance = (instance)=>{
    currentInstance = instance;
    instance.scope.on();
};
const unsetCurrentInstance = ()=>{
    currentInstance && currentInstance.scope.off();
    currentInstance = null;
};
const isBuiltInTag = /*#__PURE__*/ (0, _shared.makeMap)("slot,component");
function validateComponentName(name, config) {
    const appIsNativeTag = config.isNativeTag || (0, _shared.NO);
    if (isBuiltInTag(name) || appIsNativeTag(name)) warn("Do not use built-in or reserved HTML elements as component id: " + name);
}
function isStatefulComponent(instance) {
    return instance.vnode.shapeFlag & 4 /* STATEFUL_COMPONENT */ ;
}
let isInSSRComponentSetup = false;
function setupComponent(instance, isSSR = false) {
    isInSSRComponentSetup = isSSR;
    const { props , children  } = instance.vnode;
    const isStateful = isStatefulComponent(instance);
    initProps(instance, props, isStateful, isSSR);
    initSlots(instance, children);
    const setupResult = isStateful ? setupStatefulComponent(instance, isSSR) : undefined;
    isInSSRComponentSetup = false;
    return setupResult;
}
function setupStatefulComponent(instance, isSSR) {
    const Component = instance.type;
    if (Component.name) validateComponentName(Component.name, instance.appContext.config);
    if (Component.components) {
        const names = Object.keys(Component.components);
        for(let i = 0; i < names.length; i++)validateComponentName(names[i], instance.appContext.config);
    }
    if (Component.directives) {
        const names = Object.keys(Component.directives);
        for(let i = 0; i < names.length; i++)validateDirectiveName(names[i]);
    }
    if (Component.compilerOptions && isRuntimeOnly()) warn(`"compilerOptions" is only supported when using a build of Vue that ` + `includes the runtime compiler. Since you are using a runtime-only ` + `build, the options should be passed via your build tool config instead.`);
    // 0. create render proxy property access cache
    instance.accessCache = Object.create(null);
    // 1. create public instance / render proxy
    // also mark it raw so it's never observed
    instance.proxy = (0, _reactivity.markRaw)(new Proxy(instance.ctx, PublicInstanceProxyHandlers));
    exposePropsOnRenderContext(instance);
    // 2. call setup()
    const { setup  } = Component;
    if (setup) {
        const setupContext = instance.setupContext = setup.length > 1 ? createSetupContext(instance) : null;
        setCurrentInstance(instance);
        (0, _reactivity.pauseTracking)();
        const setupResult = callWithErrorHandling(setup, instance, 0 /* SETUP_FUNCTION */ , [
            (0, _reactivity.shallowReadonly)(instance.props),
            setupContext
        ]);
        (0, _reactivity.resetTracking)();
        unsetCurrentInstance();
        if ((0, _shared.isPromise)(setupResult)) {
            setupResult.then(unsetCurrentInstance, unsetCurrentInstance);
            if (isSSR) // return the promise so server-renderer can wait on it
            return setupResult.then((resolvedResult)=>{
                handleSetupResult(instance, resolvedResult, isSSR);
            }).catch((e)=>{
                handleError(e, instance, 0 /* SETUP_FUNCTION */ );
            });
            else // async setup returned Promise.
            // bail here and wait for re-entry.
            instance.asyncDep = setupResult;
        } else handleSetupResult(instance, setupResult, isSSR);
    } else finishComponentSetup(instance, isSSR);
}
function handleSetupResult(instance, setupResult, isSSR) {
    if ((0, _shared.isFunction)(setupResult)) instance.render = setupResult;
    else if ((0, _shared.isObject)(setupResult)) {
        if (isVNode(setupResult)) warn(`setup() should not return VNodes directly - ` + `return a render function instead.`);
        instance.devtoolsRawSetupState = setupResult;
        instance.setupState = (0, _reactivity.proxyRefs)(setupResult);
        exposeSetupStateOnRenderContext(instance);
    } else if (setupResult !== undefined) warn(`setup() should return an object. Received: ${setupResult === null ? "null" : typeof setupResult}`);
    finishComponentSetup(instance, isSSR);
}
let compile;
let installWithProxy;
/**
 * For runtime-dom to register the compiler.
 * Note the exported method uses any to avoid d.ts relying on the compiler types.
 */ function registerRuntimeCompiler(_compile) {
    compile = _compile;
    installWithProxy = (i)=>{
        if (i.render._rc) i.withProxy = new Proxy(i.ctx, RuntimeCompiledPublicInstanceProxyHandlers);
    };
}
// dev only
const isRuntimeOnly = ()=>!compile;
function finishComponentSetup(instance, isSSR, skipOptions) {
    const Component = instance.type;
    // template / render function normalization
    if (!instance.render) {
        // could be set from setup()
        if (compile && !Component.render) {
            const template = Component.template;
            if (template) {
                startMeasure(instance, `compile`);
                const { isCustomElement , compilerOptions  } = instance.appContext.config;
                const { delimiters , compilerOptions: componentCompilerOptions  } = Component;
                const finalCompilerOptions = (0, _shared.extend)((0, _shared.extend)({
                    isCustomElement,
                    delimiters
                }, compilerOptions), componentCompilerOptions);
                Component.render = compile(template, finalCompilerOptions);
                endMeasure(instance, `compile`);
            }
        }
        instance.render = Component.render || (0, _shared.NOOP);
        // for runtime-compiled render functions using `with` blocks, the render
        // proxy used needs a different `has` handler which is more performant and
        // also only allows a whitelist of globals to fallthrough.
        if (installWithProxy) installWithProxy(instance);
    }
    // support for 2.x options
    if (__VUE_OPTIONS_API__ && true) {
        setCurrentInstance(instance);
        (0, _reactivity.pauseTracking)();
        applyOptions(instance);
        (0, _reactivity.resetTracking)();
        unsetCurrentInstance();
    }
    // warn missing template/render
    // the runtime compilation of template in SSR is done by server-render
    if (!Component.render && instance.render === (0, _shared.NOOP) && !isSSR) {
        /* istanbul ignore if */ if (!compile && Component.template) warn(`Component provided template option but ` + `runtime compilation is not supported in this build of Vue.` + ` Configure your bundler to alias "vue" to "vue/dist/vue.esm-bundler.js".`);
        else warn(`Component is missing template or render function.`);
    }
}
function createAttrsProxy(instance) {
    return new Proxy(instance.attrs, {
        get (target, key) {
            markAttrsAccessed();
            (0, _reactivity.track)(instance, "get" /* GET */ , "$attrs");
            return target[key];
        },
        set () {
            warn(`setupContext.attrs is readonly.`);
            return false;
        },
        deleteProperty () {
            warn(`setupContext.attrs is readonly.`);
            return false;
        }
    });
}
function createSetupContext(instance) {
    const expose = (exposed)=>{
        if (instance.exposed) warn(`expose() should be called only once per setup().`);
        instance.exposed = exposed || {};
    };
    let attrs;
    // We use getters in dev in case libs like test-utils overwrite instance
    // properties (overwrites should not be done in prod)
    return Object.freeze({
        get attrs () {
            return attrs || (attrs = createAttrsProxy(instance));
        },
        get slots () {
            return (0, _reactivity.shallowReadonly)(instance.slots);
        },
        get emit () {
            return (event, ...args)=>instance.emit(event, ...args);
        },
        expose
    });
}
function getExposeProxy(instance) {
    if (instance.exposed) return instance.exposeProxy || (instance.exposeProxy = new Proxy((0, _reactivity.proxyRefs)((0, _reactivity.markRaw)(instance.exposed)), {
        get (target, key) {
            if (key in target) return target[key];
            else if (key in publicPropertiesMap) return publicPropertiesMap[key](instance);
        }
    }));
}
const classifyRE = /(?:^|[-_])(\w)/g;
const classify = (str)=>str.replace(classifyRE, (c)=>c.toUpperCase()).replace(/[-_]/g, "");
function getComponentName(Component) {
    return (0, _shared.isFunction)(Component) ? Component.displayName || Component.name : Component.name;
}
/* istanbul ignore next */ function formatComponentName(instance, Component, isRoot = false) {
    let name = getComponentName(Component);
    if (!name && Component.__file) {
        const match = Component.__file.match(/([^/\\]+)\.\w+$/);
        if (match) name = match[1];
    }
    if (!name && instance && instance.parent) {
        // try to infer the name based on reverse resolution
        const inferFromRegistry = (registry)=>{
            for(const key in registry){
                if (registry[key] === Component) return key;
            }
        };
        name = inferFromRegistry(instance.components || instance.parent.type.components) || inferFromRegistry(instance.appContext.components);
    }
    return name ? classify(name) : isRoot ? `App` : `Anonymous`;
}
function isClassComponent(value) {
    return (0, _shared.isFunction)(value) && "__vccOpts" in value;
}
const stack = [];
function pushWarningContext(vnode) {
    stack.push(vnode);
}
function popWarningContext() {
    stack.pop();
}
function warn(msg, ...args) {
    // avoid props formatting or warn handler tracking deps that might be mutated
    // during patch, leading to infinite recursion.
    (0, _reactivity.pauseTracking)();
    const instance = stack.length ? stack[stack.length - 1].component : null;
    const appWarnHandler = instance && instance.appContext.config.warnHandler;
    const trace = getComponentTrace();
    if (appWarnHandler) callWithErrorHandling(appWarnHandler, instance, 11 /* APP_WARN_HANDLER */ , [
        msg + args.join(""),
        instance && instance.proxy,
        trace.map(({ vnode  })=>`at <${formatComponentName(instance, vnode.type)}>`).join("\n"),
        trace
    ]);
    else {
        const warnArgs = [
            `[Vue warn]: ${msg}`,
            ...args
        ];
        /* istanbul ignore if */ if (trace.length && // avoid spamming console during tests
        true) warnArgs.push(`\n`, ...formatTrace(trace));
        console.warn(...warnArgs);
    }
    (0, _reactivity.resetTracking)();
}
function getComponentTrace() {
    let currentVNode = stack[stack.length - 1];
    if (!currentVNode) return [];
    // we can't just use the stack because it will be incomplete during updates
    // that did not start from the root. Re-construct the parent chain using
    // instance parent pointers.
    const normalizedStack = [];
    while(currentVNode){
        const last = normalizedStack[0];
        if (last && last.vnode === currentVNode) last.recurseCount++;
        else normalizedStack.push({
            vnode: currentVNode,
            recurseCount: 0
        });
        const parentInstance = currentVNode.component && currentVNode.component.parent;
        currentVNode = parentInstance && parentInstance.vnode;
    }
    return normalizedStack;
}
/* istanbul ignore next */ function formatTrace(trace) {
    const logs = [];
    trace.forEach((entry, i)=>{
        logs.push(...i === 0 ? [] : [
            `\n`
        ], ...formatTraceEntry(entry));
    });
    return logs;
}
function formatTraceEntry({ vnode , recurseCount  }) {
    const postfix = recurseCount > 0 ? `... (${recurseCount} recursive calls)` : ``;
    const isRoot = vnode.component ? vnode.component.parent == null : false;
    const open = ` at <${formatComponentName(vnode.component, vnode.type, isRoot)}`;
    const close = `>` + postfix;
    return vnode.props ? [
        open,
        ...formatProps(vnode.props),
        close
    ] : [
        open + close
    ];
}
/* istanbul ignore next */ function formatProps(props) {
    const res = [];
    const keys = Object.keys(props);
    keys.slice(0, 3).forEach((key)=>{
        res.push(...formatProp(key, props[key]));
    });
    if (keys.length > 3) res.push(` ...`);
    return res;
}
/* istanbul ignore next */ function formatProp(key, value, raw) {
    if ((0, _shared.isString)(value)) {
        value = JSON.stringify(value);
        return raw ? value : [
            `${key}=${value}`
        ];
    } else if (typeof value === "number" || typeof value === "boolean" || value == null) return raw ? value : [
        `${key}=${value}`
    ];
    else if ((0, _reactivity.isRef)(value)) {
        value = formatProp(key, (0, _reactivity.toRaw)(value.value), true);
        return raw ? value : [
            `${key}=Ref<`,
            value,
            `>`
        ];
    } else if ((0, _shared.isFunction)(value)) return [
        `${key}=fn${value.name ? `<${value.name}>` : ``}`
    ];
    else {
        value = (0, _reactivity.toRaw)(value);
        return raw ? value : [
            `${key}=`,
            value
        ];
    }
}
const ErrorTypeStrings = {
    ["sp" /* SERVER_PREFETCH */ ]: "serverPrefetch hook",
    ["bc" /* BEFORE_CREATE */ ]: "beforeCreate hook",
    ["c" /* CREATED */ ]: "created hook",
    ["bm" /* BEFORE_MOUNT */ ]: "beforeMount hook",
    ["m" /* MOUNTED */ ]: "mounted hook",
    ["bu" /* BEFORE_UPDATE */ ]: "beforeUpdate hook",
    ["u" /* UPDATED */ ]: "updated",
    ["bum" /* BEFORE_UNMOUNT */ ]: "beforeUnmount hook",
    ["um" /* UNMOUNTED */ ]: "unmounted hook",
    ["a" /* ACTIVATED */ ]: "activated hook",
    ["da" /* DEACTIVATED */ ]: "deactivated hook",
    ["ec" /* ERROR_CAPTURED */ ]: "errorCaptured hook",
    ["rtc" /* RENDER_TRACKED */ ]: "renderTracked hook",
    ["rtg" /* RENDER_TRIGGERED */ ]: "renderTriggered hook",
    [0 /* SETUP_FUNCTION */ ]: "setup function",
    [1 /* RENDER_FUNCTION */ ]: "render function",
    [2 /* WATCH_GETTER */ ]: "watcher getter",
    [3 /* WATCH_CALLBACK */ ]: "watcher callback",
    [4 /* WATCH_CLEANUP */ ]: "watcher cleanup function",
    [5 /* NATIVE_EVENT_HANDLER */ ]: "native event handler",
    [6 /* COMPONENT_EVENT_HANDLER */ ]: "component event handler",
    [7 /* VNODE_HOOK */ ]: "vnode hook",
    [8 /* DIRECTIVE_HOOK */ ]: "directive hook",
    [9 /* TRANSITION_HOOK */ ]: "transition hook",
    [10 /* APP_ERROR_HANDLER */ ]: "app errorHandler",
    [11 /* APP_WARN_HANDLER */ ]: "app warnHandler",
    [12 /* FUNCTION_REF */ ]: "ref function",
    [13 /* ASYNC_COMPONENT_LOADER */ ]: "async component loader",
    [14 /* SCHEDULER */ ]: "scheduler flush. This is likely a Vue internals bug. Please open an issue at https://new-issue.vuejs.org/?repo=vuejs/vue-next"
};
function callWithErrorHandling(fn, instance, type, args) {
    let res;
    try {
        res = args ? fn(...args) : fn();
    } catch (err) {
        handleError(err, instance, type);
    }
    return res;
}
function callWithAsyncErrorHandling(fn, instance, type, args) {
    if ((0, _shared.isFunction)(fn)) {
        const res = callWithErrorHandling(fn, instance, type, args);
        if (res && (0, _shared.isPromise)(res)) res.catch((err)=>{
            handleError(err, instance, type);
        });
        return res;
    }
    const values = [];
    for(let i = 0; i < fn.length; i++)values.push(callWithAsyncErrorHandling(fn[i], instance, type, args));
    return values;
}
function handleError(err, instance, type, throwInDev = true) {
    const contextVNode = instance ? instance.vnode : null;
    if (instance) {
        let cur = instance.parent;
        // the exposed instance is the render proxy to keep it consistent with 2.x
        const exposedInstance = instance.proxy;
        // in production the hook receives only the error code
        const errorInfo = ErrorTypeStrings[type];
        while(cur){
            const errorCapturedHooks = cur.ec;
            if (errorCapturedHooks) for(let i = 0; i < errorCapturedHooks.length; i++){
                if (errorCapturedHooks[i](err, exposedInstance, errorInfo) === false) return;
            }
            cur = cur.parent;
        }
        // app-level handling
        const appErrorHandler = instance.appContext.config.errorHandler;
        if (appErrorHandler) {
            callWithErrorHandling(appErrorHandler, null, 10 /* APP_ERROR_HANDLER */ , [
                err,
                exposedInstance,
                errorInfo
            ]);
            return;
        }
    }
    logError(err, type, contextVNode, throwInDev);
}
function logError(err, type, contextVNode, throwInDev = true) {
    {
        const info = ErrorTypeStrings[type];
        if (contextVNode) pushWarningContext(contextVNode);
        warn(`Unhandled error${info ? ` during execution of ${info}` : ``}`);
        if (contextVNode) popWarningContext();
        // crash in dev by default so it's more noticeable
        if (throwInDev) throw err;
        else console.error(err);
    }
}
let isFlushing = false;
let isFlushPending = false;
const queue = [];
let flushIndex = 0;
const pendingPreFlushCbs = [];
let activePreFlushCbs = null;
let preFlushIndex = 0;
const pendingPostFlushCbs = [];
let activePostFlushCbs = null;
let postFlushIndex = 0;
const resolvedPromise = Promise.resolve();
let currentFlushPromise = null;
let currentPreFlushParentJob = null;
const RECURSION_LIMIT = 100;
function nextTick(fn) {
    const p = currentFlushPromise || resolvedPromise;
    return fn ? p.then(this ? fn.bind(this) : fn) : p;
}
// #2768
// Use binary-search to find a suitable position in the queue,
// so that the queue maintains the increasing order of job's id,
// which can prevent the job from being skipped and also can avoid repeated patching.
function findInsertionIndex(id) {
    // the start index should be `flushIndex + 1`
    let start = flushIndex + 1;
    let end = queue.length;
    while(start < end){
        const middle = start + end >>> 1;
        const middleJobId = getId(queue[middle]);
        middleJobId < id ? start = middle + 1 : end = middle;
    }
    return start;
}
function queueJob(job) {
    // the dedupe search uses the startIndex argument of Array.includes()
    // by default the search index includes the current job that is being run
    // so it cannot recursively trigger itself again.
    // if the job is a watch() callback, the search will start with a +1 index to
    // allow it recursively trigger itself - it is the user's responsibility to
    // ensure it doesn't end up in an infinite loop.
    if ((!queue.length || !queue.includes(job, isFlushing && job.allowRecurse ? flushIndex + 1 : flushIndex)) && job !== currentPreFlushParentJob) {
        if (job.id == null) queue.push(job);
        else queue.splice(findInsertionIndex(job.id), 0, job);
        queueFlush();
    }
}
function queueFlush() {
    if (!isFlushing && !isFlushPending) {
        isFlushPending = true;
        currentFlushPromise = resolvedPromise.then(flushJobs);
    }
}
function invalidateJob(job) {
    const i = queue.indexOf(job);
    if (i > flushIndex) queue.splice(i, 1);
}
function queueCb(cb, activeQueue, pendingQueue, index) {
    if (!(0, _shared.isArray)(cb)) {
        if (!activeQueue || !activeQueue.includes(cb, cb.allowRecurse ? index + 1 : index)) pendingQueue.push(cb);
    } else // if cb is an array, it is a component lifecycle hook which can only be
    // triggered by a job, which is already deduped in the main queue, so
    // we can skip duplicate check here to improve perf
    pendingQueue.push(...cb);
    queueFlush();
}
function queuePreFlushCb(cb) {
    queueCb(cb, activePreFlushCbs, pendingPreFlushCbs, preFlushIndex);
}
function queuePostFlushCb(cb) {
    queueCb(cb, activePostFlushCbs, pendingPostFlushCbs, postFlushIndex);
}
function flushPreFlushCbs(seen, parentJob = null) {
    if (pendingPreFlushCbs.length) {
        currentPreFlushParentJob = parentJob;
        activePreFlushCbs = [
            ...new Set(pendingPreFlushCbs)
        ];
        pendingPreFlushCbs.length = 0;
        seen = seen || new Map();
        for(preFlushIndex = 0; preFlushIndex < activePreFlushCbs.length; preFlushIndex++){
            if (checkRecursiveUpdates(seen, activePreFlushCbs[preFlushIndex])) continue;
            activePreFlushCbs[preFlushIndex]();
        }
        activePreFlushCbs = null;
        preFlushIndex = 0;
        currentPreFlushParentJob = null;
        // recursively flush until it drains
        flushPreFlushCbs(seen, parentJob);
    }
}
function flushPostFlushCbs(seen) {
    if (pendingPostFlushCbs.length) {
        const deduped = [
            ...new Set(pendingPostFlushCbs)
        ];
        pendingPostFlushCbs.length = 0;
        // #1947 already has active queue, nested flushPostFlushCbs call
        if (activePostFlushCbs) {
            activePostFlushCbs.push(...deduped);
            return;
        }
        activePostFlushCbs = deduped;
        seen = seen || new Map();
        activePostFlushCbs.sort((a, b)=>getId(a) - getId(b));
        for(postFlushIndex = 0; postFlushIndex < activePostFlushCbs.length; postFlushIndex++){
            if (checkRecursiveUpdates(seen, activePostFlushCbs[postFlushIndex])) continue;
            activePostFlushCbs[postFlushIndex]();
        }
        activePostFlushCbs = null;
        postFlushIndex = 0;
    }
}
const getId = (job)=>job.id == null ? Infinity : job.id;
function flushJobs(seen) {
    isFlushPending = false;
    isFlushing = true;
    seen = seen || new Map();
    flushPreFlushCbs(seen);
    // Sort queue before flush.
    // This ensures that:
    // 1. Components are updated from parent to child. (because parent is always
    //    created before the child so its render effect will have smaller
    //    priority number)
    // 2. If a component is unmounted during a parent component's update,
    //    its update can be skipped.
    queue.sort((a, b)=>getId(a) - getId(b));
    try {
        for(flushIndex = 0; flushIndex < queue.length; flushIndex++){
            const job = queue[flushIndex];
            if (job && job.active !== false) {
                if (checkRecursiveUpdates(seen, job)) continue;
                // console.log(`running:`, job.id)
                callWithErrorHandling(job, null, 14 /* SCHEDULER */ );
            }
        }
    } finally{
        flushIndex = 0;
        queue.length = 0;
        flushPostFlushCbs(seen);
        isFlushing = false;
        currentFlushPromise = null;
        // some postFlushCb queued jobs!
        // keep flushing until it drains.
        if (queue.length || pendingPreFlushCbs.length || pendingPostFlushCbs.length) flushJobs(seen);
    }
}
function checkRecursiveUpdates(seen, fn) {
    if (!seen.has(fn)) seen.set(fn, 1);
    else {
        const count = seen.get(fn);
        if (count > RECURSION_LIMIT) {
            const instance = fn.ownerInstance;
            const componentName = instance && getComponentName(instance.type);
            warn(`Maximum recursive updates exceeded${componentName ? ` in component <${componentName}>` : ``}. ` + `This means you have a reactive effect that is mutating its own ` + `dependencies and thus recursively triggering itself. Possible sources ` + `include component template, render function, updated hook or ` + `watcher source function.`);
            return true;
        } else seen.set(fn, count + 1);
    }
}
// Simple effect.
function watchEffect(effect, options) {
    return doWatch(effect, null, options);
}
function watchPostEffect(effect, options) {
    return doWatch(effect, null, Object.assign(options || {}, {
        flush: "post"
    }));
}
function watchSyncEffect(effect, options) {
    return doWatch(effect, null, Object.assign(options || {}, {
        flush: "sync"
    }));
}
// initial value for watchers to trigger on undefined initial values
const INITIAL_WATCHER_VALUE = {};
// implementation
function watch(source, cb, options) {
    if (!(0, _shared.isFunction)(cb)) warn(`\`watch(fn, options?)\` signature has been moved to a separate API. ` + `Use \`watchEffect(fn, options?)\` instead. \`watch\` now only ` + `supports \`watch(source, cb, options?) signature.`);
    return doWatch(source, cb, options);
}
function doWatch(source, cb, { immediate , deep , flush , onTrack , onTrigger  } = (0, _shared.EMPTY_OBJ)) {
    if (!cb) {
        if (immediate !== undefined) warn(`watch() "immediate" option is only respected when using the ` + `watch(source, callback, options?) signature.`);
        if (deep !== undefined) warn(`watch() "deep" option is only respected when using the ` + `watch(source, callback, options?) signature.`);
    }
    const warnInvalidSource = (s)=>{
        warn(`Invalid watch source: `, s, `A watch source can only be a getter/effect function, a ref, ` + `a reactive object, or an array of these types.`);
    };
    const instance = currentInstance;
    let getter;
    let forceTrigger = false;
    let isMultiSource = false;
    if ((0, _reactivity.isRef)(source)) {
        getter = ()=>source.value;
        forceTrigger = !!source._shallow;
    } else if ((0, _reactivity.isReactive)(source)) {
        getter = ()=>source;
        deep = true;
    } else if ((0, _shared.isArray)(source)) {
        isMultiSource = true;
        forceTrigger = source.some((0, _reactivity.isReactive));
        getter = ()=>source.map((s)=>{
                if ((0, _reactivity.isRef)(s)) return s.value;
                else if ((0, _reactivity.isReactive)(s)) return traverse(s);
                else if ((0, _shared.isFunction)(s)) return callWithErrorHandling(s, instance, 2 /* WATCH_GETTER */ );
                else warnInvalidSource(s);
            });
    } else if ((0, _shared.isFunction)(source)) {
        if (cb) // getter with cb
        getter = ()=>callWithErrorHandling(source, instance, 2 /* WATCH_GETTER */ );
        else // no cb -> simple effect
        getter = ()=>{
            if (instance && instance.isUnmounted) return;
            if (cleanup) cleanup();
            return callWithAsyncErrorHandling(source, instance, 3 /* WATCH_CALLBACK */ , [
                onInvalidate
            ]);
        };
    } else {
        getter = (0, _shared.NOOP);
        warnInvalidSource(source);
    }
    if (cb && deep) {
        const baseGetter = getter;
        getter = ()=>traverse(baseGetter());
    }
    let cleanup;
    let onInvalidate = (fn)=>{
        cleanup = effect.onStop = ()=>{
            callWithErrorHandling(fn, instance, 4 /* WATCH_CLEANUP */ );
        };
    };
    let oldValue = isMultiSource ? [] : INITIAL_WATCHER_VALUE;
    const job = ()=>{
        if (!effect.active) return;
        if (cb) {
            // watch(source, cb)
            const newValue = effect.run();
            if (deep || forceTrigger || (isMultiSource ? newValue.some((v, i)=>(0, _shared.hasChanged)(v, oldValue[i])) : (0, _shared.hasChanged)(newValue, oldValue)) || false) {
                // cleanup before running cb again
                if (cleanup) cleanup();
                callWithAsyncErrorHandling(cb, instance, 3 /* WATCH_CALLBACK */ , [
                    newValue,
                    // pass undefined as the old value when it's changed for the first time
                    oldValue === INITIAL_WATCHER_VALUE ? undefined : oldValue,
                    onInvalidate
                ]);
                oldValue = newValue;
            }
        } else // watchEffect
        effect.run();
    };
    // important: mark the job as a watcher callback so that scheduler knows
    // it is allowed to self-trigger (#1727)
    job.allowRecurse = !!cb;
    let scheduler;
    if (flush === "sync") scheduler = job; // the scheduler function gets called directly
    else if (flush === "post") scheduler = ()=>queuePostRenderEffect(job, instance && instance.suspense);
    else // default: 'pre'
    scheduler = ()=>{
        if (!instance || instance.isMounted) queuePreFlushCb(job);
        else // with 'pre' option, the first call must happen before
        // the component is mounted so it is called synchronously.
        job();
    };
    const effect = new (0, _reactivity.ReactiveEffect)(getter, scheduler);
    effect.onTrack = onTrack;
    effect.onTrigger = onTrigger;
    // initial run
    if (cb) {
        if (immediate) job();
        else oldValue = effect.run();
    } else if (flush === "post") queuePostRenderEffect(effect.run.bind(effect), instance && instance.suspense);
    else effect.run();
    return ()=>{
        effect.stop();
        if (instance && instance.scope) (0, _shared.remove)(instance.scope.effects, effect);
    };
}
// this.$watch
function instanceWatch(source, value, options) {
    const publicThis = this.proxy;
    const getter = (0, _shared.isString)(source) ? source.includes(".") ? createPathGetter(publicThis, source) : ()=>publicThis[source] : source.bind(publicThis, publicThis);
    let cb;
    if ((0, _shared.isFunction)(value)) cb = value;
    else {
        cb = value.handler;
        options = value;
    }
    const cur = currentInstance;
    setCurrentInstance(this);
    const res = doWatch(getter, cb.bind(publicThis), options);
    if (cur) setCurrentInstance(cur);
    else unsetCurrentInstance();
    return res;
}
function createPathGetter(ctx, path) {
    const segments = path.split(".");
    return ()=>{
        let cur = ctx;
        for(let i = 0; i < segments.length && cur; i++)cur = cur[segments[i]];
        return cur;
    };
}
function traverse(value, seen = new Set()) {
    if (!(0, _shared.isObject)(value) || value["__v_skip" /* SKIP */ ]) return value;
    seen = seen || new Set();
    if (seen.has(value)) return value;
    seen.add(value);
    if ((0, _reactivity.isRef)(value)) traverse(value.value, seen);
    else if ((0, _shared.isArray)(value)) for(let i = 0; i < value.length; i++)traverse(value[i], seen);
    else if ((0, _shared.isSet)(value) || (0, _shared.isMap)(value)) value.forEach((v)=>{
        traverse(v, seen);
    });
    else if ((0, _shared.isPlainObject)(value)) for(const key in value)traverse(value[key], seen);
    return value;
}
Object.freeze({});
Object.freeze([]);
const isFunction = (val)=>typeof val === "function";
const isObject = (val)=>val !== null && typeof val === "object";
const isPromise = (val)=>{
    return isObject(val) && isFunction(val.then) && isFunction(val.catch);
};
// dev only
const warnRuntimeUsage = (method)=>warn(`${method}() is a compiler-hint helper that is only usable inside ` + `<script setup> of a single file component. Its arguments should be ` + `compiled away and passing it at runtime has no effect.`);
// implementation
function defineProps() {
    warnRuntimeUsage(`defineProps`);
    return null;
}
// implementation
function defineEmits() {
    warnRuntimeUsage(`defineEmits`);
    return null;
}
/**
 * Vue `<script setup>` compiler macro for declaring a component's exposed
 * instance properties when it is accessed by a parent component via template
 * refs.
 *
 * `<script setup>` components are closed by default - i.e. varaibles inside
 * the `<script setup>` scope is not exposed to parent unless explicitly exposed
 * via `defineExpose`.
 *
 * This is only usable inside `<script setup>`, is compiled away in the
 * output and should **not** be actually called at runtime.
 */ function defineExpose(exposed) {
    warnRuntimeUsage(`defineExpose`);
}
/**
 * Vue `<script setup>` compiler macro for providing props default values when
 * using type-based `defineProps` declaration.
 *
 * Example usage:
 * ```ts
 * withDefaults(defineProps<{
 *   size?: number
 *   labels?: string[]
 * }>(), {
 *   size: 3,
 *   labels: () => ['default label']
 * })
 * ```
 *
 * This is only usable inside `<script setup>`, is compiled away in the output
 * and should **not** be actually called at runtime.
 */ function withDefaults(props, defaults) {
    warnRuntimeUsage(`withDefaults`);
    return null;
}
function useSlots() {
    return getContext().slots;
}
function useAttrs() {
    return getContext().attrs;
}
function getContext() {
    const i = getCurrentInstance();
    if (!i) warn(`useContext() called without active instance.`);
    return i.setupContext || (i.setupContext = createSetupContext(i));
}
/**
 * Runtime helper for merging default declarations. Imported by compiled code
 * only.
 * @internal
 */ function mergeDefaults(// the base props is compiler-generated and guaranteed to be in this shape.
props, defaults) {
    for(const key in defaults){
        const val = props[key];
        if (val) val.default = defaults[key];
        else if (val === null) props[key] = {
            default: defaults[key]
        };
        else warn(`props default key "${key}" has no corresponding declaration.`);
    }
    return props;
}
/**
 * `<script setup>` helper for persisting the current instance context over
 * async/await flows.
 *
 * `@vue/compiler-sfc` converts the following:
 *
 * ```ts
 * const x = await foo()
 * ```
 *
 * into:
 *
 * ```ts
 * let __temp, __restore
 * const x = (([__temp, __restore] = withAsyncContext(() => foo())),__temp=await __temp,__restore(),__temp)
 * ```
 * @internal
 */ function withAsyncContext(getAwaitable) {
    const ctx = getCurrentInstance();
    if (!ctx) warn(`withAsyncContext called without active current instance. ` + `This is likely a bug.`);
    let awaitable = getAwaitable();
    unsetCurrentInstance();
    if (isPromise(awaitable)) awaitable = awaitable.catch((e)=>{
        setCurrentInstance(ctx);
        throw e;
    });
    return [
        awaitable,
        ()=>setCurrentInstance(ctx)
    ];
}
// Actual implementation
function h(type, propsOrChildren, children) {
    const l = arguments.length;
    if (l === 2) {
        if ((0, _shared.isObject)(propsOrChildren) && !(0, _shared.isArray)(propsOrChildren)) {
            // single vnode without props
            if (isVNode(propsOrChildren)) return createVNode(type, null, [
                propsOrChildren
            ]);
            // props without children
            return createVNode(type, propsOrChildren);
        } else // omit props
        return createVNode(type, null, propsOrChildren);
    } else {
        if (l > 3) children = Array.prototype.slice.call(arguments, 2);
        else if (l === 3 && isVNode(children)) children = [
            children
        ];
        return createVNode(type, propsOrChildren, children);
    }
}
const ssrContextKey = Symbol(`ssrContext`);
const useSSRContext = ()=>{
    {
        const ctx = inject(ssrContextKey);
        if (!ctx) warn(`Server rendering context not provided. Make sure to only call ` + `useSSRContext() conditionally in the server build.`);
        return ctx;
    }
};
function initCustomFormatter() {
    /* eslint-disable no-restricted-globals */ if (typeof window === "undefined") return;
    const vueStyle = {
        style: "color:#3ba776"
    };
    const numberStyle = {
        style: "color:#0b1bc9"
    };
    const stringStyle = {
        style: "color:#b62e24"
    };
    const keywordStyle = {
        style: "color:#9d288c"
    };
    // custom formatter for Chrome
    // https://www.mattzeunert.com/2016/02/19/custom-chrome-devtools-object-formatters.html
    const formatter = {
        header (obj) {
            // TODO also format ComponentPublicInstance & ctx.slots/attrs in setup
            if (!(0, _shared.isObject)(obj)) return null;
            if (obj.__isVue) return [
                "div",
                vueStyle,
                `VueInstance`
            ];
            else if ((0, _reactivity.isRef)(obj)) return [
                "div",
                {},
                [
                    "span",
                    vueStyle,
                    genRefFlag(obj)
                ],
                "<",
                formatValue(obj.value),
                `>`
            ];
            else if ((0, _reactivity.isReactive)(obj)) return [
                "div",
                {},
                [
                    "span",
                    vueStyle,
                    "Reactive"
                ],
                "<",
                formatValue(obj),
                `>${(0, _reactivity.isReadonly)(obj) ? ` (readonly)` : ``}`
            ];
            else if ((0, _reactivity.isReadonly)(obj)) return [
                "div",
                {},
                [
                    "span",
                    vueStyle,
                    "Readonly"
                ],
                "<",
                formatValue(obj),
                ">"
            ];
            return null;
        },
        hasBody (obj) {
            return obj && obj.__isVue;
        },
        body (obj) {
            if (obj && obj.__isVue) return [
                "div",
                {},
                ...formatInstance(obj.$)
            ];
        }
    };
    function formatInstance(instance) {
        const blocks = [];
        if (instance.type.props && instance.props) blocks.push(createInstanceBlock("props", (0, _reactivity.toRaw)(instance.props)));
        if (instance.setupState !== (0, _shared.EMPTY_OBJ)) blocks.push(createInstanceBlock("setup", instance.setupState));
        if (instance.data !== (0, _shared.EMPTY_OBJ)) blocks.push(createInstanceBlock("data", (0, _reactivity.toRaw)(instance.data)));
        const computed = extractKeys(instance, "computed");
        if (computed) blocks.push(createInstanceBlock("computed", computed));
        const injected = extractKeys(instance, "inject");
        if (injected) blocks.push(createInstanceBlock("injected", injected));
        blocks.push([
            "div",
            {},
            [
                "span",
                {
                    style: keywordStyle.style + ";opacity:0.66"
                },
                "$ (internal): "
            ],
            [
                "object",
                {
                    object: instance
                }
            ]
        ]);
        return blocks;
    }
    function createInstanceBlock(type, target) {
        target = (0, _shared.extend)({}, target);
        if (!Object.keys(target).length) return [
            "span",
            {}
        ];
        return [
            "div",
            {
                style: "line-height:1.25em;margin-bottom:0.6em"
            },
            [
                "div",
                {
                    style: "color:#476582"
                },
                type
            ],
            [
                "div",
                {
                    style: "padding-left:1.25em"
                },
                ...Object.keys(target).map((key)=>{
                    return [
                        "div",
                        {},
                        [
                            "span",
                            keywordStyle,
                            key + ": "
                        ],
                        formatValue(target[key], false)
                    ];
                })
            ]
        ];
    }
    function formatValue(v, asRaw = true) {
        if (typeof v === "number") return [
            "span",
            numberStyle,
            v
        ];
        else if (typeof v === "string") return [
            "span",
            stringStyle,
            JSON.stringify(v)
        ];
        else if (typeof v === "boolean") return [
            "span",
            keywordStyle,
            v
        ];
        else if ((0, _shared.isObject)(v)) return [
            "object",
            {
                object: asRaw ? (0, _reactivity.toRaw)(v) : v
            }
        ];
        else return [
            "span",
            stringStyle,
            String(v)
        ];
    }
    function extractKeys(instance, type) {
        const Comp = instance.type;
        if ((0, _shared.isFunction)(Comp)) return;
        const extracted = {};
        for(const key in instance.ctx)if (isKeyOfType(Comp, key, type)) extracted[key] = instance.ctx[key];
        return extracted;
    }
    function isKeyOfType(Comp, key, type) {
        const opts = Comp[type];
        if ((0, _shared.isArray)(opts) && opts.includes(key) || (0, _shared.isObject)(opts) && key in opts) return true;
        if (Comp.extends && isKeyOfType(Comp.extends, key, type)) return true;
        if (Comp.mixins && Comp.mixins.some((m)=>isKeyOfType(m, key, type))) return true;
    }
    function genRefFlag(v) {
        if (v._shallow) return `ShallowRef`;
        if (v.effect) return `ComputedRef`;
        return `Ref`;
    }
    if (window.devtoolsFormatters) window.devtoolsFormatters.push(formatter);
    else window.devtoolsFormatters = [
        formatter
    ];
}
function withMemo(memo, render, cache, index) {
    const cached = cache[index];
    if (cached && isMemoSame(cached, memo)) return cached;
    const ret = render();
    // shallow clone
    ret.memo = memo.slice();
    return cache[index] = ret;
}
function isMemoSame(cached, memo) {
    const prev = cached.memo;
    if (prev.length != memo.length) return false;
    for(let i = 0; i < prev.length; i++){
        if (prev[i] !== memo[i]) return false;
    }
    // make sure to let parent block track it when returning cached
    if (isBlockTreeEnabled > 0 && currentBlock) currentBlock.push(cached);
    return true;
}
// Core API ------------------------------------------------------------------
const version = "3.2.11";
const _ssrUtils = {
    createComponentInstance,
    setupComponent,
    renderComponentRoot,
    setCurrentRenderingInstance,
    isVNode,
    normalizeVNode
};
/**
 * SSR utils for \@vue/server-renderer. Only exposed in cjs builds.
 * @internal
 */ const ssrUtils = _ssrUtils;
/**
 * @internal only exposed in compat builds
 */ const resolveFilter = null;
/**
 * @internal only exposed in compat builds.
 */ const compatUtils = null;

},{"@vue/reactivity":"d7UXQ","@vue/shared":"1JlMT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"d7UXQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "EffectScope", ()=>EffectScope);
parcelHelpers.export(exports, "ITERATE_KEY", ()=>ITERATE_KEY);
parcelHelpers.export(exports, "ReactiveEffect", ()=>ReactiveEffect);
parcelHelpers.export(exports, "computed", ()=>computed);
parcelHelpers.export(exports, "customRef", ()=>customRef);
parcelHelpers.export(exports, "deferredComputed", ()=>deferredComputed);
parcelHelpers.export(exports, "effect", ()=>effect);
parcelHelpers.export(exports, "effectScope", ()=>effectScope);
parcelHelpers.export(exports, "enableTracking", ()=>enableTracking);
parcelHelpers.export(exports, "getCurrentScope", ()=>getCurrentScope);
parcelHelpers.export(exports, "isProxy", ()=>isProxy);
parcelHelpers.export(exports, "isReactive", ()=>isReactive);
parcelHelpers.export(exports, "isReadonly", ()=>isReadonly);
parcelHelpers.export(exports, "isRef", ()=>isRef);
parcelHelpers.export(exports, "markRaw", ()=>markRaw);
parcelHelpers.export(exports, "onScopeDispose", ()=>onScopeDispose);
parcelHelpers.export(exports, "pauseTracking", ()=>pauseTracking);
parcelHelpers.export(exports, "proxyRefs", ()=>proxyRefs);
parcelHelpers.export(exports, "reactive", ()=>reactive);
parcelHelpers.export(exports, "readonly", ()=>readonly);
parcelHelpers.export(exports, "ref", ()=>ref);
parcelHelpers.export(exports, "resetTracking", ()=>resetTracking);
parcelHelpers.export(exports, "shallowReactive", ()=>shallowReactive);
parcelHelpers.export(exports, "shallowReadonly", ()=>shallowReadonly);
parcelHelpers.export(exports, "shallowRef", ()=>shallowRef);
parcelHelpers.export(exports, "stop", ()=>stop);
parcelHelpers.export(exports, "toRaw", ()=>toRaw);
parcelHelpers.export(exports, "toRef", ()=>toRef);
parcelHelpers.export(exports, "toRefs", ()=>toRefs);
parcelHelpers.export(exports, "track", ()=>track);
parcelHelpers.export(exports, "trigger", ()=>trigger);
parcelHelpers.export(exports, "triggerRef", ()=>triggerRef);
parcelHelpers.export(exports, "unref", ()=>unref);
var _shared = require("@vue/shared");
function warn(msg, ...args) {
    console.warn(`[Vue warn] ${msg}`, ...args);
}
let activeEffectScope;
const effectScopeStack = [];
class EffectScope {
    constructor(detached = false){
        this.active = true;
        this.effects = [];
        this.cleanups = [];
        if (!detached && activeEffectScope) {
            this.parent = activeEffectScope;
            this.index = (activeEffectScope.scopes || (activeEffectScope.scopes = [])).push(this) - 1;
        }
    }
    run(fn) {
        if (this.active) try {
            this.on();
            return fn();
        } finally{
            this.off();
        }
        else warn(`cannot run an inactive effect scope.`);
    }
    on() {
        if (this.active) {
            effectScopeStack.push(this);
            activeEffectScope = this;
        }
    }
    off() {
        if (this.active) {
            effectScopeStack.pop();
            activeEffectScope = effectScopeStack[effectScopeStack.length - 1];
        }
    }
    stop(fromParent) {
        if (this.active) {
            this.effects.forEach((e)=>e.stop());
            this.cleanups.forEach((cleanup)=>cleanup());
            if (this.scopes) this.scopes.forEach((e)=>e.stop(true));
            // nested scope, dereference from parent to avoid memory leaks
            if (this.parent && !fromParent) {
                // optimized O(1) removal
                const last = this.parent.scopes.pop();
                if (last && last !== this) {
                    this.parent.scopes[this.index] = last;
                    last.index = this.index;
                }
            }
            this.active = false;
        }
    }
}
function effectScope(detached) {
    return new EffectScope(detached);
}
function recordEffectScope(effect1, scope) {
    scope = scope || activeEffectScope;
    if (scope && scope.active) scope.effects.push(effect1);
}
function getCurrentScope() {
    return activeEffectScope;
}
function onScopeDispose(fn) {
    if (activeEffectScope) activeEffectScope.cleanups.push(fn);
    else warn(`onScopeDispose() is called when there is no active effect scope` + ` to be associated with.`);
}
const createDep = (effects)=>{
    const dep = new Set(effects);
    dep.w = 0;
    dep.n = 0;
    return dep;
};
const wasTracked = (dep)=>(dep.w & trackOpBit) > 0;
const newTracked = (dep)=>(dep.n & trackOpBit) > 0;
const initDepMarkers = ({ deps  })=>{
    if (deps.length) for(let i = 0; i < deps.length; i++)deps[i].w |= trackOpBit; // set was tracked
};
const finalizeDepMarkers = (effect2)=>{
    const { deps  } = effect2;
    if (deps.length) {
        let ptr = 0;
        for(let i = 0; i < deps.length; i++){
            const dep = deps[i];
            if (wasTracked(dep) && !newTracked(dep)) dep.delete(effect2);
            else deps[ptr++] = dep;
            // clear bits
            dep.w &= ~trackOpBit;
            dep.n &= ~trackOpBit;
        }
        deps.length = ptr;
    }
};
const targetMap = new WeakMap();
// The number of effects currently being tracked recursively.
let effectTrackDepth = 0;
let trackOpBit = 1;
/**
 * The bitwise track markers support at most 30 levels op recursion.
 * This value is chosen to enable modern JS engines to use a SMI on all platforms.
 * When recursion depth is greater, fall back to using a full cleanup.
 */ const maxMarkerBits = 30;
const effectStack = [];
let activeEffect;
const ITERATE_KEY = Symbol("iterate");
const MAP_KEY_ITERATE_KEY = Symbol("Map key iterate");
class ReactiveEffect {
    constructor(fn, scheduler1 = null, scope){
        this.fn = fn;
        this.scheduler = scheduler1;
        this.active = true;
        this.deps = [];
        recordEffectScope(this, scope);
    }
    run() {
        if (!this.active) return this.fn();
        if (!effectStack.includes(this)) try {
            effectStack.push(activeEffect = this);
            enableTracking();
            trackOpBit = 1 << ++effectTrackDepth;
            if (effectTrackDepth <= maxMarkerBits) initDepMarkers(this);
            else cleanupEffect(this);
            return this.fn();
        } finally{
            if (effectTrackDepth <= maxMarkerBits) finalizeDepMarkers(this);
            trackOpBit = 1 << --effectTrackDepth;
            resetTracking();
            effectStack.pop();
            const n = effectStack.length;
            activeEffect = n > 0 ? effectStack[n - 1] : undefined;
        }
    }
    stop() {
        if (this.active) {
            cleanupEffect(this);
            if (this.onStop) this.onStop();
            this.active = false;
        }
    }
}
function cleanupEffect(effect3) {
    const { deps  } = effect3;
    if (deps.length) {
        for(let i = 0; i < deps.length; i++)deps[i].delete(effect3);
        deps.length = 0;
    }
}
function effect(fn, options) {
    if (fn.effect) fn = fn.effect.fn;
    const _effect = new ReactiveEffect(fn);
    if (options) {
        (0, _shared.extend)(_effect, options);
        if (options.scope) recordEffectScope(_effect, options.scope);
    }
    if (!options || !options.lazy) _effect.run();
    const runner = _effect.run.bind(_effect);
    runner.effect = _effect;
    return runner;
}
function stop(runner) {
    runner.effect.stop();
}
let shouldTrack = true;
const trackStack = [];
function pauseTracking() {
    trackStack.push(shouldTrack);
    shouldTrack = false;
}
function enableTracking() {
    trackStack.push(shouldTrack);
    shouldTrack = true;
}
function resetTracking() {
    const last = trackStack.pop();
    shouldTrack = last === undefined ? true : last;
}
function track(target, type, key) {
    if (!isTracking()) return;
    let depsMap = targetMap.get(target);
    if (!depsMap) targetMap.set(target, depsMap = new Map());
    let dep = depsMap.get(key);
    if (!dep) depsMap.set(key, dep = createDep());
    const eventInfo = {
        effect: activeEffect,
        target,
        type,
        key
    };
    trackEffects(dep, eventInfo);
}
function isTracking() {
    return shouldTrack && activeEffect !== undefined;
}
function trackEffects(dep, debuggerEventExtraInfo) {
    let shouldTrack1 = false;
    if (effectTrackDepth <= maxMarkerBits) {
        if (!newTracked(dep)) {
            dep.n |= trackOpBit; // set newly tracked
            shouldTrack1 = !wasTracked(dep);
        }
    } else // Full cleanup mode.
    shouldTrack1 = !dep.has(activeEffect);
    if (shouldTrack1) {
        dep.add(activeEffect);
        activeEffect.deps.push(dep);
        if (activeEffect.onTrack) activeEffect.onTrack(Object.assign({
            effect: activeEffect
        }, debuggerEventExtraInfo));
    }
}
function trigger(target, type, key1, newValue, oldValue, oldTarget) {
    const depsMap = targetMap.get(target);
    if (!depsMap) // never been tracked
    return;
    let deps = [];
    if (type === "clear" /* CLEAR */ ) // collection being cleared
    // trigger all effects for target
    deps = [
        ...depsMap.values()
    ];
    else if (key1 === "length" && (0, _shared.isArray)(target)) depsMap.forEach((dep, key)=>{
        if (key === "length" || key >= newValue) deps.push(dep);
    });
    else {
        // schedule runs for SET | ADD | DELETE
        if (key1 !== void 0) deps.push(depsMap.get(key1));
        // also run for iteration key on ADD | DELETE | Map.SET
        switch(type){
            case "add" /* ADD */ :
                if (!(0, _shared.isArray)(target)) {
                    deps.push(depsMap.get(ITERATE_KEY));
                    if ((0, _shared.isMap)(target)) deps.push(depsMap.get(MAP_KEY_ITERATE_KEY));
                } else if ((0, _shared.isIntegerKey)(key1)) // new index added to array -> length changes
                deps.push(depsMap.get("length"));
                break;
            case "delete" /* DELETE */ :
                if (!(0, _shared.isArray)(target)) {
                    deps.push(depsMap.get(ITERATE_KEY));
                    if ((0, _shared.isMap)(target)) deps.push(depsMap.get(MAP_KEY_ITERATE_KEY));
                }
                break;
            case "set" /* SET */ :
                if ((0, _shared.isMap)(target)) deps.push(depsMap.get(ITERATE_KEY));
                break;
        }
    }
    const eventInfo = {
        target,
        type,
        key: key1,
        newValue,
        oldValue,
        oldTarget
    };
    if (deps.length === 1) {
        if (deps[0]) triggerEffects(deps[0], eventInfo);
    } else {
        const effects = [];
        for (const dep of deps)if (dep) effects.push(...dep);
        triggerEffects(createDep(effects), eventInfo);
    }
}
function triggerEffects(dep, debuggerEventExtraInfo) {
    // spread into array for stabilization
    for (const effect4 of (0, _shared.isArray)(dep) ? dep : [
        ...dep
    ])if (effect4 !== activeEffect || effect4.allowRecurse) {
        if (effect4.onTrigger) effect4.onTrigger((0, _shared.extend)({
            effect: effect4
        }, debuggerEventExtraInfo));
        if (effect4.scheduler) effect4.scheduler();
        else effect4.run();
    }
}
const isNonTrackableKeys = /*#__PURE__*/ (0, _shared.makeMap)(`__proto__,__v_isRef,__isVue`);
const builtInSymbols = new Set(Object.getOwnPropertyNames(Symbol).map((key)=>Symbol[key]).filter((0, _shared.isSymbol)));
const get = /*#__PURE__*/ createGetter();
const shallowGet = /*#__PURE__*/ createGetter(false, true);
const readonlyGet = /*#__PURE__*/ createGetter(true);
const shallowReadonlyGet = /*#__PURE__*/ createGetter(true, true);
const arrayInstrumentations = /*#__PURE__*/ createArrayInstrumentations();
function createArrayInstrumentations() {
    const instrumentations = {};
    [
        "includes",
        "indexOf",
        "lastIndexOf"
    ].forEach((key)=>{
        instrumentations[key] = function(...args) {
            const arr = toRaw(this);
            for(let i = 0, l = this.length; i < l; i++)track(arr, "get" /* GET */ , i + "");
            // we run the method using the original args first (which may be reactive)
            const res = arr[key](...args);
            if (res === -1 || res === false) // if that didn't work, run it again using raw values.
            return arr[key](...args.map(toRaw));
            else return res;
        };
    });
    [
        "push",
        "pop",
        "shift",
        "unshift",
        "splice"
    ].forEach((key)=>{
        instrumentations[key] = function(...args) {
            pauseTracking();
            const res = toRaw(this)[key].apply(this, args);
            resetTracking();
            return res;
        };
    });
    return instrumentations;
}
function createGetter(isReadonly1 = false, shallow = false) {
    return function get(target, key, receiver) {
        if (key === "__v_isReactive" /* IS_REACTIVE */ ) return !isReadonly1;
        else if (key === "__v_isReadonly" /* IS_READONLY */ ) return isReadonly1;
        else if (key === "__v_raw" /* RAW */  && receiver === (isReadonly1 ? shallow ? shallowReadonlyMap : readonlyMap : shallow ? shallowReactiveMap : reactiveMap).get(target)) return target;
        const targetIsArray = (0, _shared.isArray)(target);
        if (!isReadonly1 && targetIsArray && (0, _shared.hasOwn)(arrayInstrumentations, key)) return Reflect.get(arrayInstrumentations, key, receiver);
        const res = Reflect.get(target, key, receiver);
        if ((0, _shared.isSymbol)(key) ? builtInSymbols.has(key) : isNonTrackableKeys(key)) return res;
        if (!isReadonly1) track(target, "get" /* GET */ , key);
        if (shallow) return res;
        if (isRef(res)) {
            // ref unwrapping - does not apply for Array + integer key.
            const shouldUnwrap = !targetIsArray || !(0, _shared.isIntegerKey)(key);
            return shouldUnwrap ? res.value : res;
        }
        if ((0, _shared.isObject)(res)) // Convert returned value into a proxy as well. we do the isObject check
        // here to avoid invalid value warning. Also need to lazy access readonly
        // and reactive here to avoid circular dependency.
        return isReadonly1 ? readonly(res) : reactive(res);
        return res;
    };
}
const set = /*#__PURE__*/ createSetter();
const shallowSet = /*#__PURE__*/ createSetter(true);
function createSetter(shallow = false) {
    return function set(target, key, value, receiver) {
        let oldValue = target[key];
        if (!shallow) {
            value = toRaw(value);
            oldValue = toRaw(oldValue);
            if (!(0, _shared.isArray)(target) && isRef(oldValue) && !isRef(value)) {
                oldValue.value = value;
                return true;
            }
        }
        const hadKey = (0, _shared.isArray)(target) && (0, _shared.isIntegerKey)(key) ? Number(key) < target.length : (0, _shared.hasOwn)(target, key);
        const result = Reflect.set(target, key, value, receiver);
        // don't trigger if target is something up in the prototype chain of original
        if (target === toRaw(receiver)) {
            if (!hadKey) trigger(target, "add" /* ADD */ , key, value);
            else if ((0, _shared.hasChanged)(value, oldValue)) trigger(target, "set" /* SET */ , key, value, oldValue);
        }
        return result;
    };
}
function deleteProperty(target, key) {
    const hadKey = (0, _shared.hasOwn)(target, key);
    const oldValue = target[key];
    const result = Reflect.deleteProperty(target, key);
    if (result && hadKey) trigger(target, "delete" /* DELETE */ , key, undefined, oldValue);
    return result;
}
function has(target, key) {
    const result = Reflect.has(target, key);
    if (!(0, _shared.isSymbol)(key) || !builtInSymbols.has(key)) track(target, "has" /* HAS */ , key);
    return result;
}
function ownKeys(target) {
    track(target, "iterate" /* ITERATE */ , (0, _shared.isArray)(target) ? "length" : ITERATE_KEY);
    return Reflect.ownKeys(target);
}
const mutableHandlers = {
    get,
    set,
    deleteProperty,
    has,
    ownKeys
};
const readonlyHandlers = {
    get: readonlyGet,
    set (target, key) {
        console.warn(`Set operation on key "${String(key)}" failed: target is readonly.`, target);
        return true;
    },
    deleteProperty (target, key) {
        console.warn(`Delete operation on key "${String(key)}" failed: target is readonly.`, target);
        return true;
    }
};
const shallowReactiveHandlers = /*#__PURE__*/ (0, _shared.extend)({}, mutableHandlers, {
    get: shallowGet,
    set: shallowSet
});
// Props handlers are special in the sense that it should not unwrap top-level
// refs (in order to allow refs to be explicitly passed down), but should
// retain the reactivity of the normal readonly object.
const shallowReadonlyHandlers = /*#__PURE__*/ (0, _shared.extend)({}, readonlyHandlers, {
    get: shallowReadonlyGet
});
const toReactive = (value)=>(0, _shared.isObject)(value) ? reactive(value) : value;
const toReadonly = (value)=>(0, _shared.isObject)(value) ? readonly(value) : value;
const toShallow = (value)=>value;
const getProto = (v)=>Reflect.getPrototypeOf(v);
function get$1(target, key, isReadonly2 = false, isShallow = false) {
    // #1772: readonly(reactive(Map)) should return readonly + reactive version
    // of the value
    target = target["__v_raw" /* RAW */ ];
    const rawTarget = toRaw(target);
    const rawKey = toRaw(key);
    if (key !== rawKey) !isReadonly2 && track(rawTarget, "get" /* GET */ , key);
    !isReadonly2 && track(rawTarget, "get" /* GET */ , rawKey);
    const { has: has1  } = getProto(rawTarget);
    const wrap = isShallow ? toShallow : isReadonly2 ? toReadonly : toReactive;
    if (has1.call(rawTarget, key)) return wrap(target.get(key));
    else if (has1.call(rawTarget, rawKey)) return wrap(target.get(rawKey));
    else if (target !== rawTarget) // #3602 readonly(reactive(Map))
    // ensure that the nested reactive `Map` can do tracking for itself
    target.get(key);
}
function has$1(key, isReadonly3 = false) {
    const target = this["__v_raw" /* RAW */ ];
    const rawTarget = toRaw(target);
    const rawKey = toRaw(key);
    if (key !== rawKey) !isReadonly3 && track(rawTarget, "has" /* HAS */ , key);
    !isReadonly3 && track(rawTarget, "has" /* HAS */ , rawKey);
    return key === rawKey ? target.has(key) : target.has(key) || target.has(rawKey);
}
function size(target, isReadonly4 = false) {
    target = target["__v_raw" /* RAW */ ];
    !isReadonly4 && track(toRaw(target), "iterate" /* ITERATE */ , ITERATE_KEY);
    return Reflect.get(target, "size", target);
}
function add(value) {
    value = toRaw(value);
    const target = toRaw(this);
    const proto = getProto(target);
    const hadKey = proto.has.call(target, value);
    if (!hadKey) {
        target.add(value);
        trigger(target, "add" /* ADD */ , value, value);
    }
    return this;
}
function set$1(key, value) {
    value = toRaw(value);
    const target = toRaw(this);
    const { has: has2 , get: get1  } = getProto(target);
    let hadKey = has2.call(target, key);
    if (!hadKey) {
        key = toRaw(key);
        hadKey = has2.call(target, key);
    } else checkIdentityKeys(target, has2, key);
    const oldValue = get1.call(target, key);
    target.set(key, value);
    if (!hadKey) trigger(target, "add" /* ADD */ , key, value);
    else if ((0, _shared.hasChanged)(value, oldValue)) trigger(target, "set" /* SET */ , key, value, oldValue);
    return this;
}
function deleteEntry(key) {
    const target = toRaw(this);
    const { has: has3 , get: get2  } = getProto(target);
    let hadKey = has3.call(target, key);
    if (!hadKey) {
        key = toRaw(key);
        hadKey = has3.call(target, key);
    } else checkIdentityKeys(target, has3, key);
    const oldValue = get2 ? get2.call(target, key) : undefined;
    // forward the operation before queueing reactions
    const result = target.delete(key);
    if (hadKey) trigger(target, "delete" /* DELETE */ , key, undefined, oldValue);
    return result;
}
function clear() {
    const target = toRaw(this);
    const hadItems = target.size !== 0;
    const oldTarget = (0, _shared.isMap)(target) ? new Map(target) : new Set(target);
    // forward the operation before queueing reactions
    const result = target.clear();
    if (hadItems) trigger(target, "clear" /* CLEAR */ , undefined, undefined, oldTarget);
    return result;
}
function createForEach(isReadonly5, isShallow) {
    return function forEach(callback, thisArg) {
        const observed = this;
        const target = observed["__v_raw" /* RAW */ ];
        const rawTarget = toRaw(target);
        const wrap = isShallow ? toShallow : isReadonly5 ? toReadonly : toReactive;
        !isReadonly5 && track(rawTarget, "iterate" /* ITERATE */ , ITERATE_KEY);
        return target.forEach((value, key)=>{
            // important: make sure the callback is
            // 1. invoked with the reactive map as `this` and 3rd arg
            // 2. the value received should be a corresponding reactive/readonly.
            return callback.call(thisArg, wrap(value), wrap(key), observed);
        });
    };
}
function createIterableMethod(method, isReadonly6, isShallow) {
    return function(...args) {
        const target = this["__v_raw" /* RAW */ ];
        const rawTarget = toRaw(target);
        const targetIsMap = (0, _shared.isMap)(rawTarget);
        const isPair = method === "entries" || method === Symbol.iterator && targetIsMap;
        const isKeyOnly = method === "keys" && targetIsMap;
        const innerIterator = target[method](...args);
        const wrap = isShallow ? toShallow : isReadonly6 ? toReadonly : toReactive;
        !isReadonly6 && track(rawTarget, "iterate" /* ITERATE */ , isKeyOnly ? MAP_KEY_ITERATE_KEY : ITERATE_KEY);
        // return a wrapped iterator which returns observed versions of the
        // values emitted from the real iterator
        return {
            // iterator protocol
            next () {
                const { value , done  } = innerIterator.next();
                return done ? {
                    value,
                    done
                } : {
                    value: isPair ? [
                        wrap(value[0]),
                        wrap(value[1])
                    ] : wrap(value),
                    done
                };
            },
            // iterable protocol
            [Symbol.iterator] () {
                return this;
            }
        };
    };
}
function createReadonlyMethod(type) {
    return function(...args) {
        {
            const key = args[0] ? `on key "${args[0]}" ` : ``;
            console.warn(`${(0, _shared.capitalize)(type)} operation ${key}failed: target is readonly.`, toRaw(this));
        }
        return type === "delete" /* DELETE */  ? false : this;
    };
}
function createInstrumentations() {
    const mutableInstrumentations1 = {
        get (key) {
            return get$1(this, key);
        },
        get size () {
            return size(this);
        },
        has: has$1,
        add,
        set: set$1,
        delete: deleteEntry,
        clear,
        forEach: createForEach(false, false)
    };
    const shallowInstrumentations1 = {
        get (key) {
            return get$1(this, key, false, true);
        },
        get size () {
            return size(this);
        },
        has: has$1,
        add,
        set: set$1,
        delete: deleteEntry,
        clear,
        forEach: createForEach(false, true)
    };
    const readonlyInstrumentations1 = {
        get (key) {
            return get$1(this, key, true);
        },
        get size () {
            return size(this, true);
        },
        has (key) {
            return has$1.call(this, key, true);
        },
        add: createReadonlyMethod("add" /* ADD */ ),
        set: createReadonlyMethod("set" /* SET */ ),
        delete: createReadonlyMethod("delete" /* DELETE */ ),
        clear: createReadonlyMethod("clear" /* CLEAR */ ),
        forEach: createForEach(true, false)
    };
    const shallowReadonlyInstrumentations1 = {
        get (key) {
            return get$1(this, key, true, true);
        },
        get size () {
            return size(this, true);
        },
        has (key) {
            return has$1.call(this, key, true);
        },
        add: createReadonlyMethod("add" /* ADD */ ),
        set: createReadonlyMethod("set" /* SET */ ),
        delete: createReadonlyMethod("delete" /* DELETE */ ),
        clear: createReadonlyMethod("clear" /* CLEAR */ ),
        forEach: createForEach(true, true)
    };
    const iteratorMethods = [
        "keys",
        "values",
        "entries",
        Symbol.iterator
    ];
    iteratorMethods.forEach((method)=>{
        mutableInstrumentations1[method] = createIterableMethod(method, false, false);
        readonlyInstrumentations1[method] = createIterableMethod(method, true, false);
        shallowInstrumentations1[method] = createIterableMethod(method, false, true);
        shallowReadonlyInstrumentations1[method] = createIterableMethod(method, true, true);
    });
    return [
        mutableInstrumentations1,
        readonlyInstrumentations1,
        shallowInstrumentations1,
        shallowReadonlyInstrumentations1
    ];
}
const [mutableInstrumentations, readonlyInstrumentations, shallowInstrumentations, shallowReadonlyInstrumentations] = /* #__PURE__*/ createInstrumentations();
function createInstrumentationGetter(isReadonly7, shallow) {
    const instrumentations = shallow ? isReadonly7 ? shallowReadonlyInstrumentations : shallowInstrumentations : isReadonly7 ? readonlyInstrumentations : mutableInstrumentations;
    return (target, key, receiver)=>{
        if (key === "__v_isReactive" /* IS_REACTIVE */ ) return !isReadonly7;
        else if (key === "__v_isReadonly" /* IS_READONLY */ ) return isReadonly7;
        else if (key === "__v_raw" /* RAW */ ) return target;
        return Reflect.get((0, _shared.hasOwn)(instrumentations, key) && key in target ? instrumentations : target, key, receiver);
    };
}
const mutableCollectionHandlers = {
    get: /*#__PURE__*/ createInstrumentationGetter(false, false)
};
const shallowCollectionHandlers = {
    get: /*#__PURE__*/ createInstrumentationGetter(false, true)
};
const readonlyCollectionHandlers = {
    get: /*#__PURE__*/ createInstrumentationGetter(true, false)
};
const shallowReadonlyCollectionHandlers = {
    get: /*#__PURE__*/ createInstrumentationGetter(true, true)
};
function checkIdentityKeys(target, has4, key) {
    const rawKey = toRaw(key);
    if (rawKey !== key && has4.call(target, rawKey)) {
        const type = (0, _shared.toRawType)(target);
        console.warn(`Reactive ${type} contains both the raw and reactive ` + `versions of the same object${type === `Map` ? ` as keys` : ``}, ` + `which can lead to inconsistencies. ` + `Avoid differentiating between the raw and reactive versions ` + `of an object and only use the reactive version if possible.`);
    }
}
const reactiveMap = new WeakMap();
const shallowReactiveMap = new WeakMap();
const readonlyMap = new WeakMap();
const shallowReadonlyMap = new WeakMap();
function targetTypeMap(rawType) {
    switch(rawType){
        case "Object":
        case "Array":
            return 1 /* COMMON */ ;
        case "Map":
        case "Set":
        case "WeakMap":
        case "WeakSet":
            return 2 /* COLLECTION */ ;
        default:
            return 0 /* INVALID */ ;
    }
}
function getTargetType(value) {
    return value["__v_skip" /* SKIP */ ] || !Object.isExtensible(value) ? 0 /* INVALID */  : targetTypeMap((0, _shared.toRawType)(value));
}
function reactive(target) {
    // if trying to observe a readonly proxy, return the readonly version.
    if (target && target["__v_isReadonly" /* IS_READONLY */ ]) return target;
    return createReactiveObject(target, false, mutableHandlers, mutableCollectionHandlers, reactiveMap);
}
/**
 * Return a shallowly-reactive copy of the original object, where only the root
 * level properties are reactive. It also does not auto-unwrap refs (even at the
 * root level).
 */ function shallowReactive(target) {
    return createReactiveObject(target, false, shallowReactiveHandlers, shallowCollectionHandlers, shallowReactiveMap);
}
/**
 * Creates a readonly copy of the original object. Note the returned copy is not
 * made reactive, but `readonly` can be called on an already reactive object.
 */ function readonly(target) {
    return createReactiveObject(target, true, readonlyHandlers, readonlyCollectionHandlers, readonlyMap);
}
/**
 * Returns a reactive-copy of the original object, where only the root level
 * properties are readonly, and does NOT unwrap refs nor recursively convert
 * returned properties.
 * This is used for creating the props proxy object for stateful components.
 */ function shallowReadonly(target) {
    return createReactiveObject(target, true, shallowReadonlyHandlers, shallowReadonlyCollectionHandlers, shallowReadonlyMap);
}
function createReactiveObject(target, isReadonly8, baseHandlers, collectionHandlers, proxyMap) {
    if (!(0, _shared.isObject)(target)) {
        console.warn(`value cannot be made reactive: ${String(target)}`);
        return target;
    }
    // target is already a Proxy, return it.
    // exception: calling readonly() on a reactive object
    if (target["__v_raw" /* RAW */ ] && !(isReadonly8 && target["__v_isReactive" /* IS_REACTIVE */ ])) return target;
    // target already has corresponding Proxy
    const existingProxy = proxyMap.get(target);
    if (existingProxy) return existingProxy;
    // only a whitelist of value types can be observed.
    const targetType = getTargetType(target);
    if (targetType === 0 /* INVALID */ ) return target;
    const proxy = new Proxy(target, targetType === 2 /* COLLECTION */  ? collectionHandlers : baseHandlers);
    proxyMap.set(target, proxy);
    return proxy;
}
function isReactive(value) {
    if (isReadonly(value)) return isReactive(value["__v_raw" /* RAW */ ]);
    return !!(value && value["__v_isReactive" /* IS_REACTIVE */ ]);
}
function isReadonly(value) {
    return !!(value && value["__v_isReadonly" /* IS_READONLY */ ]);
}
function isProxy(value) {
    return isReactive(value) || isReadonly(value);
}
function toRaw(observed) {
    const raw = observed && observed["__v_raw" /* RAW */ ];
    return raw ? toRaw(raw) : observed;
}
function markRaw(value) {
    (0, _shared.def)(value, "__v_skip" /* SKIP */ , true);
    return value;
}
function trackRefValue(ref1) {
    if (isTracking()) {
        ref1 = toRaw(ref1);
        if (!ref1.dep) ref1.dep = createDep();
        trackEffects(ref1.dep, {
            target: ref1,
            type: "get" /* GET */ ,
            key: "value"
        });
    }
}
function triggerRefValue(ref2, newVal) {
    ref2 = toRaw(ref2);
    if (ref2.dep) triggerEffects(ref2.dep, {
        target: ref2,
        type: "set" /* SET */ ,
        key: "value",
        newValue: newVal
    });
}
const convert = (val)=>(0, _shared.isObject)(val) ? reactive(val) : val;
function isRef(r) {
    return Boolean(r && r.__v_isRef === true);
}
function ref(value) {
    return createRef(value, false);
}
function shallowRef(value) {
    return createRef(value, true);
}
class RefImpl {
    constructor(value, _shallow){
        this._shallow = _shallow;
        this.dep = undefined;
        this.__v_isRef = true;
        this._rawValue = _shallow ? value : toRaw(value);
        this._value = _shallow ? value : convert(value);
    }
    get value() {
        trackRefValue(this);
        return this._value;
    }
    set value(newVal) {
        newVal = this._shallow ? newVal : toRaw(newVal);
        if ((0, _shared.hasChanged)(newVal, this._rawValue)) {
            this._rawValue = newVal;
            this._value = this._shallow ? newVal : convert(newVal);
            triggerRefValue(this, newVal);
        }
    }
}
function createRef(rawValue, shallow) {
    if (isRef(rawValue)) return rawValue;
    return new RefImpl(rawValue, shallow);
}
function triggerRef(ref3) {
    triggerRefValue(ref3, ref3.value);
}
function unref(ref4) {
    return isRef(ref4) ? ref4.value : ref4;
}
const shallowUnwrapHandlers = {
    get: (target, key, receiver)=>unref(Reflect.get(target, key, receiver)),
    set: (target, key, value, receiver)=>{
        const oldValue = target[key];
        if (isRef(oldValue) && !isRef(value)) {
            oldValue.value = value;
            return true;
        } else return Reflect.set(target, key, value, receiver);
    }
};
function proxyRefs(objectWithRefs) {
    return isReactive(objectWithRefs) ? objectWithRefs : new Proxy(objectWithRefs, shallowUnwrapHandlers);
}
class CustomRefImpl {
    constructor(factory){
        this.dep = undefined;
        this.__v_isRef = true;
        const { get: get3 , set: set1  } = factory(()=>trackRefValue(this), ()=>triggerRefValue(this));
        this._get = get3;
        this._set = set1;
    }
    get value() {
        return this._get();
    }
    set value(newVal) {
        this._set(newVal);
    }
}
function customRef(factory) {
    return new CustomRefImpl(factory);
}
function toRefs(object) {
    if (!isProxy(object)) console.warn(`toRefs() expects a reactive object but received a plain one.`);
    const ret = (0, _shared.isArray)(object) ? new Array(object.length) : {};
    for(const key in object)ret[key] = toRef(object, key);
    return ret;
}
class ObjectRefImpl {
    constructor(_object, _key){
        this._object = _object;
        this._key = _key;
        this.__v_isRef = true;
    }
    get value() {
        return this._object[this._key];
    }
    set value(newVal) {
        this._object[this._key] = newVal;
    }
}
function toRef(object, key) {
    const val = object[key];
    return isRef(val) ? val : new ObjectRefImpl(object, key);
}
class ComputedRefImpl {
    constructor(getter, _setter, isReadonly9){
        this._setter = _setter;
        this.dep = undefined;
        this._dirty = true;
        this.__v_isRef = true;
        this.effect = new ReactiveEffect(getter, ()=>{
            if (!this._dirty) {
                this._dirty = true;
                triggerRefValue(this);
            }
        });
        this["__v_isReadonly" /* IS_READONLY */ ] = isReadonly9;
    }
    get value() {
        // the computed ref may get wrapped by other proxies e.g. readonly() #3376
        const self = toRaw(this);
        trackRefValue(self);
        if (self._dirty) {
            self._dirty = false;
            self._value = self.effect.run();
        }
        return self._value;
    }
    set value(newValue) {
        this._setter(newValue);
    }
}
function computed(getterOrOptions, debugOptions) {
    let getter;
    let setter;
    if ((0, _shared.isFunction)(getterOrOptions)) {
        getter = getterOrOptions;
        setter = ()=>{
            console.warn("Write operation failed: computed value is readonly");
        };
    } else {
        getter = getterOrOptions.get;
        setter = getterOrOptions.set;
    }
    const cRef = new ComputedRefImpl(getter, setter, (0, _shared.isFunction)(getterOrOptions) || !getterOrOptions.set);
    if (debugOptions) {
        cRef.effect.onTrack = debugOptions.onTrack;
        cRef.effect.onTrigger = debugOptions.onTrigger;
    }
    return cRef;
}
var _a;
const tick = Promise.resolve();
const queue = [];
let queued = false;
const scheduler = (fn)=>{
    queue.push(fn);
    if (!queued) {
        queued = true;
        tick.then(flush);
    }
};
const flush = ()=>{
    for(let i = 0; i < queue.length; i++)queue[i]();
    queue.length = 0;
    queued = false;
};
class DeferredComputedRefImpl {
    constructor(getter){
        this.dep = undefined;
        this._dirty = true;
        this.__v_isRef = true;
        this[_a] = true;
        let compareTarget;
        let hasCompareTarget = false;
        let scheduled = false;
        this.effect = new ReactiveEffect(getter, (computedTrigger)=>{
            if (this.dep) {
                if (computedTrigger) {
                    compareTarget = this._value;
                    hasCompareTarget = true;
                } else if (!scheduled) {
                    const valueToCompare = hasCompareTarget ? compareTarget : this._value;
                    scheduled = true;
                    hasCompareTarget = false;
                    scheduler(()=>{
                        if (this.effect.active && this._get() !== valueToCompare) triggerRefValue(this);
                        scheduled = false;
                    });
                }
                // chained upstream computeds are notified synchronously to ensure
                // value invalidation in case of sync access; normal effects are
                // deferred to be triggered in scheduler.
                for (const e of this.dep)if (e.computed) e.scheduler(true);
            }
            this._dirty = true;
        });
        this.effect.computed = true;
    }
    _get() {
        if (this._dirty) {
            this._dirty = false;
            return this._value = this.effect.run();
        }
        return this._value;
    }
    get value() {
        trackRefValue(this);
        // the computed ref may get wrapped by other proxies e.g. readonly() #3376
        return toRaw(this)._get();
    }
}
_a = "__v_isReadonly" /* IS_READONLY */ ;
function deferredComputed(getter) {
    return new DeferredComputedRefImpl(getter);
}

},{"@vue/shared":"d2woH","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"d2woH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "EMPTY_ARR", ()=>EMPTY_ARR);
parcelHelpers.export(exports, "EMPTY_OBJ", ()=>EMPTY_OBJ);
parcelHelpers.export(exports, "NO", ()=>NO);
parcelHelpers.export(exports, "NOOP", ()=>NOOP);
parcelHelpers.export(exports, "PatchFlagNames", ()=>PatchFlagNames);
parcelHelpers.export(exports, "babelParserDefaultPlugins", ()=>babelParserDefaultPlugins);
parcelHelpers.export(exports, "camelize", ()=>camelize);
parcelHelpers.export(exports, "capitalize", ()=>capitalize);
parcelHelpers.export(exports, "def", ()=>def);
parcelHelpers.export(exports, "escapeHtml", ()=>escapeHtml);
parcelHelpers.export(exports, "escapeHtmlComment", ()=>escapeHtmlComment);
parcelHelpers.export(exports, "extend", ()=>extend);
parcelHelpers.export(exports, "generateCodeFrame", ()=>generateCodeFrame);
parcelHelpers.export(exports, "getGlobalThis", ()=>getGlobalThis);
parcelHelpers.export(exports, "hasChanged", ()=>hasChanged);
parcelHelpers.export(exports, "hasOwn", ()=>hasOwn);
parcelHelpers.export(exports, "hyphenate", ()=>hyphenate);
parcelHelpers.export(exports, "includeBooleanAttr", ()=>includeBooleanAttr);
parcelHelpers.export(exports, "invokeArrayFns", ()=>invokeArrayFns);
parcelHelpers.export(exports, "isArray", ()=>isArray);
parcelHelpers.export(exports, "isBooleanAttr", ()=>isBooleanAttr);
parcelHelpers.export(exports, "isDate", ()=>isDate);
parcelHelpers.export(exports, "isFunction", ()=>isFunction);
parcelHelpers.export(exports, "isGloballyWhitelisted", ()=>isGloballyWhitelisted);
parcelHelpers.export(exports, "isHTMLTag", ()=>isHTMLTag);
parcelHelpers.export(exports, "isIntegerKey", ()=>isIntegerKey);
parcelHelpers.export(exports, "isKnownHtmlAttr", ()=>isKnownHtmlAttr);
parcelHelpers.export(exports, "isKnownSvgAttr", ()=>isKnownSvgAttr);
parcelHelpers.export(exports, "isMap", ()=>isMap);
parcelHelpers.export(exports, "isModelListener", ()=>isModelListener);
parcelHelpers.export(exports, "isNoUnitNumericStyleProp", ()=>isNoUnitNumericStyleProp);
parcelHelpers.export(exports, "isObject", ()=>isObject);
parcelHelpers.export(exports, "isOn", ()=>isOn);
parcelHelpers.export(exports, "isPlainObject", ()=>isPlainObject);
parcelHelpers.export(exports, "isPromise", ()=>isPromise);
parcelHelpers.export(exports, "isReservedProp", ()=>isReservedProp);
parcelHelpers.export(exports, "isSSRSafeAttrName", ()=>isSSRSafeAttrName);
parcelHelpers.export(exports, "isSVGTag", ()=>isSVGTag);
parcelHelpers.export(exports, "isSet", ()=>isSet);
parcelHelpers.export(exports, "isSpecialBooleanAttr", ()=>isSpecialBooleanAttr);
parcelHelpers.export(exports, "isString", ()=>isString);
parcelHelpers.export(exports, "isSymbol", ()=>isSymbol);
parcelHelpers.export(exports, "isVoidTag", ()=>isVoidTag);
parcelHelpers.export(exports, "looseEqual", ()=>looseEqual);
parcelHelpers.export(exports, "looseIndexOf", ()=>looseIndexOf);
parcelHelpers.export(exports, "makeMap", ()=>makeMap);
parcelHelpers.export(exports, "normalizeClass", ()=>normalizeClass);
parcelHelpers.export(exports, "normalizeProps", ()=>normalizeProps);
parcelHelpers.export(exports, "normalizeStyle", ()=>normalizeStyle);
parcelHelpers.export(exports, "objectToString", ()=>objectToString);
parcelHelpers.export(exports, "parseStringStyle", ()=>parseStringStyle);
parcelHelpers.export(exports, "propsToAttrMap", ()=>propsToAttrMap);
parcelHelpers.export(exports, "remove", ()=>remove);
parcelHelpers.export(exports, "slotFlagsText", ()=>slotFlagsText);
parcelHelpers.export(exports, "stringifyStyle", ()=>stringifyStyle);
parcelHelpers.export(exports, "toDisplayString", ()=>toDisplayString);
parcelHelpers.export(exports, "toHandlerKey", ()=>toHandlerKey);
parcelHelpers.export(exports, "toNumber", ()=>toNumber);
parcelHelpers.export(exports, "toRawType", ()=>toRawType);
parcelHelpers.export(exports, "toTypeString", ()=>toTypeString);
var global = arguments[3];
/**
 * Make a map and return a function for checking if a key
 * is in that map.
 * IMPORTANT: all calls of this function must be prefixed with
 * \/\*#\_\_PURE\_\_\*\/
 * So that rollup can tree-shake them if necessary.
 */ function makeMap(str, expectsLowerCase) {
    const map = Object.create(null);
    const list = str.split(",");
    for(let i = 0; i < list.length; i++)map[list[i]] = true;
    return expectsLowerCase ? (val)=>!!map[val.toLowerCase()] : (val)=>!!map[val];
}
/**
 * dev only flag -> name mapping
 */ const PatchFlagNames = {
    [1 /* TEXT */ ]: `TEXT`,
    [2 /* CLASS */ ]: `CLASS`,
    [4 /* STYLE */ ]: `STYLE`,
    [8 /* PROPS */ ]: `PROPS`,
    [16 /* FULL_PROPS */ ]: `FULL_PROPS`,
    [32 /* HYDRATE_EVENTS */ ]: `HYDRATE_EVENTS`,
    [64 /* STABLE_FRAGMENT */ ]: `STABLE_FRAGMENT`,
    [128 /* KEYED_FRAGMENT */ ]: `KEYED_FRAGMENT`,
    [256 /* UNKEYED_FRAGMENT */ ]: `UNKEYED_FRAGMENT`,
    [512 /* NEED_PATCH */ ]: `NEED_PATCH`,
    [1024 /* DYNAMIC_SLOTS */ ]: `DYNAMIC_SLOTS`,
    [2048 /* DEV_ROOT_FRAGMENT */ ]: `DEV_ROOT_FRAGMENT`,
    [-1 /* HOISTED */ ]: `HOISTED`,
    [-2 /* BAIL */ ]: `BAIL`
};
/**
 * Dev only
 */ const slotFlagsText = {
    [1 /* STABLE */ ]: "STABLE",
    [2 /* DYNAMIC */ ]: "DYNAMIC",
    [3 /* FORWARDED */ ]: "FORWARDED"
};
const GLOBALS_WHITE_LISTED = "Infinity,undefined,NaN,isFinite,isNaN,parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,BigInt";
const isGloballyWhitelisted = /*#__PURE__*/ makeMap(GLOBALS_WHITE_LISTED);
const range = 2;
function generateCodeFrame(source, start = 0, end = source.length) {
    // Split the content into individual lines but capture the newline sequence
    // that separated each line. This is important because the actual sequence is
    // needed to properly take into account the full line length for offset
    // comparison
    let lines = source.split(/(\r?\n)/);
    // Separate the lines and newline sequences into separate arrays for easier referencing
    const newlineSequences = lines.filter((_, idx)=>idx % 2 === 1);
    lines = lines.filter((_, idx)=>idx % 2 === 0);
    let count = 0;
    const res = [];
    for(let i = 0; i < lines.length; i++){
        count += lines[i].length + (newlineSequences[i] && newlineSequences[i].length || 0);
        if (count >= start) {
            for(let j = i - range; j <= i + range || end > count; j++){
                if (j < 0 || j >= lines.length) continue;
                const line = j + 1;
                res.push(`${line}${" ".repeat(Math.max(3 - String(line).length, 0))}|  ${lines[j]}`);
                const lineLength = lines[j].length;
                const newLineSeqLength = newlineSequences[j] && newlineSequences[j].length || 0;
                if (j === i) {
                    // push underline
                    const pad = start - (count - (lineLength + newLineSeqLength));
                    const length = Math.max(1, end > count ? lineLength - pad : end - start);
                    res.push(`   |  ` + " ".repeat(pad) + "^".repeat(length));
                } else if (j > i) {
                    if (end > count) {
                        const length = Math.max(Math.min(end - count, lineLength), 1);
                        res.push(`   |  ` + "^".repeat(length));
                    }
                    count += lineLength + newLineSeqLength;
                }
            }
            break;
        }
    }
    return res.join("\n");
}
/**
 * On the client we only need to offer special cases for boolean attributes that
 * have different names from their corresponding dom properties:
 * - itemscope -> N/A
 * - allowfullscreen -> allowFullscreen
 * - formnovalidate -> formNoValidate
 * - ismap -> isMap
 * - nomodule -> noModule
 * - novalidate -> noValidate
 * - readonly -> readOnly
 */ const specialBooleanAttrs = `itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly`;
const isSpecialBooleanAttr = /*#__PURE__*/ makeMap(specialBooleanAttrs);
/**
 * The full list is needed during SSR to produce the correct initial markup.
 */ const isBooleanAttr = /*#__PURE__*/ makeMap(specialBooleanAttrs + `,async,autofocus,autoplay,controls,default,defer,disabled,hidden,` + `loop,open,required,reversed,scoped,seamless,` + `checked,muted,multiple,selected`);
/**
 * Boolean attributes should be included if the value is truthy or ''.
 * e.g. <select multiple> compiles to { multiple: '' }
 */ function includeBooleanAttr(value) {
    return !!value || value === "";
}
const unsafeAttrCharRE = /[>/="'\u0009\u000a\u000c\u0020]/;
const attrValidationCache = {};
function isSSRSafeAttrName(name) {
    if (attrValidationCache.hasOwnProperty(name)) return attrValidationCache[name];
    const isUnsafe = unsafeAttrCharRE.test(name);
    if (isUnsafe) console.error(`unsafe attribute name: ${name}`);
    return attrValidationCache[name] = !isUnsafe;
}
const propsToAttrMap = {
    acceptCharset: "accept-charset",
    className: "class",
    htmlFor: "for",
    httpEquiv: "http-equiv"
};
/**
 * CSS properties that accept plain numbers
 */ const isNoUnitNumericStyleProp = /*#__PURE__*/ makeMap(`animation-iteration-count,border-image-outset,border-image-slice,` + `border-image-width,box-flex,box-flex-group,box-ordinal-group,column-count,` + `columns,flex,flex-grow,flex-positive,flex-shrink,flex-negative,flex-order,` + `grid-row,grid-row-end,grid-row-span,grid-row-start,grid-column,` + `grid-column-end,grid-column-span,grid-column-start,font-weight,line-clamp,` + `line-height,opacity,order,orphans,tab-size,widows,z-index,zoom,` + // SVG
`fill-opacity,flood-opacity,stop-opacity,stroke-dasharray,stroke-dashoffset,` + `stroke-miterlimit,stroke-opacity,stroke-width`);
/**
 * Known attributes, this is used for stringification of runtime static nodes
 * so that we don't stringify bindings that cannot be set from HTML.
 * Don't also forget to allow `data-*` and `aria-*`!
 * Generated from https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes
 */ const isKnownHtmlAttr = /*#__PURE__*/ makeMap(`accept,accept-charset,accesskey,action,align,allow,alt,async,` + `autocapitalize,autocomplete,autofocus,autoplay,background,bgcolor,` + `border,buffered,capture,challenge,charset,checked,cite,class,code,` + `codebase,color,cols,colspan,content,contenteditable,contextmenu,controls,` + `coords,crossorigin,csp,data,datetime,decoding,default,defer,dir,dirname,` + `disabled,download,draggable,dropzone,enctype,enterkeyhint,for,form,` + `formaction,formenctype,formmethod,formnovalidate,formtarget,headers,` + `height,hidden,high,href,hreflang,http-equiv,icon,id,importance,integrity,` + `ismap,itemprop,keytype,kind,label,lang,language,loading,list,loop,low,` + `manifest,max,maxlength,minlength,media,min,multiple,muted,name,novalidate,` + `open,optimum,pattern,ping,placeholder,poster,preload,radiogroup,readonly,` + `referrerpolicy,rel,required,reversed,rows,rowspan,sandbox,scope,scoped,` + `selected,shape,size,sizes,slot,span,spellcheck,src,srcdoc,srclang,srcset,` + `start,step,style,summary,tabindex,target,title,translate,type,usemap,` + `value,width,wrap`);
/**
 * Generated from https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute
 */ const isKnownSvgAttr = /*#__PURE__*/ makeMap(`xmlns,accent-height,accumulate,additive,alignment-baseline,alphabetic,amplitude,` + `arabic-form,ascent,attributeName,attributeType,azimuth,baseFrequency,` + `baseline-shift,baseProfile,bbox,begin,bias,by,calcMode,cap-height,class,` + `clip,clipPathUnits,clip-path,clip-rule,color,color-interpolation,` + `color-interpolation-filters,color-profile,color-rendering,` + `contentScriptType,contentStyleType,crossorigin,cursor,cx,cy,d,decelerate,` + `descent,diffuseConstant,direction,display,divisor,dominant-baseline,dur,dx,` + `dy,edgeMode,elevation,enable-background,end,exponent,fill,fill-opacity,` + `fill-rule,filter,filterRes,filterUnits,flood-color,flood-opacity,` + `font-family,font-size,font-size-adjust,font-stretch,font-style,` + `font-variant,font-weight,format,from,fr,fx,fy,g1,g2,glyph-name,` + `glyph-orientation-horizontal,glyph-orientation-vertical,glyphRef,` + `gradientTransform,gradientUnits,hanging,height,href,hreflang,horiz-adv-x,` + `horiz-origin-x,id,ideographic,image-rendering,in,in2,intercept,k,k1,k2,k3,` + `k4,kernelMatrix,kernelUnitLength,kerning,keyPoints,keySplines,keyTimes,` + `lang,lengthAdjust,letter-spacing,lighting-color,limitingConeAngle,local,` + `marker-end,marker-mid,marker-start,markerHeight,markerUnits,markerWidth,` + `mask,maskContentUnits,maskUnits,mathematical,max,media,method,min,mode,` + `name,numOctaves,offset,opacity,operator,order,orient,orientation,origin,` + `overflow,overline-position,overline-thickness,panose-1,paint-order,path,` + `pathLength,patternContentUnits,patternTransform,patternUnits,ping,` + `pointer-events,points,pointsAtX,pointsAtY,pointsAtZ,preserveAlpha,` + `preserveAspectRatio,primitiveUnits,r,radius,referrerPolicy,refX,refY,rel,` + `rendering-intent,repeatCount,repeatDur,requiredExtensions,requiredFeatures,` + `restart,result,rotate,rx,ry,scale,seed,shape-rendering,slope,spacing,` + `specularConstant,specularExponent,speed,spreadMethod,startOffset,` + `stdDeviation,stemh,stemv,stitchTiles,stop-color,stop-opacity,` + `strikethrough-position,strikethrough-thickness,string,stroke,` + `stroke-dasharray,stroke-dashoffset,stroke-linecap,stroke-linejoin,` + `stroke-miterlimit,stroke-opacity,stroke-width,style,surfaceScale,` + `systemLanguage,tabindex,tableValues,target,targetX,targetY,text-anchor,` + `text-decoration,text-rendering,textLength,to,transform,transform-origin,` + `type,u1,u2,underline-position,underline-thickness,unicode,unicode-bidi,` + `unicode-range,units-per-em,v-alphabetic,v-hanging,v-ideographic,` + `v-mathematical,values,vector-effect,version,vert-adv-y,vert-origin-x,` + `vert-origin-y,viewBox,viewTarget,visibility,width,widths,word-spacing,` + `writing-mode,x,x-height,x1,x2,xChannelSelector,xlink:actuate,xlink:arcrole,` + `xlink:href,xlink:role,xlink:show,xlink:title,xlink:type,xml:base,xml:lang,` + `xml:space,y,y1,y2,yChannelSelector,z,zoomAndPan`);
function normalizeStyle(value) {
    if (isArray(value)) {
        const res = {};
        for(let i = 0; i < value.length; i++){
            const item = value[i];
            const normalized = isString(item) ? parseStringStyle(item) : normalizeStyle(item);
            if (normalized) for(const key in normalized)res[key] = normalized[key];
        }
        return res;
    } else if (isString(value)) return value;
    else if (isObject(value)) return value;
}
const listDelimiterRE = /;(?![^(]*\))/g;
const propertyDelimiterRE = /:(.+)/;
function parseStringStyle(cssText) {
    const ret = {};
    cssText.split(listDelimiterRE).forEach((item)=>{
        if (item) {
            const tmp = item.split(propertyDelimiterRE);
            tmp.length > 1 && (ret[tmp[0].trim()] = tmp[1].trim());
        }
    });
    return ret;
}
function stringifyStyle(styles) {
    let ret = "";
    if (!styles || isString(styles)) return ret;
    for(const key in styles){
        const value = styles[key];
        const normalizedKey = key.startsWith(`--`) ? key : hyphenate(key);
        if (isString(value) || typeof value === "number" && isNoUnitNumericStyleProp(normalizedKey)) // only render valid values
        ret += `${normalizedKey}:${value};`;
    }
    return ret;
}
function normalizeClass(value) {
    let res = "";
    if (isString(value)) res = value;
    else if (isArray(value)) for(let i = 0; i < value.length; i++){
        const normalized = normalizeClass(value[i]);
        if (normalized) res += normalized + " ";
    }
    else if (isObject(value)) {
        for(const name in value)if (value[name]) res += name + " ";
    }
    return res.trim();
}
function normalizeProps(props) {
    if (!props) return null;
    let { class: klass , style  } = props;
    if (klass && !isString(klass)) props.class = normalizeClass(klass);
    if (style) props.style = normalizeStyle(style);
    return props;
}
// These tag configs are shared between compiler-dom and runtime-dom, so they
// https://developer.mozilla.org/en-US/docs/Web/HTML/Element
const HTML_TAGS = "html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,summary,template,blockquote,iframe,tfoot";
// https://developer.mozilla.org/en-US/docs/Web/SVG/Element
const SVG_TAGS = "svg,animate,animateMotion,animateTransform,circle,clipPath,color-profile,defs,desc,discard,ellipse,feBlend,feColorMatrix,feComponentTransfer,feComposite,feConvolveMatrix,feDiffuseLighting,feDisplacementMap,feDistanceLight,feDropShadow,feFlood,feFuncA,feFuncB,feFuncG,feFuncR,feGaussianBlur,feImage,feMerge,feMergeNode,feMorphology,feOffset,fePointLight,feSpecularLighting,feSpotLight,feTile,feTurbulence,filter,foreignObject,g,hatch,hatchpath,image,line,linearGradient,marker,mask,mesh,meshgradient,meshpatch,meshrow,metadata,mpath,path,pattern,polygon,polyline,radialGradient,rect,set,solidcolor,stop,switch,symbol,text,textPath,title,tspan,unknown,use,view";
const VOID_TAGS = "area,base,br,col,embed,hr,img,input,link,meta,param,source,track,wbr";
const isHTMLTag = /*#__PURE__*/ makeMap(HTML_TAGS);
const isSVGTag = /*#__PURE__*/ makeMap(SVG_TAGS);
const isVoidTag = /*#__PURE__*/ makeMap(VOID_TAGS);
const escapeRE = /["'&<>]/;
function escapeHtml(string) {
    const str = "" + string;
    const match = escapeRE.exec(str);
    if (!match) return str;
    let html = "";
    let escaped;
    let index;
    let lastIndex = 0;
    for(index = match.index; index < str.length; index++){
        switch(str.charCodeAt(index)){
            case 34:
                escaped = "&quot;";
                break;
            case 38:
                escaped = "&amp;";
                break;
            case 39:
                escaped = "&#39;";
                break;
            case 60:
                escaped = "&lt;";
                break;
            case 62:
                escaped = "&gt;";
                break;
            default:
                continue;
        }
        if (lastIndex !== index) html += str.substring(lastIndex, index);
        lastIndex = index + 1;
        html += escaped;
    }
    return lastIndex !== index ? html + str.substring(lastIndex, index) : html;
}
// https://www.w3.org/TR/html52/syntax.html#comments
const commentStripRE = /^-?>|<!--|-->|--!>|<!-$/g;
function escapeHtmlComment(src) {
    return src.replace(commentStripRE, "");
}
function looseCompareArrays(a, b) {
    if (a.length !== b.length) return false;
    let equal = true;
    for(let i = 0; equal && i < a.length; i++)equal = looseEqual(a[i], b[i]);
    return equal;
}
function looseEqual(a, b) {
    if (a === b) return true;
    let aValidType = isDate(a);
    let bValidType = isDate(b);
    if (aValidType || bValidType) return aValidType && bValidType ? a.getTime() === b.getTime() : false;
    aValidType = isArray(a);
    bValidType = isArray(b);
    if (aValidType || bValidType) return aValidType && bValidType ? looseCompareArrays(a, b) : false;
    aValidType = isObject(a);
    bValidType = isObject(b);
    if (aValidType || bValidType) {
        /* istanbul ignore if: this if will probably never be called */ if (!aValidType || !bValidType) return false;
        const aKeysCount = Object.keys(a).length;
        const bKeysCount = Object.keys(b).length;
        if (aKeysCount !== bKeysCount) return false;
        for(const key in a){
            const aHasKey = a.hasOwnProperty(key);
            const bHasKey = b.hasOwnProperty(key);
            if (aHasKey && !bHasKey || !aHasKey && bHasKey || !looseEqual(a[key], b[key])) return false;
        }
    }
    return String(a) === String(b);
}
function looseIndexOf(arr, val) {
    return arr.findIndex((item)=>looseEqual(item, val));
}
/**
 * For converting {{ interpolation }} values to displayed strings.
 * @private
 */ const toDisplayString = (val)=>{
    return val == null ? "" : isArray(val) || isObject(val) && (val.toString === objectToString || !isFunction(val.toString)) ? JSON.stringify(val, replacer, 2) : String(val);
};
const replacer = (_key, val1)=>{
    // can't use isRef here since @vue/shared has no deps
    if (val1 && val1.__v_isRef) return replacer(_key, val1.value);
    else if (isMap(val1)) return {
        [`Map(${val1.size})`]: [
            ...val1.entries()
        ].reduce((entries, [key, val])=>{
            entries[`${key} =>`] = val;
            return entries;
        }, {})
    };
    else if (isSet(val1)) return {
        [`Set(${val1.size})`]: [
            ...val1.values()
        ]
    };
    else if (isObject(val1) && !isArray(val1) && !isPlainObject(val1)) return String(val1);
    return val1;
};
/**
 * List of @babel/parser plugins that are used for template expression
 * transforms and SFC script transforms. By default we enable proposals slated
 * for ES2020. This will need to be updated as the spec moves forward.
 * Full list at https://babeljs.io/docs/en/next/babel-parser#plugins
 */ const babelParserDefaultPlugins = [
    "bigInt",
    "optionalChaining",
    "nullishCoalescingOperator"
];
const EMPTY_OBJ = Object.freeze({});
const EMPTY_ARR = Object.freeze([]);
const NOOP = ()=>{};
/**
 * Always return false.
 */ const NO = ()=>false;
const onRE = /^on[^a-z]/;
const isOn = (key)=>onRE.test(key);
const isModelListener = (key)=>key.startsWith("onUpdate:");
const extend = Object.assign;
const remove = (arr, el)=>{
    const i = arr.indexOf(el);
    if (i > -1) arr.splice(i, 1);
};
const hasOwnProperty = Object.prototype.hasOwnProperty;
const hasOwn = (val, key)=>hasOwnProperty.call(val, key);
const isArray = Array.isArray;
const isMap = (val)=>toTypeString(val) === "[object Map]";
const isSet = (val)=>toTypeString(val) === "[object Set]";
const isDate = (val)=>val instanceof Date;
const isFunction = (val)=>typeof val === "function";
const isString = (val)=>typeof val === "string";
const isSymbol = (val)=>typeof val === "symbol";
const isObject = (val)=>val !== null && typeof val === "object";
const isPromise = (val)=>{
    return isObject(val) && isFunction(val.then) && isFunction(val.catch);
};
const objectToString = Object.prototype.toString;
const toTypeString = (value)=>objectToString.call(value);
const toRawType = (value)=>{
    // extract "RawType" from strings like "[object RawType]"
    return toTypeString(value).slice(8, -1);
};
const isPlainObject = (val)=>toTypeString(val) === "[object Object]";
const isIntegerKey = (key)=>isString(key) && key !== "NaN" && key[0] !== "-" && "" + parseInt(key, 10) === key;
const isReservedProp = /*#__PURE__*/ makeMap(// the leading comma is intentional so empty string "" is also included
",key,ref,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted");
const cacheStringFunction = (fn)=>{
    const cache = Object.create(null);
    return (str)=>{
        const hit = cache[str];
        return hit || (cache[str] = fn(str));
    };
};
const camelizeRE = /-(\w)/g;
/**
 * @private
 */ const camelize = cacheStringFunction((str)=>{
    return str.replace(camelizeRE, (_, c)=>c ? c.toUpperCase() : "");
});
const hyphenateRE = /\B([A-Z])/g;
/**
 * @private
 */ const hyphenate = cacheStringFunction((str)=>str.replace(hyphenateRE, "-$1").toLowerCase());
/**
 * @private
 */ const capitalize = cacheStringFunction((str)=>str.charAt(0).toUpperCase() + str.slice(1));
/**
 * @private
 */ const toHandlerKey = cacheStringFunction((str)=>str ? `on${capitalize(str)}` : ``);
// compare whether a value has changed, accounting for NaN.
const hasChanged = (value, oldValue)=>!Object.is(value, oldValue);
const invokeArrayFns = (fns, arg)=>{
    for(let i = 0; i < fns.length; i++)fns[i](arg);
};
const def = (obj, key, value)=>{
    Object.defineProperty(obj, key, {
        configurable: true,
        enumerable: false,
        value
    });
};
const toNumber = (val)=>{
    const n = parseFloat(val);
    return isNaN(n) ? val : n;
};
let _globalThis;
const getGlobalThis = ()=>{
    return _globalThis || (_globalThis = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : {});
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1JlMT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "EMPTY_ARR", ()=>EMPTY_ARR);
parcelHelpers.export(exports, "EMPTY_OBJ", ()=>EMPTY_OBJ);
parcelHelpers.export(exports, "NO", ()=>NO);
parcelHelpers.export(exports, "NOOP", ()=>NOOP);
parcelHelpers.export(exports, "PatchFlagNames", ()=>PatchFlagNames);
parcelHelpers.export(exports, "babelParserDefaultPlugins", ()=>babelParserDefaultPlugins);
parcelHelpers.export(exports, "camelize", ()=>camelize);
parcelHelpers.export(exports, "capitalize", ()=>capitalize);
parcelHelpers.export(exports, "def", ()=>def);
parcelHelpers.export(exports, "escapeHtml", ()=>escapeHtml);
parcelHelpers.export(exports, "escapeHtmlComment", ()=>escapeHtmlComment);
parcelHelpers.export(exports, "extend", ()=>extend);
parcelHelpers.export(exports, "generateCodeFrame", ()=>generateCodeFrame);
parcelHelpers.export(exports, "getGlobalThis", ()=>getGlobalThis);
parcelHelpers.export(exports, "hasChanged", ()=>hasChanged);
parcelHelpers.export(exports, "hasOwn", ()=>hasOwn);
parcelHelpers.export(exports, "hyphenate", ()=>hyphenate);
parcelHelpers.export(exports, "includeBooleanAttr", ()=>includeBooleanAttr);
parcelHelpers.export(exports, "invokeArrayFns", ()=>invokeArrayFns);
parcelHelpers.export(exports, "isArray", ()=>isArray);
parcelHelpers.export(exports, "isBooleanAttr", ()=>isBooleanAttr);
parcelHelpers.export(exports, "isDate", ()=>isDate);
parcelHelpers.export(exports, "isFunction", ()=>isFunction);
parcelHelpers.export(exports, "isGloballyWhitelisted", ()=>isGloballyWhitelisted);
parcelHelpers.export(exports, "isHTMLTag", ()=>isHTMLTag);
parcelHelpers.export(exports, "isIntegerKey", ()=>isIntegerKey);
parcelHelpers.export(exports, "isKnownHtmlAttr", ()=>isKnownHtmlAttr);
parcelHelpers.export(exports, "isKnownSvgAttr", ()=>isKnownSvgAttr);
parcelHelpers.export(exports, "isMap", ()=>isMap);
parcelHelpers.export(exports, "isModelListener", ()=>isModelListener);
parcelHelpers.export(exports, "isNoUnitNumericStyleProp", ()=>isNoUnitNumericStyleProp);
parcelHelpers.export(exports, "isObject", ()=>isObject);
parcelHelpers.export(exports, "isOn", ()=>isOn);
parcelHelpers.export(exports, "isPlainObject", ()=>isPlainObject);
parcelHelpers.export(exports, "isPromise", ()=>isPromise);
parcelHelpers.export(exports, "isReservedProp", ()=>isReservedProp);
parcelHelpers.export(exports, "isSSRSafeAttrName", ()=>isSSRSafeAttrName);
parcelHelpers.export(exports, "isSVGTag", ()=>isSVGTag);
parcelHelpers.export(exports, "isSet", ()=>isSet);
parcelHelpers.export(exports, "isSpecialBooleanAttr", ()=>isSpecialBooleanAttr);
parcelHelpers.export(exports, "isString", ()=>isString);
parcelHelpers.export(exports, "isSymbol", ()=>isSymbol);
parcelHelpers.export(exports, "isVoidTag", ()=>isVoidTag);
parcelHelpers.export(exports, "looseEqual", ()=>looseEqual);
parcelHelpers.export(exports, "looseIndexOf", ()=>looseIndexOf);
parcelHelpers.export(exports, "makeMap", ()=>makeMap);
parcelHelpers.export(exports, "normalizeClass", ()=>normalizeClass);
parcelHelpers.export(exports, "normalizeProps", ()=>normalizeProps);
parcelHelpers.export(exports, "normalizeStyle", ()=>normalizeStyle);
parcelHelpers.export(exports, "objectToString", ()=>objectToString);
parcelHelpers.export(exports, "parseStringStyle", ()=>parseStringStyle);
parcelHelpers.export(exports, "propsToAttrMap", ()=>propsToAttrMap);
parcelHelpers.export(exports, "remove", ()=>remove);
parcelHelpers.export(exports, "slotFlagsText", ()=>slotFlagsText);
parcelHelpers.export(exports, "stringifyStyle", ()=>stringifyStyle);
parcelHelpers.export(exports, "toDisplayString", ()=>toDisplayString);
parcelHelpers.export(exports, "toHandlerKey", ()=>toHandlerKey);
parcelHelpers.export(exports, "toNumber", ()=>toNumber);
parcelHelpers.export(exports, "toRawType", ()=>toRawType);
parcelHelpers.export(exports, "toTypeString", ()=>toTypeString);
var global = arguments[3];
/**
 * Make a map and return a function for checking if a key
 * is in that map.
 * IMPORTANT: all calls of this function must be prefixed with
 * \/\*#\_\_PURE\_\_\*\/
 * So that rollup can tree-shake them if necessary.
 */ function makeMap(str, expectsLowerCase) {
    const map = Object.create(null);
    const list = str.split(",");
    for(let i = 0; i < list.length; i++)map[list[i]] = true;
    return expectsLowerCase ? (val)=>!!map[val.toLowerCase()] : (val)=>!!map[val];
}
/**
 * dev only flag -> name mapping
 */ const PatchFlagNames = {
    [1 /* TEXT */ ]: `TEXT`,
    [2 /* CLASS */ ]: `CLASS`,
    [4 /* STYLE */ ]: `STYLE`,
    [8 /* PROPS */ ]: `PROPS`,
    [16 /* FULL_PROPS */ ]: `FULL_PROPS`,
    [32 /* HYDRATE_EVENTS */ ]: `HYDRATE_EVENTS`,
    [64 /* STABLE_FRAGMENT */ ]: `STABLE_FRAGMENT`,
    [128 /* KEYED_FRAGMENT */ ]: `KEYED_FRAGMENT`,
    [256 /* UNKEYED_FRAGMENT */ ]: `UNKEYED_FRAGMENT`,
    [512 /* NEED_PATCH */ ]: `NEED_PATCH`,
    [1024 /* DYNAMIC_SLOTS */ ]: `DYNAMIC_SLOTS`,
    [2048 /* DEV_ROOT_FRAGMENT */ ]: `DEV_ROOT_FRAGMENT`,
    [-1 /* HOISTED */ ]: `HOISTED`,
    [-2 /* BAIL */ ]: `BAIL`
};
/**
 * Dev only
 */ const slotFlagsText = {
    [1 /* STABLE */ ]: "STABLE",
    [2 /* DYNAMIC */ ]: "DYNAMIC",
    [3 /* FORWARDED */ ]: "FORWARDED"
};
const GLOBALS_WHITE_LISTED = "Infinity,undefined,NaN,isFinite,isNaN,parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,BigInt";
const isGloballyWhitelisted = /*#__PURE__*/ makeMap(GLOBALS_WHITE_LISTED);
const range = 2;
function generateCodeFrame(source, start = 0, end = source.length) {
    // Split the content into individual lines but capture the newline sequence
    // that separated each line. This is important because the actual sequence is
    // needed to properly take into account the full line length for offset
    // comparison
    let lines = source.split(/(\r?\n)/);
    // Separate the lines and newline sequences into separate arrays for easier referencing
    const newlineSequences = lines.filter((_, idx)=>idx % 2 === 1);
    lines = lines.filter((_, idx)=>idx % 2 === 0);
    let count = 0;
    const res = [];
    for(let i = 0; i < lines.length; i++){
        count += lines[i].length + (newlineSequences[i] && newlineSequences[i].length || 0);
        if (count >= start) {
            for(let j = i - range; j <= i + range || end > count; j++){
                if (j < 0 || j >= lines.length) continue;
                const line = j + 1;
                res.push(`${line}${" ".repeat(Math.max(3 - String(line).length, 0))}|  ${lines[j]}`);
                const lineLength = lines[j].length;
                const newLineSeqLength = newlineSequences[j] && newlineSequences[j].length || 0;
                if (j === i) {
                    // push underline
                    const pad = start - (count - (lineLength + newLineSeqLength));
                    const length = Math.max(1, end > count ? lineLength - pad : end - start);
                    res.push(`   |  ` + " ".repeat(pad) + "^".repeat(length));
                } else if (j > i) {
                    if (end > count) {
                        const length = Math.max(Math.min(end - count, lineLength), 1);
                        res.push(`   |  ` + "^".repeat(length));
                    }
                    count += lineLength + newLineSeqLength;
                }
            }
            break;
        }
    }
    return res.join("\n");
}
/**
 * On the client we only need to offer special cases for boolean attributes that
 * have different names from their corresponding dom properties:
 * - itemscope -> N/A
 * - allowfullscreen -> allowFullscreen
 * - formnovalidate -> formNoValidate
 * - ismap -> isMap
 * - nomodule -> noModule
 * - novalidate -> noValidate
 * - readonly -> readOnly
 */ const specialBooleanAttrs = `itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly`;
const isSpecialBooleanAttr = /*#__PURE__*/ makeMap(specialBooleanAttrs);
/**
 * The full list is needed during SSR to produce the correct initial markup.
 */ const isBooleanAttr = /*#__PURE__*/ makeMap(specialBooleanAttrs + `,async,autofocus,autoplay,controls,default,defer,disabled,hidden,` + `loop,open,required,reversed,scoped,seamless,` + `checked,muted,multiple,selected`);
/**
 * Boolean attributes should be included if the value is truthy or ''.
 * e.g. <select multiple> compiles to { multiple: '' }
 */ function includeBooleanAttr(value) {
    return !!value || value === "";
}
const unsafeAttrCharRE = /[>/="'\u0009\u000a\u000c\u0020]/;
const attrValidationCache = {};
function isSSRSafeAttrName(name) {
    if (attrValidationCache.hasOwnProperty(name)) return attrValidationCache[name];
    const isUnsafe = unsafeAttrCharRE.test(name);
    if (isUnsafe) console.error(`unsafe attribute name: ${name}`);
    return attrValidationCache[name] = !isUnsafe;
}
const propsToAttrMap = {
    acceptCharset: "accept-charset",
    className: "class",
    htmlFor: "for",
    httpEquiv: "http-equiv"
};
/**
 * CSS properties that accept plain numbers
 */ const isNoUnitNumericStyleProp = /*#__PURE__*/ makeMap(`animation-iteration-count,border-image-outset,border-image-slice,` + `border-image-width,box-flex,box-flex-group,box-ordinal-group,column-count,` + `columns,flex,flex-grow,flex-positive,flex-shrink,flex-negative,flex-order,` + `grid-row,grid-row-end,grid-row-span,grid-row-start,grid-column,` + `grid-column-end,grid-column-span,grid-column-start,font-weight,line-clamp,` + `line-height,opacity,order,orphans,tab-size,widows,z-index,zoom,` + // SVG
`fill-opacity,flood-opacity,stop-opacity,stroke-dasharray,stroke-dashoffset,` + `stroke-miterlimit,stroke-opacity,stroke-width`);
/**
 * Known attributes, this is used for stringification of runtime static nodes
 * so that we don't stringify bindings that cannot be set from HTML.
 * Don't also forget to allow `data-*` and `aria-*`!
 * Generated from https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes
 */ const isKnownHtmlAttr = /*#__PURE__*/ makeMap(`accept,accept-charset,accesskey,action,align,allow,alt,async,` + `autocapitalize,autocomplete,autofocus,autoplay,background,bgcolor,` + `border,buffered,capture,challenge,charset,checked,cite,class,code,` + `codebase,color,cols,colspan,content,contenteditable,contextmenu,controls,` + `coords,crossorigin,csp,data,datetime,decoding,default,defer,dir,dirname,` + `disabled,download,draggable,dropzone,enctype,enterkeyhint,for,form,` + `formaction,formenctype,formmethod,formnovalidate,formtarget,headers,` + `height,hidden,high,href,hreflang,http-equiv,icon,id,importance,integrity,` + `ismap,itemprop,keytype,kind,label,lang,language,loading,list,loop,low,` + `manifest,max,maxlength,minlength,media,min,multiple,muted,name,novalidate,` + `open,optimum,pattern,ping,placeholder,poster,preload,radiogroup,readonly,` + `referrerpolicy,rel,required,reversed,rows,rowspan,sandbox,scope,scoped,` + `selected,shape,size,sizes,slot,span,spellcheck,src,srcdoc,srclang,srcset,` + `start,step,style,summary,tabindex,target,title,translate,type,usemap,` + `value,width,wrap`);
/**
 * Generated from https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute
 */ const isKnownSvgAttr = /*#__PURE__*/ makeMap(`xmlns,accent-height,accumulate,additive,alignment-baseline,alphabetic,amplitude,` + `arabic-form,ascent,attributeName,attributeType,azimuth,baseFrequency,` + `baseline-shift,baseProfile,bbox,begin,bias,by,calcMode,cap-height,class,` + `clip,clipPathUnits,clip-path,clip-rule,color,color-interpolation,` + `color-interpolation-filters,color-profile,color-rendering,` + `contentScriptType,contentStyleType,crossorigin,cursor,cx,cy,d,decelerate,` + `descent,diffuseConstant,direction,display,divisor,dominant-baseline,dur,dx,` + `dy,edgeMode,elevation,enable-background,end,exponent,fill,fill-opacity,` + `fill-rule,filter,filterRes,filterUnits,flood-color,flood-opacity,` + `font-family,font-size,font-size-adjust,font-stretch,font-style,` + `font-variant,font-weight,format,from,fr,fx,fy,g1,g2,glyph-name,` + `glyph-orientation-horizontal,glyph-orientation-vertical,glyphRef,` + `gradientTransform,gradientUnits,hanging,height,href,hreflang,horiz-adv-x,` + `horiz-origin-x,id,ideographic,image-rendering,in,in2,intercept,k,k1,k2,k3,` + `k4,kernelMatrix,kernelUnitLength,kerning,keyPoints,keySplines,keyTimes,` + `lang,lengthAdjust,letter-spacing,lighting-color,limitingConeAngle,local,` + `marker-end,marker-mid,marker-start,markerHeight,markerUnits,markerWidth,` + `mask,maskContentUnits,maskUnits,mathematical,max,media,method,min,mode,` + `name,numOctaves,offset,opacity,operator,order,orient,orientation,origin,` + `overflow,overline-position,overline-thickness,panose-1,paint-order,path,` + `pathLength,patternContentUnits,patternTransform,patternUnits,ping,` + `pointer-events,points,pointsAtX,pointsAtY,pointsAtZ,preserveAlpha,` + `preserveAspectRatio,primitiveUnits,r,radius,referrerPolicy,refX,refY,rel,` + `rendering-intent,repeatCount,repeatDur,requiredExtensions,requiredFeatures,` + `restart,result,rotate,rx,ry,scale,seed,shape-rendering,slope,spacing,` + `specularConstant,specularExponent,speed,spreadMethod,startOffset,` + `stdDeviation,stemh,stemv,stitchTiles,stop-color,stop-opacity,` + `strikethrough-position,strikethrough-thickness,string,stroke,` + `stroke-dasharray,stroke-dashoffset,stroke-linecap,stroke-linejoin,` + `stroke-miterlimit,stroke-opacity,stroke-width,style,surfaceScale,` + `systemLanguage,tabindex,tableValues,target,targetX,targetY,text-anchor,` + `text-decoration,text-rendering,textLength,to,transform,transform-origin,` + `type,u1,u2,underline-position,underline-thickness,unicode,unicode-bidi,` + `unicode-range,units-per-em,v-alphabetic,v-hanging,v-ideographic,` + `v-mathematical,values,vector-effect,version,vert-adv-y,vert-origin-x,` + `vert-origin-y,viewBox,viewTarget,visibility,width,widths,word-spacing,` + `writing-mode,x,x-height,x1,x2,xChannelSelector,xlink:actuate,xlink:arcrole,` + `xlink:href,xlink:role,xlink:show,xlink:title,xlink:type,xml:base,xml:lang,` + `xml:space,y,y1,y2,yChannelSelector,z,zoomAndPan`);
function normalizeStyle(value) {
    if (isArray(value)) {
        const res = {};
        for(let i = 0; i < value.length; i++){
            const item = value[i];
            const normalized = isString(item) ? parseStringStyle(item) : normalizeStyle(item);
            if (normalized) for(const key in normalized)res[key] = normalized[key];
        }
        return res;
    } else if (isString(value)) return value;
    else if (isObject(value)) return value;
}
const listDelimiterRE = /;(?![^(]*\))/g;
const propertyDelimiterRE = /:(.+)/;
function parseStringStyle(cssText) {
    const ret = {};
    cssText.split(listDelimiterRE).forEach((item)=>{
        if (item) {
            const tmp = item.split(propertyDelimiterRE);
            tmp.length > 1 && (ret[tmp[0].trim()] = tmp[1].trim());
        }
    });
    return ret;
}
function stringifyStyle(styles) {
    let ret = "";
    if (!styles || isString(styles)) return ret;
    for(const key in styles){
        const value = styles[key];
        const normalizedKey = key.startsWith(`--`) ? key : hyphenate(key);
        if (isString(value) || typeof value === "number" && isNoUnitNumericStyleProp(normalizedKey)) // only render valid values
        ret += `${normalizedKey}:${value};`;
    }
    return ret;
}
function normalizeClass(value) {
    let res = "";
    if (isString(value)) res = value;
    else if (isArray(value)) for(let i = 0; i < value.length; i++){
        const normalized = normalizeClass(value[i]);
        if (normalized) res += normalized + " ";
    }
    else if (isObject(value)) {
        for(const name in value)if (value[name]) res += name + " ";
    }
    return res.trim();
}
function normalizeProps(props) {
    if (!props) return null;
    let { class: klass , style  } = props;
    if (klass && !isString(klass)) props.class = normalizeClass(klass);
    if (style) props.style = normalizeStyle(style);
    return props;
}
// These tag configs are shared between compiler-dom and runtime-dom, so they
// https://developer.mozilla.org/en-US/docs/Web/HTML/Element
const HTML_TAGS = "html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,summary,template,blockquote,iframe,tfoot";
// https://developer.mozilla.org/en-US/docs/Web/SVG/Element
const SVG_TAGS = "svg,animate,animateMotion,animateTransform,circle,clipPath,color-profile,defs,desc,discard,ellipse,feBlend,feColorMatrix,feComponentTransfer,feComposite,feConvolveMatrix,feDiffuseLighting,feDisplacementMap,feDistanceLight,feDropShadow,feFlood,feFuncA,feFuncB,feFuncG,feFuncR,feGaussianBlur,feImage,feMerge,feMergeNode,feMorphology,feOffset,fePointLight,feSpecularLighting,feSpotLight,feTile,feTurbulence,filter,foreignObject,g,hatch,hatchpath,image,line,linearGradient,marker,mask,mesh,meshgradient,meshpatch,meshrow,metadata,mpath,path,pattern,polygon,polyline,radialGradient,rect,set,solidcolor,stop,switch,symbol,text,textPath,title,tspan,unknown,use,view";
const VOID_TAGS = "area,base,br,col,embed,hr,img,input,link,meta,param,source,track,wbr";
const isHTMLTag = /*#__PURE__*/ makeMap(HTML_TAGS);
const isSVGTag = /*#__PURE__*/ makeMap(SVG_TAGS);
const isVoidTag = /*#__PURE__*/ makeMap(VOID_TAGS);
const escapeRE = /["'&<>]/;
function escapeHtml(string) {
    const str = "" + string;
    const match = escapeRE.exec(str);
    if (!match) return str;
    let html = "";
    let escaped;
    let index;
    let lastIndex = 0;
    for(index = match.index; index < str.length; index++){
        switch(str.charCodeAt(index)){
            case 34:
                escaped = "&quot;";
                break;
            case 38:
                escaped = "&amp;";
                break;
            case 39:
                escaped = "&#39;";
                break;
            case 60:
                escaped = "&lt;";
                break;
            case 62:
                escaped = "&gt;";
                break;
            default:
                continue;
        }
        if (lastIndex !== index) html += str.substring(lastIndex, index);
        lastIndex = index + 1;
        html += escaped;
    }
    return lastIndex !== index ? html + str.substring(lastIndex, index) : html;
}
// https://www.w3.org/TR/html52/syntax.html#comments
const commentStripRE = /^-?>|<!--|-->|--!>|<!-$/g;
function escapeHtmlComment(src) {
    return src.replace(commentStripRE, "");
}
function looseCompareArrays(a, b) {
    if (a.length !== b.length) return false;
    let equal = true;
    for(let i = 0; equal && i < a.length; i++)equal = looseEqual(a[i], b[i]);
    return equal;
}
function looseEqual(a, b) {
    if (a === b) return true;
    let aValidType = isDate(a);
    let bValidType = isDate(b);
    if (aValidType || bValidType) return aValidType && bValidType ? a.getTime() === b.getTime() : false;
    aValidType = isArray(a);
    bValidType = isArray(b);
    if (aValidType || bValidType) return aValidType && bValidType ? looseCompareArrays(a, b) : false;
    aValidType = isObject(a);
    bValidType = isObject(b);
    if (aValidType || bValidType) {
        /* istanbul ignore if: this if will probably never be called */ if (!aValidType || !bValidType) return false;
        const aKeysCount = Object.keys(a).length;
        const bKeysCount = Object.keys(b).length;
        if (aKeysCount !== bKeysCount) return false;
        for(const key in a){
            const aHasKey = a.hasOwnProperty(key);
            const bHasKey = b.hasOwnProperty(key);
            if (aHasKey && !bHasKey || !aHasKey && bHasKey || !looseEqual(a[key], b[key])) return false;
        }
    }
    return String(a) === String(b);
}
function looseIndexOf(arr, val) {
    return arr.findIndex((item)=>looseEqual(item, val));
}
/**
 * For converting {{ interpolation }} values to displayed strings.
 * @private
 */ const toDisplayString = (val)=>{
    return val == null ? "" : isArray(val) || isObject(val) && (val.toString === objectToString || !isFunction(val.toString)) ? JSON.stringify(val, replacer, 2) : String(val);
};
const replacer = (_key, val1)=>{
    // can't use isRef here since @vue/shared has no deps
    if (val1 && val1.__v_isRef) return replacer(_key, val1.value);
    else if (isMap(val1)) return {
        [`Map(${val1.size})`]: [
            ...val1.entries()
        ].reduce((entries, [key, val])=>{
            entries[`${key} =>`] = val;
            return entries;
        }, {})
    };
    else if (isSet(val1)) return {
        [`Set(${val1.size})`]: [
            ...val1.values()
        ]
    };
    else if (isObject(val1) && !isArray(val1) && !isPlainObject(val1)) return String(val1);
    return val1;
};
/**
 * List of @babel/parser plugins that are used for template expression
 * transforms and SFC script transforms. By default we enable proposals slated
 * for ES2020. This will need to be updated as the spec moves forward.
 * Full list at https://babeljs.io/docs/en/next/babel-parser#plugins
 */ const babelParserDefaultPlugins = [
    "bigInt",
    "optionalChaining",
    "nullishCoalescingOperator"
];
const EMPTY_OBJ = Object.freeze({});
const EMPTY_ARR = Object.freeze([]);
const NOOP = ()=>{};
/**
 * Always return false.
 */ const NO = ()=>false;
const onRE = /^on[^a-z]/;
const isOn = (key)=>onRE.test(key);
const isModelListener = (key)=>key.startsWith("onUpdate:");
const extend = Object.assign;
const remove = (arr, el)=>{
    const i = arr.indexOf(el);
    if (i > -1) arr.splice(i, 1);
};
const hasOwnProperty = Object.prototype.hasOwnProperty;
const hasOwn = (val, key)=>hasOwnProperty.call(val, key);
const isArray = Array.isArray;
const isMap = (val)=>toTypeString(val) === "[object Map]";
const isSet = (val)=>toTypeString(val) === "[object Set]";
const isDate = (val)=>val instanceof Date;
const isFunction = (val)=>typeof val === "function";
const isString = (val)=>typeof val === "string";
const isSymbol = (val)=>typeof val === "symbol";
const isObject = (val)=>val !== null && typeof val === "object";
const isPromise = (val)=>{
    return isObject(val) && isFunction(val.then) && isFunction(val.catch);
};
const objectToString = Object.prototype.toString;
const toTypeString = (value)=>objectToString.call(value);
const toRawType = (value)=>{
    // extract "RawType" from strings like "[object RawType]"
    return toTypeString(value).slice(8, -1);
};
const isPlainObject = (val)=>toTypeString(val) === "[object Object]";
const isIntegerKey = (key)=>isString(key) && key !== "NaN" && key[0] !== "-" && "" + parseInt(key, 10) === key;
const isReservedProp = /*#__PURE__*/ makeMap(// the leading comma is intentional so empty string "" is also included
",key,ref,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted");
const cacheStringFunction = (fn)=>{
    const cache = Object.create(null);
    return (str)=>{
        const hit = cache[str];
        return hit || (cache[str] = fn(str));
    };
};
const camelizeRE = /-(\w)/g;
/**
 * @private
 */ const camelize = cacheStringFunction((str)=>{
    return str.replace(camelizeRE, (_, c)=>c ? c.toUpperCase() : "");
});
const hyphenateRE = /\B([A-Z])/g;
/**
 * @private
 */ const hyphenate = cacheStringFunction((str)=>str.replace(hyphenateRE, "-$1").toLowerCase());
/**
 * @private
 */ const capitalize = cacheStringFunction((str)=>str.charAt(0).toUpperCase() + str.slice(1));
/**
 * @private
 */ const toHandlerKey = cacheStringFunction((str)=>str ? `on${capitalize(str)}` : ``);
// compare whether a value has changed, accounting for NaN.
const hasChanged = (value, oldValue)=>!Object.is(value, oldValue);
const invokeArrayFns = (fns, arg)=>{
    for(let i = 0; i < fns.length; i++)fns[i](arg);
};
const def = (obj, key, value)=>{
    Object.defineProperty(obj, key, {
        configurable: true,
        enumerable: false,
        value
    });
};
const toNumber = (val)=>{
    const n = parseFloat(val);
    return isNaN(n) ? val : n;
};
let _globalThis;
const getGlobalThis = ()=>{
    return _globalThis || (_globalThis = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : {});
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"vz52D":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "EMPTY_ARR", ()=>EMPTY_ARR);
parcelHelpers.export(exports, "EMPTY_OBJ", ()=>EMPTY_OBJ);
parcelHelpers.export(exports, "NO", ()=>NO);
parcelHelpers.export(exports, "NOOP", ()=>NOOP);
parcelHelpers.export(exports, "PatchFlagNames", ()=>PatchFlagNames);
parcelHelpers.export(exports, "babelParserDefaultPlugins", ()=>babelParserDefaultPlugins);
parcelHelpers.export(exports, "camelize", ()=>camelize);
parcelHelpers.export(exports, "capitalize", ()=>capitalize);
parcelHelpers.export(exports, "def", ()=>def);
parcelHelpers.export(exports, "escapeHtml", ()=>escapeHtml);
parcelHelpers.export(exports, "escapeHtmlComment", ()=>escapeHtmlComment);
parcelHelpers.export(exports, "extend", ()=>extend);
parcelHelpers.export(exports, "generateCodeFrame", ()=>generateCodeFrame);
parcelHelpers.export(exports, "getGlobalThis", ()=>getGlobalThis);
parcelHelpers.export(exports, "hasChanged", ()=>hasChanged);
parcelHelpers.export(exports, "hasOwn", ()=>hasOwn);
parcelHelpers.export(exports, "hyphenate", ()=>hyphenate);
parcelHelpers.export(exports, "includeBooleanAttr", ()=>includeBooleanAttr);
parcelHelpers.export(exports, "invokeArrayFns", ()=>invokeArrayFns);
parcelHelpers.export(exports, "isArray", ()=>isArray);
parcelHelpers.export(exports, "isBooleanAttr", ()=>isBooleanAttr);
parcelHelpers.export(exports, "isDate", ()=>isDate);
parcelHelpers.export(exports, "isFunction", ()=>isFunction);
parcelHelpers.export(exports, "isGloballyWhitelisted", ()=>isGloballyWhitelisted);
parcelHelpers.export(exports, "isHTMLTag", ()=>isHTMLTag);
parcelHelpers.export(exports, "isIntegerKey", ()=>isIntegerKey);
parcelHelpers.export(exports, "isKnownHtmlAttr", ()=>isKnownHtmlAttr);
parcelHelpers.export(exports, "isKnownSvgAttr", ()=>isKnownSvgAttr);
parcelHelpers.export(exports, "isMap", ()=>isMap);
parcelHelpers.export(exports, "isModelListener", ()=>isModelListener);
parcelHelpers.export(exports, "isNoUnitNumericStyleProp", ()=>isNoUnitNumericStyleProp);
parcelHelpers.export(exports, "isObject", ()=>isObject);
parcelHelpers.export(exports, "isOn", ()=>isOn);
parcelHelpers.export(exports, "isPlainObject", ()=>isPlainObject);
parcelHelpers.export(exports, "isPromise", ()=>isPromise);
parcelHelpers.export(exports, "isReservedProp", ()=>isReservedProp);
parcelHelpers.export(exports, "isSSRSafeAttrName", ()=>isSSRSafeAttrName);
parcelHelpers.export(exports, "isSVGTag", ()=>isSVGTag);
parcelHelpers.export(exports, "isSet", ()=>isSet);
parcelHelpers.export(exports, "isSpecialBooleanAttr", ()=>isSpecialBooleanAttr);
parcelHelpers.export(exports, "isString", ()=>isString);
parcelHelpers.export(exports, "isSymbol", ()=>isSymbol);
parcelHelpers.export(exports, "isVoidTag", ()=>isVoidTag);
parcelHelpers.export(exports, "looseEqual", ()=>looseEqual);
parcelHelpers.export(exports, "looseIndexOf", ()=>looseIndexOf);
parcelHelpers.export(exports, "makeMap", ()=>makeMap);
parcelHelpers.export(exports, "normalizeClass", ()=>normalizeClass);
parcelHelpers.export(exports, "normalizeProps", ()=>normalizeProps);
parcelHelpers.export(exports, "normalizeStyle", ()=>normalizeStyle);
parcelHelpers.export(exports, "objectToString", ()=>objectToString);
parcelHelpers.export(exports, "parseStringStyle", ()=>parseStringStyle);
parcelHelpers.export(exports, "propsToAttrMap", ()=>propsToAttrMap);
parcelHelpers.export(exports, "remove", ()=>remove);
parcelHelpers.export(exports, "slotFlagsText", ()=>slotFlagsText);
parcelHelpers.export(exports, "stringifyStyle", ()=>stringifyStyle);
parcelHelpers.export(exports, "toDisplayString", ()=>toDisplayString);
parcelHelpers.export(exports, "toHandlerKey", ()=>toHandlerKey);
parcelHelpers.export(exports, "toNumber", ()=>toNumber);
parcelHelpers.export(exports, "toRawType", ()=>toRawType);
parcelHelpers.export(exports, "toTypeString", ()=>toTypeString);
var global = arguments[3];
/**
 * Make a map and return a function for checking if a key
 * is in that map.
 * IMPORTANT: all calls of this function must be prefixed with
 * \/\*#\_\_PURE\_\_\*\/
 * So that rollup can tree-shake them if necessary.
 */ function makeMap(str, expectsLowerCase) {
    const map = Object.create(null);
    const list = str.split(",");
    for(let i = 0; i < list.length; i++)map[list[i]] = true;
    return expectsLowerCase ? (val)=>!!map[val.toLowerCase()] : (val)=>!!map[val];
}
/**
 * dev only flag -> name mapping
 */ const PatchFlagNames = {
    [1 /* TEXT */ ]: `TEXT`,
    [2 /* CLASS */ ]: `CLASS`,
    [4 /* STYLE */ ]: `STYLE`,
    [8 /* PROPS */ ]: `PROPS`,
    [16 /* FULL_PROPS */ ]: `FULL_PROPS`,
    [32 /* HYDRATE_EVENTS */ ]: `HYDRATE_EVENTS`,
    [64 /* STABLE_FRAGMENT */ ]: `STABLE_FRAGMENT`,
    [128 /* KEYED_FRAGMENT */ ]: `KEYED_FRAGMENT`,
    [256 /* UNKEYED_FRAGMENT */ ]: `UNKEYED_FRAGMENT`,
    [512 /* NEED_PATCH */ ]: `NEED_PATCH`,
    [1024 /* DYNAMIC_SLOTS */ ]: `DYNAMIC_SLOTS`,
    [2048 /* DEV_ROOT_FRAGMENT */ ]: `DEV_ROOT_FRAGMENT`,
    [-1 /* HOISTED */ ]: `HOISTED`,
    [-2 /* BAIL */ ]: `BAIL`
};
/**
 * Dev only
 */ const slotFlagsText = {
    [1 /* STABLE */ ]: "STABLE",
    [2 /* DYNAMIC */ ]: "DYNAMIC",
    [3 /* FORWARDED */ ]: "FORWARDED"
};
const GLOBALS_WHITE_LISTED = "Infinity,undefined,NaN,isFinite,isNaN,parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,BigInt";
const isGloballyWhitelisted = /*#__PURE__*/ makeMap(GLOBALS_WHITE_LISTED);
const range = 2;
function generateCodeFrame(source, start = 0, end = source.length) {
    // Split the content into individual lines but capture the newline sequence
    // that separated each line. This is important because the actual sequence is
    // needed to properly take into account the full line length for offset
    // comparison
    let lines = source.split(/(\r?\n)/);
    // Separate the lines and newline sequences into separate arrays for easier referencing
    const newlineSequences = lines.filter((_, idx)=>idx % 2 === 1);
    lines = lines.filter((_, idx)=>idx % 2 === 0);
    let count = 0;
    const res = [];
    for(let i = 0; i < lines.length; i++){
        count += lines[i].length + (newlineSequences[i] && newlineSequences[i].length || 0);
        if (count >= start) {
            for(let j = i - range; j <= i + range || end > count; j++){
                if (j < 0 || j >= lines.length) continue;
                const line = j + 1;
                res.push(`${line}${" ".repeat(Math.max(3 - String(line).length, 0))}|  ${lines[j]}`);
                const lineLength = lines[j].length;
                const newLineSeqLength = newlineSequences[j] && newlineSequences[j].length || 0;
                if (j === i) {
                    // push underline
                    const pad = start - (count - (lineLength + newLineSeqLength));
                    const length = Math.max(1, end > count ? lineLength - pad : end - start);
                    res.push(`   |  ` + " ".repeat(pad) + "^".repeat(length));
                } else if (j > i) {
                    if (end > count) {
                        const length = Math.max(Math.min(end - count, lineLength), 1);
                        res.push(`   |  ` + "^".repeat(length));
                    }
                    count += lineLength + newLineSeqLength;
                }
            }
            break;
        }
    }
    return res.join("\n");
}
/**
 * On the client we only need to offer special cases for boolean attributes that
 * have different names from their corresponding dom properties:
 * - itemscope -> N/A
 * - allowfullscreen -> allowFullscreen
 * - formnovalidate -> formNoValidate
 * - ismap -> isMap
 * - nomodule -> noModule
 * - novalidate -> noValidate
 * - readonly -> readOnly
 */ const specialBooleanAttrs = `itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly`;
const isSpecialBooleanAttr = /*#__PURE__*/ makeMap(specialBooleanAttrs);
/**
 * The full list is needed during SSR to produce the correct initial markup.
 */ const isBooleanAttr = /*#__PURE__*/ makeMap(specialBooleanAttrs + `,async,autofocus,autoplay,controls,default,defer,disabled,hidden,` + `loop,open,required,reversed,scoped,seamless,` + `checked,muted,multiple,selected`);
/**
 * Boolean attributes should be included if the value is truthy or ''.
 * e.g. <select multiple> compiles to { multiple: '' }
 */ function includeBooleanAttr(value) {
    return !!value || value === "";
}
const unsafeAttrCharRE = /[>/="'\u0009\u000a\u000c\u0020]/;
const attrValidationCache = {};
function isSSRSafeAttrName(name) {
    if (attrValidationCache.hasOwnProperty(name)) return attrValidationCache[name];
    const isUnsafe = unsafeAttrCharRE.test(name);
    if (isUnsafe) console.error(`unsafe attribute name: ${name}`);
    return attrValidationCache[name] = !isUnsafe;
}
const propsToAttrMap = {
    acceptCharset: "accept-charset",
    className: "class",
    htmlFor: "for",
    httpEquiv: "http-equiv"
};
/**
 * CSS properties that accept plain numbers
 */ const isNoUnitNumericStyleProp = /*#__PURE__*/ makeMap(`animation-iteration-count,border-image-outset,border-image-slice,` + `border-image-width,box-flex,box-flex-group,box-ordinal-group,column-count,` + `columns,flex,flex-grow,flex-positive,flex-shrink,flex-negative,flex-order,` + `grid-row,grid-row-end,grid-row-span,grid-row-start,grid-column,` + `grid-column-end,grid-column-span,grid-column-start,font-weight,line-clamp,` + `line-height,opacity,order,orphans,tab-size,widows,z-index,zoom,` + // SVG
`fill-opacity,flood-opacity,stop-opacity,stroke-dasharray,stroke-dashoffset,` + `stroke-miterlimit,stroke-opacity,stroke-width`);
/**
 * Known attributes, this is used for stringification of runtime static nodes
 * so that we don't stringify bindings that cannot be set from HTML.
 * Don't also forget to allow `data-*` and `aria-*`!
 * Generated from https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes
 */ const isKnownHtmlAttr = /*#__PURE__*/ makeMap(`accept,accept-charset,accesskey,action,align,allow,alt,async,` + `autocapitalize,autocomplete,autofocus,autoplay,background,bgcolor,` + `border,buffered,capture,challenge,charset,checked,cite,class,code,` + `codebase,color,cols,colspan,content,contenteditable,contextmenu,controls,` + `coords,crossorigin,csp,data,datetime,decoding,default,defer,dir,dirname,` + `disabled,download,draggable,dropzone,enctype,enterkeyhint,for,form,` + `formaction,formenctype,formmethod,formnovalidate,formtarget,headers,` + `height,hidden,high,href,hreflang,http-equiv,icon,id,importance,integrity,` + `ismap,itemprop,keytype,kind,label,lang,language,loading,list,loop,low,` + `manifest,max,maxlength,minlength,media,min,multiple,muted,name,novalidate,` + `open,optimum,pattern,ping,placeholder,poster,preload,radiogroup,readonly,` + `referrerpolicy,rel,required,reversed,rows,rowspan,sandbox,scope,scoped,` + `selected,shape,size,sizes,slot,span,spellcheck,src,srcdoc,srclang,srcset,` + `start,step,style,summary,tabindex,target,title,translate,type,usemap,` + `value,width,wrap`);
/**
 * Generated from https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute
 */ const isKnownSvgAttr = /*#__PURE__*/ makeMap(`xmlns,accent-height,accumulate,additive,alignment-baseline,alphabetic,amplitude,` + `arabic-form,ascent,attributeName,attributeType,azimuth,baseFrequency,` + `baseline-shift,baseProfile,bbox,begin,bias,by,calcMode,cap-height,class,` + `clip,clipPathUnits,clip-path,clip-rule,color,color-interpolation,` + `color-interpolation-filters,color-profile,color-rendering,` + `contentScriptType,contentStyleType,crossorigin,cursor,cx,cy,d,decelerate,` + `descent,diffuseConstant,direction,display,divisor,dominant-baseline,dur,dx,` + `dy,edgeMode,elevation,enable-background,end,exponent,fill,fill-opacity,` + `fill-rule,filter,filterRes,filterUnits,flood-color,flood-opacity,` + `font-family,font-size,font-size-adjust,font-stretch,font-style,` + `font-variant,font-weight,format,from,fr,fx,fy,g1,g2,glyph-name,` + `glyph-orientation-horizontal,glyph-orientation-vertical,glyphRef,` + `gradientTransform,gradientUnits,hanging,height,href,hreflang,horiz-adv-x,` + `horiz-origin-x,id,ideographic,image-rendering,in,in2,intercept,k,k1,k2,k3,` + `k4,kernelMatrix,kernelUnitLength,kerning,keyPoints,keySplines,keyTimes,` + `lang,lengthAdjust,letter-spacing,lighting-color,limitingConeAngle,local,` + `marker-end,marker-mid,marker-start,markerHeight,markerUnits,markerWidth,` + `mask,maskContentUnits,maskUnits,mathematical,max,media,method,min,mode,` + `name,numOctaves,offset,opacity,operator,order,orient,orientation,origin,` + `overflow,overline-position,overline-thickness,panose-1,paint-order,path,` + `pathLength,patternContentUnits,patternTransform,patternUnits,ping,` + `pointer-events,points,pointsAtX,pointsAtY,pointsAtZ,preserveAlpha,` + `preserveAspectRatio,primitiveUnits,r,radius,referrerPolicy,refX,refY,rel,` + `rendering-intent,repeatCount,repeatDur,requiredExtensions,requiredFeatures,` + `restart,result,rotate,rx,ry,scale,seed,shape-rendering,slope,spacing,` + `specularConstant,specularExponent,speed,spreadMethod,startOffset,` + `stdDeviation,stemh,stemv,stitchTiles,stop-color,stop-opacity,` + `strikethrough-position,strikethrough-thickness,string,stroke,` + `stroke-dasharray,stroke-dashoffset,stroke-linecap,stroke-linejoin,` + `stroke-miterlimit,stroke-opacity,stroke-width,style,surfaceScale,` + `systemLanguage,tabindex,tableValues,target,targetX,targetY,text-anchor,` + `text-decoration,text-rendering,textLength,to,transform,transform-origin,` + `type,u1,u2,underline-position,underline-thickness,unicode,unicode-bidi,` + `unicode-range,units-per-em,v-alphabetic,v-hanging,v-ideographic,` + `v-mathematical,values,vector-effect,version,vert-adv-y,vert-origin-x,` + `vert-origin-y,viewBox,viewTarget,visibility,width,widths,word-spacing,` + `writing-mode,x,x-height,x1,x2,xChannelSelector,xlink:actuate,xlink:arcrole,` + `xlink:href,xlink:role,xlink:show,xlink:title,xlink:type,xml:base,xml:lang,` + `xml:space,y,y1,y2,yChannelSelector,z,zoomAndPan`);
function normalizeStyle(value) {
    if (isArray(value)) {
        const res = {};
        for(let i = 0; i < value.length; i++){
            const item = value[i];
            const normalized = isString(item) ? parseStringStyle(item) : normalizeStyle(item);
            if (normalized) for(const key in normalized)res[key] = normalized[key];
        }
        return res;
    } else if (isString(value)) return value;
    else if (isObject(value)) return value;
}
const listDelimiterRE = /;(?![^(]*\))/g;
const propertyDelimiterRE = /:(.+)/;
function parseStringStyle(cssText) {
    const ret = {};
    cssText.split(listDelimiterRE).forEach((item)=>{
        if (item) {
            const tmp = item.split(propertyDelimiterRE);
            tmp.length > 1 && (ret[tmp[0].trim()] = tmp[1].trim());
        }
    });
    return ret;
}
function stringifyStyle(styles) {
    let ret = "";
    if (!styles || isString(styles)) return ret;
    for(const key in styles){
        const value = styles[key];
        const normalizedKey = key.startsWith(`--`) ? key : hyphenate(key);
        if (isString(value) || typeof value === "number" && isNoUnitNumericStyleProp(normalizedKey)) // only render valid values
        ret += `${normalizedKey}:${value};`;
    }
    return ret;
}
function normalizeClass(value) {
    let res = "";
    if (isString(value)) res = value;
    else if (isArray(value)) for(let i = 0; i < value.length; i++){
        const normalized = normalizeClass(value[i]);
        if (normalized) res += normalized + " ";
    }
    else if (isObject(value)) {
        for(const name in value)if (value[name]) res += name + " ";
    }
    return res.trim();
}
function normalizeProps(props) {
    if (!props) return null;
    let { class: klass , style  } = props;
    if (klass && !isString(klass)) props.class = normalizeClass(klass);
    if (style) props.style = normalizeStyle(style);
    return props;
}
// These tag configs are shared between compiler-dom and runtime-dom, so they
// https://developer.mozilla.org/en-US/docs/Web/HTML/Element
const HTML_TAGS = "html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,summary,template,blockquote,iframe,tfoot";
// https://developer.mozilla.org/en-US/docs/Web/SVG/Element
const SVG_TAGS = "svg,animate,animateMotion,animateTransform,circle,clipPath,color-profile,defs,desc,discard,ellipse,feBlend,feColorMatrix,feComponentTransfer,feComposite,feConvolveMatrix,feDiffuseLighting,feDisplacementMap,feDistanceLight,feDropShadow,feFlood,feFuncA,feFuncB,feFuncG,feFuncR,feGaussianBlur,feImage,feMerge,feMergeNode,feMorphology,feOffset,fePointLight,feSpecularLighting,feSpotLight,feTile,feTurbulence,filter,foreignObject,g,hatch,hatchpath,image,line,linearGradient,marker,mask,mesh,meshgradient,meshpatch,meshrow,metadata,mpath,path,pattern,polygon,polyline,radialGradient,rect,set,solidcolor,stop,switch,symbol,text,textPath,title,tspan,unknown,use,view";
const VOID_TAGS = "area,base,br,col,embed,hr,img,input,link,meta,param,source,track,wbr";
const isHTMLTag = /*#__PURE__*/ makeMap(HTML_TAGS);
const isSVGTag = /*#__PURE__*/ makeMap(SVG_TAGS);
const isVoidTag = /*#__PURE__*/ makeMap(VOID_TAGS);
const escapeRE = /["'&<>]/;
function escapeHtml(string) {
    const str = "" + string;
    const match = escapeRE.exec(str);
    if (!match) return str;
    let html = "";
    let escaped;
    let index;
    let lastIndex = 0;
    for(index = match.index; index < str.length; index++){
        switch(str.charCodeAt(index)){
            case 34:
                escaped = "&quot;";
                break;
            case 38:
                escaped = "&amp;";
                break;
            case 39:
                escaped = "&#39;";
                break;
            case 60:
                escaped = "&lt;";
                break;
            case 62:
                escaped = "&gt;";
                break;
            default:
                continue;
        }
        if (lastIndex !== index) html += str.substring(lastIndex, index);
        lastIndex = index + 1;
        html += escaped;
    }
    return lastIndex !== index ? html + str.substring(lastIndex, index) : html;
}
// https://www.w3.org/TR/html52/syntax.html#comments
const commentStripRE = /^-?>|<!--|-->|--!>|<!-$/g;
function escapeHtmlComment(src) {
    return src.replace(commentStripRE, "");
}
function looseCompareArrays(a, b) {
    if (a.length !== b.length) return false;
    let equal = true;
    for(let i = 0; equal && i < a.length; i++)equal = looseEqual(a[i], b[i]);
    return equal;
}
function looseEqual(a, b) {
    if (a === b) return true;
    let aValidType = isDate(a);
    let bValidType = isDate(b);
    if (aValidType || bValidType) return aValidType && bValidType ? a.getTime() === b.getTime() : false;
    aValidType = isArray(a);
    bValidType = isArray(b);
    if (aValidType || bValidType) return aValidType && bValidType ? looseCompareArrays(a, b) : false;
    aValidType = isObject(a);
    bValidType = isObject(b);
    if (aValidType || bValidType) {
        /* istanbul ignore if: this if will probably never be called */ if (!aValidType || !bValidType) return false;
        const aKeysCount = Object.keys(a).length;
        const bKeysCount = Object.keys(b).length;
        if (aKeysCount !== bKeysCount) return false;
        for(const key in a){
            const aHasKey = a.hasOwnProperty(key);
            const bHasKey = b.hasOwnProperty(key);
            if (aHasKey && !bHasKey || !aHasKey && bHasKey || !looseEqual(a[key], b[key])) return false;
        }
    }
    return String(a) === String(b);
}
function looseIndexOf(arr, val) {
    return arr.findIndex((item)=>looseEqual(item, val));
}
/**
 * For converting {{ interpolation }} values to displayed strings.
 * @private
 */ const toDisplayString = (val)=>{
    return val == null ? "" : isArray(val) || isObject(val) && (val.toString === objectToString || !isFunction(val.toString)) ? JSON.stringify(val, replacer, 2) : String(val);
};
const replacer = (_key, val1)=>{
    // can't use isRef here since @vue/shared has no deps
    if (val1 && val1.__v_isRef) return replacer(_key, val1.value);
    else if (isMap(val1)) return {
        [`Map(${val1.size})`]: [
            ...val1.entries()
        ].reduce((entries, [key, val])=>{
            entries[`${key} =>`] = val;
            return entries;
        }, {})
    };
    else if (isSet(val1)) return {
        [`Set(${val1.size})`]: [
            ...val1.values()
        ]
    };
    else if (isObject(val1) && !isArray(val1) && !isPlainObject(val1)) return String(val1);
    return val1;
};
/**
 * List of @babel/parser plugins that are used for template expression
 * transforms and SFC script transforms. By default we enable proposals slated
 * for ES2020. This will need to be updated as the spec moves forward.
 * Full list at https://babeljs.io/docs/en/next/babel-parser#plugins
 */ const babelParserDefaultPlugins = [
    "bigInt",
    "optionalChaining",
    "nullishCoalescingOperator"
];
const EMPTY_OBJ = Object.freeze({});
const EMPTY_ARR = Object.freeze([]);
const NOOP = ()=>{};
/**
 * Always return false.
 */ const NO = ()=>false;
const onRE = /^on[^a-z]/;
const isOn = (key)=>onRE.test(key);
const isModelListener = (key)=>key.startsWith("onUpdate:");
const extend = Object.assign;
const remove = (arr, el)=>{
    const i = arr.indexOf(el);
    if (i > -1) arr.splice(i, 1);
};
const hasOwnProperty = Object.prototype.hasOwnProperty;
const hasOwn = (val, key)=>hasOwnProperty.call(val, key);
const isArray = Array.isArray;
const isMap = (val)=>toTypeString(val) === "[object Map]";
const isSet = (val)=>toTypeString(val) === "[object Set]";
const isDate = (val)=>val instanceof Date;
const isFunction = (val)=>typeof val === "function";
const isString = (val)=>typeof val === "string";
const isSymbol = (val)=>typeof val === "symbol";
const isObject = (val)=>val !== null && typeof val === "object";
const isPromise = (val)=>{
    return isObject(val) && isFunction(val.then) && isFunction(val.catch);
};
const objectToString = Object.prototype.toString;
const toTypeString = (value)=>objectToString.call(value);
const toRawType = (value)=>{
    // extract "RawType" from strings like "[object RawType]"
    return toTypeString(value).slice(8, -1);
};
const isPlainObject = (val)=>toTypeString(val) === "[object Object]";
const isIntegerKey = (key)=>isString(key) && key !== "NaN" && key[0] !== "-" && "" + parseInt(key, 10) === key;
const isReservedProp = /*#__PURE__*/ makeMap(// the leading comma is intentional so empty string "" is also included
",key,ref,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted");
const cacheStringFunction = (fn)=>{
    const cache = Object.create(null);
    return (str)=>{
        const hit = cache[str];
        return hit || (cache[str] = fn(str));
    };
};
const camelizeRE = /-(\w)/g;
/**
 * @private
 */ const camelize = cacheStringFunction((str)=>{
    return str.replace(camelizeRE, (_, c)=>c ? c.toUpperCase() : "");
});
const hyphenateRE = /\B([A-Z])/g;
/**
 * @private
 */ const hyphenate = cacheStringFunction((str)=>str.replace(hyphenateRE, "-$1").toLowerCase());
/**
 * @private
 */ const capitalize = cacheStringFunction((str)=>str.charAt(0).toUpperCase() + str.slice(1));
/**
 * @private
 */ const toHandlerKey = cacheStringFunction((str)=>str ? `on${capitalize(str)}` : ``);
// compare whether a value has changed, accounting for NaN.
const hasChanged = (value, oldValue)=>!Object.is(value, oldValue);
const invokeArrayFns = (fns, arg)=>{
    for(let i = 0; i < fns.length; i++)fns[i](arg);
};
const def = (obj, key, value)=>{
    Object.defineProperty(obj, key, {
        configurable: true,
        enumerable: false,
        value
    });
};
const toNumber = (val)=>{
    const n = parseFloat(val);
    return isNaN(n) ? val : n;
};
let _globalThis;
const getGlobalThis = ()=>{
    return _globalThis || (_globalThis = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : {});
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bXH0S":[function(require,module,exports) {
/**
 * When loading, DSFR check for custom settings in `window.dsfr`
 * Then, they overwrite it with the DSFR object
 * We use a manual mode to load all our vue instances before starting the DSFR engine.
 */ window.dsfr = {
    mode: "manual"
};

},{}],"9MaxD":[function(require,module,exports) {
/*! DSFR v1.5.1 | SPDX-License-Identifier: MIT | License-Filename: LICENSE.md | restricted use (see terms and conditions) */ class State {
    constructor(){
        this.modules = {};
    }
    create(ModuleClass) {
        const module = new ModuleClass();
        this.modules[module.type] = module;
    }
    getModule(type) {
        return this.modules[type];
    }
    add(type, item) {
        this.modules[type].add(item);
    }
    remove(type, item) {
        this.modules[type].remove(item);
    }
    get isActive() {
        return this._isActive;
    }
    set isActive(value) {
        if (value === this._isActive) return;
        this._isActive = value;
        const values = Object.keys(this.modules).map((e)=>{
            return this.modules[e];
        });
        if (value) for (const module of values)module.activate();
        else for (const module1 of values)module1.deactivate();
    }
    get isLegacy() {
        return this._isLegacy;
    }
    set isLegacy(value) {
        if (value === this._isLegacy) return;
        this._isLegacy = value;
    }
}
const state = new State();
const config = {
    prefix: "fr",
    namespace: "dsfr",
    organisation: "@gouvfr",
    version: "1.5.1"
};
class LogLevel {
    constructor(level, light, dark, logger){
        this.level = level;
        this.light = light;
        this.dark = dark;
        switch(logger){
            case "warn":
                this.logger = console.warn;
                break;
            case "error":
                this.logger = console.error;
                break;
            default:
                this.logger = console.log;
        }
    }
    log(...values) {
        const message = new Message(config.namespace);
        for (const value of values)message.add(value);
        this.print(message);
    }
    print(message) {
        message.setColor(this.color);
        this.logger.apply(console, message.getMessage());
    }
    get color() {
        return window.matchMedia("(prefers-color-scheme: dark)").matches ? this.dark : this.light;
    }
}
class Message {
    constructor(domain){
        this.inputs = [
            "%c"
        ];
        this.styles = [
            "font-family:Marianne",
            "line-height: 1.5"
        ];
        this.objects = [];
        if (domain) this.add(`${domain} :`);
    }
    add(value) {
        switch(typeof value){
            case "object":
            case "function":
                this.inputs.push("%o ");
                this.objects.push(value);
                break;
            default:
                this.inputs.push(`${value} `);
        }
    }
    setColor(color) {
        this.styles.push(`color:${color}`);
    }
    getMessage() {
        return [
            this.inputs.join(""),
            this.styles.join(";"),
            ...this.objects
        ];
    }
}
const LEVELS = {
    trace: new LogLevel(0, "#616161", "#989898"),
    debug: new LogLevel(1, "#000091", "#8B8BFF"),
    info: new LogLevel(2, "#007c3b", "#00ed70"),
    warn: new LogLevel(3, "#ba4500", "#fa5c00", "warn"),
    error: new LogLevel(4, "#D80600", "#FF4641", "error")
};
class Inspector {
    constructor(){
        this.level = 2;
        for(const id in LEVELS){
            const level = LEVELS[id];
            this[id] = (...msgs)=>{
                if (this.level <= level.level) level.log.apply(level, msgs);
            };
            this[id].print = level.print.bind(level);
        }
    }
    state() {
        const message = new Message();
        message.add(state);
        this.trace.print(message);
    }
    tree() {
        const stage = state.getModule("stage");
        if (!stage) return;
        const message = new Message();
        this._branch(stage.root, 0, message);
        this.trace.print(message);
    }
    _branch(element, space, message) {
        let branch = "";
        if (space > 0) {
            let indent = "";
            for(let i = 0; i < space; i++)indent += "    ";
            // branch += indent + '|\n';
            branch += indent + "\u2514\u2500 ";
        }
        branch += `[${element.id}] ${element.html}`;
        message.add(branch);
        message.add({
            "@": element
        });
        message.add("\n");
        for (const child of element.children)branch += this._branch(child, space + 1, message);
    }
}
const inspector = new Inspector();
const startAtDomContentLoaded = (callback)=>{
    if (document.readyState !== "loading") window.requestAnimationFrame(callback);
    else document.addEventListener("DOMContentLoaded", callback);
};
const startAuto = (callback)=>{
    // detect
    startAtDomContentLoaded(callback);
};
const Modes = {
    AUTO: "auto",
    MANUAL: "manual",
    RUNTIME: "runtime",
    LOADED: "loaded",
    VUE: "vue",
    ANGULAR: "angular",
    REACT: "react"
};
class Options {
    constructor(){
        this._mode = Modes.AUTO;
        this.isStarted = false;
        this.starting = this.start.bind(this);
        this.preventManipulation = false;
    }
    configure(settings = {}, start) {
        this.startCallback = start;
        if (settings.verbose === true) inspector.level = 0;
        this.mode = settings.mode || Modes.AUTO;
    }
    set mode(value) {
        switch(value){
            case Modes.AUTO:
                this.preventManipulation = false;
                startAuto(this.starting);
                break;
            case Modes.LOADED:
                this.preventManipulation = false;
                startAtDomContentLoaded(this.starting);
                break;
            case Modes.RUNTIME:
                this.preventManipulation = false;
                this.start();
                break;
            case Modes.MANUAL:
                this.preventManipulation = false;
                break;
            case Modes.VUE:
                this.preventManipulation = true;
                break;
            case Modes.ANGULAR:
                this.preventManipulation = true;
                break;
            case Modes.REACT:
                this.preventManipulation = true;
                break;
            default:
                inspector.error("Illegal mode");
                return;
        }
        this._mode = value;
        inspector.info(`mode set to ${value}`);
    }
    get mode() {
        return this._mode;
    }
    start() {
        inspector.info("start");
        this.startCallback();
    }
}
const options = new Options();
class Collection {
    constructor(){
        this._collection = [];
    }
    forEach(callback) {
        this._collection.forEach(callback);
    }
    map(callback) {
        return this._collection.map(callback);
    }
    get length() {
        return this._collection.length;
    }
    add(collectable) {
        if (this._collection.indexOf(collectable) > -1) return false;
        this._collection.push(collectable);
        if (this.onAdd) this.onAdd();
        if (this.onPopulate && this._collection.length === 1) this.onPopulate();
        return true;
    }
    remove(collectable) {
        const index = this._collection.indexOf(collectable);
        if (index === -1) return false;
        this._collection.splice(index, 1);
        if (this.onRemove) this.onRemove();
        if (this.onEmpty && this._collection.length === 0) this.onEmpty();
    }
    execute(...args) {
        for (const collectable of this._collection)if (collectable) collectable.apply(null, args);
    }
    clear() {
        this._collection.length = 0;
    }
    clone() {
        const clone = new Collection();
        clone._collection = this._collection.slice();
        return clone;
    }
    get collection() {
        return this._collection;
    }
}
class Module extends Collection {
    constructor(type){
        super();
        this.type = type;
        this.isActive = false;
    }
    activate() {}
    deactivate() {}
}
const ns = (name)=>`${config.prefix}-${name}`;
ns.selector = (name, notation)=>{
    if (notation === undefined) notation = ".";
    return `${notation}${ns(name)}`;
};
ns.attr = (name)=>`data-${ns(name)}`;
ns.attr.selector = (name, value)=>{
    let result = ns.attr(name);
    if (value !== undefined) result += `="${value}"`;
    return `[${result}]`;
};
ns.event = (type)=>`${config.namespace}.${type}`;
ns.emission = (domain, type)=>`emission:${domain}.${type}`;
const querySelectorAllArray = (element, selectors)=>Array.prototype.slice.call(element.querySelectorAll(selectors));
const queryParentSelector = (element, selectors)=>{
    const parent = element.parentElement;
    if (parent.matches(selectors)) return parent;
    if (parent === document.documentElement) return null;
    return queryParentSelector(parent, selectors);
};
class Registration {
    constructor(selector1, InstanceClass, creator){
        this.selector = selector1;
        this.InstanceClass = InstanceClass;
        this.creator = creator;
        this.instances = new Collection();
        this.isIntroduced = false;
        this._instanceClassName = this.InstanceClass.instanceClassName;
        this._instanceClassNames = this.getInstanceClassNames(this.InstanceClass);
        this._property = this._instanceClassName.substring(0, 1).toLowerCase() + this._instanceClassName.substring(1);
        const dashed = this._instanceClassName.replace(/[^a-zA-Z0-9]+/g, "-").replace(/([A-Z]+)([A-Z][a-z])/g, "$1-$2").replace(/([a-z])([A-Z])/g, "$1-$2").replace(/([0-9])([^0-9])/g, "$1-$2").replace(/([^0-9])([0-9])/g, "$1-$2").toLowerCase();
        this._attribute = ns.attr(`js-${dashed}`);
    }
    getInstanceClassNames(InstanceClass) {
        const prototype = Object.getPrototypeOf(InstanceClass);
        if (!prototype || prototype.instanceClassName === "Instance") return [
            InstanceClass.instanceClassName
        ];
        return [
            ...this.getInstanceClassNames(prototype),
            InstanceClass.instanceClassName
        ];
    }
    hasInstanceClassName(instanceClassName) {
        return this._instanceClassNames.indexOf(instanceClassName) > -1;
    }
    introduce() {
        if (this.isIntroduced) return;
        this.isIntroduced = true;
        state.getModule("stage").parse(document.documentElement, this);
    }
    parse(node, nonRecursive) {
        const nodes = [];
        if (node.matches && node.matches(this.selector)) nodes.push(node);
        // eslint-disable-next-line no-useless-call
        if (!nonRecursive && node.querySelectorAll && node.querySelector(this.selector)) nodes.push.apply(nodes, querySelectorAllArray(node, this.selector));
        return nodes;
    }
    create(element) {
        if (!element.node.matches(this.selector)) return;
        const instance = new this.InstanceClass();
        this.instances.add(instance);
        return instance;
    }
    remove(instance) {
        this.instances.remove(instance);
    }
    dispose() {
        const instances = this.instances.collection;
        for(let i = instances.length - 1; i > -1; i--)instances[i]._dispose();
        this.creator = null;
    }
    get instanceClassName() {
        return this._instanceClassName;
    }
    get instanceClassNames() {
        return this._instanceClassNames;
    }
    get property() {
        return this._property;
    }
    get attribute() {
        return this._attribute;
    }
}
class Register extends Module {
    constructor(){
        super("register");
    }
    register(selector2, InstanceClass, creator) {
        const registration = new Registration(selector2, InstanceClass, creator);
        this.add(registration);
        if (state.isActive) registration.introduce();
        return registration;
    }
    activate() {
        for (const registration of this.collection)registration.introduce();
    }
    remove(registration) {
        registration.dispose();
        super.remove(registration);
    }
}
let count = 0;
class Element$1 {
    constructor(node, id){
        if (!id) {
            count++;
            this.id = count;
        } else this.id = id;
        this.node = node;
        this.attributeNames = [];
        this.instances = [];
        this._children = [];
        this._parent = null;
        this._projects = [];
    }
    get proxy() {
        const scope = this;
        if (!this._proxy) {
            this._proxy = {
                id: this.id,
                get parent () {
                    return scope.parent ? scope.parent.proxy : null;
                },
                get children () {
                    return scope.children.map((child)=>child.proxy);
                }
            };
            for (const instance of this.instances)this._proxy[instance.registration.property] = instance.proxy;
        }
        return this._proxy;
    }
    get html() {
        const end = this.node.outerHTML.indexOf(">");
        return this.node.outerHTML.substring(0, end + 1);
    }
    project(registration) {
        if (this._projects.indexOf(registration) === -1) this._projects.push(registration);
    }
    populate() {
        const projects = this._projects.slice();
        this._projects.length = 0;
        for (const registration of projects)this.create(registration);
    }
    create(registration) {
        if (this.hasInstance(registration.instanceClassName)) // inspector.debug(`failed creation, instance of ${registration.instanceClassName} already exists on element [${this.id}]`);
        return;
        inspector.debug(`create instance of ${registration.instanceClassName} on element [${this.id}]`);
        const instance = registration.create(this);
        this.instances.push(instance);
        instance._config(this, registration);
        if (this._proxy) this._proxy[registration.property] = instance.proxy;
    }
    remove(instance) {
        const index = this.instances.indexOf(instance);
        if (index > -1) this.instances.splice(index, 1);
        if (this._proxy) delete this._proxy[instance.registration.property];
    }
    get parent() {
        return this._parent;
    }
    get ascendants() {
        return [
            this.parent,
            ...this.parent.ascendants
        ];
    }
    get children() {
        return this._children;
    }
    get descendants() {
        const descendants = [
            ...this._children
        ];
        this._children.forEach((child)=>descendants.push(...child.descendants));
        return descendants;
    }
    // TODO : emit ascendant et descendant de changement ?
    addChild(child, index) {
        if (this._children.indexOf(child) > -1) return null;
        child._parent = this;
        if (!isNaN(index) && index > -1 && index < this._children.length) this._children.splice(index, 0, child);
        else this._children.push(child);
        return child;
    }
    removeChild(child) {
        const index = this._children.indexOf(child);
        if (index === -1) return null;
        child._parent = null;
        this._children.splice(index, 1);
    }
    emit(type, data) {
        const elements = state.getModule("stage").collection;
        const response = [];
        for (const element of elements)response.push(...element._emit(type, data));
        return response;
    }
    _emit(type, data) {
        const response = [];
        for (const instance of this.instances)response.push(...instance._emitter.emit(type, data));
        return response;
    }
    ascend(type, data) {
        if (this._parent) return this._parent._ascend(type, data);
        return [];
    }
    _ascend(type, data) {
        const response = [];
        for (const instance of this.instances)response.push(...instance._ascent.emit(type, data));
        if (this._parent) response.push(...this._parent._ascend(type, data));
        return response;
    }
    descend(type, data) {
        const response = [];
        for (const child of this._children)response.push(...child._descend(type, data));
        return response;
    }
    _descend(type, data) {
        const response = [];
        for (const instance of this.instances)response.push(...instance._descent.emit(type, data));
        for (const child of this._children)response.push(...child._descend(type, data));
        return response;
    }
    getInstance(instanceClassName) {
        for (const instance of this.instances)if (instance.registration.hasInstanceClassName(instanceClassName)) return instance;
        return null;
    }
    hasInstance(instanceClassName) {
        return this.getInstance(instanceClassName) !== null;
    }
    getDescendantInstances(instanceClassName, stopAtInstanceClassName, stopAtFirstInstance) {
        if (!instanceClassName) return [];
        const instances = [];
        for (const child of this._children){
            const instance = child.getInstance(instanceClassName);
            if (instance) {
                instances.push(instance);
                if (stopAtFirstInstance) continue;
            }
            if ((!stopAtInstanceClassName || !child.hasInstance(stopAtInstanceClassName)) && child.children.length) instances.push.apply(instances, child.getDescendantInstances(instanceClassName, stopAtInstanceClassName, stopAtFirstInstance));
        }
        return instances;
    }
    getAscendantInstance(instanceClassName, stopAtInstanceClassName) {
        if (!instanceClassName || !this._parent) return null;
        const instance = this._parent.getInstance(instanceClassName);
        if (instance) return instance;
        if (stopAtInstanceClassName && this._parent.hasInstance(stopAtInstanceClassName)) return null;
        return this._parent.getAscendantInstance(instanceClassName, stopAtInstanceClassName);
    }
    dispose() {
        for (const instance of this.instances)instance._dispose();
        this.instances.length = 0;
        state.remove("stage", this);
        this.parent.removeChild(this);
        this._children.length = 0;
        inspector.debug(`remove element [${this.id}] ${this.html}`);
    }
    prepare(attributeName) {
        if (this.attributeNames.indexOf(attributeName) === -1) this.attributeNames.push(attributeName);
    }
    examine() {
        const attributeNames = this.attributeNames.slice();
        this.attributeNames.length = 0;
        for(let i = this.instances.length - 1; i > -1; i--)this.instances[i].examine(attributeNames);
    }
}
class Root extends Element$1 {
    constructor(){
        super(document.documentElement, "root");
        this.node.setAttribute(ns.attr("js"), true);
    }
}
const RootSelector = {
    ROOT: ":root"
};
class Stage extends Module {
    constructor(){
        super("stage");
        this.root = new Root();
        super.add(this.root);
        this.observer = new MutationObserver(this.mutate.bind(this));
        this.modifications = [];
        this.willModify = false;
        this.modifying = this.modify.bind(this);
    }
    hasElement(node) {
        for (const element of this.collection)if (element.node === node) return true;
        return false;
    }
    getElement(node) {
        for (const element of this.collection)if (element.node === node) return element;
        const element1 = new Element$1(node);
        this.add(element1);
        inspector.debug(`add element [${element1.id}] ${element1.html}`);
        return element1;
    }
    getProxy(node) {
        if (!this.hasElement(node)) return null;
        const element = this.getElement(node);
        return element.proxy;
    }
    add(element) {
        super.add(element);
        this.put(element, this.root);
    }
    put(element, branch) {
        let index = 0;
        for(let i = branch.children.length - 1; i > -1; i--){
            const child = branch.children[i];
            const position = element.node.compareDocumentPosition(child.node);
            if (position & Node.DOCUMENT_POSITION_CONTAINS) {
                this.put(element, child);
                return;
            } else if (position & Node.DOCUMENT_POSITION_CONTAINED_BY) {
                branch.removeChild(child);
                element.addChild(child, 0);
            } else if (position & Node.DOCUMENT_POSITION_PRECEDING) {
                index = i + 1;
                break;
            }
        }
        branch.addChild(element, index);
    }
    activate() {
        this.observer.observe(document.documentElement, {
            childList: true,
            subtree: true,
            attributes: true
        });
    }
    deactivate() {
        this.observer.disconnect();
    }
    mutate(mutations) {
        const examinations = [];
        mutations.forEach((mutation)=>{
            switch(mutation.type){
                case "childList":
                    mutation.removedNodes.forEach((node)=>this.dispose(node));
                    mutation.addedNodes.forEach((node)=>this.parse(node));
                    break;
                case "attributes":
                    if (this.hasElement(mutation.target)) {
                        const element = this.getElement(mutation.target);
                        element.prepare(mutation.attributeName);
                        if (examinations.indexOf(element) === -1) examinations.push(element);
                        for (const descendant of element.descendants)if (examinations.indexOf(descendant) === -1) examinations.push(descendant);
                    }
                    if (this.modifications.indexOf(mutation.target) === -1) this.modifications.push(mutation.target);
                    break;
            }
        });
        examinations.forEach((element)=>element.examine());
        if (this.modifications.length && !this.willModify) {
            this.willModify = true;
            window.requestAnimationFrame(this.modifying);
        }
    }
    modify() {
        this.willModify = false;
        const targets = this.modifications.slice();
        this.modifications.length = 0;
        for (const target of targets)if (document.documentElement.contains(target)) this.parse(target);
    }
    dispose(node) {
        const disposables = [];
        this.forEach((element)=>{
            if (node.contains(element.node)) disposables.push(element);
        });
        for (const disposable of disposables){
            disposable.dispose();
            this.remove(disposable);
        }
    }
    parse(node, registration, nonRecursive) {
        const registrations = registration ? [
            registration
        ] : state.getModule("register").collection;
        const creations = [];
        for (const registration1 of registrations){
            const nodes = registration1.parse(node, nonRecursive);
            for (const n of nodes){
                const element = this.getElement(n);
                element.project(registration1);
                if (creations.indexOf(element) === -1) creations.push(element);
            }
        }
        for (const element of creations)element.populate();
    }
}
class Renderer extends Module {
    constructor(){
        super("render");
        this.rendering = this.render.bind(this);
        this.nexts = new Collection();
    }
    activate() {
        window.requestAnimationFrame(this.rendering);
    }
    request(instance) {
        this.nexts.add(instance);
    }
    render() {
        if (!state.isActive) return;
        window.requestAnimationFrame(this.rendering);
        this.forEach((instance)=>instance.render());
        if (!this.nexts.length) return;
        const nexts = this.nexts.clone();
        this.nexts.clear();
        nexts.forEach((instance)=>instance.next());
    }
}
class Resizer extends Module {
    constructor(){
        super("resize");
        this.requireResize = false;
        this.resizing = this.resize.bind(this);
        const requesting = this.request.bind(this);
        if (document.fonts) document.fonts.ready.then(requesting);
        window.addEventListener("resize", requesting);
        window.addEventListener("orientationchange", requesting);
    }
    activate() {
        this.request();
    }
    request() {
        if (this.requireResize) return;
        this.requireResize = true;
        window.requestAnimationFrame(this.resizing);
    }
    resize() {
        if (!this.requireResize) return;
        this.forEach((instance)=>instance.resize());
        this.requireResize = false;
    }
}
class ScrollLocker extends Module {
    constructor(){
        super("lock");
        this._isLocked = false;
        this._scrollY = 0;
        this.onPopulate = this.lock.bind(this);
        this.onEmpty = this.unlock.bind(this);
    }
    get isLocked() {
        return this._isLocked;
    }
    lock() {
        if (!this._isLocked) {
            this._isLocked = true;
            this._scrollY = window.scrollY;
            if (this.isLegacy) document.body.style.top = this._scrollY * -1 + "px";
            else document.body.style.setProperty("--scroll-top", this._scrollY * -1 + "px");
            document.documentElement.setAttribute(ns.attr("scrolling"), "false");
        }
    }
    unlock() {
        if (this._isLocked) {
            this._isLocked = false;
            document.documentElement.removeAttribute(ns.attr("scrolling"));
            if (this.isLegacy) document.body.style.top = "";
            else document.body.style.removeProperty("--scroll-top");
            window.scroll(0, this._scrollY);
        }
    }
}
class Load extends Module {
    constructor(){
        super("load");
        this.loading = this.load.bind(this);
    }
    activate() {
        window.addEventListener("load", this.loading);
    }
    load() {
        this.forEach((instance)=>instance.load());
    }
}
const FONT_FAMILIES = [
    "Marianne",
    "Spectral"
];
class FontSwap extends Module {
    constructor(){
        super("font-swap");
        this.swapping = this.swap.bind(this);
    }
    activate() {
        if (document.fonts) document.fonts.addEventListener("loadingdone", this.swapping);
    }
    swap() {
        const families = FONT_FAMILIES.filter((family)=>document.fonts.check(`16px ${family}`));
        this.forEach((instance)=>instance.swapFont(families));
    }
}
class MouseMove extends Module {
    constructor(){
        super("mouse-move");
        this.requireMove = false;
        this._isMoving = false;
        this.moving = this.move.bind(this);
        this.requesting = this.request.bind(this);
        this.onPopulate = this.listen.bind(this);
        this.onEmpty = this.unlisten.bind(this);
    }
    listen() {
        if (this._isMoving) return;
        this._isMoving = true;
        this.requireMove = false;
        document.documentElement.addEventListener("mousemove", this.requesting);
    }
    unlisten() {
        if (!this._isMoving) return;
        this._isMoving = false;
        this.requireMove = false;
        document.documentElement.removeEventListener("mousemove", this.requesting);
    }
    request(e) {
        if (!this._isMoving) return;
        this.point = {
            x: e.clientX,
            y: e.clientY
        };
        if (this.requireMove) return;
        this.requireMove = true;
        window.requestAnimationFrame(this.moving);
    }
    move() {
        if (!this.requireMove) return;
        this.forEach((instance)=>instance.mouseMove(this.point));
        this.requireMove = false;
    }
}
class Engine {
    constructor(){
        state.create(Register);
        state.create(Stage);
        state.create(Renderer);
        state.create(Resizer);
        state.create(ScrollLocker);
        state.create(Load);
        state.create(FontSwap);
        state.create(MouseMove);
        const registerModule = state.getModule("register");
        this.register = registerModule.register.bind(registerModule);
    }
    get isActive() {
        return state.isActive;
    }
    start() {
        inspector.debug("START");
        state.isActive = true;
    }
    stop() {
        inspector.debug("STOP");
        state.isActive = false;
    }
}
const engine = new Engine();
const sanitize = (className)=>className.charAt(0) === "." ? className.substr(1) : className;
const getClassNames = (element)=>element.className ? element.className.split(" ") : [];
const modifyClass = (element, className, remove)=>{
    className = sanitize(className);
    const classNames = getClassNames(element);
    const index = classNames.indexOf(className);
    if (remove === true) {
        if (index > -1) classNames.splice(index, 1);
    } else if (index === -1) classNames.push(className);
    element.className = classNames.join(" ");
};
const addClass = (element, className)=>modifyClass(element, className);
const removeClass = (element, className)=>modifyClass(element, className, true);
const hasClass = (element, className)=>getClassNames(element).indexOf(sanitize(className)) > -1;
const dom = {};
dom.addClass = addClass;
dom.hasClass = hasClass;
dom.removeClass = removeClass;
dom.queryParentSelector = queryParentSelector;
dom.querySelectorAllArray = querySelectorAllArray;
const supportLocalStorage = ()=>{
    try {
        return "localStorage" in window && window.localStorage !== null;
    } catch (e) {
        return false;
    }
};
const support = {};
support.supportLocalStorage = supportLocalStorage;
const TransitionSelector = {
    NONE: ns.selector("transition-none")
};
const selector = {};
selector.TransitionSelector = TransitionSelector;
/**
 * Copy properties from multiple sources including accessors.
 * source : https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/assign#copier_des_accesseurs
 *
 * @param {object} [target] - Target object to copy into
 * @param {...objects} [sources] - Multiple objects
 * @return {object} A new object
 *
 * @example
 *
 *     const obj1 = {
 *        key: 'value'
 *     };
 *     const obj2 = {
 *        get function01 () {
 *          return a-value;
 *        }
 *        set function01 () {
 *          return a-value;
 *        }
 *     };
 *     completeAssign(obj1, obj2)
 */ const completeAssign = (target, ...sources)=>{
    sources.forEach((source)=>{
        const descriptors1 = Object.keys(source).reduce((descriptors, key)=>{
            descriptors[key] = Object.getOwnPropertyDescriptor(source, key);
            return descriptors;
        }, {});
        Object.getOwnPropertySymbols(source).forEach((sym)=>{
            const descriptor = Object.getOwnPropertyDescriptor(source, sym);
            if (descriptor.enumerable) descriptors1[sym] = descriptor;
        });
        Object.defineProperties(target, descriptors1);
    });
    return target;
};
const property = {};
property.completeAssign = completeAssign;
const internals = {};
const legacy = {};
Object.defineProperty(legacy, "isLegacy", {
    get: ()=>state.isLegacy
});
legacy.setLegacy = ()=>{
    state.isLegacy = true;
};
internals.legacy = legacy;
internals.dom = dom;
internals.support = support;
internals.motion = selector;
internals.property = property;
internals.ns = ns;
internals.register = engine.register;
Object.defineProperty(internals, "preventManipulation", {
    get: ()=>options.preventManipulation
});
inspector.info(`version ${config.version}`);
const api$1 = (node)=>{
    const stage = state.getModule("stage");
    return stage.getProxy(node);
};
api$1.Modes = Modes;
Object.defineProperty(api$1, "mode", {
    set: (value)=>{
        options.mode = value;
    },
    get: ()=>options.mode
});
api$1.internals = internals;
api$1.start = engine.start;
api$1.stop = engine.stop;
api$1.inspector = inspector;
options.configure(window[config.namespace], api$1.start);
window[config.namespace] = api$1;
class Emitter {
    constructor(){
        this.emissions = {};
    }
    add(type, closure) {
        if (typeof closure !== "function") throw new Error("closure must be a function");
        if (!this.emissions[type]) this.emissions[type] = [];
        this.emissions[type].push(closure);
    }
    remove(type, closure) {
        if (!this.emissions[type]) return;
        if (!closure) delete this.emissions[type];
        else {
            const index = this.emissions[type].indexOf(closure);
            if (index > -1) this.emissions[type].splice(index);
        }
    }
    emit(type, data) {
        if (!this.emissions[type]) return [];
        const response = [];
        for (const closure of this.emissions[type])if (closure) response.push(closure(data));
        return response;
    }
    dispose() {
        this.emissions = null;
    }
}
class Breakpoint {
    constructor(id, minWidth){
        this.id = id;
        this.minWidth = minWidth;
    }
    test() {
        return window.matchMedia(`(min-width: ${this.minWidth}em)`).matches;
    }
}
const Breakpoints = {
    XS: new Breakpoint("xs", 0),
    SM: new Breakpoint("sm", 36),
    MD: new Breakpoint("md", 48),
    LG: new Breakpoint("lg", 62),
    XL: new Breakpoint("xl", 78)
};
class Instance {
    constructor(jsAttribute = true){
        this.jsAttribute = jsAttribute;
        this._isRendering = false;
        this._isResizing = false;
        this._isScrollLocked = false;
        this._isLoading = false;
        this._isSwappingFont = false;
        this._listeners = {};
        this._keyListenerTypes = [];
        this._keys = [];
        this.handlingKey = this.handleKey.bind(this);
        this._emitter = new Emitter();
        this._ascent = new Emitter();
        this._descent = new Emitter();
        this._registrations = [];
        this._nexts = [];
    }
    static get instanceClassName() {
        return "Instance";
    }
    _config(element, registration) {
        this.element = element;
        this.registration = registration;
        this.node = element.node;
        this.id = element.node.id;
        if (this.jsAttribute) this.setAttribute(registration.attribute, true);
        this.init();
    }
    init() {}
    get proxy() {
        const scope = this;
        return {
            render: ()=>scope.render(),
            resize: ()=>scope.resize()
        };
    }
    register(selector3, InstanceClass) {
        const registration = state.getModule("register").register(selector3, InstanceClass, this);
        this._registrations.push(registration);
    }
    getRegisteredInstances(instanceClassName) {
        for (const registration of this._registrations)if (registration.hasInstanceClassName(instanceClassName)) return registration.instances.collection;
        return [];
    }
    dispatch(type, detail, bubbles, cancelable) {
        const event = new CustomEvent(type, {
            detail: detail,
            bubble: bubbles === true,
            cancelable: cancelable === true
        });
        this.node.dispatchEvent(event);
    }
    listen(type, closure, options1) {
        if (!this._listeners[type]) this._listeners[type] = [];
        if (this._listeners[type].indexOf(closure) > -1) return;
        this._listeners[type].push(closure);
        this.node.addEventListener(type, closure, options1);
    }
    unlisten(type, closure) {
        if (!type) for(const type1 in this._listeners)this.unlisten(type1);
        else if (!closure) {
            if (!this._listeners[type]) return;
            for (const closure of this._listeners[type])this.node.removeEventListener(type, closure);
            this._listeners[type].length = 0;
        } else {
            if (!this._listeners[type]) return;
            const index = this._listeners[type].indexOf(closure);
            if (index > -1) this._listeners[type].splice(index, 1);
            this.node.removeEventListener(type, closure);
        }
    }
    listenKey(code, closure, preventDefault = false, stopPropagation = false, type = "down") {
        if (this._keyListenerTypes.indexOf(type) === -1) {
            this.listen(`key${type}`, this.handlingKey);
            this._keyListenerTypes.push(type);
        }
        this._keys.push(new KeyAction(type, code, closure, preventDefault, stopPropagation));
    }
    unlistenKey(code, closure) {
        this._keys = this._keys.filter((key)=>key.code !== code || key.closure !== closure);
        this._keyListenerTypes.forEach((type)=>{
            if (!this._keys.some((key)=>key.type === type)) this.unlisten(`key${type}`, this.handlingKey);
        });
    }
    handleKey(e) {
        for (const key of this._keys)key.handle(e);
    }
    get isRendering() {
        return this._isRendering;
    }
    set isRendering(value) {
        if (this._isRendering === value) return;
        if (value) state.add("render", this);
        else state.remove("render", this);
        this._isRendering = value;
    }
    render() {}
    request(closure) {
        this._nexts.push(closure);
        state.getModule("render").request(this);
    }
    next() {
        const nexts = this._nexts.slice();
        this._nexts.length = 0;
        for (const closure of nexts)if (closure) closure();
    }
    get isResizing() {
        return this._isResizing;
    }
    set isResizing(value) {
        if (this._isResizing === value) return;
        if (value) {
            state.add("resize", this);
            this.resize();
        } else state.remove("resize", this);
        this._isResizing = value;
    }
    resize() {}
    isBreakpoint(breakpoint) {
        switch(true){
            case typeof breakpoint === "string":
                return Breakpoints[breakpoint.toUpperCase()].test();
            default:
                return breakpoint.test();
        }
    }
    get isScrollLocked() {
        return this._isScrollLocked;
    }
    set isScrollLocked(value) {
        if (this._isScrollLocked === value) return;
        if (value) state.add("lock", this);
        else state.remove("lock", this);
        this._isScrollLocked = value;
    }
    get isLoading() {
        return this._isLoading;
    }
    set isLoading(value) {
        if (this._isLoading === value) return;
        if (value) state.add("load", this);
        else state.remove("load", this);
        this._isLoading = value;
    }
    load() {}
    get isSwappingFont() {
        return this._isSwappingFont;
    }
    set isSwappingFont(value) {
        if (this._isSwappingFont === value) return;
        if (value) state.add("font-swap", this);
        else state.remove("font-swap", this);
        this._isSwappingFont = value;
    }
    swapFont() {}
    get isMouseMoving() {
        return this._isMouseMoving;
    }
    set isMouseMoving(value) {
        if (this._isMouseMoving === value) return;
        if (value) state.add("mouse-move", this);
        else state.remove("mouse-move", this);
        this._isMouseMoving = value;
    }
    mouseMove(point) {}
    examine(attributeNames) {
        if (!this.node.matches(this.registration.selector)) {
            this._dispose();
            return;
        }
        this.mutate(attributeNames);
    }
    mutate(attributeNames) {}
    _dispose() {
        inspector.debug(`dispose instance of ${this.registration.instanceClassName} on element [${this.element.id}]`);
        this.removeAttribute(this.registration.attribute);
        this.unlisten();
        this._keys = null;
        this.isRendering = false;
        this.isResizing = false;
        this._nexts = null;
        state.getModule("render").nexts.remove(this);
        this.isScrollLocked = false;
        this.isLoading = false;
        this.isSwappingFont = false;
        this._emitter.dispose();
        this._emitter = null;
        this._ascent.dispose();
        this._ascent = null;
        this._descent.dispose();
        this._descent = null;
        this.element.remove(this);
        for (const registration of this._registrations)state.remove("register", registration);
        this._registrations = null;
        this.registration.remove(this);
        this.dispose();
    }
    dispose() {}
    emit(type, data) {
        return this.element.emit(type, data);
    }
    addEmission(type, closure) {
        this._emitter.add(type, closure);
    }
    removeEmission(type, closure) {
        this._emitter.remove(type, closure);
    }
    ascend(type, data) {
        return this.element.ascend(type, data);
    }
    addAscent(type, closure) {
        this._ascent.add(type, closure);
    }
    removeAscent(type, closure) {
        this._ascent.remove(type, closure);
    }
    descend(type, data) {
        return this.element.descend(type, data);
    }
    addDescent(type, closure) {
        this._descent.add(type, closure);
    }
    removeDescent(type, closure) {
        this._descent.remove(type, closure);
    }
    get style() {
        return this.node.style;
    }
    addClass(className) {
        addClass(this.node, className);
    }
    removeClass(className) {
        removeClass(this.node, className);
    }
    hasClass(className) {
        return hasClass(this.node, className);
    }
    setAttribute(attributeName, value) {
        this.node.setAttribute(attributeName, value);
    }
    getAttribute(attributeName) {
        return this.node.getAttribute(attributeName);
    }
    hasAttribute(attributeName) {
        return this.node.hasAttribute(attributeName);
    }
    removeAttribute(attributeName) {
        this.node.removeAttribute(attributeName);
    }
    setProperty(propertyName, value) {
        this.node.style.setProperty(propertyName, value);
    }
    removeProperty(propertyName) {
        this.node.style.removeProperty(propertyName);
    }
    focus() {
        this.node.focus();
    }
    get hasFocus() {
        return this.node === document.activeElement;
    }
    matches(selectors) {
        return this.node.matches(selectors);
    }
    querySelector(selectors) {
        return this.node.querySelector(selectors);
    }
    querySelectorAll(selectors) {
        return querySelectorAllArray(this.node, selectors);
    }
    queryParentSelector(selectors) {
        return queryParentSelector(this.node, selectors);
    }
    getRect() {
        return this.node.getBoundingClientRect();
    }
    get isLegacy() {
        return state.isLegacy;
    }
}
class KeyAction {
    constructor(type, code, closure, preventDefault, stopPropagation){
        this.type = type;
        this.eventType = `key${type}`;
        this.code = code;
        this.closure = closure;
        this.preventDefault = preventDefault === true;
        this.stopPropagation = stopPropagation === true;
    }
    handle(e) {
        if (e.type !== this.eventType) return;
        if (e.keyCode === this.code) {
            this.closure(e);
            if (this.preventDefault) e.preventDefault();
            if (this.stopPropagation) e.stopPropagation();
        }
    }
}
const KeyCodes = {
    TAB: 9,
    ESCAPE: 27,
    END: 35,
    HOME: 36,
    LEFT: 37,
    UP: 38,
    RIGHT: 39,
    DOWN: 40
};
const DisclosureEvent = {
    DISCLOSE: ns.event("disclose"),
    CONCEAL: ns.event("conceal")
};
const DisclosureEmission = {
    RESET: ns.emission("disclosure", "reset"),
    ADDED: ns.emission("disclosure", "added"),
    REMOVED: ns.emission("disclosure", "removed"),
    GROUP: ns.emission("disclosure", "group"),
    UNGROUP: ns.emission("disclosure", "ungroup")
};
class Disclosure extends Instance {
    constructor(type, selector4, DisclosureButtonInstanceClass, disclosuresGroupInstanceClassName){
        super();
        this.type = type;
        this._selector = selector4;
        this.DisclosureButtonInstanceClass = DisclosureButtonInstanceClass;
        this.disclosuresGroupInstanceClassName = disclosuresGroupInstanceClassName;
        this.modifier = this._selector + "--" + this.type.id;
        this.pristine = true;
    }
    static get instanceClassName() {
        return "Disclosure";
    }
    init() {
        this.addDescent(DisclosureEmission.RESET, this.reset.bind(this));
        this.addDescent(DisclosureEmission.GROUP, this.update.bind(this));
        this.addDescent(DisclosureEmission.UNGROUP, this.update.bind(this));
        this.register(`[aria-controls="${this.id}"]`, this.DisclosureButtonInstanceClass);
        this.ascend(DisclosureEmission.ADDED);
        this.update();
    }
    get proxy() {
        const scope = this;
        const proxy = Object.assign(super.proxy, {
            disclose: scope.disclose.bind(scope),
            focus: scope.focus.bind(scope)
        });
        if (this.type.canConceal) proxy.conceal = scope.conceal.bind(scope);
        const proxyAccessors = {
            get buttons () {
                return scope.buttons.map((button)=>button.proxy);
            },
            get group () {
                const group = scope.group;
                return group ? group.proxy : null;
            }
        };
        return completeAssign(proxy, proxyAccessors);
    }
    get buttons() {
        return this.getRegisteredInstances(this.DisclosureButtonInstanceClass.instanceClassName);
    }
    update() {
        this.getGroup();
    }
    getGroup() {
        if (!this.disclosuresGroupInstanceClassName) {
            this._group = null;
            return;
        }
        const group = this.element.getAscendantInstance(this.disclosuresGroupInstanceClassName, this.constructor.instanceClassName);
        if (!group || !group.validate(this)) {
            this._group = null;
            return;
        }
        this._group = group;
    }
    get group() {
        return this._group;
    }
    disclose(withhold) {
        if (this.disclosed) return false;
        this.pristine = false;
        this.disclosed = true;
        if (!withhold && this.group) this.group.current = this;
        return true;
    }
    conceal(withhold, preventFocus) {
        if (!this.disclosed) return false;
        if (!this.type.canConceal && this.group && this.group.current === this) return false;
        this.pristine = false;
        this.disclosed = false;
        if (!withhold && this.group && this.group.current === this) this.group.current = null;
        if (!preventFocus) this.focus();
        this.descend(DisclosureEmission.RESET);
        return true;
    }
    get disclosed() {
        return this._disclosed;
    }
    set disclosed(value) {
        if (this._disclosed === value) return;
        this.dispatch(value ? DisclosureEvent.DISCLOSE : DisclosureEvent.CONCEAL, this.type);
        this._disclosed = value;
        if (value) this.addClass(this.modifier);
        else this.removeClass(this.modifier);
        for(let i = 0; i < this.buttons.length; i++)this.buttons[i].apply(value);
    }
    reset() {}
    toggle(isPrimary) {
        if (!this.type.canConceal) this.disclose();
        else switch(true){
            case !isPrimary:
            case this.disclosed:
                this.conceal();
                break;
            default:
                this.disclose();
        }
    }
    get buttonHasFocus() {
        if (this.buttons.some((button)=>{
            return button.hasFocus;
        })) return true;
        return false;
    }
    get hasFocus() {
        if (super.hasFocus) return true;
        if (this.buttonHasFocus) return true;
        return this.querySelectorAll(":focus").length > 0;
    }
    focus() {
        for(let i = 0; i < this.buttons.length; i++){
            const button = this.buttons[i];
            if (button.isPrimary) {
                button.focus();
                return;
            }
        }
    }
    dispose() {
        this._group = null;
        super.dispose();
        this.ascend(DisclosureEmission.REMOVED);
    }
}
class DisclosureButton extends Instance {
    constructor(type){
        super();
        this.type = type;
        this.attributeName = type.ariaState ? "aria-" + type.id : ns.attr(type.id);
    }
    static get instanceClassName() {
        return "DisclosureButton";
    }
    init() {
        this.controlsId = this.getAttribute("aria-controls");
        this.isPrimary = this.hasAttribute(this.attributeName);
        if (this.isPrimary && this.disclosed && this.registration.creator.pristine) this.registration.creator.disclose();
        this.listen("click", this.click.bind(this));
    }
    get proxy() {
        const scope = this;
        return Object.assign(super.proxy, {
            focus: scope.focus.bind(scope)
        });
    }
    click(e) {
        if (this.registration.creator) this.registration.creator.toggle(this.isPrimary);
    }
    mutate(attributeNames) {
        if (this.isPrimary && attributeNames.indexOf(this.attributeName) > -1 && this.registration.creator) {
            if (this.disclosed) this.registration.creator.disclose();
            else if (this.type.canConceal) this.registration.creator.conceal();
        }
    }
    apply(value) {
        if (!this.isPrimary) return;
        this.setAttribute(this.attributeName, value);
    }
    get disclosed() {
        return this.getAttribute(this.attributeName) === "true";
    }
}
class DisclosuresGroup extends Instance {
    constructor(disclosureInstanceClassName, jsAttribute){
        super(jsAttribute);
        this.disclosureInstanceClassName = disclosureInstanceClassName;
        this._index = -1;
    }
    static get instanceClassName() {
        return "DisclosuresGroup";
    }
    init() {
        this.addAscent(DisclosureEmission.ADDED, this.update.bind(this));
        this.addAscent(DisclosureEmission.REMOVED, this.update.bind(this));
        this.descend(DisclosureEmission.GROUP);
        this.update();
    }
    get proxy() {
        const scope = this;
        const proxyAccessors = {
            set index (value){
                scope.index = value;
            },
            get index () {
                return scope.index;
            },
            get length () {
                return scope.length;
            },
            get current () {
                const current = scope.current;
                return current ? current.proxy : null;
            },
            get members () {
                return scope.members.map((member)=>member.proxy);
            },
            get hasFocus () {
                return scope.hasFocus;
            }
        };
        return completeAssign(super.proxy, proxyAccessors);
    }
    validate(member) {
        return true;
    }
    getMembers() {
        const members = this.element.getDescendantInstances(this.disclosureInstanceClassName, this.constructor.instanceClassName, true);
        this._members = members.filter(this.validate.bind(this));
    }
    update() {
        this.getMembers();
        this.getIndex();
    }
    get members() {
        return this._members;
    }
    get length() {
        return this.members ? this.members.length : 0;
    }
    getIndex() {
        this._index = -1;
        for(let i = 0; i < this.length; i++){
            if (this.index > -1) this.members[i].conceal(true, true);
            else if (this.members[i].disclosed) this.index = i;
        }
    }
    get index() {
        return this._index;
    }
    set index(value) {
        if (value < -1 || value >= this.length || value === this._index) return;
        this._index = value;
        for(let i = 0; i < this.length; i++){
            const member = this.members[i];
            if (value === i) member.disclose(true);
            else member.conceal(true, true);
        }
        this.apply();
    }
    get current() {
        return this._index === -1 ? null : this.members[this._index];
    }
    set current(member) {
        this.index = this.members.indexOf(member);
    }
    get hasFocus() {
        const current = this.current;
        if (current) return current.hasFocus;
        return false;
    }
    apply() {}
    dispose() {
        super.dispose();
        this.descend(DisclosureEmission.UNGROUP);
        this._members = null;
    }
}
const DisclosureType = {
    EXPAND: {
        id: "expanded",
        ariaState: true,
        ariaControls: true,
        canConceal: true
    },
    SELECT: {
        id: "selected",
        ariaState: true,
        ariaControls: true,
        canConceal: false
    },
    OPENED: {
        id: "opened",
        ariaState: false,
        ariaControls: true,
        canConceal: true
    }
};
class CollapseButton extends DisclosureButton {
    constructor(){
        super(DisclosureType.EXPAND);
    }
    static get instanceClassName() {
        return "CollapseButton";
    }
}
const CollapseSelector = {
    COLLAPSE: ns.selector("collapse")
};
/**
 * Tab coorespond au panel d'un élement Tabs (tab panel)
 * Tab étend disclosure qui ajoute/enleve le modifier --selected,
 * et ajoute/eleve l'attribut hidden, sur le panel
 */ class Collapse extends Disclosure {
    constructor(){
        super(DisclosureType.EXPAND, CollapseSelector.COLLAPSE, CollapseButton, "CollapsesGroup");
    }
    static get instanceClassName() {
        return "Collapse";
    }
    init() {
        super.init();
        this.listen("transitionend", this.transitionend.bind(this));
    }
    transitionend(e) {
        if (!this.disclosed) {
            if (this.isLegacy) this.style.maxHeight = "";
            else this.style.removeProperty("--collapse-max-height");
        }
    }
    unbound() {
        if (this.isLegacy) this.style.maxHeight = "none";
        else this.style.setProperty("--collapse-max-height", "none");
    }
    disclose(withhold) {
        if (this.disclosed) return;
        this.unbound();
        this.request(()=>{
            this.adjust();
            this.request(()=>{
                super.disclose(withhold);
            });
        });
    }
    conceal(withhold, preventFocus) {
        if (!this.disclosed) return;
        this.request(()=>{
            this.adjust();
            this.request(()=>{
                super.conceal(withhold, preventFocus);
            });
        });
    }
    adjust() {
        this.setProperty("--collapser", "none");
        const height = this.node.offsetHeight;
        this.setProperty("--collapse", -height + "px");
        this.setProperty("--collapser", "");
    }
    reset() {
        if (!this.pristine) this.disclosed = false;
    }
}
class CollapsesGroup extends DisclosuresGroup {
    constructor(){
        super("Collapse");
    }
    static get instanceClassName() {
        return "CollapsesGroup";
    }
}
const EquisizedEmission = {
    CHANGE: ns("equisized")
};
class Equisized extends Instance {
    static get instanceClassName() {
        return "Equisized";
    }
    init() {
        this.ascend(EquisizedEmission.CHANGE);
    }
    measure() {
        if (this.isLegacy) this.style.width = "auto";
        return this.getRect().width;
    }
    adjust(width) {
        if (this.isLegacy) this.style.width = `${width}px`;
    }
    dispose() {
        this.ascend(EquisizedEmission.CHANGE);
    }
}
class EquisizedsGroup extends Instance {
    static get instanceClassName() {
        return "EquisizedsGroup";
    }
    init() {
        this.isResizing = true;
        this.isLoading = true;
        this.addAscent(EquisizedEmission.CHANGE, this.resize.bind(this));
    }
    load() {
        this.resize();
    }
    resize() {
        const equisizeds = this.element.getDescendantInstances("Equisized");
        if (!this.isLegacy) this.style.setProperty("--equisized-width", "auto");
        const width = Math.max(...equisizeds.map((equisized)=>equisized.measure()));
        if (this.isLegacy) equisizeds.forEach((equisized)=>equisized.adjust(width));
        else this.style.setProperty("--equisized-width", `${width}px`);
    }
}
const ToggleEvent = {
    TOGGLE: ns.event("toggle")
};
class Toggle extends Instance {
    static get instanceClassName() {
        return "Toggle";
    }
    init() {
        this.pressed = this.pressed === "true";
        this.listen("click", this.toggle.bind(this));
    }
    toggle() {
        this.pressed = this.pressed !== "true";
    }
    get pressed() {
        return this.getAttribute("aria-pressed");
    }
    set pressed(value) {
        this.setAttribute("aria-pressed", value ? "true" : "false");
        this.dispatch(ToggleEvent.TOGGLE, value);
    }
    get proxy() {
        const scope = this;
        const proxy = Object.assign(super.proxy, {
            toggle: scope.toggle.bind(scope)
        });
        const proxyAccessors = {
            get pressed () {
                return scope.pressed;
            },
            set pressed (value){
                scope.pressed = value;
            }
        };
        return completeAssign(proxy, proxyAccessors);
    }
}
const setAttributes = (el, attrs)=>{
    Object.keys(attrs).forEach((key)=>el.setAttribute(key, attrs[key]));
};
class InjectSvg extends Instance {
    static get instanceClassName() {
        return "InjectSvg";
    }
    init() {
        if (this.node) this.img = this.node.querySelector("img");
        if (!this.isLegacy) this.replace();
    }
    get proxy() {
        const scope = this;
        return Object.assign(super.proxy, {
            replace: scope.replace.bind(scope),
            restore: scope.restore.bind(scope)
        });
    }
    fetch() {
        if (this.img) {
            this.imgID = this.img.getAttribute("id");
            this.imgClass = this.img.getAttribute("class");
            this.imgURL = this.img.getAttribute("src");
            fetch(this.imgURL).then((data)=>data.text()).then((response)=>{
                const parser = new DOMParser();
                const xmlDoc = parser.parseFromString(response, "text/html");
                this.svg = xmlDoc.querySelector("svg");
                if (this.svg) this.replace();
            });
        }
    }
    replace() {
        if (!this.svg) {
            this.fetch();
            return;
        }
        if (this.imgID && typeof this.imgID !== "undefined") this.svg.setAttribute("id", this.imgID);
        if (this.imgClass && typeof this.imgClass !== "undefined") this.svg.setAttribute("class", this.imgClass);
        if (this.svg.hasAttribute("xmlns:a")) this.svg.removeAttribute("xmlns:a");
        this.node.setAttribute("data-fr-inject-svg", true);
        const svgAttributes = {
            "aria-hidden": true,
            focusable: false
        };
        setAttributes(this.svg, svgAttributes);
        this.node.replaceChild(this.svg, this.img);
    }
    restore() {
        if (this.img && this.svg) {
            this.node.setAttribute("data-fr-inject-svg", false);
            this.node.replaceChild(this.img, this.svg);
        }
    }
}
const InjectSvgSelector = {
    INJECT_SVG: `[${ns.attr("inject-svg")}]`
};
api$1.core = {
    Instance: Instance,
    Breakpoints: Breakpoints,
    KeyCodes: KeyCodes,
    Disclosure: Disclosure,
    DisclosureButton: DisclosureButton,
    DisclosuresGroup: DisclosuresGroup,
    DisclosureType: DisclosureType,
    DisclosureEvent: DisclosureEvent,
    DisclosureEmission: DisclosureEmission,
    Collapse: Collapse,
    CollapseButton: CollapseButton,
    CollapsesGroup: CollapsesGroup,
    CollapseSelector: CollapseSelector,
    RootSelector: RootSelector,
    Equisized: Equisized,
    EquisizedEmission: EquisizedEmission,
    Toggle: Toggle,
    EquisizedsGroup: EquisizedsGroup,
    InjectSvg: InjectSvg,
    InjectSvgSelector: InjectSvgSelector
};
api$1.internals.register(api$1.core.CollapseSelector.COLLAPSE, api$1.core.Collapse);
api$1.internals.register(api$1.core.InjectSvgSelector.INJECT_SVG, api$1.core.InjectSvg);
const api = window[config.namespace];
const SchemeValue = {
    SYSTEM: "system",
    LIGHT: "light",
    DARK: "dark"
};
const SchemeAttribute = {
    THEME: api.internals.ns.attr("theme"),
    SCHEME: api.internals.ns.attr("scheme"),
    TRANSITION: api.internals.ns.attr("transition")
};
const SchemeTheme = {
    LIGHT: "light",
    DARK: "dark"
};
const SchemeEmission = {
    SCHEME: api.internals.ns.emission("scheme", "scheme"),
    THEME: api.internals.ns.emission("scheme", "theme"),
    ASK: api.internals.ns.emission("scheme", "ask")
};
class Scheme extends api.core.Instance {
    constructor(){
        super(false);
    }
    static get instanceClassName() {
        return "Scheme";
    }
    init() {
        this.changing = this.change.bind(this);
        if (this.hasAttribute(SchemeAttribute.TRANSITION)) {
            this.removeAttribute(SchemeAttribute.TRANSITION);
            this.request(this.restoreTransition.bind(this));
        }
        const scheme = api.internals.support.supportLocalStorage() ? localStorage.getItem("scheme") : "";
        const schemeAttr = this.getAttribute(SchemeAttribute.SCHEME);
        switch(scheme){
            case SchemeValue.DARK:
            case SchemeValue.LIGHT:
            case SchemeValue.SYSTEM:
                this.scheme = scheme;
                break;
            default:
                switch(schemeAttr){
                    case SchemeValue.DARK:
                        this.scheme = SchemeValue.DARK;
                        break;
                    case SchemeValue.LIGHT:
                        this.scheme = SchemeValue.LIGHT;
                        break;
                    default:
                        this.scheme = SchemeValue.SYSTEM;
                }
        }
        this.addAscent(SchemeEmission.ASK, this.ask.bind(this));
        this.addAscent(SchemeEmission.SCHEME, this.apply.bind(this));
    }
    get proxy() {
        const scope = this;
        const proxyAccessors = {
            get scheme () {
                return scope.scheme;
            },
            set scheme (value){
                scope.scheme = value;
            }
        };
        return api.internals.property.completeAssign(super.proxy, proxyAccessors);
    }
    restoreTransition() {
        this.setAttribute(SchemeAttribute.TRANSITION, "");
    }
    ask() {
        this.descend(SchemeEmission.SCHEME, this.scheme);
    }
    apply(value) {
        this.scheme = value;
    }
    get scheme() {
        return this._scheme;
    }
    set scheme(value) {
        if (this._scheme === value) return;
        this._scheme = value;
        switch(value){
            case SchemeValue.SYSTEM:
                this.listenPreferences();
                break;
            case SchemeValue.DARK:
                this.unlistenPreferences();
                this.theme = SchemeTheme.DARK;
                break;
            case SchemeValue.LIGHT:
                this.unlistenPreferences();
                this.theme = SchemeTheme.LIGHT;
                break;
            default:
                this.scheme = SchemeValue.SYSTEM;
                return;
        }
        this.descend(SchemeEmission.SCHEME, value);
        if (api.internals.support.supportLocalStorage()) localStorage.setItem("scheme", value);
        this.setAttribute(SchemeAttribute.SCHEME, value);
    }
    get theme() {
        return this._theme;
    }
    set theme(value) {
        if (this._theme === value) return;
        switch(value){
            case SchemeTheme.LIGHT:
            case SchemeTheme.DARK:
                this._theme = value;
                this.setAttribute(SchemeAttribute.THEME, value);
                this.descend(SchemeEmission.THEME, value);
                break;
        }
    }
    listenPreferences() {
        if (this.isListening) return;
        this.isListening = true;
        this.mediaQuery = window.matchMedia("(prefers-color-scheme: dark)");
        this.mediaQuery.addEventListener("change", this.changing);
        this.change();
    }
    unlistenPreferences() {
        if (!this.isListening) return;
        this.isListening = false;
        this.mediaQuery.removeEventListener("change", this.changing);
        this.mediaQuery = null;
    }
    change() {
        if (!this.isListening) return;
        this.theme = this.mediaQuery.matches ? SchemeTheme.DARK : SchemeTheme.LIGHT;
    }
    mutate(attributeNames) {
        if (attributeNames.indexOf(SchemeAttribute.SCHEME) > -1) this.scheme = this.getAttribute(SchemeAttribute.SCHEME);
        if (attributeNames.indexOf(SchemeAttribute.THEME) > -1) this.theme = this.getAttribute(SchemeAttribute.THEME);
    }
    dispose() {
        this.unlistenPreferences();
    }
}
const SchemeSelector = {
    SCHEME: `:root${api.internals.ns.attr.selector("theme")}, :root${api.internals.ns.attr.selector("scheme")}`,
    SWITCH_THEME: api.internals.ns.selector("switch-theme"),
    RADIO_BUTTONS: `input[name="${api.internals.ns("radios-theme")}"]`
};
api.scheme = {
    Scheme: Scheme,
    SchemeValue: SchemeValue,
    SchemeSelector: SchemeSelector,
    SchemeEmission: SchemeEmission,
    SchemeTheme: SchemeTheme
};
api.internals.register(api.scheme.SchemeSelector.SCHEME, api.scheme.Scheme);
const AccordionSelector = {
    GROUP: api.internals.ns.selector("accordions-group"),
    COLLAPSE: `${api.internals.ns.selector("accordion")} > ${api.internals.ns.selector("collapse")}`
};
class AccordionsGroup extends api.core.CollapsesGroup {
    static get instanceClassName() {
        return "AccordionsGroup";
    }
    validate(member) {
        return member.node.matches(AccordionSelector.COLLAPSE);
    }
}
api.accordion = {
    AccordionSelector: AccordionSelector,
    AccordionsGroup: AccordionsGroup
};
api.internals.register(api.accordion.AccordionSelector.GROUP, api.accordion.AccordionsGroup);
const ButtonSelector = {
    EQUISIZED_BUTTON: `${api.internals.ns.selector("btns-group--equisized")} ${api.internals.ns.selector("btn")}`,
    EQUISIZED_GROUP: api.internals.ns.selector("btns-group--equisized")
};
api.button = {
    ButtonSelector: ButtonSelector
};
api.internals.register(api.button.ButtonSelector.EQUISIZED_BUTTON, api.core.Equisized);
api.internals.register(api.button.ButtonSelector.EQUISIZED_GROUP, api.core.EquisizedsGroup);
class Breadcrumb extends api.core.Instance {
    constructor(){
        super();
        this.count = 0;
        this.focusing = this.focus.bind(this);
    }
    static get instanceClassName() {
        return "Breadcrumb";
    }
    init() {
        this.getCollapse();
        this.isResizing = true;
    }
    get proxy() {
        const scope = this;
        return Object.assign(super.proxy, {
            focus: scope.focus.bind(scope),
            disclose: scope.collapse.disclose.bind(scope.collapse)
        });
    }
    getCollapse() {
        const collapse = this.collapse;
        if (collapse) collapse.listen(api.core.DisclosureEvent.DISCLOSE, this.focusing);
        else this.addAscent(api.core.DisclosureEmission.ADDED, this.getCollapse.bind(this));
    }
    resize() {
        const collapse = this.collapse;
        const links = this.links;
        if (!collapse || !links.length) return;
        if (this.isBreakpoint(api.core.Breakpoints.MD)) {
            if (collapse.buttonHasFocus) links[0].focus();
        } else if (links.indexOf(document.activeElement) > -1) collapse.focus();
    }
    get links() {
        return [
            ...this.querySelectorAll("a[href]")
        ];
    }
    get collapse() {
        return this.element.getDescendantInstances(api.core.Collapse.instanceClassName, null, true)[0];
    }
    focus() {
        this.count = 0;
        this._focus();
    }
    _focus() {
        const link = this.links[0];
        if (!link) return;
        link.focus();
        this.request(this.verify.bind(this));
    }
    verify() {
        this.count++;
        if (this.count > 100) return;
        const link = this.links[0];
        if (!link) return;
        if (document.activeElement !== link) this._focus();
    }
}
const BreadcrumbSelector = {
    BREADCRUMB: api.internals.ns.selector("breadcrumb")
};
api.breadcrumb = {
    BreadcrumbSelector: BreadcrumbSelector,
    Breadcrumb: Breadcrumb
};
api.internals.register(api.breadcrumb.BreadcrumbSelector.BREADCRUMB, api.breadcrumb.Breadcrumb);
class ToggleInput extends api.core.Instance {
    static get instanceClassName() {
        return "ToggleInput";
    }
    get isChecked() {
        return this.hasAttribute("checked");
    }
}
class ToggleStatusLabel extends api.core.Instance {
    static get instanceClassName() {
        return "ToggleStatusLabel";
    }
    init() {
        this.register(`input[id="${this.getAttribute("for")}"]`, ToggleInput);
        this.update();
        this.isSwappingFont = true;
    }
    get proxy() {
        const scope = this;
        return Object.assign(super.proxy, {
            update: scope.update.bind(scope)
        });
    }
    get input() {
        return this.getRegisteredInstances("ToggleInput")[0];
    }
    update() {
        this.node.style.removeProperty("--toggle-status-width");
        const checked = this.input.isChecked;
        const style = getComputedStyle(this.node, ":before");
        let maxWidth = parseFloat(style.width);
        this.input.node.checked = !checked;
        const style2 = getComputedStyle(this.node, ":before");
        const width = parseFloat(style2.width);
        if (width > maxWidth) maxWidth = width;
        this.input.node.checked = checked;
        this.node.style.setProperty("--toggle-status-width", maxWidth / 16 + "rem");
    }
    swapFont(families) {
        this.update();
    }
}
const ToggleSelector = {
    STATUS_LABEL: `${api.internals.ns.selector("toggle__label")}${api.internals.ns.attr.selector("checked-label")}${api.internals.ns.attr.selector("unchecked-label")}`
};
// import { ToggleInput } from './script/toggle/toggle-input.js';
api.toggle = {
    ToggleStatusLabel: ToggleStatusLabel,
    ToggleSelector: ToggleSelector
};
api.internals.register(api.toggle.ToggleSelector.STATUS_LABEL, api.toggle.ToggleStatusLabel);
const SidemenuSelector = {
    LIST: api.internals.ns.selector("sidemenu__list"),
    COLLAPSE: `${api.internals.ns.selector("sidemenu__item")} > ${api.internals.ns.selector("collapse")}`
};
class SidemenuList extends api.core.CollapsesGroup {
    static get instanceClassName() {
        return "SidemenuList";
    }
    validate(member) {
        return member.node.matches(SidemenuSelector.COLLAPSE);
    }
}
api.sidemenu = {
    SidemenuList: SidemenuList,
    SidemenuSelector: SidemenuSelector
};
api.internals.register(api.sidemenu.SidemenuSelector.LIST, api.sidemenu.SidemenuList);
const ModalSelector = {
    MODAL: api.internals.ns.selector("modal"),
    SCROLL_SHADOW: api.internals.ns.selector("scroll-shadow"),
    BODY: api.internals.ns.selector("modal__body")
};
class ModalButton extends api.core.DisclosureButton {
    constructor(){
        super(api.core.DisclosureType.OPENED);
    }
    static get instanceClassName() {
        return "ModalButton";
    }
}
const ModalAttribute = {
    CONCEALING_BACKDROP: api.internals.ns.attr("concealing-backdrop")
};
class Modal extends api.core.Disclosure {
    constructor(){
        super(api.core.DisclosureType.OPENED, ModalSelector.MODAL, ModalButton, "ModalsGroup");
        this.scrolling = this.resize.bind(this, false);
        this.resizing = this.resize.bind(this, true);
    }
    static get instanceClassName() {
        return "Modal";
    }
    init() {
        super.init();
        this.listen("click", this.click.bind(this));
        this.listenKey(api.core.KeyCodes.ESCAPE, this.conceal.bind(this, false, false), true, true);
    }
    get body() {
        return this.element.getDescendantInstances("ModalBody", "Modal")[0];
    }
    click(e) {
        if (e.target === this.node && this.getAttribute(ModalAttribute.CONCEALING_BACKDROP) !== "false") this.conceal();
    }
    disclose(withhold) {
        if (!super.disclose(withhold)) return false;
        if (this.body) this.body.activate();
        this.isScrollLocked = true;
        this.setAttribute("aria-modal", "true");
        this.setAttribute("open", "true");
        return true;
    }
    conceal(withhold, preventFocus) {
        if (!super.conceal(withhold, preventFocus)) return false;
        this.isScrollLocked = false;
        this.removeAttribute("aria-modal");
        this.removeAttribute("open");
        if (this.body) this.body.deactivate();
        return true;
    }
}
const unordereds = [
    '[tabindex="0"]',
    "a[href]",
    "button:not([disabled])",
    "input:not([disabled])",
    "select:not([disabled])",
    "textarea:not([disabled])",
    "audio[controls]",
    "video[controls]",
    '[contenteditable]:not([contenteditable="false"])',
    "details>summary:first-of-type",
    "details",
    "iframe"
];
const UNORDEREDS = unordereds.join();
const ordereds = [
    '[tabindex]:not([tabindex="-1"]):not([tabindex="0"])'
];
const ORDEREDS = ordereds.join();
const isFocusable = (element, container)=>{
    if (!(element instanceof Element)) return false;
    const style = window.getComputedStyle(element);
    if (!style) return false;
    if (style.visibility === "hidden") return false;
    if (container === undefined) container = element;
    while(container.contains(element)){
        if (style.display === "none") return false;
        element = element.parentElement;
    }
    return true;
};
class FocusTrap {
    constructor(onTrap, onUntrap){
        this.element = null;
        this.activeElement = null;
        this.onTrap = onTrap;
        this.onUntrap = onUntrap;
        this.waiting = this.wait.bind(this);
        this.handling = this.handle.bind(this);
        this.focusing = this.maintainFocus.bind(this);
        this.current = null;
    }
    get trapped() {
        return this.element !== null;
    }
    trap(element) {
        if (this.trapped) this.untrap();
        this.element = element;
        this.isTrapping = true;
        this.wait();
        if (this.onTrap) this.onTrap();
    }
    wait() {
        if (!isFocusable(this.element)) {
            window.requestAnimationFrame(this.waiting);
            return;
        }
        this.trapping();
    }
    trapping() {
        if (!this.isTrapping) return;
        this.isTrapping = false;
        const focusables = this.focusables;
        if (focusables.length) focusables[0].focus();
        this.element.setAttribute("aria-modal", true);
        window.addEventListener("keydown", this.handling);
        document.body.addEventListener("focus", this.focusing, true);
    }
    stun(node) {
        for (const child of node.children){
            if (child === this.element) continue;
            if (child.contains(this.element)) {
                this.stun(child);
                continue;
            }
            this.stunneds.push(new Stunned(child));
        }
    }
    maintainFocus(event) {
        if (!this.element.contains(event.target)) {
            const focusables = this.focusables;
            if (focusables.length === 0) return;
            const first = focusables[0];
            event.preventDefault();
            first.focus();
        }
    }
    handle(e) {
        if (e.keyCode !== 9) return;
        const focusables = this.focusables;
        if (focusables.length === 0) return;
        const first = focusables[0];
        const last = focusables[focusables.length - 1];
        const index = focusables.indexOf(document.activeElement);
        if (e.shiftKey) {
            if (!this.element.contains(document.activeElement) || index < 1) {
                e.preventDefault();
                last.focus();
            } else if (document.activeElement.tabIndex > 0 || focusables[index - 1].tabIndex > 0) {
                e.preventDefault();
                focusables[index - 1].focus();
            }
        } else {
            if (!this.element.contains(document.activeElement) || index === focusables.length - 1 || index === -1) {
                e.preventDefault();
                first.focus();
            } else if (document.activeElement.tabIndex > 0) {
                e.preventDefault();
                focusables[index + 1].focus();
            }
        }
    }
    get focusables() {
        let unordereds1 = api.internals.dom.querySelectorAllArray(this.element, UNORDEREDS);
        /**
     *  filtrage des radiobutttons de même name (la navigations d'un groupe de radio se fait à la flèche et non pas au tab
     **/ const radios = api.internals.dom.querySelectorAllArray(document.documentElement, 'input[type="radio"]');
        if (radios.length) {
            const groups = {};
            for (const radio of radios){
                const name = radio.getAttribute("name");
                if (groups[name] === undefined) groups[name] = new RadioButtonGroup(name);
                groups[name].push(radio);
            }
            unordereds1 = unordereds1.filter((unordered)=>{
                if (unordered.tagName.toLowerCase() !== "input" || unordered.getAttribute("type").toLowerCase() !== "radio") return true;
                const name = unordered.getAttribute("name");
                return groups[name].keep(unordered);
            });
        }
        const ordereds1 = api.internals.dom.querySelectorAllArray(this.element, ORDEREDS);
        ordereds1.sort((a, b)=>a.tabIndex - b.tabIndex);
        const noDuplicates = unordereds1.filter((element)=>ordereds1.indexOf(element) === -1);
        const concateneds = ordereds1.concat(noDuplicates);
        return concateneds.filter((element)=>element.tabIndex !== "-1" && isFocusable(element, this.element));
    }
    untrap() {
        if (!this.trapped) return;
        this.isTrapping = false;
        this.element.removeAttribute("aria-modal");
        window.removeEventListener("keydown", this.handling);
        document.body.removeEventListener("focus", this.focusing, true);
        this.element = null;
        if (this.onUntrap) this.onUntrap();
    }
    dispose() {
        this.untrap();
    }
}
class Stunned {
    constructor(element){
        this.element = element;
        // this.hidden = element.getAttribute('aria-hidden');
        this.inert = element.getAttribute("inert");
        // this.element.setAttribute('aria-hidden', true);
        this.element.setAttribute("inert", "");
    }
    unstun() {
        /*
    if (this.hidden === null) this.element.removeAttribute('aria-hidden');
    else this.element.setAttribute('aria-hidden', this.hidden);
     */ if (this.inert === null) this.element.removeAttribute("inert");
        else this.element.setAttribute("inert", this.inert);
    }
}
class RadioButtonGroup {
    constructor(name){
        this.name = name;
        this.buttons = [];
    }
    push(button) {
        this.buttons.push(button);
        if (button === document.activeElement || button.checked || this.selected === undefined) this.selected = button;
    }
    keep(button) {
        return this.selected === button;
    }
}
class ModalsGroup extends api.core.DisclosuresGroup {
    constructor(){
        super("Modal", false);
        this.focusTrap = new FocusTrap();
    }
    static get instanceClassName() {
        return "ModalsGroup";
    }
    apply(value, initial) {
        super.apply(value, initial);
        if (this.current === null) this.focusTrap.untrap();
        else this.focusTrap.trap(this.current.node);
    }
}
const OFFSET = 32; // 32px => 8v => 2rem
class ModalBody extends api.core.Instance {
    static get instanceClassName() {
        return "ModalBody";
    }
    init() {
        this.listen("scroll", this.shade.bind(this));
    }
    activate() {
        this.isResizing = true;
        this.resize();
    }
    deactivate() {
        this.isResizing = false;
    }
    shade() {
        if (this.node.scrollHeight > this.node.clientHeight) {
            if (this.node.offsetHeight + this.node.scrollTop >= this.node.scrollHeight) this.removeClass(ModalSelector.SCROLL_SHADOW);
            else this.addClass(ModalSelector.SCROLL_SHADOW);
        } else this.removeClass(ModalSelector.SCROLL_SHADOW);
    }
    resize() {
        this.adjust();
        this.request(this.adjust.bind(this));
    }
    adjust() {
        const offset = OFFSET * (this.isBreakpoint(api.core.Breakpoints.MD) ? 2 : 1);
        if (this.isLegacy) this.style.maxHeight = `${window.innerHeight - offset}px`;
        else this.style.setProperty("--modal-max-height", `${window.innerHeight - offset}px`);
        this.shade();
    }
}
api.modal = {
    Modal: Modal,
    ModalButton: ModalButton,
    ModalBody: ModalBody,
    ModalsGroup: ModalsGroup,
    ModalSelector: ModalSelector
};
api.internals.register(api.modal.ModalSelector.MODAL, api.modal.Modal);
api.internals.register(api.modal.ModalSelector.BODY, api.modal.ModalBody);
api.internals.register(api.core.RootSelector.ROOT, api.modal.ModalsGroup);
const NavigationSelector = {
    NAVIGATION: api.internals.ns.selector("nav"),
    COLLAPSE: `${api.internals.ns.selector("nav__item")} > ${api.internals.ns.selector("collapse")}`,
    ITEM: api.internals.ns.selector("nav__item"),
    ITEM_RIGHT: api.internals.ns("nav__item--align-right"),
    MENU: api.internals.ns.selector("menu")
};
class NavigationItem extends api.core.Instance {
    constructor(){
        super();
        this._isRightAligned = false;
    }
    static get instanceClassName() {
        return "NavigationItem";
    }
    init() {
        this.addAscent(api.core.DisclosureEmission.ADDED, this.calculate.bind(this));
        this.addAscent(api.core.DisclosureEmission.REMOVED, this.calculate.bind(this));
        this.isResizing = true;
        this.calculate();
    }
    resize() {
        this.calculate();
    }
    calculate() {
        const collapse = this.element.getDescendantInstances(api.core.Collapse.instanceClassName, null, true)[0];
        if (collapse && this.isBreakpoint(api.core.Breakpoints.LG) && collapse.element.node.matches(NavigationSelector.MENU)) {
            const right = this.element.node.parentElement.getBoundingClientRect().right;
            const width = collapse.element.node.getBoundingClientRect().width;
            const left = this.element.node.getBoundingClientRect().left;
            this.isRightAligned = left + width > right;
        } else this.isRightAligned = false;
    }
    get isRightAligned() {
        return this._isRightAligned;
    }
    set isRightAligned(value) {
        if (this._isRightAligned === value) return;
        this._isRightAligned = value;
        if (value) api.internals.dom.addClass(this.element.node, NavigationSelector.ITEM_RIGHT);
        else api.internals.dom.removeClass(this.element.node, NavigationSelector.ITEM_RIGHT);
    }
}
const NavigationMousePosition = {
    NONE: -1,
    INSIDE: 0,
    OUTSIDE: 1
};
class Navigation extends api.core.CollapsesGroup {
    static get instanceClassName() {
        return "Navigation";
    }
    init() {
        super.init();
        this.clicked = false;
        this.out = false;
        this.listen("focusout", this.focusOut.bind(this));
        this.listen("mousedown", this.down.bind(this));
    }
    validate(member) {
        return member.element.node.matches(NavigationSelector.COLLAPSE);
    }
    down(e) {
        if (!this.isBreakpoint(api.core.Breakpoints.LG) || this.index === -1 || !this.current) return;
        this.position = this.current.element.node.contains(e.target) ? NavigationMousePosition.INSIDE : NavigationMousePosition.OUTSIDE;
        this.request(this.getPosition.bind(this));
    }
    focusOut(e) {
        if (!this.isBreakpoint(api.core.Breakpoints.LG)) return;
        this.out = true;
        this.request(this.getPosition.bind(this));
    }
    getPosition() {
        if (this.out) switch(this.position){
            case NavigationMousePosition.OUTSIDE:
                this.index = -1;
                break;
            case NavigationMousePosition.INSIDE:
                if (this.current) this.current.focus();
                break;
            default:
                if (this.index > -1 && !this.current.hasFocus) this.index = -1;
        }
        this.position = NavigationMousePosition.NONE;
        this.out = false;
    }
    get index() {
        return super.index;
    }
    set index(value) {
        if (value === -1 && this.current !== null && this.current.hasFocus) this.current.focus();
        super.index = value;
    }
}
api.navigation = {
    Navigation: Navigation,
    NavigationItem: NavigationItem,
    NavigationMousePosition: NavigationMousePosition,
    NavigationSelector: NavigationSelector
};
api.internals.register(api.navigation.NavigationSelector.NAVIGATION, api.navigation.Navigation);
api.internals.register(api.navigation.NavigationSelector.ITEM, api.navigation.NavigationItem);
/**
  * TabButton correspond au bouton cliquable qui change le panel
  * TabButton étend de DisclosureButton qui ajoute/enelve l'attribut aria-selected,
  * Et change l'attributte tabindex a 0 si le boutton est actif (value=true), -1 s'il n'est pas actif (value=false)
 */ class TabButton extends api.core.DisclosureButton {
    constructor(){
        super(api.core.DisclosureType.SELECT);
    }
    static get instanceClassName() {
        return "TabButton";
    }
    apply(value) {
        super.apply(value);
        if (this.isPrimary) {
            this.setAttribute("tabindex", value ? "0" : "-1");
            if (value) {
                if (this.list) this.list.focalize(this);
            }
        }
    }
    get list() {
        return this.element.getAscendantInstance("TabsList", "TabsGroup");
    }
}
const TabSelector = {
    TAB: api.internals.ns.selector("tabs__tab"),
    GROUP: api.internals.ns.selector("tabs"),
    PANEL: api.internals.ns.selector("tabs__panel"),
    LIST: api.internals.ns.selector("tabs__list"),
    SHADOW: api.internals.ns.selector("tabs__shadow"),
    SHADOW_LEFT: api.internals.ns.selector("tabs__shadow--left"),
    SHADOW_RIGHT: api.internals.ns.selector("tabs__shadow--right"),
    PANEL_START: api.internals.ns.selector("tabs__panel--direction-start"),
    PANEL_END: api.internals.ns.selector("tabs__panel--direction-end")
};
const TabPanelDirection = {
    START: "direction-start",
    END: "direction-end",
    NONE: "none"
};
/**
  * Tab coorespond au panel d'un élement Tabs (tab panel)
  * Tab étend disclosure qui ajoute/enleve le modifier --selected,
  * et ajoute/eleve l'attribut hidden, sur le panel
  */ class TabPanel extends api.core.Disclosure {
    constructor(){
        super(api.core.DisclosureType.SELECT, TabSelector.PANEL, TabButton, "TabsGroup");
        this._direction = TabPanelDirection.NONE;
        this._isPreventingTransition = false;
    }
    static get instanceClassName() {
        return "TabPanel";
    }
    get direction() {
        return this._direction;
    }
    set direction(value) {
        if (value === this._direction) return;
        switch(this._direction){
            case TabPanelDirection.START:
                this.removeClass(TabSelector.PANEL_START);
                break;
            case TabPanelDirection.END:
                this.removeClass(TabSelector.PANEL_END);
                break;
            case TabPanelDirection.NONE:
                break;
            default:
                return;
        }
        this._direction = value;
        switch(this._direction){
            case TabPanelDirection.START:
                this.addClass(TabSelector.PANEL_START);
                break;
            case TabPanelDirection.END:
                this.addClass(TabSelector.PANEL_END);
                break;
        }
    }
    get isPreventingTransition() {
        return this._isPreventingTransition;
    }
    set isPreventingTransition(value) {
        if (this._isPreventingTransition === value) return;
        if (value) this.addClass(api.internals.motion.TransitionSelector.NONE);
        else this.removeClass(api.internals.motion.TransitionSelector.NONE);
        this._isPreventingTransition = value === true;
    }
    translate(direction, initial) {
        this.isPreventingTransition = initial;
        this.direction = direction;
    }
    reset() {
        this.group.index = 0;
    }
}
/**
* TabGroup est la classe étendue de DiscosuresGroup
* Correspond à un objet Tabs avec plusieurs tab-button & Tab (panel)
*/ class TabsGroup extends api.core.DisclosuresGroup {
    constructor(){
        super("TabPanel");
    }
    static get instanceClassName() {
        return "TabsGroup";
    }
    init() {
        super.init();
        this.listen("transitionend", this.transitionend.bind(this));
        this.listenKey(api.core.KeyCodes.RIGHT, this.pressRight.bind(this), true, true);
        this.listenKey(api.core.KeyCodes.LEFT, this.pressLeft.bind(this), true, true);
        this.listenKey(api.core.KeyCodes.HOME, this.pressHome.bind(this), true, true);
        this.listenKey(api.core.KeyCodes.END, this.pressEnd.bind(this), true, true);
        this.isRendering = true;
        if (this.list) this.list.apply();
    }
    get list() {
        return this.element.getDescendantInstances("TabsList", "TabsGroup", true)[0];
    }
    transitionend(e) {
        this.isPreventingTransition = true;
    }
    get buttonHasFocus() {
        return this.members.some((member)=>member.buttonHasFocus);
    }
    /**
   * Selectionne l'element suivant de la liste si on est sur un bouton
   * Si on est à la fin on retourne au début
   */ pressRight() {
        if (this.buttonHasFocus) {
            if (this.index < this.length - 1) this.index++;
            else this.index = 0;
            this.focus();
        }
    }
    /**
   * Selectionne l'element précédent de la liste si on est sur un bouton
   * Si on est au debut retourne a la fin
   */ pressLeft() {
        if (this.buttonHasFocus) {
            if (this.index > 0) this.index--;
            else this.index = this.length - 1;
            this.focus();
        }
    }
    /**
   * Selectionne le permier element de la liste si on est sur un bouton
   */ pressHome() {
        if (this.buttonHasFocus) {
            this.index = 0;
            this.focus();
        }
    }
    /**
   * Selectionne le dernier element de la liste si on est sur un bouton
   */ pressEnd() {
        if (this.buttonHasFocus) {
            this.index = this.length - 1;
            this.focus();
        }
    }
    focus() {
        if (this.current) this.current.focus();
    }
    apply() {
        for(let i = 0; i < this._index; i++)this.members[i].translate(TabPanelDirection.START);
        this.current.translate(TabPanelDirection.NONE);
        for(let i1 = this._index + 1; i1 < this.length; i1++)this.members[i1].translate(TabPanelDirection.END);
        this.isPreventingTransition = false;
    }
    get isPreventingTransition() {
        return this._isPreventingTransition;
    }
    set isPreventingTransition(value) {
        if (this._isPreventingTransition === value) return;
        if (value) this.addClass(api.internals.motion.TransitionSelector.NONE);
        else this.removeClass(api.internals.motion.TransitionSelector.NONE);
        this._isPreventingTransition = value === true;
    }
    render() {
        if (this.current === null) return;
        const paneHeight = Math.round(this.current.node.offsetHeight);
        if (this.panelHeight === paneHeight) return;
        this.panelHeight = paneHeight;
        let listHeight = 0;
        if (this.list) listHeight = this.list.node.offsetHeight;
        this.style.setProperty("--tabs-height", this.panelHeight + listHeight + "px");
    }
}
const FOCALIZE_OFFSET = 16;
const SCROLL_OFFSET$1 = 16; // valeur en px du scroll avant laquelle le shadow s'active ou se desactive
class TabsList extends api.core.Instance {
    static get instanceClassName() {
        return "TabsList";
    }
    init() {
        this.listen("scroll", this.scroll.bind(this));
        this.isResizing = true;
    }
    get group() {
        return this.element.getAscendantInstance("TabsGroup", "TabsList");
    }
    focalize(btn) {
        const btnRect = btn.getRect();
        const listRect = this.getRect();
        const actualScroll = this.node.scrollLeft;
        if (btnRect.left < listRect.left) this.node.scrollTo(actualScroll - listRect.left + btnRect.left - FOCALIZE_OFFSET, 0);
        else if (btnRect.right > listRect.right) this.node.scrollTo(actualScroll - listRect.right + btnRect.right + FOCALIZE_OFFSET, 0);
    }
    get isScrolling() {
        return this._isScrolling;
    }
    set isScrolling(value) {
        if (this._isScrolling === value) return;
        this._isScrolling = value;
        this.apply();
    }
    apply() {
        if (!this.group) return;
        if (this._isScrolling) {
            this.group.addClass(TabSelector.SHADOW);
            this.scroll();
        } else {
            this.group.removeClass(TabSelector.SHADOW_RIGHT);
            this.group.removeClass(TabSelector.SHADOW_LEFT);
            this.group.removeClass(TabSelector.SHADOW);
        }
    }
    /* ajoute la classe fr-table__shadow-left ou fr-table__shadow-right sur fr-table en fonction d'une valeur de scroll et du sens (right, left) */ scroll() {
        if (!this.group) return;
        const scrollLeft = this.node.scrollLeft;
        const isMin = scrollLeft <= SCROLL_OFFSET$1;
        const max = this.node.scrollWidth - this.node.clientWidth - SCROLL_OFFSET$1;
        const isMax = Math.abs(scrollLeft) >= max;
        const isRtl = document.documentElement.getAttribute("dir") === "rtl";
        const minSelector = isRtl ? TabSelector.SHADOW_RIGHT : TabSelector.SHADOW_LEFT;
        const maxSelector = isRtl ? TabSelector.SHADOW_LEFT : TabSelector.SHADOW_RIGHT;
        if (isMin) this.group.removeClass(minSelector);
        else this.group.addClass(minSelector);
        if (isMax) this.group.removeClass(maxSelector);
        else this.group.addClass(maxSelector);
    }
    resize() {
        this.isScrolling = this.node.scrollWidth > this.node.clientWidth + SCROLL_OFFSET$1;
    }
    dispose() {
        this.isScrolling = false;
    }
}
api.tab = {
    TabPanel: TabPanel,
    TabButton: TabButton,
    TabsGroup: TabsGroup,
    TabsList: TabsList,
    TabSelector: TabSelector
};
api.internals.register(api.tab.TabSelector.PANEL, api.tab.TabPanel);
api.internals.register(api.tab.TabSelector.GROUP, api.tab.TabsGroup);
api.internals.register(api.tab.TabSelector.LIST, api.tab.TabsList);
const TableEmission = {
    SCROLLABLE: api.internals.ns.emission("table", "scrollable"),
    CHANGE: api.internals.ns.emission("table", "change"),
    CAPTION_HEIGHT: api.internals.ns.emission("table", "captionheight")
};
const PADDING = "1rem"; // padding de 4v sur le caption
class Table extends api.core.Instance {
    static get instanceClassName() {
        return "Table";
    }
    init() {
        this.addAscent(TableEmission.CAPTION_HEIGHT, this.setCaptionHeight.bind(this));
    }
    setCaptionHeight(value) {
        this.setProperty("--table-offset", `calc(${value}px + ${PADDING})`);
    }
}
const TableSelector = {
    TABLE: api.internals.ns.selector("table"),
    SHADOW: api.internals.ns.selector("table__shadow"),
    SHADOW_LEFT: api.internals.ns.selector("table__shadow--left"),
    SHADOW_RIGHT: api.internals.ns.selector("table__shadow--right"),
    ELEMENT: `${api.internals.ns.selector("table")}:not(${api.internals.ns.selector("table--no-scroll")}) table`,
    CAPTION: `${api.internals.ns.selector("table")} table caption`
};
const SCROLL_OFFSET = 8; // valeur en px du scroll avant laquelle le shadow s'active ou se desactive
class TableElement extends api.core.Instance {
    static get instanceClassName() {
        return "TableElement";
    }
    init() {
        this.listen("scroll", this.scroll.bind(this));
        this.content = this.querySelector("tbody");
        this.isResizing = true;
    }
    get isScrolling() {
        return this._isScrolling;
    }
    set isScrolling(value) {
        if (this._isScrolling === value) return;
        this._isScrolling = value;
        if (value) {
            this.addClass(TableSelector.SHADOW);
            this.scroll();
        } else {
            this.removeClass(TableSelector.SHADOW);
            this.removeClass(TableSelector.SHADOW_LEFT);
            this.removeClass(TableSelector.SHADOW_RIGHT);
        }
    }
    /* ajoute la classe fr-table__shadow-left ou fr-table__shadow-right sur fr-table en fonction d'une valeur de scroll et du sens (right, left) */ scroll() {
        const isMin = this.node.scrollLeft <= SCROLL_OFFSET;
        const max = this.content.offsetWidth - this.node.offsetWidth - SCROLL_OFFSET;
        const isMax = Math.abs(this.node.scrollLeft) >= max;
        const isRtl = document.documentElement.getAttribute("dir") === "rtl";
        const minSelector = isRtl ? TableSelector.SHADOW_RIGHT : TableSelector.SHADOW_LEFT;
        const maxSelector = isRtl ? TableSelector.SHADOW_LEFT : TableSelector.SHADOW_RIGHT;
        if (isMin) this.removeClass(minSelector);
        else this.addClass(minSelector);
        if (isMax) this.removeClass(maxSelector);
        else this.addClass(maxSelector);
    }
    resize() {
        this.isScrolling = this.content.offsetWidth > this.node.offsetWidth;
    }
    dispose() {
        this.isScrolling = false;
    }
}
class TableCaption extends api.core.Instance {
    static get instanceClassName() {
        return "TableCaption";
    }
    init() {
        this.height = 0;
        this.isResizing = true;
    }
    resize() {
        const height = this.getRect().height;
        if (this.height === height) return;
        this.height = height;
        this.ascend(TableEmission.CAPTION_HEIGHT, height);
    }
}
api.table = {
    Table: Table,
    TableElement: TableElement,
    TableCaption: TableCaption,
    TableSelector: TableSelector
};
api.internals.register(api.table.TableSelector.TABLE, api.table.Table);
api.internals.register(api.table.TableSelector.ELEMENT, api.table.TableElement);
api.internals.register(api.table.TableSelector.CAPTION, api.table.TableCaption);
const TagSelector = {
    TAG_PRESSABLE: `${api.internals.ns.selector("tag")}[aria-pressed]`
};
api.tag = {
    TagSelector: TagSelector
};
api.internals.register(api.tag.TagSelector.TAG_PRESSABLE, api.core.Toggle);
const DownloadSelector = {
    DOWNLOAD_ASSESS_FILE: `${api.internals.ns.attr.selector("assess-file")}`,
    DOWNLOAD_DETAIL: `${api.internals.ns.selector("download__detail")}`
};
class AssessFile extends api.core.Instance {
    static get instanceClassName() {
        return "AssessFile";
    }
    init() {
        this.lang = this.getLang(this.node);
        this.href = this.getAttribute("href");
        this.hreflang = this.getAttribute("hreflang");
        this.file = {};
        this.detail = this.querySelector(DownloadSelector.DOWNLOAD_DETAIL);
        this.update();
    }
    getFileLength() {
        if (this.href === undefined) {
            this.length = -1;
            return;
        }
        fetch(this.href, {
            method: "HEAD",
            mode: "cors"
        }).then((response)=>{
            this.length = response.headers.get("content-length") || -1;
            if (this.length === -1) console.warn("Impossible de d\xe9tecter le poids du fichier " + this.href + '\nErreur de r\xe9cup\xe9ration de l\'en-t\xeate HTTP : "content-length"');
            this.update();
        });
    }
    update() {
        // TODO V2: implémenter async
        if (this.isLegacy) this.length = -1;
        if (!this.length) {
            this.getFileLength();
            return;
        }
        const details = [];
        if (this.detail) {
            if (this.href) {
                const extension = this.parseExtension(this.href);
                if (extension) details.push(extension.toUpperCase());
            }
            if (this.length !== -1) details.push(this.bytesToSize(this.length));
            if (this.hreflang) details.push(this.getLangDisplayName(this.hreflang));
            this.detail.innerHTML = details.join(" - ");
        }
    }
    getLang(elem) {
        if (elem.lang) return elem.lang;
        if (document.documentElement === elem) return window.navigator.language;
        return this.getLang(elem.parentElement);
    }
    parseExtension(url) {
        const regexExtension = /\.(\w{1,9})(?:$|[?#])/;
        return url.match(regexExtension)[0].replace(".", "");
    }
    getLangDisplayName(locale) {
        if (this.isLegacy) return locale;
        const displayNames = new Intl.DisplayNames([
            this.lang
        ], {
            type: "language"
        });
        const name = displayNames.of(locale);
        return name.charAt(0).toUpperCase() + name.slice(1);
    }
    bytesToSize(bytes) {
        if (bytes === -1) return null;
        let sizeUnits = [
            "octets",
            "ko",
            "Mo",
            "Go",
            "To"
        ];
        if (this.getAttribute(api.internals.ns.attr("assess-file")) === "bytes") sizeUnits = [
            "bytes",
            "KB",
            "MB",
            "GB",
            "TB"
        ];
        const i = parseInt(Math.floor(Math.log(bytes) / Math.log(1000)), 10);
        if (i === 0) return `${bytes} ${sizeUnits[i]}`;
        const size = bytes / 1000 ** i;
        const roundedSize = Math.round((size + Number.EPSILON) * 100) / 100; // arrondi a 2 décimal
        const stringSize = String(roundedSize).replace(".", ",");
        return `${stringSize} ${sizeUnits[i]}`;
    }
}
api.download = {
    DownloadSelector: DownloadSelector,
    AssessFile: AssessFile
};
api.internals.register(api.download.DownloadSelector.DOWNLOAD_ASSESS_FILE, api.download.AssessFile);
const HeaderSelector = {
    HEADER: api.internals.ns.selector("header"),
    TOOLS_LINKS: api.internals.ns.selector("header__tools-links"),
    MENU_LINKS: api.internals.ns.selector("header__menu-links"),
    BUTTONS: `${api.internals.ns.selector("header__tools-links")} ${api.internals.ns.selector("btns-group")}, ${api.internals.ns.selector("header__tools-links")} ${api.internals.ns.selector("links-group")}`,
    MODALS: `${api.internals.ns.selector("header__search")}${api.internals.ns.selector("modal")}, ${api.internals.ns.selector("header__menu")}${api.internals.ns.selector("modal")}`
};
class HeaderLinks extends api.core.Instance {
    static get instanceClassName() {
        return "HeaderLinks";
    }
    init() {
        const header = this.queryParentSelector(HeaderSelector.HEADER);
        this.toolsLinks = header.querySelector(HeaderSelector.TOOLS_LINKS);
        this.menuLinks = header.querySelector(HeaderSelector.MENU_LINKS);
        const toolsHtml = this.toolsLinks.innerHTML.replace(/  +/g, " ");
        const menuHtml = this.menuLinks.innerHTML.replace(/  +/g, " ");
        if (toolsHtml === menuHtml) return;
        switch(api.mode){
            case api.Modes.ANGULAR:
            case api.Modes.REACT:
            case api.Modes.VUE:
                api.inspector.warn(`header__tools-links content is different from header__menu-links content.
As you're using a dynamic framework, you should handle duplication of this content yourself, please refer to documentation: 
${api.header.doc}`);
                break;
            default:
                this.menuLinks.innerHTML = this.toolsLinks.innerHTML;
        }
    }
}
class HeaderModal extends api.core.Instance {
    static get instanceClassName() {
        return "HeaderModal";
    }
    init() {
        this.isResizing = true;
    }
    resize() {
        if (this.isBreakpoint(api.core.Breakpoints.LG)) this.unqualify();
        else this.qualify();
    }
    qualify() {
        this.setAttribute("role", "dialog");
        const modal = this.element.getInstance("Modal");
        if (!modal) return;
        const buttons = modal.buttons;
        let id = "";
        for (const button of buttons){
            id = button.id || id;
            if (button.isPrimary && id) break;
        }
        this.setAttribute("aria-labelledby", id);
    }
    unqualify() {
        const modal = this.element.getInstance("Modal");
        if (modal) modal.conceal();
        this.removeAttribute("role");
        this.removeAttribute("aria-labelledby");
    }
}
api.header = {
    HeaderLinks: HeaderLinks,
    HeaderModal: HeaderModal,
    HeaderSelector: HeaderSelector,
    doc: "https://gouvfr.atlassian.net/wiki/spaces/DB/pages/222789846/En-t+te+-+Header"
};
api.internals.register(api.header.HeaderSelector.BUTTONS, api.header.HeaderLinks);
api.internals.register(api.header.HeaderSelector.MODALS, api.header.HeaderModal);
const DisplaySelector = {
    DISPLAY: api.internals.ns.selector("display"),
    RADIO_BUTTONS: `input[name="${api.internals.ns("radios-theme")}"]`,
    FIELDSET: api.internals.ns.selector("fieldset")
};
class Display extends api.core.Instance {
    static get instanceClassName() {
        return "Display";
    }
    init() {
        this.radios = this.querySelectorAll(DisplaySelector.RADIO_BUTTONS);
        if (api.scheme) {
            this.changing = this.change.bind(this);
            for (const radio of this.radios)radio.addEventListener("change", this.changing);
            this.addDescent(api.scheme.SchemeEmission.SCHEME, this.apply.bind(this));
            this.ascend(api.scheme.SchemeEmission.ASK);
        } else this.querySelector(DisplaySelector.FIELDSET).setAttribute("disabled", "");
    }
    get scheme() {
        return this._scheme;
    }
    set scheme(value) {
        if (this._scheme === value || !api.scheme) return;
        switch(value){
            case api.scheme.SchemeValue.SYSTEM:
            case api.scheme.SchemeValue.LIGHT:
            case api.scheme.SchemeValue.DARK:
                this._scheme = value;
                for (const radio of this.radios)radio.checked = radio.value === value;
                this.ascend(api.scheme.SchemeEmission.SCHEME, value);
                break;
        }
    }
    change() {
        for (const radio of this.radios)if (radio.checked) {
            this.scheme = radio.value;
            return;
        }
    }
    apply(value) {
        this.scheme = value;
    }
    dispose() {
        for (const radio of this.radios)radio.removeEventListener("change", this.changing);
    }
}
api.display = {
    Display: Display,
    DisplaySelector: DisplaySelector
};
api.internals.register(api.display.DisplaySelector.DISPLAY, api.display.Display);

},{}],"iFAyb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
let script;
let initialize = ()=>{
    script = require("script:./threads.vue");
    if (script.__esModule) script = script.default;
    script.render = require("template:./threads.vue").render;
    require("custom:./threads.vue").default(script);
    script.__scopeId = "data-v-ef67b7";
    script.__file = "/home/babel/Documents/workspace/udata_workspace/udata-front/theme/js/components/discussions/threads.vue";
};
initialize();
if (module.hot) {
    script.__hmrId = "ef67b7-hmr";
    module.hot.accept(()=>{
        setTimeout(()=>{
            initialize();
            if (!__VUE_HMR_RUNTIME__.createRecord("ef67b7-hmr", script)) __VUE_HMR_RUNTIME__.reload("ef67b7-hmr", script);
        }, 0);
    });
}
exports.default = script;

},{"script:./threads.vue":"eczJs","template:./threads.vue":"h8fs7","custom:./threads.vue":"2Vtkc","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eczJs":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _vue = require("vue");
var _config = require("../../config");
var _configDefault = parcelHelpers.interopDefault(_config);
var _i18N = require("../../plugins/i18n");
var _i18NDefault = parcelHelpers.interopDefault(_i18N);
var _paginationVue = require("../pagination/pagination.vue");
var _paginationVueDefault = parcelHelpers.interopDefault(_paginationVue);
var _threadsCreateVue = require("./threads-create.vue");
var _threadsCreateVueDefault = parcelHelpers.interopDefault(_threadsCreateVue);
var _threadVue = require("./thread.vue");
var _threadVueDefault = parcelHelpers.interopDefault(_threadVue);
var _loaderVue = require("./loader.vue");
var _loaderVueDefault = parcelHelpers.interopDefault(_loaderVue);
var _threadsCreateButtonVue = require("./threads-create-button.vue");
var _threadsCreateButtonVueDefault = parcelHelpers.interopDefault(_threadsCreateButtonVue);
var _eventbus = require("../../plugins/eventbus");
const URL_REGEX = /discussion-([a-f0-9]{24})-?([0-9]+)?$/i;
const sorts = [
    {
        name: (0, _i18NDefault.default).global.t("Discussion creation"),
        key: "-created"
    },
    {
        name: (0, _i18NDefault.default).global.t("Last reply"),
        key: "-discussion.posted_on"
    }, 
];
const defaultTitle = (0, _i18NDefault.default).global.t("Discussions");
exports.default = (0, _vue.defineComponent)({
    components: {
        ThreadsCreateButton: (0, _threadsCreateButtonVueDefault.default),
        "create-thread": (0, _threadsCreateVueDefault.default),
        Thread: (0, _threadVueDefault.default),
        Pagination: (0, _paginationVueDefault.default),
        Loader: (0, _loaderVueDefault.default)
    },
    data () {
        return {
            discussions: [],
            threadFromURL: null,
            currentPage: 1,
            pageSize: 5,
            totalResults: 0,
            loading: true,
            currentSort: sorts[0],
            sorts,
            readOnlyEnabled: (0, _configDefault.default).read_only_enabled
        };
    },
    props: {
        description: String,
        subjectId: String,
        subjectClass: String,
        title: {
            type: String,
            default: defaultTitle
        }
    },
    watch: {
        // Update DOM counter on results count change
        // Simply add .discussion-count class to any DOM element for it to be updated
        totalResults: (count)=>{
            const els = document.querySelectorAll(".discussions-count");
            if (els) els.forEach((el)=>el.innerHTML = count);
        }
    },
    mounted () {
        // Listen to bus events
        this.$bus.on((0, _eventbus.DISCUSSIONS_START_THREAD), ()=>this.startThread());
        // Check if URL contains a thread
        const hash = window.location.hash.substring(1);
        const [a, discussionId, b] = URL_REGEX.exec(hash) || [];
        // If not, we load the first page
        if (!discussionId) return this.loadPage(this.currentPage);
        // If it does, it gets loaded
        this.loadThread(discussionId);
    },
    methods: {
        // Loads a full page
        loadPage (page = 1, scroll = false) {
            this.loading = true;
            // We can pass a second "scroll" variable to true if we want to scroll to the top of the discussions section
            // This is useful for bottom of the page navigation buttons
            if (this.$refs.top && scroll) this.$refs.top.scrollIntoView({
                behavior: "smooth"
            });
            return this.$api.get("/discussions/", {
                params: {
                    page,
                    for: this.subjectId,
                    sort: this.currentSort.key,
                    page_size: this.pageSize
                }
            }).then((resp)=>resp.data).then((data)=>{
                if (data.data) {
                    this.discussions = data.data;
                    this.totalResults = data.total;
                }
            }).catch((err)=>{
                this.$toast.error(this.$t("An error occurred while fetching discussions"));
                this.discussion = [];
            }).finally(()=>{
                this.loading = false;
            });
        },
        // Loads a single thread, used to load a single thread from URL for instance
        loadThread (id) {
            if (!id) return;
            this.loading = true;
            // Scroll the discussion block into view.
            // SetTimeout is needed (instead of $nextTick) because the DOM updates are too fast for the browser to handle
            setTimeout(()=>this.$refs.top.scrollIntoView({
                    behavior: "smooth"
                }), 500);
            return this.$api.get("/discussions/" + id).then((resp)=>resp.data).then((data)=>{
                if (data) {
                    this.threadFromURL = data;
                    this.totalResults = 1;
                }
            }).catch((err)=>{
                this.$toast.error(this.$t("An error occurred while fetching the discussion ") + id);
                this.loadPage(1); // In case loading a single comment didn't work, we load the first page. Better than nothing !
            }).finally(()=>{
                this.loading = false;
            });
        },
        // Removes the specific discussion from URL
        // And loads the first page
        viewAllDiscussions () {
            this.threadFromURL = null;
            history.pushState(null, null, " ");
            this.loadPage(1);
        },
        // Pagination handler
        changePage (index, scroll = true) {
            this.currentPage = index;
            this.loadPage(index, scroll);
        },
        // Can be called from outside the component to start a new thread programmatically and scroll into view
        startThread () {
            this.startThreadWithoutScroll();
            this.$refs.createThread.$el.scrollIntoView();
        },
        // Can be called from outside the component to start a new thread programmatically
        startThreadWithoutScroll () {
            if (!this.$refs.createThread) return;
            this.$refs.createThread.displayForm();
        },
        // Callback that will be passed to the create-thread component
        createThread (data) {
            return this.$api.post("/discussions/", data).then(()=>{
                this.currentPage = 1;
                this.loadPage(1, true);
            }).catch((err)=>this.$toast.error(this.$t("An error occurred while creating the discussion "), err));
        },
        // Changing sort order
        changeSort (sort) {
            this.currentSort = sort;
            this.loadPage(this.page);
        }
    }
});

},{"vue":"hRjhg","../../config":"G7A2j","../../plugins/i18n":"34NkF","../pagination/pagination.vue":"1QLN3","./threads-create.vue":"l2HxE","./thread.vue":"1Ushq","./loader.vue":"aQsCi","./threads-create-button.vue":"gKqmg","../../plugins/eventbus":"6CYPj","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"G7A2j":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "user", ()=>user);
parcelHelpers.export(exports, "debug", ()=>debug);
parcelHelpers.export(exports, "lang", ()=>lang);
parcelHelpers.export(exports, "title", ()=>title);
parcelHelpers.export(exports, "csrf_token", ()=>csrf_token);
parcelHelpers.export(exports, "check_urls", ()=>check_urls);
parcelHelpers.export(exports, "unchecked_types", ()=>unchecked_types);
parcelHelpers.export(exports, "api_root", ()=>api_root);
parcelHelpers.export(exports, "api_2_root", ()=>api_2_root);
parcelHelpers.export(exports, "api_specs", ()=>api_specs);
parcelHelpers.export(exports, "theme_static", ()=>theme_static);
parcelHelpers.export(exports, "static_root", ()=>static_root);
parcelHelpers.export(exports, "admin_root", ()=>admin_root);
parcelHelpers.export(exports, "auth_url", ()=>auth_url);
parcelHelpers.export(exports, "schema_catalog_url", ()=>schema_catalog_url);
parcelHelpers.export(exports, "schema_validata_url", ()=>schema_validata_url);
parcelHelpers.export(exports, "sentry", ()=>sentry);
parcelHelpers.export(exports, "is_territory_enabled", ()=>is_territory_enabled);
parcelHelpers.export(exports, "is_delete_me_enabled", ()=>is_delete_me_enabled);
parcelHelpers.export(exports, "hidpi", ()=>hidpi);
parcelHelpers.export(exports, "tags", ()=>tags);
parcelHelpers.export(exports, "resources_default_page_size", ()=>resources_default_page_size);
parcelHelpers.export(exports, "markdown", ()=>markdown);
parcelHelpers.export(exports, "read_only_enabled", ()=>read_only_enabled);
parcelHelpers.export(exports, "search_autocomplete_enabled", ()=>search_autocomplete_enabled);
parcelHelpers.export(exports, "search_autocomplete_debounce", ()=>search_autocomplete_debounce);
parcelHelpers.export(exports, "values", ()=>values);
/*
 * Parse the page html headers to extract some informations
 * **This has been taken "as-is" from the old udata project**
 * Lots of variables here are probably useless for the front-end
 */ /**
 * Simple helper to fetch attribute on given css selector
 */ function _attr(selector, name) {
    const el = document.querySelector(selector);
    return el ? el.getAttribute(name) : undefined;
}
/**
 * Simple helper to <meta/> tag content given its name
 */ function _meta(name) {
    return _attr(`meta[name=${name}]`, "content");
}
/**
 * A simple helper to parse JSON from a <meta/> tag
 * @return {any} meta content as json or false on error
 */ function _jsonMeta(name) {
    const data = _meta(name);
    return data ? JSON.parse(decodeURIComponent(data)) : false;
}
let user;
const userEl = document.querySelector("meta[name=current-user]");
if (userEl instanceof HTMLElement) user = {
    id: userEl.getAttribute("content"),
    slug: userEl.dataset.slug,
    first_name: userEl.dataset.first_name,
    last_name: userEl.dataset.last_name,
    avatar: userEl.dataset.avatar,
    roles: userEl.dataset.roles.split(",")
};
const debug = false; //TODO : handle this, no more webpack
const lang = _attr("html", "lang") || "en";
const title = _meta("site-title");
const csrf_token = _meta("csrf-token");
const check_urls = _jsonMeta("check-urls");
const unchecked_types = _jsonMeta("unchecked-types");
const api_root = _meta("api-root");
const api_2_root = _meta("api-2-root");
const api_specs = _meta("api-specs");
const theme_static = _meta("theme-static-root");
const static_root = _meta("static-root");
const admin_root = _meta("admin-root");
const auth_url = _meta("auth-url");
const schema_catalog_url = _meta("schema-catalog-url");
const schema_validata_url = _meta("schema-validata-url");
/**
 * Sentry configuration (as json) if available
 */ const sentryEl = document.querySelector("meta[name=sentry]");
const sentry = {};
if (sentryEl instanceof HTMLElement) {
    sentry.dsn = sentryEl.getAttribute("content");
    sentry.release = sentryEl.dataset.release || undefined;
    sentry.tags = JSON.parse(decodeURIComponent(sentryEl.dataset.tags || "{}"));
}
const is_territory_enabled = _jsonMeta("territory-enabled");
const is_delete_me_enabled = _jsonMeta("delete-me-enabled");
const hidpi = window.devicePixelRatio > 1 || window.matchMedia && window.matchMedia("(-webkit-min-device-pixel-ratio: 1.25),(min-resolution: 120dpi)").matches;
const tags = _jsonMeta("tags-config");
const resources_default_page_size = _jsonMeta("resources-default-page-size");
const markdown = _jsonMeta("markdown-config");
const read_only_enabled = _jsonMeta("read-only-enabled");
const search_autocomplete_enabled = _jsonMeta("search-autocomplete-enabled");
const search_autocomplete_debounce = _jsonMeta("search-autocomplete-debounce");
// New generic `js-config-*` variables : simply add them to `metadata.html` with a meta name="js-config-something", content="yourValue" and import this file.
// Everything is exported in the `values` variable as key: value pairs
const valuesPrefix = "js-config-";
const values = [
    ...document.querySelectorAll(`meta[name^="${valuesPrefix}"]`), 
].reduce((acc, el)=>{
    if (!el) return acc;
    //Stripping prefix from name, camelizing it too (kebab-case is delicious but hard to use in Javascript)
    const propertyName = el.getAttribute("name").replace(valuesPrefix, "").replace(/-./g, (x)=>x[1].toUpperCase());
    return {
        ...acc,
        [propertyName]: el.getAttribute("content")
    };
}, {});
exports.default = {
    user,
    debug,
    lang,
    title,
    csrf_token,
    api_root,
    api_2_root,
    api_specs,
    theme_static,
    static_root,
    admin_root,
    auth_url,
    schema_catalog_url,
    schema_validata_url,
    sentry,
    check_urls,
    unchecked_types,
    is_territory_enabled,
    is_delete_me_enabled,
    hidpi,
    tags,
    values,
    resources_default_page_size,
    markdown,
    read_only_enabled
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"34NkF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/*
 * Handle i18n loading
 */ var _config = require("../config");
var _configDefault = parcelHelpers.interopDefault(_config);
var _vueI18N = require("vue-i18n");
//TODO : use a glob when supported in Parcel 2 : https://github.com/parcel-bundler/parcel/issues/4683
var _enJson = require("../locales/en.json");
var _enJsonDefault = parcelHelpers.interopDefault(_enJson);
var _esJson = require("../locales/es.json");
var _esJsonDefault = parcelHelpers.interopDefault(_esJson);
var _frJson = require("../locales/fr.json");
var _frJsonDefault = parcelHelpers.interopDefault(_frJson);
var _ptJson = require("../locales/pt.json");
var _ptJsonDefault = parcelHelpers.interopDefault(_ptJson);
exports.default = (0, _vueI18N.createI18n)({
    legacy: false,
    globalInjection: true,
    locale: (0, _configDefault.default).lang,
    messages: {
        en: (0, _enJsonDefault.default),
        es: (0, _esJsonDefault.default),
        fr: (0, _frJsonDefault.default),
        pt: (0, _ptJsonDefault.default)
    },
    formatFallbackMessages: true
});

},{"../config":"G7A2j","vue-i18n":"92JeB","../locales/en.json":"6uaFt","../locales/es.json":"6MKKZ","../locales/fr.json":"iW1Wy","../locales/pt.json":"e3Nqi","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"92JeB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DatetimeFormat", ()=>DatetimeFormat);
parcelHelpers.export(exports, "NumberFormat", ()=>NumberFormat);
parcelHelpers.export(exports, "Translation", ()=>Translation);
parcelHelpers.export(exports, "VERSION", ()=>VERSION);
parcelHelpers.export(exports, "createI18n", ()=>createI18n);
parcelHelpers.export(exports, "useI18n", ()=>useI18n);
parcelHelpers.export(exports, "vTDirective", ()=>vTDirective);
/*!
  * vue-i18n v9.0.0-rc.2
  * (c) 2021 kazuya kawaguchi
  * Released under the MIT License.
  */ var _shared = require("@intlify/shared");
var _coreBase = require("@intlify/core-base");
var _vue = require("vue");
var _devtoolsApi = require("@vue/devtools-api");
/**
 * Vue I18n Version
 *
 * @remarks
 * Semver format. Same format as the package.json `version` field.
 *
 * @VueI18nGeneral
 */ const VERSION = "9.0.0-rc.2";
/**
 * This is only called in esm-bundler builds.
 * istanbul-ignore-next
 */ function initFeatureFlags() {
    let needWarn = false;
    if (typeof __VUE_I18N_FULL_INSTALL__ !== "boolean") {
        needWarn = true;
        (0, _shared.getGlobalThis)().__VUE_I18N_FULL_INSTALL__ = true;
    }
    if (typeof __VUE_I18N_LEGACY_API__ !== "boolean") {
        needWarn = true;
        (0, _shared.getGlobalThis)().__VUE_I18N_LEGACY_API__ = true;
    }
    if (typeof __INTLIFY_PROD_DEVTOOLS__ !== "boolean") {
        needWarn = true;
        (0, _shared.getGlobalThis)().__INTLIFY_PROD_DEVTOOLS__ = false;
    }
    if (needWarn) console.warn(`You are running the esm-bundler build of vue-i18n. It is recommended to ` + `configure your bundler to explicitly replace feature flag globals ` + `with boolean literals to get proper tree-shaking in the final bundle.`);
}
/**
 * This is only called development env
 * istanbul-ignore-next
 */ function initDev() {
    const target = (0, _shared.getGlobalThis)();
    target.__INTLIFY__ = true;
    console.info(`You are running a development build of vue-i18n.\n` + `Make sure to use the production build (*.prod.js) when deploying for production.`);
}
const warnMessages = {
    [6 /* FALLBACK_TO_ROOT */ ]: `Fall back to {type} '{key}' with root locale.`,
    [7 /* NOT_SUPPORTED_PRESERVE */ ]: `Not supportted 'preserve'.`,
    [8 /* NOT_SUPPORTED_FORMATTER */ ]: `Not supportted 'formatter'.`,
    [9 /* NOT_SUPPORTED_PRESERVE_DIRECTIVE */ ]: `Not supportted 'preserveDirectiveContent'.`,
    [10 /* NOT_SUPPORTED_GET_CHOICE_INDEX */ ]: `Not supportted 'getChoiceIndex'.`,
    [11 /* COMPONENT_NAME_LEGACY_COMPATIBLE */ ]: `Component name legacy compatible: '{name}' -> 'i18n'`,
    [12 /* NOT_FOUND_PARENT_SCOPE */ ]: `Not found parent scope. use the global scope.`
};
function getWarnMessage(code, ...args) {
    return (0, _shared.format)(warnMessages[code], ...args);
}
function createI18nError(code, ...args) {
    return (0, _coreBase.createCompileError)(code, null, {
        messages: errorMessages,
        args
    });
}
const errorMessages = {
    [14 /* UNEXPECTED_RETURN_TYPE */ ]: "Unexpected return type in composer",
    [15 /* INVALID_ARGUMENT */ ]: "Invalid argument",
    [16 /* MUST_BE_CALL_SETUP_TOP */ ]: "Must be called at the top of a `setup` function",
    [17 /* NOT_INSLALLED */ ]: "Need to install with `app.use` function",
    [22 /* UNEXPECTED_ERROR */ ]: "Unexpected error",
    [18 /* NOT_AVAILABLE_IN_LEGACY_MODE */ ]: "Not available in legacy mode",
    [19 /* REQUIRED_VALUE */ ]: `Required in value: {0}`,
    [20 /* INVALID_VALUE */ ]: `Invalid value`,
    [21 /* CANNOT_SETUP_VUE_DEVTOOLS_PLUGIN */ ]: `Cannot setup vue-devtools plugin`
};
const TransrateVNodeSymbol = (0, _shared.makeSymbol)("__transrateVNode");
const DatetimePartsSymbol = (0, _shared.makeSymbol)("__datetimeParts");
const NumberPartsSymbol = (0, _shared.makeSymbol)("__numberParts");
const EnableEmitter = (0, _shared.makeSymbol)("__enableEmitter");
const DisableEmitter = (0, _shared.makeSymbol)("__disableEmitter");
let composerID = 0;
function defineCoreMissingHandler(missing) {
    return (ctx, locale, key, type)=>{
        return missing(locale, key, (0, _vue.getCurrentInstance)() || undefined, type);
    };
}
function getLocaleMessages(locale1, options) {
    const { messages , __i18n  } = options;
    // prettier-ignore
    const ret = (0, _shared.isPlainObject)(messages) ? messages : (0, _shared.isArray)(__i18n) ? {} : {
        [locale1]: {}
    };
    // merge locale messages of i18n custom block
    if ((0, _shared.isArray)(__i18n)) __i18n.forEach(({ locale , resource  })=>{
        if (locale) {
            ret[locale] = ret[locale] || {};
            deepCopy(resource, ret[locale]);
        } else deepCopy(resource, ret);
    });
    return ret;
}
const hasOwnProperty = Object.prototype.hasOwnProperty;
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function hasOwn(obj, key) {
    return hasOwnProperty.call(obj, key);
}
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function deepCopy(source, destination) {
    for(const key in source)if (hasOwn(source, key)) {
        if (!(0, _shared.isObject)(source[key])) {
            destination[key] = destination[key] != null ? destination[key] : {};
            destination[key] = source[key];
        } else {
            destination[key] = destination[key] != null ? destination[key] : {};
            deepCopy(source[key], destination[key]);
        }
    }
}
/**
 * Create composer interface factory
 *
 * @internal
 */ function createComposer(options = {}) {
    const { __root  } = options;
    const _isGlobal = __root === undefined;
    let _inheritLocale = (0, _shared.isBoolean)(options.inheritLocale) ? options.inheritLocale : true;
    const _locale = (0, _vue.ref)(// prettier-ignore
    __root && _inheritLocale ? __root.locale.value : (0, _shared.isString)(options.locale) ? options.locale : "en-US");
    const _fallbackLocale = (0, _vue.ref)(// prettier-ignore
    __root && _inheritLocale ? __root.fallbackLocale.value : (0, _shared.isString)(options.fallbackLocale) || (0, _shared.isArray)(options.fallbackLocale) || (0, _shared.isPlainObject)(options.fallbackLocale) || options.fallbackLocale === false ? options.fallbackLocale : _locale.value);
    const _messages = (0, _vue.ref)(getLocaleMessages(_locale.value, options));
    const _datetimeFormats = (0, _vue.ref)((0, _shared.isPlainObject)(options.datetimeFormats) ? options.datetimeFormats : {
        [_locale.value]: {}
    });
    const _numberFormats = (0, _vue.ref)((0, _shared.isPlainObject)(options.numberFormats) ? options.numberFormats : {
        [_locale.value]: {}
    });
    // warning suppress options
    // prettier-ignore
    let _missingWarn = __root ? __root.missingWarn : (0, _shared.isBoolean)(options.missingWarn) || (0, _shared.isRegExp)(options.missingWarn) ? options.missingWarn : true;
    // prettier-ignore
    let _fallbackWarn = __root ? __root.fallbackWarn : (0, _shared.isBoolean)(options.fallbackWarn) || (0, _shared.isRegExp)(options.fallbackWarn) ? options.fallbackWarn : true;
    // prettier-ignore
    let _fallbackRoot = __root ? __root.fallbackRoot : (0, _shared.isBoolean)(options.fallbackRoot) ? options.fallbackRoot : true;
    // configure fall bakck to root
    let _fallbackFormat = !!options.fallbackFormat;
    // runtime missing
    let _missing = (0, _shared.isFunction)(options.missing) ? options.missing : null;
    let _runtimeMissing = (0, _shared.isFunction)(options.missing) ? defineCoreMissingHandler(options.missing) : null;
    // postTranslation handler
    let _postTranslation = (0, _shared.isFunction)(options.postTranslation) ? options.postTranslation : null;
    let _warnHtmlMessage = (0, _shared.isBoolean)(options.warnHtmlMessage) ? options.warnHtmlMessage : true;
    let _escapeParameter = !!options.escapeParameter;
    // custom linked modifiers
    // prettier-ignore
    const _modifiers = __root ? __root.modifiers : (0, _shared.isPlainObject)(options.modifiers) ? options.modifiers : {};
    // pluralRules
    const _pluralRules = options.pluralRules;
    // runtime context
    // eslint-disable-next-line prefer-const
    let _context1;
    function getCoreContext() {
        return (0, _coreBase.createCoreContext)({
            locale: _locale.value,
            fallbackLocale: _fallbackLocale.value,
            messages: _messages.value,
            datetimeFormats: _datetimeFormats.value,
            numberFormats: _numberFormats.value,
            modifiers: _modifiers,
            pluralRules: _pluralRules,
            missing: _runtimeMissing === null ? undefined : _runtimeMissing,
            missingWarn: _missingWarn,
            fallbackWarn: _fallbackWarn,
            fallbackFormat: _fallbackFormat,
            unresolving: true,
            postTranslation: _postTranslation === null ? undefined : _postTranslation,
            warnHtmlMessage: _warnHtmlMessage,
            escapeParameter: _escapeParameter,
            __datetimeFormatters: (0, _shared.isPlainObject)(_context1) ? _context1.__datetimeFormatters : undefined,
            __numberFormatters: (0, _shared.isPlainObject)(_context1) ? _context1.__numberFormatters : undefined,
            __emitter: (0, _shared.isPlainObject)(_context1) ? _context1.__emitter : undefined
        });
    }
    _context1 = getCoreContext();
    (0, _coreBase.updateFallbackLocale)(_context1, _locale.value, _fallbackLocale.value);
    // locale
    const locale2 = (0, _vue.computed)({
        get: ()=>_locale.value,
        set: (val)=>{
            _locale.value = val;
            _context1.locale = _locale.value;
        }
    });
    // fallbackLocale
    const fallbackLocale = (0, _vue.computed)({
        get: ()=>_fallbackLocale.value,
        set: (val)=>{
            _fallbackLocale.value = val;
            _context1.fallbackLocale = _fallbackLocale.value;
            (0, _coreBase.updateFallbackLocale)(_context1, _locale.value, val);
        }
    });
    // messages
    const messages1 = (0, _vue.computed)(()=>_messages.value);
    // datetimeFormats
    const datetimeFormats = (0, _vue.computed)(()=>_datetimeFormats.value);
    // numberFormats
    const numberFormats = (0, _vue.computed)(()=>_numberFormats.value);
    // getPostTranslationHandler
    function getPostTranslationHandler() {
        return (0, _shared.isFunction)(_postTranslation) ? _postTranslation : null;
    }
    // setPostTranslationHandler
    function setPostTranslationHandler(handler) {
        _postTranslation = handler;
        _context1.postTranslation = handler;
    }
    // getMissingHandler
    function getMissingHandler() {
        return _missing;
    }
    // setMissingHandler
    function setMissingHandler(handler) {
        if (handler !== null) _runtimeMissing = defineCoreMissingHandler(handler);
        _missing = handler;
        _context1.missing = _runtimeMissing;
    }
    function wrapWithDeps(fn, argumentParser, warnType, fallbackSuccess, fallbackFail, successCondition) {
        const context = getCoreContext();
        const ret = fn(context); // track reactive dependency, see the getRuntimeContext
        if ((0, _shared.isNumber)(ret) && ret === (0, _coreBase.NOT_REOSLVED)) {
            const key = argumentParser();
            if (__root) {
                if (!_fallbackRoot) (0, _shared.warn)(getWarnMessage(6 /* FALLBACK_TO_ROOT */ , {
                    key,
                    type: warnType
                }));
                {
                    const { __emitter: emitter  } = context;
                    if (emitter) emitter.emit("fallback" /* FALBACK */ , {
                        type: warnType,
                        key,
                        to: "global",
                        groupId: `${warnType}:${key}`
                    });
                }
            }
            return __root && _fallbackRoot ? fallbackSuccess(__root) : fallbackFail(key);
        } else if (successCondition(ret)) return ret;
        else /* istanbul ignore next */ throw createI18nError(14 /* UNEXPECTED_RETURN_TYPE */ );
    }
    // t
    function t(...args) {
        return wrapWithDeps((context)=>(0, _coreBase.translate)(context, ...args), ()=>(0, _coreBase.parseTranslateArgs)(...args)[0], "translate", (root)=>root.t(...args), (key)=>key, (val)=>(0, _shared.isString)(val));
    }
    // d
    function d(...args) {
        return wrapWithDeps((context)=>(0, _coreBase.datetime)(context, ...args), ()=>(0, _coreBase.parseDateTimeArgs)(...args)[0], "datetime format", (root)=>root.d(...args), ()=>(0, _coreBase.MISSING_RESOLVE_VALUE), (val)=>(0, _shared.isString)(val));
    }
    // n
    function n(...args) {
        return wrapWithDeps((context)=>(0, _coreBase.number)(context, ...args), ()=>(0, _coreBase.parseNumberArgs)(...args)[0], "number format", (root)=>root.n(...args), ()=>(0, _coreBase.MISSING_RESOLVE_VALUE), (val)=>(0, _shared.isString)(val));
    }
    // for custom processor
    function normalize(values) {
        return values.map((val)=>(0, _shared.isString)(val) ? (0, _vue.createVNode)((0, _vue.Text), null, val, 0) : val);
    }
    const interpolate = (val)=>val;
    const processor = {
        normalize,
        interpolate,
        type: "vnode"
    };
    // __transrateVNode, using for `i18n-t` component
    function __transrateVNode(...args) {
        return wrapWithDeps((context)=>{
            let ret;
            const _context = context;
            try {
                _context.processor = processor;
                ret = (0, _coreBase.translate)(_context, ...args);
            } finally{
                _context.processor = null;
            }
            return ret;
        }, ()=>(0, _coreBase.parseTranslateArgs)(...args)[0], "translate", // eslint-disable-next-line @typescript-eslint/no-explicit-any
        (root)=>root[TransrateVNodeSymbol](...args), (key)=>[
                (0, _vue.createVNode)((0, _vue.Text), null, key, 0)
            ], (val)=>(0, _shared.isArray)(val));
    }
    // __numberParts, using for `i18n-n` component
    function __numberParts(...args) {
        return wrapWithDeps((context)=>(0, _coreBase.number)(context, ...args), ()=>(0, _coreBase.parseNumberArgs)(...args)[0], "number format", // eslint-disable-next-line @typescript-eslint/no-explicit-any
        (root)=>root[NumberPartsSymbol](...args), ()=>[], (val)=>(0, _shared.isString)(val) || (0, _shared.isArray)(val));
    }
    // __datetimeParts, using for `i18n-d` component
    function __datetimeParts(...args) {
        return wrapWithDeps((context)=>(0, _coreBase.datetime)(context, ...args), ()=>(0, _coreBase.parseDateTimeArgs)(...args)[0], "datetime format", // eslint-disable-next-line @typescript-eslint/no-explicit-any
        (root)=>root[DatetimePartsSymbol](...args), ()=>[], (val)=>(0, _shared.isString)(val) || (0, _shared.isArray)(val));
    }
    // te
    function te(key, locale) {
        const targetLocale = (0, _shared.isString)(locale) ? locale : _locale.value;
        const message = getLocaleMessage(targetLocale);
        return (0, _coreBase.resolveValue)(message, key) !== null;
    }
    // tm
    function tm(key) {
        const messages = _messages.value[_locale.value] || {};
        const target = (0, _coreBase.resolveValue)(messages, key);
        // prettier-ignore
        return target != null ? target : __root ? __root.tm(key) || {} : {};
    }
    // getLocaleMessage
    function getLocaleMessage(locale) {
        return _messages.value[locale] || {};
    }
    // setLocaleMessage
    function setLocaleMessage(locale, message) {
        _messages.value[locale] = message;
        _context1.messages = _messages.value;
    }
    // mergeLocaleMessage
    function mergeLocaleMessage(locale, message) {
        _messages.value[locale] = Object.assign(_messages.value[locale] || {}, message);
        _context1.messages = _messages.value;
    }
    // getDateTimeFormat
    function getDateTimeFormat(locale) {
        return _datetimeFormats.value[locale] || {};
    }
    // setDateTimeFormat
    function setDateTimeFormat(locale, format) {
        _datetimeFormats.value[locale] = format;
        _context1.datetimeFormats = _datetimeFormats.value;
        (0, _coreBase.clearDateTimeFormat)(_context1, locale, format);
    }
    // mergeDateTimeFormat
    function mergeDateTimeFormat(locale, format) {
        _datetimeFormats.value[locale] = Object.assign(_datetimeFormats.value[locale] || {}, format);
        _context1.datetimeFormats = _datetimeFormats.value;
        (0, _coreBase.clearDateTimeFormat)(_context1, locale, format);
    }
    // getNumberFormat
    function getNumberFormat(locale) {
        return _numberFormats.value[locale] || {};
    }
    // setNumberFormat
    function setNumberFormat(locale, format) {
        _numberFormats.value[locale] = format;
        _context1.numberFormats = _numberFormats.value;
        (0, _coreBase.clearNumberFormat)(_context1, locale, format);
    }
    // mergeNumberFormat
    function mergeNumberFormat(locale, format) {
        _numberFormats.value[locale] = Object.assign(_numberFormats.value[locale] || {}, format);
        _context1.numberFormats = _numberFormats.value;
        (0, _coreBase.clearNumberFormat)(_context1, locale, format);
    }
    // for debug
    composerID++;
    // watch root locale & fallbackLocale
    if (__root) {
        (0, _vue.watch)(__root.locale, (val)=>{
            if (_inheritLocale) {
                _locale.value = val;
                _context1.locale = val;
                (0, _coreBase.updateFallbackLocale)(_context1, _locale.value, _fallbackLocale.value);
            }
        });
        (0, _vue.watch)(__root.fallbackLocale, (val)=>{
            if (_inheritLocale) {
                _fallbackLocale.value = val;
                _context1.fallbackLocale = val;
                (0, _coreBase.updateFallbackLocale)(_context1, _locale.value, _fallbackLocale.value);
            }
        });
    }
    // export composition API!
    const composer = {
        id: composerID,
        locale: locale2,
        fallbackLocale,
        get inheritLocale () {
            return _inheritLocale;
        },
        set inheritLocale (val){
            _inheritLocale = val;
            if (val && __root) {
                _locale.value = __root.locale.value;
                _fallbackLocale.value = __root.fallbackLocale.value;
                (0, _coreBase.updateFallbackLocale)(_context1, _locale.value, _fallbackLocale.value);
            }
        },
        get availableLocales () {
            return Object.keys(_messages.value).sort();
        },
        messages: messages1,
        datetimeFormats,
        numberFormats,
        get modifiers () {
            return _modifiers;
        },
        get pluralRules () {
            return _pluralRules || {};
        },
        get isGlobal () {
            return _isGlobal;
        },
        get missingWarn () {
            return _missingWarn;
        },
        set missingWarn (val){
            _missingWarn = val;
            _context1.missingWarn = _missingWarn;
        },
        get fallbackWarn () {
            return _fallbackWarn;
        },
        set fallbackWarn (val){
            _fallbackWarn = val;
            _context1.fallbackWarn = _fallbackWarn;
        },
        get fallbackRoot () {
            return _fallbackRoot;
        },
        set fallbackRoot (val){
            _fallbackRoot = val;
        },
        get fallbackFormat () {
            return _fallbackFormat;
        },
        set fallbackFormat (val){
            _fallbackFormat = val;
            _context1.fallbackFormat = _fallbackFormat;
        },
        get warnHtmlMessage () {
            return _warnHtmlMessage;
        },
        set warnHtmlMessage (val){
            _warnHtmlMessage = val;
            _context1.warnHtmlMessage = val;
        },
        get escapeParameter () {
            return _escapeParameter;
        },
        set escapeParameter (val){
            _escapeParameter = val;
            _context1.escapeParameter = val;
        },
        t,
        d,
        n,
        te,
        tm,
        getLocaleMessage,
        setLocaleMessage,
        mergeLocaleMessage,
        getDateTimeFormat,
        setDateTimeFormat,
        mergeDateTimeFormat,
        getNumberFormat,
        setNumberFormat,
        mergeNumberFormat,
        getPostTranslationHandler,
        setPostTranslationHandler,
        getMissingHandler,
        setMissingHandler,
        [TransrateVNodeSymbol]: __transrateVNode,
        [NumberPartsSymbol]: __numberParts,
        [DatetimePartsSymbol]: __datetimeParts
    };
    composer[EnableEmitter] = (emitter)=>{
        _context1.__emitter = emitter;
    };
    composer[DisableEmitter] = ()=>{
        _context1.__emitter = undefined;
    };
    return composer;
}
/**
 * Convert to I18n Composer Options from VueI18n Options
 *
 * @internal
 */ function convertComposerOptions(options) {
    const locale3 = (0, _shared.isString)(options.locale) ? options.locale : "en-US";
    const fallbackLocale = (0, _shared.isString)(options.fallbackLocale) || (0, _shared.isArray)(options.fallbackLocale) || (0, _shared.isPlainObject)(options.fallbackLocale) || options.fallbackLocale === false ? options.fallbackLocale : locale3;
    const missing = (0, _shared.isFunction)(options.missing) ? options.missing : undefined;
    const missingWarn = (0, _shared.isBoolean)(options.silentTranslationWarn) || (0, _shared.isRegExp)(options.silentTranslationWarn) ? !options.silentTranslationWarn : true;
    const fallbackWarn = (0, _shared.isBoolean)(options.silentFallbackWarn) || (0, _shared.isRegExp)(options.silentFallbackWarn) ? !options.silentFallbackWarn : true;
    const fallbackRoot = (0, _shared.isBoolean)(options.fallbackRoot) ? options.fallbackRoot : true;
    const fallbackFormat = !!options.formatFallbackMessages;
    const modifiers = (0, _shared.isPlainObject)(options.modifiers) ? options.modifiers : {};
    const pluralizationRules = options.pluralizationRules;
    const postTranslation = (0, _shared.isFunction)(options.postTranslation) ? options.postTranslation : undefined;
    const warnHtmlMessage = (0, _shared.isString)(options.warnHtmlInMessage) ? options.warnHtmlInMessage !== "off" : true;
    const escapeParameter = !!options.escapeParameterHtml;
    const inheritLocale = (0, _shared.isBoolean)(options.sync) ? options.sync : true;
    if (options.formatter) (0, _shared.warn)(getWarnMessage(8 /* NOT_SUPPORTED_FORMATTER */ ));
    if (options.preserveDirectiveContent) (0, _shared.warn)(getWarnMessage(9 /* NOT_SUPPORTED_PRESERVE_DIRECTIVE */ ));
    let messages2 = options.messages;
    if ((0, _shared.isPlainObject)(options.sharedMessages)) {
        const sharedMessages = options.sharedMessages;
        const locales = Object.keys(sharedMessages);
        messages2 = locales.reduce((messages, locale)=>{
            const message = messages[locale] || (messages[locale] = {});
            Object.assign(message, sharedMessages[locale]);
            return messages;
        }, messages2 || {});
    }
    const { __i18n , __root  } = options;
    const datetimeFormats = options.datetimeFormats;
    const numberFormats = options.numberFormats;
    return {
        locale: locale3,
        fallbackLocale,
        messages: messages2,
        datetimeFormats,
        numberFormats,
        missing,
        missingWarn,
        fallbackWarn,
        fallbackRoot,
        fallbackFormat,
        modifiers,
        pluralRules: pluralizationRules,
        postTranslation,
        warnHtmlMessage,
        escapeParameter,
        inheritLocale,
        __i18n,
        __root
    };
}
/**
 * create VueI18n interface factory
 *
 * @internal
 */ function createVueI18n(options1 = {}) {
    const composer = createComposer(convertComposerOptions(options1));
    // defines VueI18n
    const vueI18n = {
        // id
        id: composer.id,
        // locale
        get locale () {
            return composer.locale.value;
        },
        set locale (val){
            composer.locale.value = val;
        },
        // fallbackLocale
        get fallbackLocale () {
            return composer.fallbackLocale.value;
        },
        set fallbackLocale (val){
            composer.fallbackLocale.value = val;
        },
        // messages
        get messages () {
            return composer.messages.value;
        },
        // datetimeFormats
        get datetimeFormats () {
            return composer.datetimeFormats.value;
        },
        // numberFormats
        get numberFormats () {
            return composer.numberFormats.value;
        },
        // availableLocales
        get availableLocales () {
            return composer.availableLocales;
        },
        // formatter
        get formatter () {
            (0, _shared.warn)(getWarnMessage(8 /* NOT_SUPPORTED_FORMATTER */ ));
            // dummy
            return {
                interpolate () {
                    return [];
                }
            };
        },
        set formatter (val){
            (0, _shared.warn)(getWarnMessage(8 /* NOT_SUPPORTED_FORMATTER */ ));
        },
        // missing
        get missing () {
            return composer.getMissingHandler();
        },
        set missing (handler){
            composer.setMissingHandler(handler);
        },
        // silentTranslationWarn
        get silentTranslationWarn () {
            return (0, _shared.isBoolean)(composer.missingWarn) ? !composer.missingWarn : composer.missingWarn;
        },
        set silentTranslationWarn (val){
            composer.missingWarn = (0, _shared.isBoolean)(val) ? !val : val;
        },
        // silentFallbackWarn
        get silentFallbackWarn () {
            return (0, _shared.isBoolean)(composer.fallbackWarn) ? !composer.fallbackWarn : composer.fallbackWarn;
        },
        set silentFallbackWarn (val){
            composer.fallbackWarn = (0, _shared.isBoolean)(val) ? !val : val;
        },
        // modifiers
        get modifiers () {
            return composer.modifiers;
        },
        // formatFallbackMessages
        get formatFallbackMessages () {
            return composer.fallbackFormat;
        },
        set formatFallbackMessages (val){
            composer.fallbackFormat = val;
        },
        // postTranslation
        get postTranslation () {
            return composer.getPostTranslationHandler();
        },
        set postTranslation (handler){
            composer.setPostTranslationHandler(handler);
        },
        // sync
        get sync () {
            return composer.inheritLocale;
        },
        set sync (val){
            composer.inheritLocale = val;
        },
        // warnInHtmlMessage
        get warnHtmlInMessage () {
            return composer.warnHtmlMessage ? "warn" : "off";
        },
        set warnHtmlInMessage (val){
            composer.warnHtmlMessage = val !== "off";
        },
        // escapeParameterHtml
        get escapeParameterHtml () {
            return composer.escapeParameter;
        },
        set escapeParameterHtml (val){
            composer.escapeParameter = val;
        },
        // preserveDirectiveContent
        get preserveDirectiveContent () {
            (0, _shared.warn)(getWarnMessage(9 /* NOT_SUPPORTED_PRESERVE_DIRECTIVE */ ));
            return true;
        },
        set preserveDirectiveContent (val){
            (0, _shared.warn)(getWarnMessage(9 /* NOT_SUPPORTED_PRESERVE_DIRECTIVE */ ));
        },
        // pluralizationRules
        get pluralizationRules () {
            return composer.pluralRules || {};
        },
        // for internal
        __composer: composer,
        // t
        t (...args) {
            const [arg1, arg2, arg3] = args;
            const options = {};
            let list = null;
            let named = null;
            if (!(0, _shared.isString)(arg1)) throw createI18nError(15 /* INVALID_ARGUMENT */ );
            const key = arg1;
            if ((0, _shared.isString)(arg2)) options.locale = arg2;
            else if ((0, _shared.isArray)(arg2)) list = arg2;
            else if ((0, _shared.isPlainObject)(arg2)) named = arg2;
            if ((0, _shared.isArray)(arg3)) list = arg3;
            else if ((0, _shared.isPlainObject)(arg3)) named = arg3;
            return composer.t(key, list || named || {}, options);
        },
        // tc
        tc (...args) {
            const [arg1, arg2, arg3] = args;
            const options = {
                plural: 1
            };
            let list = null;
            let named = null;
            if (!(0, _shared.isString)(arg1)) throw createI18nError(15 /* INVALID_ARGUMENT */ );
            const key = arg1;
            if ((0, _shared.isString)(arg2)) options.locale = arg2;
            else if ((0, _shared.isNumber)(arg2)) options.plural = arg2;
            else if ((0, _shared.isArray)(arg2)) list = arg2;
            else if ((0, _shared.isPlainObject)(arg2)) named = arg2;
            if ((0, _shared.isString)(arg3)) options.locale = arg3;
            else if ((0, _shared.isArray)(arg3)) list = arg3;
            else if ((0, _shared.isPlainObject)(arg3)) named = arg3;
            return composer.t(key, list || named || {}, options);
        },
        // te
        te (key, locale) {
            return composer.te(key, locale);
        },
        // tm
        tm (key) {
            return composer.tm(key);
        },
        // getLocaleMessage
        getLocaleMessage (locale) {
            return composer.getLocaleMessage(locale);
        },
        // setLocaleMessage
        setLocaleMessage (locale, message) {
            composer.setLocaleMessage(locale, message);
        },
        // mergeLocaleMessasge
        mergeLocaleMessage (locale, message) {
            composer.mergeLocaleMessage(locale, message);
        },
        // d
        d (...args) {
            return composer.d(...args);
        },
        // getDateTimeFormat
        getDateTimeFormat (locale) {
            return composer.getDateTimeFormat(locale);
        },
        // setDateTimeFormat
        setDateTimeFormat (locale, format) {
            composer.setDateTimeFormat(locale, format);
        },
        // mergeDateTimeFormat
        mergeDateTimeFormat (locale, format) {
            composer.mergeDateTimeFormat(locale, format);
        },
        // n
        n (...args) {
            return composer.n(...args);
        },
        // getNumberFormat
        getNumberFormat (locale) {
            return composer.getNumberFormat(locale);
        },
        // setNumberFormat
        setNumberFormat (locale, format) {
            composer.setNumberFormat(locale, format);
        },
        // mergeNumberFormat
        mergeNumberFormat (locale, format) {
            composer.mergeNumberFormat(locale, format);
        },
        // getChoiceIndex
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        getChoiceIndex (choice, choicesLength) {
            (0, _shared.warn)(getWarnMessage(10 /* NOT_SUPPORTED_GET_CHOICE_INDEX */ ));
            return -1;
        },
        // for internal
        __onComponentInstanceCreated (target) {
            const { componentInstanceCreatedListener  } = options1;
            if (componentInstanceCreatedListener) componentInstanceCreatedListener(target, vueI18n);
        }
    };
    vueI18n.__enableEmitter = (emitter)=>{
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        const __composer = composer;
        __composer[EnableEmitter] && __composer[EnableEmitter](emitter);
    };
    vueI18n.__disableEmitter = ()=>{
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        const __composer = composer;
        __composer[DisableEmitter] && __composer[DisableEmitter]();
    };
    return vueI18n;
}
const baseFormatProps = {
    tag: {
        type: [
            String,
            Object
        ]
    },
    locale: {
        type: String
    },
    scope: {
        type: String,
        validator: (val)=>val === "parent" || val === "global",
        default: "parent"
    }
};
/**
 * Translation Component
 *
 * @remarks
 * See the following items for property about details
 *
 * @VueI18nSee [TranslationProps](component#translationprops)
 * @VueI18nSee [BaseFormatProps](component#baseformatprops)
 * @VueI18nSee [Component Interpolation](../../guide/advanced/component)
 *
 * @example
 * ```html
 * <div id="app">
 *   <!-- ... -->
 *   <i18n path="term" tag="label" for="tos">
 *     <a :href="url" target="_blank">{{ $t('tos') }}</a>
 *   </i18n>
 *   <!-- ... -->
 * </div>
 * ```
 * ```js
 * import { createApp } from 'vue'
 * import { createI18n } from 'vue-i18n'
 *
 * const messages = {
 *   en: {
 *     tos: 'Term of Service',
 *     term: 'I accept xxx {0}.'
 *   },
 *   ja: {
 *     tos: '利用規約',
 *     term: '私は xxx の{0}に同意します。'
 *   }
 * }
 *
 * const i18n = createI18n({
 *   locale: 'en',
 *   messages
 * })
 *
 * const app = createApp({
 *   data: {
 *     url: '/term'
 *   }
 * }).use(i18n).mount('#app')
 * ```
 *
 * @VueI18nComponent
 */ const Translation = {
    /* eslint-disable */ name: "i18n-t",
    props: {
        ...baseFormatProps,
        keypath: {
            type: String,
            required: true
        },
        plural: {
            type: [
                Number,
                String
            ],
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            validator: (val)=>(0, _shared.isNumber)(val) || !isNaN(val)
        }
    },
    /* eslint-enable */ setup (props, context) {
        const { slots , attrs  } = context;
        const i18n = useI18n({
            useScope: props.scope
        });
        const keys = Object.keys(slots).filter((key)=>key !== "_");
        return ()=>{
            const options = {};
            if (props.locale) options.locale = props.locale;
            if (props.plural !== undefined) options.plural = (0, _shared.isString)(props.plural) ? +props.plural : props.plural;
            const arg = getInterpolateArg(context, keys);
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            const children = i18n[TransrateVNodeSymbol](props.keypath, arg, options);
            // prettier-ignore
            return (0, _shared.isString)(props.tag) ? (0, _vue.h)(props.tag, {
                ...attrs
            }, children) : (0, _shared.isObject)(props.tag) ? (0, _vue.h)(props.tag, {
                ...attrs
            }, children) : (0, _vue.h)((0, _vue.Fragment), {
                ...attrs
            }, children);
        };
    }
};
function getInterpolateArg({ slots  }, keys) {
    if (keys.length === 1 && keys[0] === "default") // default slot only
    return slots.default ? slots.default() : [];
    else // named slots
    return keys.reduce((arg, key)=>{
        const slot = slots[key];
        if (slot) arg[key] = slot();
        return arg;
    }, {});
}
function renderFormatter(props, context, slotKeys, partFormatter) {
    const { slots , attrs  } = context;
    return ()=>{
        const options2 = {
            part: true
        };
        let orverrides = {};
        if (props.locale) options2.locale = props.locale;
        if ((0, _shared.isString)(props.format)) options2.key = props.format;
        else if ((0, _shared.isObject)(props.format)) {
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            if ((0, _shared.isString)(props.format.key)) // eslint-disable-next-line @typescript-eslint/no-explicit-any
            options2.key = props.format.key;
            // Filter out number format options only
            orverrides = Object.keys(props.format).reduce((options, prop)=>{
                return slotKeys.includes(prop) ? Object.assign({}, options, {
                    [prop]: props.format[prop]
                }) // eslint-disable-line @typescript-eslint/no-explicit-any
                 : options;
            }, {});
        }
        const parts = partFormatter(...[
            props.value,
            options2,
            orverrides
        ]);
        let children = [
            options2.key
        ];
        if ((0, _shared.isArray)(parts)) children = parts.map((part, index)=>{
            const slot = slots[part.type];
            return slot ? slot({
                [part.type]: part.value,
                index,
                parts
            }) : [
                part.value
            ];
        });
        else if ((0, _shared.isString)(parts)) children = [
            parts
        ];
        // prettier-ignore
        return (0, _shared.isString)(props.tag) ? (0, _vue.h)(props.tag, {
            ...attrs
        }, children) : (0, _shared.isObject)(props.tag) ? (0, _vue.h)(props.tag, {
            ...attrs
        }, children) : (0, _vue.h)((0, _vue.Fragment), {
            ...attrs
        }, children);
    };
}
const NUMBER_FORMAT_KEYS = [
    "localeMatcher",
    "style",
    "unit",
    "unitDisplay",
    "currency",
    "currencyDisplay",
    "useGrouping",
    "numberingSystem",
    "minimumIntegerDigits",
    "minimumFractionDigits",
    "maximumFractionDigits",
    "minimumSignificantDigits",
    "maximumSignificantDigits",
    "notation",
    "formatMatcher"
];
/**
 * Number Format Component
 *
 * @remarks
 * See the following items for property about details
 *
 * @VueI18nSee [FormattableProps](component#formattableprops)
 * @VueI18nSee [BaseFormatProps](component#baseformatprops)
 * @VueI18nSee [Custom Formatting](../../guide/essentials/number#custom-formatting)
 *
 * @VueI18nDanger
 * Not supported IE, due to no support `Intl.NumberForamt#formatToParts` in [IE](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/formatToParts)
 *
 * If you want to use it, you need to use [polyfill](https://github.com/formatjs/formatjs/tree/main/packages/intl-numberformat)
 *
 * @VueI18nComponent
 */ const NumberFormat = {
    /* eslint-disable */ name: "i18n-n",
    props: {
        ...baseFormatProps,
        value: {
            type: Number,
            required: true
        },
        format: {
            type: [
                String,
                Object
            ]
        }
    },
    /* eslint-enable */ setup (props, context) {
        const i18n = useI18n({
            useScope: "parent"
        });
        return renderFormatter(props, context, NUMBER_FORMAT_KEYS, (...args)=>// eslint-disable-next-line @typescript-eslint/no-explicit-any
            i18n[NumberPartsSymbol](...args));
    }
};
const DATETIME_FORMAT_KEYS = [
    "dateStyle",
    "timeStyle",
    "fractionalSecondDigits",
    "calendar",
    "dayPeriod",
    "numberingSystem",
    "localeMatcher",
    "timeZone",
    "hour12",
    "hourCycle",
    "formatMatcher",
    "weekday",
    "era",
    "year",
    "month",
    "day",
    "hour",
    "minute",
    "second",
    "timeZoneName"
];
/**
 * Datetime Format Component
 *
 * @remarks
 * See the following items for property about details
 *
 * @VueI18nSee [FormattableProps](component#formattableprops)
 * @VueI18nSee [BaseFormatProps](component#baseformatprops)
 * @VueI18nSee [Custom Formatting](../../guide/essentials/datetime#custom-formatting)
 *
 * @VueI18nDanger
 * Not supported IE, due to no support `Intl.DateTimeForamt#formatToParts` in [IE](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/formatToParts)
 *
 * If you want to use it, you need to use [polyfill](https://github.com/formatjs/formatjs/tree/main/packages/intl-datetimeformat)
 *
 * @VueI18nComponent
 */ const DatetimeFormat = {
    /* eslint-disable */ name: "i18n-d",
    props: {
        ...baseFormatProps,
        value: {
            type: [
                Number,
                Date
            ],
            required: true
        },
        format: {
            type: [
                String,
                Object
            ]
        }
    },
    /* eslint-enable */ setup (props, context) {
        const i18n = useI18n({
            useScope: "parent"
        });
        return renderFormatter(props, context, DATETIME_FORMAT_KEYS, (...args)=>// eslint-disable-next-line @typescript-eslint/no-explicit-any
            i18n[DatetimePartsSymbol](...args));
    }
};
function getComposer(i18n, instance) {
    const i18nInternal = i18n;
    if (i18n.mode === "composition") return i18nInternal.__getInstance(instance) || i18n.global;
    else {
        const vueI18n = i18nInternal.__getInstance(instance);
        return vueI18n != null ? vueI18n.__composer : i18n.global.__composer;
    }
}
function vTDirective(i18n) {
    const bind = (el, { instance , value , modifiers  })=>{
        /* istanbul ignore if */ if (!instance || !instance.$) throw createI18nError(22 /* UNEXPECTED_ERROR */ );
        const composer = getComposer(i18n, instance.$);
        if (modifiers.preserve) (0, _shared.warn)(getWarnMessage(7 /* NOT_SUPPORTED_PRESERVE */ ));
        const parsedValue = parseValue(value);
        el.textContent = composer.t(...makeParams(parsedValue));
    };
    return {
        beforeMount: bind,
        beforeUpdate: bind
    };
}
function parseValue(value) {
    if ((0, _shared.isString)(value)) return {
        path: value
    };
    else if ((0, _shared.isPlainObject)(value)) {
        if (!("path" in value)) throw createI18nError(19 /* REQUIRED_VALUE */ , "path");
        return value;
    } else throw createI18nError(20 /* INVALID_VALUE */ );
}
function makeParams(value) {
    const { path , locale , args , choice , plural  } = value;
    const options = {};
    const named = args || {};
    if ((0, _shared.isString)(locale)) options.locale = locale;
    if ((0, _shared.isNumber)(choice)) options.plural = choice;
    if ((0, _shared.isNumber)(plural)) options.plural = plural;
    return [
        path,
        named,
        options
    ];
}
function apply(app, i18n, ...options) {
    const pluginOptions = (0, _shared.isPlainObject)(options[0]) ? options[0] : {};
    const useI18nComponentName = !!pluginOptions.useI18nComponentName;
    const globalInstall = (0, _shared.isBoolean)(pluginOptions.globalInstall) ? pluginOptions.globalInstall : true;
    if (globalInstall && useI18nComponentName) (0, _shared.warn)(getWarnMessage(11 /* COMPONENT_NAME_LEGACY_COMPATIBLE */ , {
        name: Translation.name
    }));
    if (globalInstall) {
        // install components
        app.component(!useI18nComponentName ? Translation.name : "i18n", Translation);
        app.component(NumberFormat.name, NumberFormat);
        app.component(DatetimeFormat.name, DatetimeFormat);
    }
    // install directive
    app.directive("t", vTDirective(i18n));
}
let devtoolsApi;
async function enableDevTools(app, i18n) {
    return new Promise((resolve, reject)=>{
        try {
            (0, _devtoolsApi.setupDevtoolsPlugin)({
                id: "vue-devtools-plugin-vue-i18n" /* PLUGIN */ ,
                label: (0, _coreBase.DevToolsLabels)["vue-devtools-plugin-vue-i18n" /* PLUGIN */ ],
                app
            }, (api)=>{
                devtoolsApi = api;
                api.on.walkComponentTree((payload, ctx)=>{
                    updateComponentTreeDataTags(ctx.currentAppRecord, payload.componentTreeData, i18n);
                });
                api.on.inspectComponent((payload)=>{
                    const componentInstance = payload.componentInstance;
                    if (componentInstance.vnode.el.__INTLIFY__ && payload.instanceData) {
                        if (i18n.mode === "legacy") // ignore global scope on legacy mode
                        {
                            if (componentInstance.vnode.el.__INTLIFY__ !== i18n.global.__composer) inspectComposer(payload.instanceData, componentInstance.vnode.el.__INTLIFY__);
                        } else inspectComposer(payload.instanceData, componentInstance.vnode.el.__INTLIFY__);
                    }
                });
                api.addInspector({
                    id: "vue-i18n-resource-inspector" /* CUSTOM_INSPECTOR */ ,
                    label: (0, _coreBase.DevToolsLabels)["vue-i18n-resource-inspector" /* CUSTOM_INSPECTOR */ ],
                    icon: "language",
                    treeFilterPlaceholder: (0, _coreBase.DevToolsPlaceholders)["vue-i18n-resource-inspector" /* CUSTOM_INSPECTOR */ ]
                });
                api.on.getInspectorTree((payload)=>{
                    if (payload.app === app && payload.inspectorId === "vue-i18n-resource-inspector" /* CUSTOM_INSPECTOR */ ) registerScope(payload, i18n);
                });
                api.on.getInspectorState((payload)=>{
                    if (payload.app === app && payload.inspectorId === "vue-i18n-resource-inspector" /* CUSTOM_INSPECTOR */ ) inspectScope(payload, i18n);
                });
                api.addTimelineLayer({
                    id: "vue-i18n-timeline" /* TIMELINE */ ,
                    label: (0, _coreBase.DevToolsLabels)["vue-i18n-timeline" /* TIMELINE */ ],
                    color: (0, _coreBase.DevToolsTimelineColors)["vue-i18n-timeline" /* TIMELINE */ ]
                });
                resolve(true);
            });
        } catch (e) {
            console.error(e);
            reject(false);
        }
    });
}
function updateComponentTreeDataTags(appRecord, treeData, i18n) {
    const instance = appRecord.instanceMap.get(treeData.id);
    if (instance && instance.vnode.el.__INTLIFY__) {
        // prettier-ignore
        const global = i18n.mode === "composition" ? i18n.global : i18n.global.__composer;
        // add custom tags local scope only
        if (instance.vnode.el.__INTLIFY__ !== global) {
            const label = instance.type.name || instance.type.displayName || instance.type.__file;
            const tag = {
                label: `i18n (${label} Scope)`,
                textColor: 0x000000,
                backgroundColor: 0xffcd19
            };
            treeData.tags = [
                tag
            ];
        }
    }
    for (const node of treeData.children)updateComponentTreeDataTags(appRecord, node, i18n);
}
function inspectComposer(instanceData, composer) {
    const type = "vue-i18n: composer properties";
    instanceData.state.push({
        type,
        key: "locale",
        editable: false,
        value: composer.locale.value
    });
    instanceData.state.push({
        type,
        key: "availableLocales",
        editable: false,
        value: composer.availableLocales
    });
    instanceData.state.push({
        type,
        key: "fallbackLocale",
        editable: false,
        value: composer.fallbackLocale.value
    });
    instanceData.state.push({
        type,
        key: "inheritLocale",
        editable: false,
        value: composer.inheritLocale
    });
    instanceData.state.push({
        type,
        key: "messages",
        editable: false,
        value: getLocaleMessageValue(composer.messages.value)
    });
    instanceData.state.push({
        type,
        key: "datetimeFormats",
        editable: false,
        value: composer.datetimeFormats.value
    });
    instanceData.state.push({
        type,
        key: "numberFormats",
        editable: false,
        value: composer.numberFormats.value
    });
}
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function getLocaleMessageValue(messages) {
    const value = {};
    Object.keys(messages).forEach((key)=>{
        const v = messages[key];
        if ((0, _shared.isFunction)(v) && "source" in v) value[key] = getMessageFunctionDetails(v);
        else if ((0, _shared.isObject)(v)) value[key] = getLocaleMessageValue(v);
        else value[key] = v;
    });
    return value;
}
const ESC = {
    "<": "&lt;",
    ">": "&gt;",
    '"': "&quot;",
    "&": "&amp;"
};
function escape(s) {
    return s.replace(/[<>"&]/g, escapeChar);
}
function escapeChar(a) {
    return ESC[a] || a;
}
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function getMessageFunctionDetails(func) {
    const argString = func.source ? `("${escape(func.source)}")` : `(?)`;
    return {
        _custom: {
            type: "function",
            display: `<span>ƒ</span> ${argString}`
        }
    };
}
function registerScope(payload, i18n) {
    payload.rootNodes.push({
        id: "global",
        label: "Global Scope"
    });
    // prettier-ignore
    const global = i18n.mode === "composition" ? i18n.global : i18n.global.__composer;
    for (const [keyInstance, instance] of i18n.__instances){
        // prettier-ignore
        const composer = i18n.mode === "composition" ? instance : instance.__composer;
        if (global === composer) continue;
        const label = keyInstance.type.name || keyInstance.type.displayName || keyInstance.type.__file;
        payload.rootNodes.push({
            id: composer.id.toString(),
            label: `${label} Scope`
        });
    }
}
function inspectScope(payload, i18n) {
    if (payload.nodeId === "global") payload.state = makeScopeInspectState(i18n.mode === "composition" ? i18n.global : i18n.global.__composer);
    else {
        const instance = Array.from(i18n.__instances.values()).find((item)=>item.id.toString() === payload.nodeId);
        if (instance) {
            const composer = i18n.mode === "composition" ? instance : instance.__composer;
            payload.state = makeScopeInspectState(composer);
        }
    }
}
function makeScopeInspectState(composer) {
    const state = {};
    const localeType = "Locale related info";
    const localeStates = [
        {
            type: localeType,
            key: "locale",
            editable: false,
            value: composer.locale.value
        },
        {
            type: localeType,
            key: "fallbackLocale",
            editable: false,
            value: composer.fallbackLocale.value
        },
        {
            type: localeType,
            key: "availableLocales",
            editable: false,
            value: composer.availableLocales
        },
        {
            type: localeType,
            key: "inheritLocale",
            editable: false,
            value: composer.inheritLocale
        }
    ];
    state[localeType] = localeStates;
    const localeMessagesType = "Locale messages info";
    const localeMessagesStates = [
        {
            type: localeMessagesType,
            key: "messages",
            editable: false,
            value: getLocaleMessageValue(composer.messages.value)
        }
    ];
    state[localeMessagesType] = localeMessagesStates;
    const datetimeFormatsType = "Datetime formats info";
    const datetimeFormatsStates = [
        {
            type: datetimeFormatsType,
            key: "datetimeFormats",
            editable: false,
            value: composer.datetimeFormats.value
        }
    ];
    state[datetimeFormatsType] = datetimeFormatsStates;
    const numberFormatsType = "Datetime formats info";
    const numberFormatsStates = [
        {
            type: numberFormatsType,
            key: "numberFormats",
            editable: false,
            value: composer.numberFormats.value
        }
    ];
    state[numberFormatsType] = numberFormatsStates;
    return state;
}
function addTimelineEvent(event, payload) {
    if (devtoolsApi) {
        let groupId;
        if (payload && "groupId" in payload) {
            groupId = payload.groupId;
            delete payload.groupId;
        }
        devtoolsApi.addTimelineEvent({
            layerId: "vue-i18n-timeline" /* TIMELINE */ ,
            event: {
                title: event,
                groupId,
                time: Date.now(),
                meta: {},
                data: payload || {},
                logType: event === "compile-error" /* COMPILE_ERROR */  ? "error" : event === "fallback" /* FALBACK */  || event === "missing" /* MISSING */  ? "warning" : "default"
            }
        });
    }
}
// supports compatibility for legacy vue-i18n APIs
function defineMixin(vuei18n, composer, i18n) {
    return {
        beforeCreate () {
            const instance = (0, _vue.getCurrentInstance)();
            /* istanbul ignore if */ if (!instance) throw createI18nError(22 /* UNEXPECTED_ERROR */ );
            const options = this.$options;
            if (options.i18n) {
                const optionsI18n = options.i18n;
                if (options.__i18n) optionsI18n.__i18n = options.__i18n;
                optionsI18n.__root = composer;
                if (this === this.$root) this.$i18n = mergeToRoot(vuei18n, optionsI18n);
                else this.$i18n = createVueI18n(optionsI18n);
            } else if (options.__i18n) {
                if (this === this.$root) this.$i18n = mergeToRoot(vuei18n, options);
                else this.$i18n = createVueI18n({
                    __i18n: options.__i18n,
                    __root: composer
                });
            } else // set global
            this.$i18n = vuei18n;
            vuei18n.__onComponentInstanceCreated(this.$i18n);
            i18n.__setInstance(instance, this.$i18n);
            // defines vue-i18n legacy APIs
            this.$t = (...args)=>this.$i18n.t(...args);
            this.$tc = (...args)=>this.$i18n.tc(...args);
            this.$te = (key, locale)=>this.$i18n.te(key, locale);
            this.$d = (...args)=>this.$i18n.d(...args);
            this.$n = (...args)=>this.$i18n.n(...args);
            this.$tm = (key)=>this.$i18n.tm(key);
        },
        mounted () {
            {
                this.$el.__INTLIFY__ = this.$i18n.__composer;
                const emitter = this.__emitter = (0, _coreBase.createEmitter)();
                const _vueI18n = this.$i18n;
                _vueI18n.__enableEmitter && _vueI18n.__enableEmitter(emitter);
                emitter.on("*", addTimelineEvent);
            }
        },
        beforeUnmount () {
            const instance = (0, _vue.getCurrentInstance)();
            /* istanbul ignore if */ if (!instance) throw createI18nError(22 /* UNEXPECTED_ERROR */ );
            {
                if (this.__emitter) {
                    this.__emitter.off("*", addTimelineEvent);
                    delete this.__emitter;
                }
                const _vueI18n = this.$i18n;
                _vueI18n.__disableEmitter && _vueI18n.__disableEmitter();
                delete this.$el.__INTLIFY__;
            }
            delete this.$t;
            delete this.$tc;
            delete this.$te;
            delete this.$d;
            delete this.$n;
            delete this.$tm;
            i18n.__deleteInstance(instance);
            delete this.$i18n;
        }
    };
}
function mergeToRoot(root, optoins) {
    root.locale = optoins.locale || root.locale;
    root.fallbackLocale = optoins.fallbackLocale || root.fallbackLocale;
    root.missing = optoins.missing || root.missing;
    root.silentTranslationWarn = optoins.silentTranslationWarn || root.silentFallbackWarn;
    root.silentFallbackWarn = optoins.silentFallbackWarn || root.silentFallbackWarn;
    root.formatFallbackMessages = optoins.formatFallbackMessages || root.formatFallbackMessages;
    root.postTranslation = optoins.postTranslation || root.postTranslation;
    root.warnHtmlInMessage = optoins.warnHtmlInMessage || root.warnHtmlInMessage;
    root.escapeParameterHtml = optoins.escapeParameterHtml || root.escapeParameterHtml;
    root.sync = optoins.sync || root.sync;
    const messages = getLocaleMessages(root.locale, {
        messages: optoins.messages,
        __i18n: optoins.__i18n
    });
    Object.keys(messages).forEach((locale)=>root.mergeLocaleMessage(locale, messages[locale]));
    if (optoins.datetimeFormats) Object.keys(optoins.datetimeFormats).forEach((locale)=>root.mergeDateTimeFormat(locale, optoins.datetimeFormats[locale]));
    if (optoins.numberFormats) Object.keys(optoins.numberFormats).forEach((locale)=>root.mergeNumberFormat(locale, optoins.numberFormats[locale]));
    return root;
}
/**
 * Vue I18n factory
 *
 * @param options - An options, see the {@link I18nOptions}
 *
 * @returns {@link I18n} instance
 *
 * @remarks
 * If you use Legacy API mode, you need toto specify {@link VueI18nOptions} and `legacy: true` option.
 *
 * If you use composition API mode, you need to specify {@link ComposerOptions}.
 *
 * @VueI18nSee [Getting Started](../../guide/)
 * @VueI18nSee [Composition API](../../guide/advanced/composition)
 *
 * @example
 * case: for Legacy API
 * ```js
 * import { createApp } from 'vue'
 * import { createI18n } from 'vue-i18n'
 *
 * // call with I18n option
 * const i18n = createI18n({
 *   locale: 'ja',
 *   messages: {
 *     en: { ... },
 *     ja: { ... }
 *   }
 * })
 *
 * const App = {
 *   // ...
 * }
 *
 * const app = createApp(App)
 *
 * // install!
 * app.use(i18n)
 * app.mount('#app')
 * ```
 *
 * @example
 * case: for composition API
 * ```js
 * import { createApp } from 'vue'
 * import { createI18n, useI18n } from 'vue-i18n'
 *
 * // call with I18n option
 * const i18n = createI18n({
 *   legacy: false, // you must specify 'lagacy: false' option
 *   locale: 'ja',
 *   messages: {
 *     en: { ... },
 *     ja: { ... }
 *   }
 * })
 *
 * const App = {
 *   setup() {
 *     // ...
 *     const { t } = useI18n({ ... })
 *     return { ... , t }
 *   }
 * }
 *
 * const app = createApp(App)
 *
 * // install!
 * app.use(i18n)
 * app.mount('#app')
 * ```
 *
 * @VueI18nGeneral
 */ function createI18n(options3 = {}) {
    // prettier-ignore
    const __legacyMode = __VUE_I18N_LEGACY_API__ && (0, _shared.isBoolean)(options3.legacy) ? options3.legacy : true;
    const __globalInjection = __VUE_I18N_LEGACY_API__ && !!options3.globalInjection;
    const __instances = new Map();
    // prettier-ignore
    const __global = __VUE_I18N_LEGACY_API__ && __legacyMode ? createVueI18n(options3) : createComposer(options3);
    const symbol = (0, _shared.makeSymbol)("vue-i18n");
    const i18n = {
        // mode
        get mode () {
            // prettier-ignore
            return __VUE_I18N_LEGACY_API__ ? __legacyMode ? "legacy" : "composition" : "composition";
        },
        // install plugin
        async install (app, ...options) {
            app.__VUE_I18N__ = i18n;
            // setup global provider
            app.__VUE_I18N_SYMBOL__ = symbol;
            app.provide(app.__VUE_I18N_SYMBOL__, i18n);
            // global method and properties injection for Composition API
            if (!__legacyMode && __globalInjection) injectGlobalFields(app, i18n.global);
            // install built-in components and directive
            if (__VUE_I18N_FULL_INSTALL__) apply(app, i18n, ...options);
            // setup mixin for Legacy API
            if (__VUE_I18N_LEGACY_API__ && __legacyMode) app.mixin(defineMixin(__global, __global.__composer, i18n));
            {
                const ret = await enableDevTools(app, i18n);
                if (!ret) throw createI18nError(21 /* CANNOT_SETUP_VUE_DEVTOOLS_PLUGIN */ );
                const emitter = (0, _coreBase.createEmitter)();
                if (__legacyMode) {
                    const _vueI18n = __global;
                    _vueI18n.__enableEmitter && _vueI18n.__enableEmitter(emitter);
                } else {
                    // eslint-disable-next-line @typescript-eslint/no-explicit-any
                    const _composer = __global;
                    _composer[EnableEmitter] && _composer[EnableEmitter](emitter);
                }
                emitter.on("*", addTimelineEvent);
            }
        },
        // global accsessor
        get global () {
            return __global;
        },
        // @internal
        __instances,
        // @internal
        __getInstance (component) {
            return __instances.get(component) || null;
        },
        // @internal
        __setInstance (component, instance) {
            __instances.set(component, instance);
        },
        // @internal
        __deleteInstance (component) {
            __instances.delete(component);
        }
    };
    return i18n;
}
/**
 * Use Composition API for Vue I18n
 *
 * @param options - An options, see {@link UseI18nOptions}
 *
 * @returns {@link Composer} instance
 *
 * @remarks
 * This function is mainly used by `setup`.
 *
 * If options are specified, Composer instance is created for each component and you can be localized on the component.
 *
 * If options are not specified, you can be localized using the global Composer.
 *
 * @example
 * case: Component resource base localization
 * ```html
 * <template>
 *   <form>
 *     <label>{{ t('language') }}</label>
 *     <select v-model="locale">
 *       <option value="en">en</option>
 *       <option value="ja">ja</option>
 *     </select>
 *   </form>
 *   <p>message: {{ t('hello') }}</p>
 * </template>
 *
 * <script>
 * import { useI18n } from 'vue-i18n'
 *
 * export default {
 *  setup() {
 *    const { t, locale } = useI18n({
 *      locale: 'ja',
 *      messages: {
 *        en: { ... },
 *        ja: { ... }
 *      }
 *    })
 *    // Something to do ...
 *
 *    return { ..., t, locale }
 *  }
 * }
 * </script>
 * ```
 *
 * @VueI18nComposition
 */ function useI18n(options = {}) {
    const instance = (0, _vue.getCurrentInstance)();
    if (instance == null) throw createI18nError(16 /* MUST_BE_CALL_SETUP_TOP */ );
    if (!instance.appContext.app.__VUE_I18N_SYMBOL__) throw createI18nError(17 /* NOT_INSLALLED */ );
    const i18n = (0, _vue.inject)(instance.appContext.app.__VUE_I18N_SYMBOL__);
    /* istanbul ignore if */ if (!i18n) throw createI18nError(22 /* UNEXPECTED_ERROR */ );
    // prettier-ignore
    const global = i18n.mode === "composition" ? i18n.global : i18n.global.__composer;
    // prettier-ignore
    const scope = (0, _shared.isEmptyObject)(options) ? "__i18n" in instance.type ? "local" : "global" : !options.useScope ? "local" : options.useScope;
    if (scope === "global") {
        let messages = (0, _shared.isObject)(options.messages) ? options.messages : {};
        if ("__i18nGlobal" in instance.type) messages = getLocaleMessages(global.locale.value, {
            messages,
            __i18n: instance.type.__i18nGlobal
        });
        // merge locale messages
        const locales = Object.keys(messages);
        if (locales.length) locales.forEach((locale)=>{
            global.mergeLocaleMessage(locale, messages[locale]);
        });
        // merge datetime formats
        if ((0, _shared.isObject)(options.datetimeFormats)) {
            const locales = Object.keys(options.datetimeFormats);
            if (locales.length) locales.forEach((locale)=>{
                global.mergeDateTimeFormat(locale, options.datetimeFormats[locale]);
            });
        }
        // merge number formats
        if ((0, _shared.isObject)(options.numberFormats)) {
            const locales = Object.keys(options.numberFormats);
            if (locales.length) locales.forEach((locale)=>{
                global.mergeNumberFormat(locale, options.numberFormats[locale]);
            });
        }
        return global;
    }
    if (scope === "parent") {
        let composer = getComposer$1(i18n, instance);
        if (composer == null) {
            (0, _shared.warn)(getWarnMessage(12 /* NOT_FOUND_PARENT_SCOPE */ ));
            composer = global;
        }
        return composer;
    }
    // scope 'local' case
    if (i18n.mode === "legacy") throw createI18nError(18 /* NOT_AVAILABLE_IN_LEGACY_MODE */ );
    const i18nInternal = i18n;
    let composer = i18nInternal.__getInstance(instance);
    if (composer == null) {
        const type = instance.type;
        const composerOptions = {
            ...options
        };
        if (type.__i18n) composerOptions.__i18n = type.__i18n;
        if (global) composerOptions.__root = global;
        composer = createComposer(composerOptions);
        setupLifeCycle(i18nInternal, instance, composer);
        i18nInternal.__setInstance(instance, composer);
    }
    return composer;
}
function getComposer$1(i18n, target) {
    let composer = null;
    const root = target.root;
    let current = target.parent;
    while(current != null){
        const i18nInternal = i18n;
        if (i18n.mode === "composition") composer = i18nInternal.__getInstance(current);
        else {
            const vueI18n = i18nInternal.__getInstance(current);
            if (vueI18n != null) composer = vueI18n.__composer;
        }
        if (composer != null) break;
        if (root === current) break;
        current = current.parent;
    }
    return composer;
}
function setupLifeCycle(i18n, target, composer) {
    let emitter = null;
    (0, _vue.onMounted)(()=>{
        // inject composer instance to DOM for intlify-devtools
        if (target.vnode.el) {
            target.vnode.el.__INTLIFY__ = composer;
            emitter = (0, _coreBase.createEmitter)();
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            const _composer = composer;
            _composer[EnableEmitter] && _composer[EnableEmitter](emitter);
            emitter.on("*", addTimelineEvent);
        }
    }, target);
    (0, _vue.onUnmounted)(()=>{
        // remove composer instance from DOM for intlify-devtools
        if (target.vnode.el && target.vnode.el.__INTLIFY__) {
            emitter && emitter.off("*", addTimelineEvent);
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            const _composer = composer;
            _composer[DisableEmitter] && _composer[DisableEmitter]();
            delete target.vnode.el.__INTLIFY__;
        }
        i18n.__deleteInstance(target);
    }, target);
}
const globalExportProps = [
    "locale",
    "fallbackLocale",
    "availableLocales"
];
const globalExportMethods = [
    "t",
    "d",
    "n",
    "tm"
];
function injectGlobalFields(app, composer) {
    const i18n = Object.create(null);
    globalExportProps.forEach((prop)=>{
        const desc = Object.getOwnPropertyDescriptor(composer, prop);
        if (!desc) throw createI18nError(22 /* UNEXPECTED_ERROR */ );
        const wrap = (0, _vue.isRef)(desc.value) // check computed props
         ? {
            get () {
                return desc.value.value;
            },
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            set (val) {
                desc.value.value = val;
            }
        } : {
            get () {
                return desc.get && desc.get();
            }
        };
        Object.defineProperty(i18n, prop, wrap);
    });
    app.config.globalProperties.$i18n = i18n;
    globalExportMethods.forEach((method)=>{
        const desc = Object.getOwnPropertyDescriptor(composer, method);
        if (!desc) throw createI18nError(22 /* UNEXPECTED_ERROR */ );
        Object.defineProperty(app.config.globalProperties, `$${method}`, desc);
    });
}
// register message compiler at vue-i18n
(0, _coreBase.registerMessageCompiler)((0, _coreBase.compileToFunction));
initFeatureFlags();
initDev();

},{"@intlify/shared":"iKoIZ","@intlify/core-base":"e3tnd","vue":"hRjhg","@vue/devtools-api":"dc7MH","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iKoIZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "escapeHtml", ()=>escapeHtml);
parcelHelpers.export(exports, "format", ()=>format);
parcelHelpers.export(exports, "friendlyJSONstringify", ()=>friendlyJSONstringify);
parcelHelpers.export(exports, "generateCodeFrame", ()=>generateCodeFrame);
parcelHelpers.export(exports, "generateFormatCacheKey", ()=>generateFormatCacheKey);
parcelHelpers.export(exports, "getGlobalThis", ()=>getGlobalThis);
parcelHelpers.export(exports, "inBrowser", ()=>inBrowser);
parcelHelpers.export(exports, "isArray", ()=>isArray);
parcelHelpers.export(exports, "isBoolean", ()=>isBoolean);
parcelHelpers.export(exports, "isDate", ()=>isDate);
parcelHelpers.export(exports, "isEmptyObject", ()=>isEmptyObject);
parcelHelpers.export(exports, "isFunction", ()=>isFunction);
parcelHelpers.export(exports, "isNumber", ()=>isNumber);
parcelHelpers.export(exports, "isObject", ()=>isObject);
parcelHelpers.export(exports, "isPlainObject", ()=>isPlainObject);
parcelHelpers.export(exports, "isPromise", ()=>isPromise);
parcelHelpers.export(exports, "isRegExp", ()=>isRegExp);
parcelHelpers.export(exports, "isString", ()=>isString);
parcelHelpers.export(exports, "isSymbol", ()=>isSymbol);
parcelHelpers.export(exports, "makeSymbol", ()=>makeSymbol);
parcelHelpers.export(exports, "mark", ()=>mark);
parcelHelpers.export(exports, "measure", ()=>measure);
parcelHelpers.export(exports, "objectToString", ()=>objectToString);
parcelHelpers.export(exports, "toDisplayString", ()=>toDisplayString);
parcelHelpers.export(exports, "toTypeString", ()=>toTypeString);
parcelHelpers.export(exports, "warn", ()=>warn);
var global = arguments[3];
/*!
  * @intlify/shared v9.0.0-rc.2
  * (c) 2021 kazuya kawaguchi
  * Released under the MIT License.
  */ /**
 * Original Utilities
 * written by kazuya kawaguchi
 */ const inBrowser = typeof window !== "undefined";
let mark;
let measure;
{
    const perf = inBrowser && window.performance;
    if (perf && perf.mark && perf.measure && perf.clearMarks && perf.clearMeasures) {
        mark = (tag)=>perf.mark(tag);
        measure = (name, startTag, endTag)=>{
            perf.measure(name, startTag, endTag);
            perf.clearMarks(startTag);
            perf.clearMarks(endTag);
        };
    }
}const RE_ARGS = /\{([0-9a-zA-Z]+)\}/g;
/* eslint-disable */ function format(message, ...args) {
    if (args.length === 1 && isObject(args[0])) args = args[0];
    if (!args || !args.hasOwnProperty) args = {};
    return message.replace(RE_ARGS, (match, identifier)=>{
        return args.hasOwnProperty(identifier) ? args[identifier] : "";
    });
}
const hasSymbol = typeof Symbol === "function" && typeof Symbol.toStringTag === "symbol";
const makeSymbol = (name)=>hasSymbol ? Symbol(name) : name;
const generateFormatCacheKey = (locale, key, source)=>friendlyJSONstringify({
        l: locale,
        k: key,
        s: source
    });
const friendlyJSONstringify = (json)=>JSON.stringify(json).replace(/\u2028/g, "\\u2028").replace(/\u2029/g, "\\u2029").replace(/\u0027/g, "\\u0027");
const isNumber = (val)=>typeof val === "number" && isFinite(val);
const isDate = (val)=>toTypeString(val) === "[object Date]";
const isRegExp = (val)=>toTypeString(val) === "[object RegExp]";
const isEmptyObject = (val)=>isPlainObject(val) && Object.keys(val).length === 0;
function warn(msg, err) {
    if (typeof console !== "undefined") {
        console.warn(`[intlify] ` + msg);
        /* istanbul ignore if */ if (err) console.warn(err.stack);
    }
}
let _globalThis;
const getGlobalThis = ()=>{
    // prettier-ignore
    return _globalThis || (_globalThis = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : {});
};
function escapeHtml(rawText) {
    return rawText.replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&apos;");
}
/* eslint-enable */ /**
 * Useful Utilites By Evan you
 * Modified by kazuya kawaguchi
 * MIT License
 * https://github.com/vuejs/vue-next/blob/master/packages/shared/src/index.ts
 * https://github.com/vuejs/vue-next/blob/master/packages/shared/src/codeframe.ts
 */ const isArray = Array.isArray;
const isFunction = (val)=>typeof val === "function";
const isString = (val)=>typeof val === "string";
const isBoolean = (val)=>typeof val === "boolean";
const isSymbol = (val)=>typeof val === "symbol";
const isObject = (val)=>val !== null && typeof val === "object";
const isPromise = (val)=>{
    return isObject(val) && isFunction(val.then) && isFunction(val.catch);
};
const objectToString = Object.prototype.toString;
const toTypeString = (value)=>objectToString.call(value);
const isPlainObject = (val)=>toTypeString(val) === "[object Object]";
// for converting list and named values to displayed strings.
const toDisplayString = (val)=>{
    return val == null ? "" : isArray(val) || isPlainObject(val) && val.toString === objectToString ? JSON.stringify(val, null, 2) : String(val);
};
const RANGE = 2;
function generateCodeFrame(source, start = 0, end = source.length) {
    const lines = source.split(/\r?\n/);
    let count = 0;
    const res = [];
    for(let i = 0; i < lines.length; i++){
        count += lines[i].length + 1;
        if (count >= start) {
            for(let j = i - RANGE; j <= i + RANGE || end > count; j++){
                if (j < 0 || j >= lines.length) continue;
                const line = j + 1;
                res.push(`${line}${" ".repeat(3 - String(line).length)}|  ${lines[j]}`);
                const lineLength = lines[j].length;
                if (j === i) {
                    // push underline
                    const pad = start - (count - lineLength) + 1;
                    const length = Math.max(1, end > count ? lineLength - pad : end - start);
                    res.push(`   |  ` + " ".repeat(pad) + "^".repeat(length));
                } else if (j > i) {
                    if (end > count) {
                        const length = Math.max(Math.min(end - count, lineLength), 1);
                        res.push(`   |  ` + "^".repeat(length));
                    }
                    count += lineLength + 1;
                }
            }
            break;
        }
    }
    return res.join("\n");
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"e3tnd":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createCompileError", ()=>(0, _messageCompiler.createCompileError));
parcelHelpers.export(exports, "DevToolsLabels", ()=>DevToolsLabels);
parcelHelpers.export(exports, "DevToolsPlaceholders", ()=>DevToolsPlaceholders);
parcelHelpers.export(exports, "DevToolsTimelineColors", ()=>DevToolsTimelineColors);
parcelHelpers.export(exports, "MISSING_RESOLVE_VALUE", ()=>MISSING_RESOLVE_VALUE);
parcelHelpers.export(exports, "NOT_REOSLVED", ()=>NOT_REOSLVED);
parcelHelpers.export(exports, "clearCompileCache", ()=>clearCompileCache);
parcelHelpers.export(exports, "clearDateTimeFormat", ()=>clearDateTimeFormat);
parcelHelpers.export(exports, "clearNumberFormat", ()=>clearNumberFormat);
parcelHelpers.export(exports, "compileToFunction", ()=>compileToFunction);
parcelHelpers.export(exports, "createCoreContext", ()=>createCoreContext);
parcelHelpers.export(exports, "createCoreError", ()=>createCoreError);
parcelHelpers.export(exports, "createEmitter", ()=>createEmitter);
parcelHelpers.export(exports, "datetime", ()=>datetime);
parcelHelpers.export(exports, "getLocaleChain", ()=>getLocaleChain);
parcelHelpers.export(exports, "getWarnMessage", ()=>getWarnMessage);
parcelHelpers.export(exports, "handleMissing", ()=>handleMissing);
parcelHelpers.export(exports, "isTranslateFallbackWarn", ()=>isTranslateFallbackWarn);
parcelHelpers.export(exports, "isTranslateMissingWarn", ()=>isTranslateMissingWarn);
parcelHelpers.export(exports, "number", ()=>number);
parcelHelpers.export(exports, "parseDateTimeArgs", ()=>parseDateTimeArgs);
parcelHelpers.export(exports, "parseNumberArgs", ()=>parseNumberArgs);
parcelHelpers.export(exports, "parseTranslateArgs", ()=>parseTranslateArgs);
parcelHelpers.export(exports, "registerMessageCompiler", ()=>registerMessageCompiler);
parcelHelpers.export(exports, "translate", ()=>translate);
parcelHelpers.export(exports, "updateFallbackLocale", ()=>updateFallbackLocale);
/*!
  * @intlify/core-base v9.0.0-rc.2
  * (c) 2021 kazuya kawaguchi
  * Released under the MIT License.
  */ var _messageResolver = require("@intlify/message-resolver");
var _runtime = require("@intlify/runtime");
var _messageCompiler = require("@intlify/message-compiler");
var _shared = require("@intlify/shared");
parcelHelpers.exportAll(_messageResolver, exports);
parcelHelpers.exportAll(_runtime, exports);
/** @internal */ const warnMessages = {
    [0 /* NOT_FOUND_KEY */ ]: `Not found '{key}' key in '{locale}' locale messages.`,
    [1 /* FALLBACK_TO_TRANSLATE */ ]: `Fall back to translate '{key}' key with '{target}' locale.`,
    [2 /* CANNOT_FORMAT_NUMBER */ ]: `Cannot format a number value due to not supported Intl.NumberFormat.`,
    [3 /* FALLBACK_TO_NUMBER_FORMAT */ ]: `Fall back to number format '{key}' key with '{target}' locale.`,
    [4 /* CANNOT_FORMAT_DATE */ ]: `Cannot format a date value due to not supported Intl.DateTimeFormat.`,
    [5 /* FALLBACK_TO_DATE_FORMAT */ ]: `Fall back to datetime format '{key}' key with '{target}' locale.`
};
function getWarnMessage(code, ...args) {
    return (0, _shared.format)(warnMessages[code], ...args);
}
const NOT_REOSLVED = -1;
const MISSING_RESOLVE_VALUE = "";
function getDefaultLinkedModifiers() {
    return {
        upper: (val)=>(0, _shared.isString)(val) ? val.toUpperCase() : val,
        lower: (val)=>(0, _shared.isString)(val) ? val.toLowerCase() : val,
        // prettier-ignore
        capitalize: (val)=>(0, _shared.isString)(val) ? `${val.charAt(0).toLocaleUpperCase()}${val.substr(1)}` : val
    };
}
let _compiler;
function registerMessageCompiler(compiler) {
    _compiler = compiler;
}
function createCoreContext(options = {}) {
    // setup options
    const locale = (0, _shared.isString)(options.locale) ? options.locale : "en-US";
    const fallbackLocale = (0, _shared.isArray)(options.fallbackLocale) || (0, _shared.isPlainObject)(options.fallbackLocale) || (0, _shared.isString)(options.fallbackLocale) || options.fallbackLocale === false ? options.fallbackLocale : locale;
    const messages = (0, _shared.isPlainObject)(options.messages) ? options.messages : {
        [locale]: {}
    };
    const datetimeFormats = (0, _shared.isPlainObject)(options.datetimeFormats) ? options.datetimeFormats : {
        [locale]: {}
    };
    const numberFormats = (0, _shared.isPlainObject)(options.numberFormats) ? options.numberFormats : {
        [locale]: {}
    };
    const modifiers = Object.assign({}, options.modifiers || {}, getDefaultLinkedModifiers());
    const pluralRules = options.pluralRules || {};
    const missing = (0, _shared.isFunction)(options.missing) ? options.missing : null;
    const missingWarn = (0, _shared.isBoolean)(options.missingWarn) || (0, _shared.isRegExp)(options.missingWarn) ? options.missingWarn : true;
    const fallbackWarn = (0, _shared.isBoolean)(options.fallbackWarn) || (0, _shared.isRegExp)(options.fallbackWarn) ? options.fallbackWarn : true;
    const fallbackFormat = !!options.fallbackFormat;
    const unresolving = !!options.unresolving;
    const postTranslation = (0, _shared.isFunction)(options.postTranslation) ? options.postTranslation : null;
    const processor = (0, _shared.isPlainObject)(options.processor) ? options.processor : null;
    const warnHtmlMessage = (0, _shared.isBoolean)(options.warnHtmlMessage) ? options.warnHtmlMessage : true;
    const escapeParameter = !!options.escapeParameter;
    const messageCompiler = (0, _shared.isFunction)(options.messageCompiler) ? options.messageCompiler : _compiler;
    const onWarn = (0, _shared.isFunction)(options.onWarn) ? options.onWarn : (0, _shared.warn);
    // setup internal options
    const internalOptions = options;
    const __datetimeFormatters = (0, _shared.isObject)(internalOptions.__datetimeFormatters) ? internalOptions.__datetimeFormatters : new Map();
    const __numberFormatters = (0, _shared.isObject)(internalOptions.__numberFormatters) ? internalOptions.__numberFormatters : new Map();
    const context = {
        locale,
        fallbackLocale,
        messages,
        datetimeFormats,
        numberFormats,
        modifiers,
        pluralRules,
        missing,
        missingWarn,
        fallbackWarn,
        fallbackFormat,
        unresolving,
        postTranslation,
        processor,
        warnHtmlMessage,
        escapeParameter,
        messageCompiler,
        onWarn,
        __datetimeFormatters,
        __numberFormatters
    };
    context.__emitter = internalOptions.__emitter != null ? internalOptions.__emitter : undefined;
    return context;
}
/** @internal */ function isTranslateFallbackWarn(fallback, key) {
    return fallback instanceof RegExp ? fallback.test(key) : fallback;
}
/** @internal */ function isTranslateMissingWarn(missing, key) {
    return missing instanceof RegExp ? missing.test(key) : missing;
}
/** @internal */ function handleMissing(context, key, locale, missingWarn, type) {
    const { missing , onWarn  } = context;
    {
        const emitter = context.__emitter;
        if (emitter) emitter.emit("missing" /* MISSING */ , {
            locale,
            key,
            type,
            groupId: `${type}:${key}`
        });
    }
    if (missing !== null) {
        const ret = missing(context, locale, key, type);
        return (0, _shared.isString)(ret) ? ret : key;
    } else {
        if (isTranslateMissingWarn(missingWarn, key)) onWarn(getWarnMessage(0 /* NOT_FOUND_KEY */ , {
            key,
            locale
        }));
        return key;
    }
}
/** @internal */ function getLocaleChain(ctx, fallback, start = "") {
    const context = ctx;
    if (start === "") return [];
    if (!context.__localeChainCache) context.__localeChainCache = new Map();
    let chain = context.__localeChainCache.get(start);
    if (!chain) {
        chain = [];
        // first block defined by start
        let block = [
            start
        ];
        // while any intervening block found
        while((0, _shared.isArray)(block))block = appendBlockToChain(chain, block, fallback);
        // prettier-ignore
        // last block defined by default
        const defaults = (0, _shared.isArray)(fallback) ? fallback : (0, _shared.isPlainObject)(fallback) ? fallback["default"] ? fallback["default"] : null : fallback;
        // convert defaults to array
        block = (0, _shared.isString)(defaults) ? [
            defaults
        ] : defaults;
        if ((0, _shared.isArray)(block)) appendBlockToChain(chain, block, false);
        context.__localeChainCache.set(start, chain);
    }
    return chain;
}
function appendBlockToChain(chain, block, blocks) {
    let follow = true;
    for(let i = 0; i < block.length && (0, _shared.isBoolean)(follow); i++){
        const locale = block[i];
        if ((0, _shared.isString)(locale)) follow = appendLocaleToChain(chain, block[i], blocks);
    }
    return follow;
}
function appendLocaleToChain(chain, locale, blocks) {
    let follow;
    const tokens = locale.split("-");
    do {
        const target = tokens.join("-");
        follow = appendItemToChain(chain, target, blocks);
        tokens.splice(-1, 1);
    }while (tokens.length && follow === true);
    return follow;
}
function appendItemToChain(chain, target, blocks) {
    let follow = false;
    if (!chain.includes(target)) {
        follow = true;
        if (target) {
            follow = target[target.length - 1] !== "!";
            const locale = target.replace(/!/g, "");
            chain.push(locale);
            if (((0, _shared.isArray)(blocks) || (0, _shared.isPlainObject)(blocks)) && blocks[locale] // eslint-disable-line @typescript-eslint/no-explicit-any
            ) // eslint-disable-next-line @typescript-eslint/no-explicit-any
            follow = blocks[locale];
        }
    }
    return follow;
}
/** @internal */ function updateFallbackLocale(ctx, locale, fallback) {
    const context = ctx;
    context.__localeChainCache = new Map();
    getLocaleChain(ctx, fallback, locale);
}
const RE_HTML_TAG = /<\/?[\w\s="/.':;#-\/]+>/;
const WARN_MESSAGE = `Detected HTML in '{source}' message. Recommend not using HTML messages to avoid XSS.`;
function checkHtmlMessage(source, options) {
    const warnHtmlMessage = (0, _shared.isBoolean)(options.warnHtmlMessage) ? options.warnHtmlMessage : true;
    if (warnHtmlMessage && RE_HTML_TAG.test(source)) (0, _shared.warn)((0, _shared.format)(WARN_MESSAGE, {
        source
    }));
}
const defaultOnCacheKey = (source)=>source;
let compileCache = Object.create(null);
function clearCompileCache() {
    compileCache = Object.create(null);
}
function compileToFunction(source, options = {}) {
    {
        checkHtmlMessage(source, options);
        // check caches
        const onCacheKey = options.onCacheKey || defaultOnCacheKey;
        const key = onCacheKey(source);
        const cached = compileCache[key];
        if (cached) return cached;
        // compile error detecting
        let occured = false;
        const onError = options.onError || (0, _messageCompiler.defaultOnError);
        options.onError = (err)=>{
            occured = true;
            onError(err);
        };
        // compile
        const { code  } = (0, _messageCompiler.baseCompile)(source, options);
        // evaluate function
        const msg = new Function(`return ${code}`)();
        // if occured compile error, don't cache
        return !occured ? compileCache[key] = msg : msg;
    }
}
function createCoreError(code) {
    return (0, _messageCompiler.createCompileError)(code, null, {
        messages: errorMessages
    });
}
/** @internal */ const errorMessages = {
    [14 /* INVALID_ARGUMENT */ ]: "Invalid arguments",
    [15 /* INVALID_DATE_ARGUMENT */ ]: "The date provided is an invalid Date object.Make sure your Date represents a valid date.",
    [16 /* INVALID_ISO_DATE_ARGUMENT */ ]: "The argument provided is not a valid ISO date string"
};
const NOOP_MESSAGE_FUNCTION = ()=>"";
const isMessageFunction = (val)=>(0, _shared.isFunction)(val);
// implementationo of `translate` function
function translate(context, ...args) {
    const { fallbackFormat , postTranslation , unresolving , fallbackLocale  } = context;
    const [key, options] = parseTranslateArgs(...args);
    const missingWarn = (0, _shared.isBoolean)(options.missingWarn) ? options.missingWarn : context.missingWarn;
    const fallbackWarn = (0, _shared.isBoolean)(options.fallbackWarn) ? options.fallbackWarn : context.fallbackWarn;
    const escapeParameter = (0, _shared.isBoolean)(options.escapeParameter) ? options.escapeParameter : context.escapeParameter;
    // prettier-ignore
    const defaultMsgOrKey = (0, _shared.isString)(options.default) || (0, _shared.isBoolean)(options.default) // default by function option
     ? !(0, _shared.isBoolean)(options.default) ? options.default : key : fallbackFormat // default by `fallbackFormat` option
     ? key : "";
    const enableDefaultMsg = fallbackFormat || defaultMsgOrKey !== "";
    const locale = (0, _shared.isString)(options.locale) ? options.locale : context.locale;
    // escape params
    escapeParameter && escapeParams(options);
    // resolve message format
    // eslint-disable-next-line prefer-const
    let [format, targetLocale, message] = resolveMessageFormat(context, key, locale, fallbackLocale, fallbackWarn, missingWarn);
    // if you use default message, set it as message format!
    let cacheBaseKey = key;
    if (!((0, _shared.isString)(format) || isMessageFunction(format))) {
        if (enableDefaultMsg) {
            format = defaultMsgOrKey;
            cacheBaseKey = format;
        }
    }
    // checking message format and target locale
    if (!((0, _shared.isString)(format) || isMessageFunction(format)) || !(0, _shared.isString)(targetLocale)) return unresolving ? NOT_REOSLVED : key;
    if ((0, _shared.isString)(format) && context.messageCompiler == null) {
        (0, _shared.warn)(`The message format compilation is not supported in this build. ` + `Because message compiler isn't included. ` + `You need to pre-compilation all message format. ` + `So translate function return '${key}'.`);
        return key;
    }
    // setup compile error detecting
    let occured = false;
    const errorDetector = ()=>{
        occured = true;
    };
    // compile message format
    const msg = compileMessasgeFormat(context, key, targetLocale, format, cacheBaseKey, errorDetector);
    // if occured compile error, return the message format
    if (occured) return format;
    // evaluate message with context
    const ctxOptions = getMessageContextOptions(context, targetLocale, message, options);
    const msgContext = (0, _runtime.createMessageContext)(ctxOptions);
    const messaged = evaluateMessage(context, msg, msgContext);
    // if use post translation option, procee it with handler
    return postTranslation ? postTranslation(messaged) : messaged;
}
function escapeParams(options) {
    if ((0, _shared.isArray)(options.list)) options.list = options.list.map((item)=>(0, _shared.isString)(item) ? (0, _shared.escapeHtml)(item) : item);
    else if ((0, _shared.isObject)(options.named)) Object.keys(options.named).forEach((key)=>{
        if ((0, _shared.isString)(options.named[key])) options.named[key] = (0, _shared.escapeHtml)(options.named[key]);
    });
}
function resolveMessageFormat(context, key, locale, fallbackLocale, fallbackWarn, missingWarn) {
    const { messages , onWarn  } = context;
    const locales = getLocaleChain(context, fallbackLocale, locale);
    let message = {};
    let targetLocale;
    let format = null;
    let from = locale;
    let to = null;
    const type = "translate";
    for(let i = 0; i < locales.length; i++){
        targetLocale = to = locales[i];
        if (locale !== targetLocale && isTranslateFallbackWarn(fallbackWarn, key)) onWarn(getWarnMessage(1 /* FALLBACK_TO_TRANSLATE */ , {
            key,
            target: targetLocale
        }));
        // for vue-devtools timeline event
        if (locale !== targetLocale) {
            const emitter = context.__emitter;
            if (emitter) emitter.emit("fallback" /* FALBACK */ , {
                type,
                key,
                from,
                to,
                groupId: `${type}:${key}`
            });
        }
        message = messages[targetLocale] || {};
        // for vue-devtools timeline event
        let start = null;
        let startTag;
        let endTag;
        if (0, _shared.inBrowser) {
            start = window.performance.now();
            startTag = "intlify-message-resolve-start";
            endTag = "intlify-message-resolve-end";
            (0, _shared.mark) && (0, _shared.mark)(startTag);
        }
        if ((format = (0, _messageResolver.resolveValue)(message, key)) === null) // if null, resolve with object key path
        format = message[key]; // eslint-disable-line @typescript-eslint/no-explicit-any
        // for vue-devtools timeline event
        if (0, _shared.inBrowser) {
            const end = window.performance.now();
            const emitter = context.__emitter;
            if (emitter && start && format) emitter.emit("message-resolve" /* MESSAGE_RESOLVE */ , {
                type: "message-resolve" /* MESSAGE_RESOLVE */ ,
                key,
                message: format,
                time: end - start,
                groupId: `${type}:${key}`
            });
            if (startTag && endTag && (0, _shared.mark) && (0, _shared.measure)) {
                (0, _shared.mark)(endTag);
                (0, _shared.measure)("intlify message resolve", startTag, endTag);
            }
        }
        if ((0, _shared.isString)(format) || (0, _shared.isFunction)(format)) break;
        const missingRet = handleMissing(context, key, targetLocale, missingWarn, type);
        if (missingRet !== key) format = missingRet;
        from = to;
    }
    return [
        format,
        targetLocale,
        message
    ];
}
function compileMessasgeFormat(context, key, targetLocale, format, cacheBaseKey, errorDetector) {
    const { messageCompiler , warnHtmlMessage  } = context;
    if (isMessageFunction(format)) {
        const msg = format;
        msg.locale = msg.locale || targetLocale;
        msg.key = msg.key || key;
        return msg;
    }
    // for vue-devtools timeline event
    let start = null;
    let startTag;
    let endTag;
    if (0, _shared.inBrowser) {
        start = window.performance.now();
        startTag = "intlify-message-compilation-start";
        endTag = "intlify-message-compilation-end";
        (0, _shared.mark) && (0, _shared.mark)(startTag);
    }
    const msg = messageCompiler(format, getCompileOptions(context, targetLocale, cacheBaseKey, format, warnHtmlMessage, errorDetector));
    // for vue-devtools timeline event
    if (0, _shared.inBrowser) {
        const end = window.performance.now();
        const emitter = context.__emitter;
        if (emitter && start) emitter.emit("message-compilation" /* MESSAGE_COMPILATION */ , {
            type: "message-compilation" /* MESSAGE_COMPILATION */ ,
            message: format,
            time: end - start,
            groupId: `${"translate"}:${key}`
        });
        if (startTag && endTag && (0, _shared.mark) && (0, _shared.measure)) {
            (0, _shared.mark)(endTag);
            (0, _shared.measure)("intlify message compilation", startTag, endTag);
        }
    }
    msg.locale = targetLocale;
    msg.key = key;
    msg.source = format;
    return msg;
}
function evaluateMessage(context, msg, msgCtx) {
    // for vue-devtools timeline event
    let start = null;
    let startTag;
    let endTag;
    if (0, _shared.inBrowser) {
        start = window.performance.now();
        startTag = "intlify-message-evaluation-start";
        endTag = "intlify-message-evaluation-end";
        (0, _shared.mark) && (0, _shared.mark)(startTag);
    }
    const messaged = msg(msgCtx);
    // for vue-devtools timeline event
    if (0, _shared.inBrowser) {
        const end = window.performance.now();
        const emitter = context.__emitter;
        if (emitter && start) emitter.emit("message-evaluation" /* MESSAGE_EVALUATION */ , {
            type: "message-evaluation" /* MESSAGE_EVALUATION */ ,
            value: messaged,
            time: end - start,
            groupId: `${"translate"}:${msg.key}`
        });
        if (startTag && endTag && (0, _shared.mark) && (0, _shared.measure)) {
            (0, _shared.mark)(endTag);
            (0, _shared.measure)("intlify message evaluation", startTag, endTag);
        }
    }
    return messaged;
}
/** @internal */ function parseTranslateArgs(...args) {
    const [arg1, arg2, arg3] = args;
    const options = {};
    if (!(0, _shared.isString)(arg1) && !(0, _shared.isNumber)(arg1)) throw createCoreError(14 /* INVALID_ARGUMENT */ );
    const key = (0, _shared.isNumber)(arg1) ? String(arg1) : arg1;
    if ((0, _shared.isNumber)(arg2)) options.plural = arg2;
    else if ((0, _shared.isString)(arg2)) options.default = arg2;
    else if ((0, _shared.isPlainObject)(arg2) && !(0, _shared.isEmptyObject)(arg2)) options.named = arg2;
    else if ((0, _shared.isArray)(arg2)) options.list = arg2;
    if ((0, _shared.isNumber)(arg3)) options.plural = arg3;
    else if ((0, _shared.isString)(arg3)) options.default = arg3;
    else if ((0, _shared.isPlainObject)(arg3)) Object.assign(options, arg3);
    return [
        key,
        options
    ];
}
function getCompileOptions(context, locale, key, source1, warnHtmlMessage, errorDetector) {
    return {
        warnHtmlMessage,
        onError: (err)=>{
            errorDetector && errorDetector(err);
            {
                const message = `Message compilation error: ${err.message}`;
                const codeFrame = err.location && (0, _shared.generateCodeFrame)(source1, err.location.start.offset, err.location.end.offset);
                const emitter = context.__emitter;
                if (emitter) emitter.emit("compile-error" /* COMPILE_ERROR */ , {
                    message: source1,
                    error: err.message,
                    start: err.location && err.location.start.offset,
                    end: err.location && err.location.end.offset,
                    groupId: `${"translate"}:${key}`
                });
                console.error(codeFrame ? `${message}\n${codeFrame}` : message);
            }
        },
        onCacheKey: (source)=>(0, _shared.generateFormatCacheKey)(locale, key, source)
    };
}
function getMessageContextOptions(context, locale, message, options) {
    const { modifiers , pluralRules  } = context;
    const resolveMessage = (key)=>{
        const val = (0, _messageResolver.resolveValue)(message, key);
        if ((0, _shared.isString)(val)) {
            let occured = false;
            const errorDetector = ()=>{
                occured = true;
            };
            const msg = compileMessasgeFormat(context, key, locale, val, key, errorDetector);
            return !occured ? msg : NOOP_MESSAGE_FUNCTION;
        } else if (isMessageFunction(val)) return val;
        else // TODO: should be implemented warning message
        return NOOP_MESSAGE_FUNCTION;
    };
    const ctxOptions = {
        locale,
        modifiers,
        pluralRules,
        messages: resolveMessage
    };
    if (context.processor) ctxOptions.processor = context.processor;
    if (options.list) ctxOptions.list = options.list;
    if (options.named) ctxOptions.named = options.named;
    if ((0, _shared.isNumber)(options.plural)) ctxOptions.pluralIndex = options.plural;
    return ctxOptions;
}
const intlDefined = typeof Intl !== "undefined";
const Availabilities = {
    dateTimeFormat: intlDefined && typeof Intl.DateTimeFormat !== "undefined",
    numberFormat: intlDefined && typeof Intl.NumberFormat !== "undefined"
};
// implementation of `datetime` function
function datetime(context, ...args) {
    const { datetimeFormats , unresolving , fallbackLocale , onWarn  } = context;
    const { __datetimeFormatters  } = context;
    if (!Availabilities.dateTimeFormat) {
        onWarn(getWarnMessage(4 /* CANNOT_FORMAT_DATE */ ));
        return MISSING_RESOLVE_VALUE;
    }
    const [key, value, options, orverrides] = parseDateTimeArgs(...args);
    const missingWarn = (0, _shared.isBoolean)(options.missingWarn) ? options.missingWarn : context.missingWarn;
    const fallbackWarn = (0, _shared.isBoolean)(options.fallbackWarn) ? options.fallbackWarn : context.fallbackWarn;
    const part = !!options.part;
    const locale = (0, _shared.isString)(options.locale) ? options.locale : context.locale;
    const locales = getLocaleChain(context, fallbackLocale, locale);
    if (!(0, _shared.isString)(key) || key === "") return new Intl.DateTimeFormat(locale).format(value);
    // resolve format
    let datetimeFormat = {};
    let targetLocale;
    let format = null;
    let from = locale;
    let to = null;
    const type = "datetime format";
    for(let i = 0; i < locales.length; i++){
        targetLocale = to = locales[i];
        if (locale !== targetLocale && isTranslateFallbackWarn(fallbackWarn, key)) onWarn(getWarnMessage(5 /* FALLBACK_TO_DATE_FORMAT */ , {
            key,
            target: targetLocale
        }));
        // for vue-devtools timeline event
        if (locale !== targetLocale) {
            const emitter = context.__emitter;
            if (emitter) emitter.emit("fallback" /* FALBACK */ , {
                type,
                key,
                from,
                to,
                groupId: `${type}:${key}`
            });
        }
        datetimeFormat = datetimeFormats[targetLocale] || {};
        format = datetimeFormat[key];
        if ((0, _shared.isPlainObject)(format)) break;
        handleMissing(context, key, targetLocale, missingWarn, type);
        from = to;
    }
    // checking format and target locale
    if (!(0, _shared.isPlainObject)(format) || !(0, _shared.isString)(targetLocale)) return unresolving ? NOT_REOSLVED : key;
    let id = `${targetLocale}__${key}`;
    if (!(0, _shared.isEmptyObject)(orverrides)) id = `${id}__${JSON.stringify(orverrides)}`;
    let formatter = __datetimeFormatters.get(id);
    if (!formatter) {
        formatter = new Intl.DateTimeFormat(targetLocale, Object.assign({}, format, orverrides));
        __datetimeFormatters.set(id, formatter);
    }
    return !part ? formatter.format(value) : formatter.formatToParts(value);
}
/** @internal */ function parseDateTimeArgs(...args) {
    const [arg1, arg2, arg3, arg4] = args;
    let options = {};
    let orverrides = {};
    let value;
    if ((0, _shared.isString)(arg1)) {
        // Only allow ISO strings - other date formats are often supported,
        // but may cause different results in different browsers.
        if (!/\d{4}-\d{2}-\d{2}(T.*)?/.test(arg1)) throw createCoreError(16 /* INVALID_ISO_DATE_ARGUMENT */ );
        value = new Date(arg1);
        try {
            // This will fail if the date is not valid
            value.toISOString();
        } catch (e) {
            throw createCoreError(16 /* INVALID_ISO_DATE_ARGUMENT */ );
        }
    } else if ((0, _shared.isDate)(arg1)) {
        if (isNaN(arg1.getTime())) throw createCoreError(15 /* INVALID_DATE_ARGUMENT */ );
        value = arg1;
    } else if ((0, _shared.isNumber)(arg1)) value = arg1;
    else throw createCoreError(14 /* INVALID_ARGUMENT */ );
    if ((0, _shared.isString)(arg2)) options.key = arg2;
    else if ((0, _shared.isPlainObject)(arg2)) options = arg2;
    if ((0, _shared.isString)(arg3)) options.locale = arg3;
    else if ((0, _shared.isPlainObject)(arg3)) orverrides = arg3;
    if ((0, _shared.isPlainObject)(arg4)) orverrides = arg4;
    return [
        options.key || "",
        value,
        options,
        orverrides
    ];
}
/** @internal */ function clearDateTimeFormat(ctx, locale, format) {
    const context = ctx;
    for(const key in format){
        const id = `${locale}__${key}`;
        if (!context.__datetimeFormatters.has(id)) continue;
        context.__datetimeFormatters.delete(id);
    }
}
// implementation of `number` function
function number(context, ...args) {
    const { numberFormats , unresolving , fallbackLocale , onWarn  } = context;
    const { __numberFormatters  } = context;
    if (!Availabilities.numberFormat) {
        onWarn(getWarnMessage(2 /* CANNOT_FORMAT_NUMBER */ ));
        return MISSING_RESOLVE_VALUE;
    }
    const [key, value, options, orverrides] = parseNumberArgs(...args);
    const missingWarn = (0, _shared.isBoolean)(options.missingWarn) ? options.missingWarn : context.missingWarn;
    const fallbackWarn = (0, _shared.isBoolean)(options.fallbackWarn) ? options.fallbackWarn : context.fallbackWarn;
    const part = !!options.part;
    const locale = (0, _shared.isString)(options.locale) ? options.locale : context.locale;
    const locales = getLocaleChain(context, fallbackLocale, locale);
    if (!(0, _shared.isString)(key) || key === "") return new Intl.NumberFormat(locale).format(value);
    // resolve format
    let numberFormat = {};
    let targetLocale;
    let format = null;
    let from = locale;
    let to = null;
    const type = "number format";
    for(let i = 0; i < locales.length; i++){
        targetLocale = to = locales[i];
        if (locale !== targetLocale && isTranslateFallbackWarn(fallbackWarn, key)) onWarn(getWarnMessage(3 /* FALLBACK_TO_NUMBER_FORMAT */ , {
            key,
            target: targetLocale
        }));
        // for vue-devtools timeline event
        if (locale !== targetLocale) {
            const emitter = context.__emitter;
            if (emitter) emitter.emit("fallback" /* FALBACK */ , {
                type,
                key,
                from,
                to,
                groupId: `${type}:${key}`
            });
        }
        numberFormat = numberFormats[targetLocale] || {};
        format = numberFormat[key];
        if ((0, _shared.isPlainObject)(format)) break;
        handleMissing(context, key, targetLocale, missingWarn, type);
        from = to;
    }
    // checking format and target locale
    if (!(0, _shared.isPlainObject)(format) || !(0, _shared.isString)(targetLocale)) return unresolving ? NOT_REOSLVED : key;
    let id = `${targetLocale}__${key}`;
    if (!(0, _shared.isEmptyObject)(orverrides)) id = `${id}__${JSON.stringify(orverrides)}`;
    let formatter = __numberFormatters.get(id);
    if (!formatter) {
        formatter = new Intl.NumberFormat(targetLocale, Object.assign({}, format, orverrides));
        __numberFormatters.set(id, formatter);
    }
    return !part ? formatter.format(value) : formatter.formatToParts(value);
}
/** @internal */ function parseNumberArgs(...args) {
    const [arg1, arg2, arg3, arg4] = args;
    let options = {};
    let orverrides = {};
    if (!(0, _shared.isNumber)(arg1)) throw createCoreError(14 /* INVALID_ARGUMENT */ );
    const value = arg1;
    if ((0, _shared.isString)(arg2)) options.key = arg2;
    else if ((0, _shared.isPlainObject)(arg2)) options = arg2;
    if ((0, _shared.isString)(arg3)) options.locale = arg3;
    else if ((0, _shared.isPlainObject)(arg3)) orverrides = arg3;
    if ((0, _shared.isPlainObject)(arg4)) orverrides = arg4;
    return [
        options.key || "",
        value,
        options,
        orverrides
    ];
}
/** @internal */ function clearNumberFormat(ctx, locale, format) {
    const context = ctx;
    for(const key in format){
        const id = `${locale}__${key}`;
        if (!context.__numberFormatters.has(id)) continue;
        context.__numberFormatters.delete(id);
    }
}
const DevToolsLabels = {
    ["vue-devtools-plugin-vue-i18n" /* PLUGIN */ ]: "Vue I18n devtools",
    ["vue-i18n-resource-inspector" /* CUSTOM_INSPECTOR */ ]: "I18n Resources",
    ["vue-i18n-timeline" /* TIMELINE */ ]: "Vue I18n"
};
const DevToolsPlaceholders = {
    ["vue-i18n-resource-inspector" /* CUSTOM_INSPECTOR */ ]: "Search for scopes ..."
};
const DevToolsTimelineColors = {
    ["vue-i18n-timeline" /* TIMELINE */ ]: 0xffcd19
};
/**
 * Event emitter, forked from the below:
 * - original repository url: https://github.com/developit/mitt
 * - code url: https://github.com/developit/mitt/blob/master/src/index.ts
 * - author: Jason Miller (https://github.com/developit)
 * - license: MIT
 */ /**
 * Create a event emitter
 *
 * @returns An event emitter
 */ function createEmitter() {
    const events = new Map();
    const emitter = {
        events,
        on (event, handler) {
            const handlers = events.get(event);
            const added = handlers && handlers.push(handler);
            if (!added) events.set(event, [
                handler
            ]);
        },
        off (event, handler) {
            const handlers = events.get(event);
            if (handlers) handlers.splice(handlers.indexOf(handler) >>> 0, 1);
        },
        emit (event, payload) {
            (events.get(event) || []).slice().map((handler)=>handler(payload));
            (events.get("*") || []).slice().map((handler)=>handler(event, payload));
        }
    };
    return emitter;
}

},{"@intlify/message-resolver":"7yv1C","@intlify/runtime":"b2MBT","@intlify/message-compiler":"jZ4Fw","@intlify/shared":"iKoIZ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7yv1C":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "parse", ()=>parse);
parcelHelpers.export(exports, "resolveValue", ()=>resolveValue);
const isObject = (val)=>val !== null && typeof val === "object";
const pathStateMachine = [];
pathStateMachine[0 /* BEFORE_PATH */ ] = {
    ["w" /* WORKSPACE */ ]: [
        0 /* BEFORE_PATH */ 
    ],
    ["i" /* IDENT */ ]: [
        3 /* IN_IDENT */ ,
        0 /* APPEND */ 
    ],
    ["[" /* LEFT_BRACKET */ ]: [
        4 /* IN_SUB_PATH */ 
    ],
    ["o" /* END_OF_FAIL */ ]: [
        7 /* AFTER_PATH */ 
    ]
};
pathStateMachine[1 /* IN_PATH */ ] = {
    ["w" /* WORKSPACE */ ]: [
        1 /* IN_PATH */ 
    ],
    ["." /* DOT */ ]: [
        2 /* BEFORE_IDENT */ 
    ],
    ["[" /* LEFT_BRACKET */ ]: [
        4 /* IN_SUB_PATH */ 
    ],
    ["o" /* END_OF_FAIL */ ]: [
        7 /* AFTER_PATH */ 
    ]
};
pathStateMachine[2 /* BEFORE_IDENT */ ] = {
    ["w" /* WORKSPACE */ ]: [
        2 /* BEFORE_IDENT */ 
    ],
    ["i" /* IDENT */ ]: [
        3 /* IN_IDENT */ ,
        0 /* APPEND */ 
    ],
    ["0" /* ZERO */ ]: [
        3 /* IN_IDENT */ ,
        0 /* APPEND */ 
    ]
};
pathStateMachine[3 /* IN_IDENT */ ] = {
    ["i" /* IDENT */ ]: [
        3 /* IN_IDENT */ ,
        0 /* APPEND */ 
    ],
    ["0" /* ZERO */ ]: [
        3 /* IN_IDENT */ ,
        0 /* APPEND */ 
    ],
    ["w" /* WORKSPACE */ ]: [
        1 /* IN_PATH */ ,
        1 /* PUSH */ 
    ],
    ["." /* DOT */ ]: [
        2 /* BEFORE_IDENT */ ,
        1 /* PUSH */ 
    ],
    ["[" /* LEFT_BRACKET */ ]: [
        4 /* IN_SUB_PATH */ ,
        1 /* PUSH */ 
    ],
    ["o" /* END_OF_FAIL */ ]: [
        7 /* AFTER_PATH */ ,
        1 /* PUSH */ 
    ]
};
pathStateMachine[4 /* IN_SUB_PATH */ ] = {
    ["'" /* SINGLE_QUOTE */ ]: [
        5 /* IN_SINGLE_QUOTE */ ,
        0 /* APPEND */ 
    ],
    ['"' /* DOUBLE_QUOTE */ ]: [
        6 /* IN_DOUBLE_QUOTE */ ,
        0 /* APPEND */ 
    ],
    ["[" /* LEFT_BRACKET */ ]: [
        4 /* IN_SUB_PATH */ ,
        2 /* INC_SUB_PATH_DEPTH */ 
    ],
    ["]" /* RIGHT_BRACKET */ ]: [
        1 /* IN_PATH */ ,
        3 /* PUSH_SUB_PATH */ 
    ],
    ["o" /* END_OF_FAIL */ ]: 8 /* ERROR */ ,
    ["l" /* ELSE */ ]: [
        4 /* IN_SUB_PATH */ ,
        0 /* APPEND */ 
    ]
};
pathStateMachine[5 /* IN_SINGLE_QUOTE */ ] = {
    ["'" /* SINGLE_QUOTE */ ]: [
        4 /* IN_SUB_PATH */ ,
        0 /* APPEND */ 
    ],
    ["o" /* END_OF_FAIL */ ]: 8 /* ERROR */ ,
    ["l" /* ELSE */ ]: [
        5 /* IN_SINGLE_QUOTE */ ,
        0 /* APPEND */ 
    ]
};
pathStateMachine[6 /* IN_DOUBLE_QUOTE */ ] = {
    ['"' /* DOUBLE_QUOTE */ ]: [
        4 /* IN_SUB_PATH */ ,
        0 /* APPEND */ 
    ],
    ["o" /* END_OF_FAIL */ ]: 8 /* ERROR */ ,
    ["l" /* ELSE */ ]: [
        6 /* IN_DOUBLE_QUOTE */ ,
        0 /* APPEND */ 
    ]
};
/**
 * Check if an expression is a literal value.
 */ const literalValueRE = /^\s?(?:true|false|-?[\d.]+|'[^']*'|"[^"]*")\s?$/;
function isLiteral(exp) {
    return literalValueRE.test(exp);
}
/**
 * Strip quotes from a string
 */ function stripQuotes(str) {
    const a = str.charCodeAt(0);
    const b = str.charCodeAt(str.length - 1);
    return a === b && (a === 0x22 || a === 0x27) ? str.slice(1, -1) : str;
}
/**
 * Determine the type of a character in a keypath.
 */ function getPathCharType(ch) {
    if (ch === undefined || ch === null) return "o" /* END_OF_FAIL */ ;
    const code = ch.charCodeAt(0);
    switch(code){
        case 0x5b:
        case 0x5d:
        case 0x2e:
        case 0x22:
        case 0x27:
            return ch;
        case 0x5f:
        case 0x24:
        case 0x2d:
            return "i" /* IDENT */ ;
        case 0x09:
        case 0x0a:
        case 0x0d:
        case 0xa0:
        case 0xfeff:
        case 0x2028:
        case 0x2029:
            return "w" /* WORKSPACE */ ;
    }
    return "i" /* IDENT */ ;
}
/**
 * Format a subPath, return its plain form if it is
 * a literal string or number. Otherwise prepend the
 * dynamic indicator (*).
 */ function formatSubPath(path) {
    const trimmed = path.trim();
    // invalid leading 0
    if (path.charAt(0) === "0" && isNaN(parseInt(path))) return false;
    return isLiteral(trimmed) ? stripQuotes(trimmed) : "*" /* ASTARISK */  + trimmed;
}
/**
 * Parse a string path into an array of segments
 */ function parse(path) {
    const keys = [];
    let index = -1;
    let mode = 0 /* BEFORE_PATH */ ;
    let subPathDepth = 0;
    let c;
    let key; // eslint-disable-line
    let newChar;
    let type;
    let transition;
    let action;
    let typeMap;
    const actions = [];
    actions[0 /* APPEND */ ] = ()=>{
        if (key === undefined) key = newChar;
        else key += newChar;
    };
    actions[1 /* PUSH */ ] = ()=>{
        if (key !== undefined) {
            keys.push(key);
            key = undefined;
        }
    };
    actions[2 /* INC_SUB_PATH_DEPTH */ ] = ()=>{
        actions[0 /* APPEND */ ]();
        subPathDepth++;
    };
    actions[3 /* PUSH_SUB_PATH */ ] = ()=>{
        if (subPathDepth > 0) {
            subPathDepth--;
            mode = 4 /* IN_SUB_PATH */ ;
            actions[0 /* APPEND */ ]();
        } else {
            subPathDepth = 0;
            if (key === undefined) return false;
            key = formatSubPath(key);
            if (key === false) return false;
            else actions[1 /* PUSH */ ]();
        }
    };
    function maybeUnescapeQuote() {
        const nextChar = path[index + 1];
        if (mode === 5 /* IN_SINGLE_QUOTE */  && nextChar === "'" /* SINGLE_QUOTE */  || mode === 6 /* IN_DOUBLE_QUOTE */  && nextChar === '"' /* DOUBLE_QUOTE */ ) {
            index++;
            newChar = "\\" + nextChar;
            actions[0 /* APPEND */ ]();
            return true;
        }
    }
    while(mode !== null){
        index++;
        c = path[index];
        if (c === "\\" && maybeUnescapeQuote()) continue;
        type = getPathCharType(c);
        typeMap = pathStateMachine[mode];
        transition = typeMap[type] || typeMap["l" /* ELSE */ ] || 8 /* ERROR */ ;
        // check parse error
        if (transition === 8 /* ERROR */ ) return;
        mode = transition[0];
        if (transition[1] !== undefined) {
            action = actions[transition[1]];
            if (action) {
                newChar = c;
                if (action() === false) return;
            }
        }
        // check parse finish
        if (mode === 7 /* AFTER_PATH */ ) return keys;
    }
}
// path token cache
const cache = new Map();
function resolveValue(obj, path) {
    // check object
    if (!isObject(obj)) return null;
    // parse path
    let hit = cache.get(path);
    if (!hit) {
        hit = parse(path);
        if (hit) cache.set(path, hit);
    }
    // check hit
    if (!hit) return null;
    // resolve path value
    const len = hit.length;
    let last = obj;
    let i = 0;
    while(i < len){
        const val = last[hit[i]];
        if (val === undefined) return null;
        last = val;
        i++;
    }
    return last;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"b2MBT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DEFAULT_MESSAGE_DATA_TYPE", ()=>DEFAULT_MESSAGE_DATA_TYPE);
parcelHelpers.export(exports, "createMessageContext", ()=>createMessageContext);
/*!
  * @intlify/runtime v9.0.0-rc.2
  * (c) 2021 kazuya kawaguchi
  * Released under the MIT License.
  */ var _shared = require("@intlify/shared");
const DEFAULT_MODIFIER = (str)=>str;
const DEFAULT_MESSAGE = (ctx)=>""; // eslint-disable-line
const DEFAULT_MESSAGE_DATA_TYPE = "text";
const DEFAULT_NORMALIZE = (values)=>values.length === 0 ? "" : values.join("");
const DEFAULT_INTERPOLATE = (0, _shared.toDisplayString);
function pluralDefault(choice, choicesLength) {
    choice = Math.abs(choice);
    if (choicesLength === 2) // prettier-ignore
    return choice ? choice > 1 ? 1 : 0 : 1;
    return choice ? Math.min(choice, 2) : 0;
}
function getPluralIndex(options) {
    // prettier-ignore
    const index = (0, _shared.isNumber)(options.pluralIndex) ? options.pluralIndex : -1;
    // prettier-ignore
    return options.named && ((0, _shared.isNumber)(options.named.count) || (0, _shared.isNumber)(options.named.n)) ? (0, _shared.isNumber)(options.named.count) ? options.named.count : (0, _shared.isNumber)(options.named.n) ? options.named.n : index : index;
}
function normalizeNamed(pluralIndex, props) {
    if (!props.count) props.count = pluralIndex;
    if (!props.n) props.n = pluralIndex;
}
function createMessageContext(options = {}) {
    const locale = options.locale;
    const pluralIndex = getPluralIndex(options);
    const pluralRule = (0, _shared.isObject)(options.pluralRules) && (0, _shared.isString)(locale) && (0, _shared.isFunction)(options.pluralRules[locale]) ? options.pluralRules[locale] : pluralDefault;
    const orgPluralRule = (0, _shared.isObject)(options.pluralRules) && (0, _shared.isString)(locale) && (0, _shared.isFunction)(options.pluralRules[locale]) ? pluralDefault : undefined;
    const plural = (messages)=>messages[pluralRule(pluralIndex, messages.length, orgPluralRule)];
    const _list = options.list || [];
    const list = (index)=>_list[index];
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const _named = options.named || {};
    (0, _shared.isNumber)(options.pluralIndex) && normalizeNamed(pluralIndex, _named);
    const named = (key)=>_named[key];
    // TODO: need to design resolve message function?
    function message(key) {
        // prettier-ignore
        const msg = (0, _shared.isFunction)(options.messages) ? options.messages(key) : (0, _shared.isObject)(options.messages) ? options.messages[key] : false;
        return !msg ? options.parent ? options.parent.message(key) // resolve from parent messages
         : DEFAULT_MESSAGE : msg;
    }
    const _modifier = (name)=>options.modifiers ? options.modifiers[name] : DEFAULT_MODIFIER;
    const normalize = (0, _shared.isPlainObject)(options.processor) && (0, _shared.isFunction)(options.processor.normalize) ? options.processor.normalize : DEFAULT_NORMALIZE;
    const interpolate = (0, _shared.isPlainObject)(options.processor) && (0, _shared.isFunction)(options.processor.interpolate) ? options.processor.interpolate : DEFAULT_INTERPOLATE;
    const type = (0, _shared.isPlainObject)(options.processor) && (0, _shared.isString)(options.processor.type) ? options.processor.type : DEFAULT_MESSAGE_DATA_TYPE;
    const ctx = {
        ["list" /* LIST */ ]: list,
        ["named" /* NAMED */ ]: named,
        ["plural" /* PLURAL */ ]: plural,
        ["linked" /* LINKED */ ]: (key, modifier)=>{
            // TODO: should check `key`
            const msg = message(key)(ctx);
            return (0, _shared.isString)(modifier) ? _modifier(modifier)(msg) : msg;
        },
        ["message" /* MESSAGE */ ]: message,
        ["type" /* TYPE */ ]: type,
        ["interpolate" /* INTERPOLATE */ ]: interpolate,
        ["normalize" /* NORMALIZE */ ]: normalize
    };
    return ctx;
}

},{"@intlify/shared":"iKoIZ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jZ4Fw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ERROR_DOMAIN", ()=>ERROR_DOMAIN$1);
parcelHelpers.export(exports, "LocationStub", ()=>LocationStub);
parcelHelpers.export(exports, "baseCompile", ()=>baseCompile);
parcelHelpers.export(exports, "createCompileError", ()=>createCompileError);
parcelHelpers.export(exports, "createLocation", ()=>createLocation);
parcelHelpers.export(exports, "createParser", ()=>createParser);
parcelHelpers.export(exports, "createPosition", ()=>createPosition);
parcelHelpers.export(exports, "defaultOnError", ()=>defaultOnError);
parcelHelpers.export(exports, "errorMessages", ()=>errorMessages);
/*!
  * @intlify/message-compiler v9.0.0-rc.2
  * (c) 2021 kazuya kawaguchi
  * Released under the MIT License.
  */ var _shared = require("@intlify/shared");
/** @internal */ const errorMessages = {
    // tokenizer error messages
    [0 /* EXPECTED_TOKEN */ ]: `Expected token: '{0}'`,
    [1 /* INVALID_TOKEN_IN_PLACEHOLDER */ ]: `Invalid token in placeholder: '{0}'`,
    [2 /* UNTERMINATED_SINGLE_QUOTE_IN_PLACEHOLDER */ ]: `Unterminated single quote in placeholder`,
    [3 /* UNKNOWN_ESCAPE_SEQUENCE */ ]: `Unknown escape sequence: \\{0}`,
    [4 /* INVALID_UNICODE_ESCAPE_SEQUENCE */ ]: `Invalid unicode escape sequence: {0}`,
    [5 /* UNBALANCED_CLOSING_BRACE */ ]: `Unbalanced closing brace`,
    [6 /* UNTERMINATED_CLOSING_BRACE */ ]: `Unterminated closing brace`,
    [7 /* EMPTY_PLACEHOLDER */ ]: `Empty placeholder`,
    [8 /* NOT_ALLOW_NEST_PLACEHOLDER */ ]: `Not allowed nest placeholder`,
    [9 /* INVALID_LINKED_FORMAT */ ]: `Invalid linked format`,
    // parser error messages
    [10 /* MUST_HAVE_MESSAGES_IN_PLURAL */ ]: `Plural must have messages`,
    [11 /* UNEXPECTED_EMPTY_LINKED_MODIFIER */ ]: `Unexpected empty linked modifier`,
    [12 /* UNEXPECTED_EMPTY_LINKED_KEY */ ]: `Unexpected empty linked key`,
    [13 /* UNEXPECTED_LEXICAL_ANALYSIS */ ]: `Unexpected lexical analysis in token: '{0}'`
};
function createCompileError(code, loc, optinos = {}) {
    const { domain , messages , args  } = optinos;
    const msg = (0, _shared.format)((messages || errorMessages)[code] || "", ...args || []);
    const error = new SyntaxError(String(msg));
    error.code = code;
    if (loc) error.location = loc;
    error.domain = domain;
    return error;
}
/** @internal */ function defaultOnError(error) {
    throw error;
}
const LocationStub = {
    start: {
        line: 1,
        column: 1,
        offset: 0
    },
    end: {
        line: 1,
        column: 1,
        offset: 0
    }
};
function createPosition(line, column, offset) {
    return {
        line,
        column,
        offset
    };
}
function createLocation(start, end, source) {
    const loc = {
        start,
        end
    };
    if (source != null) loc.source = source;
    return loc;
}
const CHAR_SP = " ";
const CHAR_CR = "\r";
const CHAR_LF = "\n";
const CHAR_LS = String.fromCharCode(0x2028);
const CHAR_PS = String.fromCharCode(0x2029);
function createScanner(str) {
    const _buf = str;
    let _index = 0;
    let _line = 1;
    let _column = 1;
    let _peekOffset = 0;
    const isCRLF = (index)=>_buf[index] === CHAR_CR && _buf[index + 1] === CHAR_LF;
    const isLF = (index)=>_buf[index] === CHAR_LF;
    const isPS = (index)=>_buf[index] === CHAR_PS;
    const isLS = (index)=>_buf[index] === CHAR_LS;
    const isLineEnd = (index)=>isCRLF(index) || isLF(index) || isPS(index) || isLS(index);
    const index1 = ()=>_index;
    const line = ()=>_line;
    const column = ()=>_column;
    const peekOffset = ()=>_peekOffset;
    const charAt = (offset)=>isCRLF(offset) || isPS(offset) || isLS(offset) ? CHAR_LF : _buf[offset];
    const currentChar = ()=>charAt(_index);
    const currentPeek = ()=>charAt(_index + _peekOffset);
    function next() {
        _peekOffset = 0;
        if (isLineEnd(_index)) {
            _line++;
            _column = 0;
        }
        if (isCRLF(_index)) _index++;
        _index++;
        _column++;
        return _buf[_index];
    }
    function peek() {
        if (isCRLF(_index + _peekOffset)) _peekOffset++;
        _peekOffset++;
        return _buf[_index + _peekOffset];
    }
    function reset() {
        _index = 0;
        _line = 1;
        _column = 1;
        _peekOffset = 0;
    }
    function resetPeek(offset = 0) {
        _peekOffset = offset;
    }
    function skipToPeek() {
        const target = _index + _peekOffset;
        // eslint-disable-next-line no-unmodified-loop-condition
        while(target !== _index)next();
        _peekOffset = 0;
    }
    return {
        index: index1,
        line,
        column,
        peekOffset,
        charAt,
        currentChar,
        currentPeek,
        next,
        peek,
        reset,
        resetPeek,
        skipToPeek
    };
}
const EOF = undefined;
const LITERAL_DELIMITER = "'";
const ERROR_DOMAIN = "tokenizer";
function createTokenizer(source, options = {}) {
    const location = options.location !== false;
    const _scnr = createScanner(source);
    const currentOffset = ()=>_scnr.index();
    const currentPosition = ()=>createPosition(_scnr.line(), _scnr.column(), _scnr.index());
    const _initLoc = currentPosition();
    const _initOffset = currentOffset();
    const _context = {
        currentType: 14 /* EOF */ ,
        offset: _initOffset,
        startLoc: _initLoc,
        endLoc: _initLoc,
        lastType: 14 /* EOF */ ,
        lastOffset: _initOffset,
        lastStartLoc: _initLoc,
        lastEndLoc: _initLoc,
        braceNest: 0,
        inLinked: false,
        text: ""
    };
    const context1 = ()=>_context;
    const { onError  } = options;
    function emitError(code, pos, offset, ...args) {
        const ctx = context1();
        pos.column += offset;
        pos.offset += offset;
        if (onError) {
            const loc = createLocation(ctx.startLoc, pos);
            const err = createCompileError(code, loc, {
                domain: ERROR_DOMAIN,
                args
            });
            onError(err);
        }
    }
    function getToken(context, type, value) {
        context.endLoc = currentPosition();
        context.currentType = type;
        const token = {
            type
        };
        if (location) token.loc = createLocation(context.startLoc, context.endLoc);
        if (value != null) token.value = value;
        return token;
    }
    const getEndToken = (context)=>getToken(context, 14 /* EOF */ );
    function eat(scnr, ch) {
        if (scnr.currentChar() === ch) {
            scnr.next();
            return ch;
        } else {
            emitError(0 /* EXPECTED_TOKEN */ , currentPosition(), 0, ch);
            return "";
        }
    }
    function peekSpaces(scnr) {
        let buf = "";
        while(scnr.currentPeek() === CHAR_SP || scnr.currentPeek() === CHAR_LF){
            buf += scnr.currentPeek();
            scnr.peek();
        }
        return buf;
    }
    function skipSpaces(scnr) {
        const buf = peekSpaces(scnr);
        scnr.skipToPeek();
        return buf;
    }
    function isIdentifierStart(ch) {
        if (ch === EOF) return false;
        const cc = ch.charCodeAt(0);
        return cc >= 97 && cc <= 122 || cc >= 65 && cc <= 90; // A-Z
    }
    function isNumberStart(ch) {
        if (ch === EOF) return false;
        const cc = ch.charCodeAt(0);
        return cc >= 48 && cc <= 57; // 0-9
    }
    function isNamedIdentifierStart(scnr, context) {
        const { currentType  } = context;
        if (currentType !== 2 /* BraceLeft */ ) return false;
        peekSpaces(scnr);
        const ret = isIdentifierStart(scnr.currentPeek());
        scnr.resetPeek();
        return ret;
    }
    function isListIdentifierStart(scnr, context) {
        const { currentType  } = context;
        if (currentType !== 2 /* BraceLeft */ ) return false;
        peekSpaces(scnr);
        const ch = scnr.currentPeek() === "-" ? scnr.peek() : scnr.currentPeek();
        const ret = isNumberStart(ch);
        scnr.resetPeek();
        return ret;
    }
    function isLiteralStart(scnr, context) {
        const { currentType  } = context;
        if (currentType !== 2 /* BraceLeft */ ) return false;
        peekSpaces(scnr);
        const ret = scnr.currentPeek() === LITERAL_DELIMITER;
        scnr.resetPeek();
        return ret;
    }
    function isLinkedDotStart(scnr, context) {
        const { currentType  } = context;
        if (currentType !== 8 /* LinkedAlias */ ) return false;
        peekSpaces(scnr);
        const ret = scnr.currentPeek() === "." /* LinkedDot */ ;
        scnr.resetPeek();
        return ret;
    }
    function isLinkedModifierStart(scnr, context) {
        const { currentType  } = context;
        if (currentType !== 9 /* LinkedDot */ ) return false;
        peekSpaces(scnr);
        const ret = isIdentifierStart(scnr.currentPeek());
        scnr.resetPeek();
        return ret;
    }
    function isLinkedDelimiterStart(scnr, context) {
        const { currentType  } = context;
        if (!(currentType === 8 /* LinkedAlias */  || currentType === 12 /* LinkedModifier */ )) return false;
        peekSpaces(scnr);
        const ret = scnr.currentPeek() === ":" /* LinkedDelimiter */ ;
        scnr.resetPeek();
        return ret;
    }
    function isLinkedReferStart(scnr, context) {
        const { currentType  } = context;
        if (currentType !== 10 /* LinkedDelimiter */ ) return false;
        const fn = ()=>{
            const ch = scnr.currentPeek();
            if (ch === "{" /* BraceLeft */ ) return isIdentifierStart(scnr.peek());
            else if (ch === "@" /* LinkedAlias */  || ch === "%" /* Modulo */  || ch === "|" /* Pipe */  || ch === ":" /* LinkedDelimiter */  || ch === "." /* LinkedDot */  || ch === CHAR_SP || !ch) return false;
            else if (ch === CHAR_LF) {
                scnr.peek();
                return fn();
            } else // other charactors
            return isIdentifierStart(ch);
        };
        const ret = fn();
        scnr.resetPeek();
        return ret;
    }
    function isPluralStart(scnr) {
        peekSpaces(scnr);
        const ret = scnr.currentPeek() === "|" /* Pipe */ ;
        scnr.resetPeek();
        return ret;
    }
    function isTextStart(scnr, reset = true) {
        const fn = (hasSpace = false, prev = "", detectModulo = false)=>{
            const ch = scnr.currentPeek();
            if (ch === "{" /* BraceLeft */ ) return prev === "%" /* Modulo */  ? false : hasSpace;
            else if (ch === "@" /* LinkedAlias */  || !ch) return prev === "%" /* Modulo */  ? true : hasSpace;
            else if (ch === "%" /* Modulo */ ) {
                scnr.peek();
                return fn(hasSpace, "%" /* Modulo */ , true);
            } else if (ch === "|" /* Pipe */ ) return prev === "%" /* Modulo */  || detectModulo ? true : !(prev === CHAR_SP || prev === CHAR_LF);
            else if (ch === CHAR_SP) {
                scnr.peek();
                return fn(true, CHAR_SP, detectModulo);
            } else if (ch === CHAR_LF) {
                scnr.peek();
                return fn(true, CHAR_LF, detectModulo);
            } else return true;
        };
        const ret = fn();
        reset && scnr.resetPeek();
        return ret;
    }
    function takeChar(scnr, fn) {
        const ch = scnr.currentChar();
        if (ch === EOF) return EOF;
        if (fn(ch)) {
            scnr.next();
            return ch;
        }
        return null;
    }
    function takeIdentifierChar(scnr) {
        const closure = (ch)=>{
            const cc = ch.charCodeAt(0);
            return cc >= 97 && cc <= 122 || cc >= 65 && cc <= 90 || cc >= 48 && cc <= 57 || cc === 95 || cc === 36; // _ $
        };
        return takeChar(scnr, closure);
    }
    function takeDigit(scnr) {
        const closure = (ch)=>{
            const cc = ch.charCodeAt(0);
            return cc >= 48 && cc <= 57; // 0-9
        };
        return takeChar(scnr, closure);
    }
    function takeHexDigit(scnr) {
        const closure = (ch)=>{
            const cc = ch.charCodeAt(0);
            return cc >= 48 && cc <= 57 || cc >= 65 && cc <= 70 || cc >= 97 && cc <= 102; // a-f
        };
        return takeChar(scnr, closure);
    }
    function getDigits(scnr) {
        let ch = "";
        let num = "";
        while(ch = takeDigit(scnr))num += ch;
        return num;
    }
    function readText(scnr) {
        const fn = (buf)=>{
            const ch = scnr.currentChar();
            if (ch === "{" /* BraceLeft */  || ch === "}" /* BraceRight */  || ch === "@" /* LinkedAlias */  || !ch) return buf;
            else if (ch === "%" /* Modulo */ ) {
                if (isTextStart(scnr)) {
                    buf += ch;
                    scnr.next();
                    return fn(buf);
                } else return buf;
            } else if (ch === "|" /* Pipe */ ) return buf;
            else if (ch === CHAR_SP || ch === CHAR_LF) {
                if (isTextStart(scnr)) {
                    buf += ch;
                    scnr.next();
                    return fn(buf);
                } else if (isPluralStart(scnr)) return buf;
                else {
                    buf += ch;
                    scnr.next();
                    return fn(buf);
                }
            } else {
                buf += ch;
                scnr.next();
                return fn(buf);
            }
        };
        return fn("");
    }
    function readNamedIdentifier(scnr) {
        skipSpaces(scnr);
        let ch = "";
        let name = "";
        while(ch = takeIdentifierChar(scnr))name += ch;
        if (scnr.currentChar() === EOF) emitError(6 /* UNTERMINATED_CLOSING_BRACE */ , currentPosition(), 0);
        return name;
    }
    function readListIdentifier(scnr) {
        skipSpaces(scnr);
        let value = "";
        if (scnr.currentChar() === "-") {
            scnr.next();
            value += `-${getDigits(scnr)}`;
        } else value += getDigits(scnr);
        if (scnr.currentChar() === EOF) emitError(6 /* UNTERMINATED_CLOSING_BRACE */ , currentPosition(), 0);
        return value;
    }
    function readLiteral(scnr) {
        skipSpaces(scnr);
        eat(scnr, `\'`);
        let ch = "";
        let literal = "";
        const fn = (x)=>x !== LITERAL_DELIMITER && x !== CHAR_LF;
        while(ch = takeChar(scnr, fn))if (ch === "\\") literal += readEscapeSequence(scnr);
        else literal += ch;
        const current = scnr.currentChar();
        if (current === CHAR_LF || current === EOF) {
            emitError(2 /* UNTERMINATED_SINGLE_QUOTE_IN_PLACEHOLDER */ , currentPosition(), 0);
            // TODO: Is it correct really?
            if (current === CHAR_LF) {
                scnr.next();
                eat(scnr, `\'`);
            }
            return literal;
        }
        eat(scnr, `\'`);
        return literal;
    }
    function readEscapeSequence(scnr) {
        const ch = scnr.currentChar();
        switch(ch){
            case "\\":
            case `\'`:
                scnr.next();
                return `\\${ch}`;
            case "u":
                return readUnicodeEscapeSequence(scnr, ch, 4);
            case "U":
                return readUnicodeEscapeSequence(scnr, ch, 6);
            default:
                emitError(3 /* UNKNOWN_ESCAPE_SEQUENCE */ , currentPosition(), 0, ch);
                return "";
        }
    }
    function readUnicodeEscapeSequence(scnr, unicode, digits) {
        eat(scnr, unicode);
        let sequence = "";
        for(let i = 0; i < digits; i++){
            const ch = takeHexDigit(scnr);
            if (!ch) {
                emitError(4 /* INVALID_UNICODE_ESCAPE_SEQUENCE */ , currentPosition(), 0, `\\${unicode}${sequence}${scnr.currentChar()}`);
                break;
            }
            sequence += ch;
        }
        return `\\${unicode}${sequence}`;
    }
    function readInvalidIdentifier(scnr) {
        skipSpaces(scnr);
        let ch1 = "";
        let identifiers = "";
        const closure = (ch)=>ch !== "{" /* BraceLeft */  && ch !== "}" /* BraceRight */  && ch !== CHAR_SP && ch !== CHAR_LF;
        while(ch1 = takeChar(scnr, closure))identifiers += ch1;
        return identifiers;
    }
    function readLinkedModifier(scnr) {
        let ch = "";
        let name = "";
        while(ch = takeIdentifierChar(scnr))name += ch;
        return name;
    }
    function readLinkedRefer(scnr) {
        const fn = (detect = false, buf)=>{
            const ch = scnr.currentChar();
            if (ch === "{" /* BraceLeft */  || ch === "%" /* Modulo */  || ch === "@" /* LinkedAlias */  || ch === "|" /* Pipe */  || !ch) return buf;
            else if (ch === CHAR_SP) return buf;
            else if (ch === CHAR_LF) {
                buf += ch;
                scnr.next();
                return fn(detect, buf);
            } else {
                buf += ch;
                scnr.next();
                return fn(true, buf);
            }
        };
        return fn(false, "");
    }
    function readPlural(scnr) {
        skipSpaces(scnr);
        const plural = eat(scnr, "|" /* Pipe */ );
        skipSpaces(scnr);
        return plural;
    }
    // TODO: We need refactoring of token parsing ...
    function readTokenInPlaceholder(scnr, context) {
        let token = null;
        const ch = scnr.currentChar();
        switch(ch){
            case "{" /* BraceLeft */ :
                if (context.braceNest >= 1) emitError(8 /* NOT_ALLOW_NEST_PLACEHOLDER */ , currentPosition(), 0);
                scnr.next();
                token = getToken(context, 2 /* BraceLeft */ , "{" /* BraceLeft */ );
                skipSpaces(scnr);
                context.braceNest++;
                return token;
            case "}" /* BraceRight */ :
                if (context.braceNest > 0 && context.currentType === 2 /* BraceLeft */ ) emitError(7 /* EMPTY_PLACEHOLDER */ , currentPosition(), 0);
                scnr.next();
                token = getToken(context, 3 /* BraceRight */ , "}" /* BraceRight */ );
                context.braceNest--;
                context.braceNest > 0 && skipSpaces(scnr);
                if (context.inLinked && context.braceNest === 0) context.inLinked = false;
                return token;
            case "@" /* LinkedAlias */ :
                if (context.braceNest > 0) emitError(6 /* UNTERMINATED_CLOSING_BRACE */ , currentPosition(), 0);
                token = readTokenInLinked(scnr, context) || getEndToken(context);
                context.braceNest = 0;
                return token;
            default:
                let validNamedIdentifier = true;
                let validListIdentifier = true;
                let validLeteral = true;
                if (isPluralStart(scnr)) {
                    if (context.braceNest > 0) emitError(6 /* UNTERMINATED_CLOSING_BRACE */ , currentPosition(), 0);
                    token = getToken(context, 1 /* Pipe */ , readPlural(scnr));
                    // reset
                    context.braceNest = 0;
                    context.inLinked = false;
                    return token;
                }
                if (context.braceNest > 0 && (context.currentType === 5 /* Named */  || context.currentType === 6 /* List */  || context.currentType === 7 /* Literal */ )) {
                    emitError(6 /* UNTERMINATED_CLOSING_BRACE */ , currentPosition(), 0);
                    context.braceNest = 0;
                    return readToken(scnr, context);
                }
                if (validNamedIdentifier = isNamedIdentifierStart(scnr, context)) {
                    token = getToken(context, 5 /* Named */ , readNamedIdentifier(scnr));
                    skipSpaces(scnr);
                    return token;
                }
                if (validListIdentifier = isListIdentifierStart(scnr, context)) {
                    token = getToken(context, 6 /* List */ , readListIdentifier(scnr));
                    skipSpaces(scnr);
                    return token;
                }
                if (validLeteral = isLiteralStart(scnr, context)) {
                    token = getToken(context, 7 /* Literal */ , readLiteral(scnr));
                    skipSpaces(scnr);
                    return token;
                }
                if (!validNamedIdentifier && !validListIdentifier && !validLeteral) {
                    // TODO: we should be re-designed invalid cases, when we will extend message syntax near the future ...
                    token = getToken(context, 13 /* InvalidPlace */ , readInvalidIdentifier(scnr));
                    emitError(1 /* INVALID_TOKEN_IN_PLACEHOLDER */ , currentPosition(), 0, token.value);
                    skipSpaces(scnr);
                    return token;
                }
                break;
        }
        return token;
    }
    // TODO: We need refactoring of token parsing ...
    function readTokenInLinked(scnr, context) {
        const { currentType  } = context;
        let token = null;
        const ch = scnr.currentChar();
        if ((currentType === 8 /* LinkedAlias */  || currentType === 9 /* LinkedDot */  || currentType === 12 /* LinkedModifier */  || currentType === 10 /* LinkedDelimiter */ ) && (ch === CHAR_LF || ch === CHAR_SP)) emitError(9 /* INVALID_LINKED_FORMAT */ , currentPosition(), 0);
        switch(ch){
            case "@" /* LinkedAlias */ :
                scnr.next();
                token = getToken(context, 8 /* LinkedAlias */ , "@" /* LinkedAlias */ );
                context.inLinked = true;
                return token;
            case "." /* LinkedDot */ :
                skipSpaces(scnr);
                scnr.next();
                return getToken(context, 9 /* LinkedDot */ , "." /* LinkedDot */ );
            case ":" /* LinkedDelimiter */ :
                skipSpaces(scnr);
                scnr.next();
                return getToken(context, 10 /* LinkedDelimiter */ , ":" /* LinkedDelimiter */ );
            default:
                if (isPluralStart(scnr)) {
                    token = getToken(context, 1 /* Pipe */ , readPlural(scnr));
                    // reset
                    context.braceNest = 0;
                    context.inLinked = false;
                    return token;
                }
                if (isLinkedDotStart(scnr, context) || isLinkedDelimiterStart(scnr, context)) {
                    skipSpaces(scnr);
                    return readTokenInLinked(scnr, context);
                }
                if (isLinkedModifierStart(scnr, context)) {
                    skipSpaces(scnr);
                    return getToken(context, 12 /* LinkedModifier */ , readLinkedModifier(scnr));
                }
                if (isLinkedReferStart(scnr, context)) {
                    skipSpaces(scnr);
                    if (ch === "{" /* BraceLeft */ ) // scan the placeholder
                    return readTokenInPlaceholder(scnr, context) || token;
                    else return getToken(context, 11 /* LinkedKey */ , readLinkedRefer(scnr));
                }
                if (currentType === 8 /* LinkedAlias */ ) emitError(9 /* INVALID_LINKED_FORMAT */ , currentPosition(), 0);
                context.braceNest = 0;
                context.inLinked = false;
                return readToken(scnr, context);
        }
    }
    // TODO: We need refactoring of token parsing ...
    function readToken(scnr, context) {
        let token = {
            type: 14 /* EOF */ 
        };
        if (context.braceNest > 0) return readTokenInPlaceholder(scnr, context) || getEndToken(context);
        if (context.inLinked) return readTokenInLinked(scnr, context) || getEndToken(context);
        const ch = scnr.currentChar();
        switch(ch){
            case "{" /* BraceLeft */ :
                return readTokenInPlaceholder(scnr, context) || getEndToken(context);
            case "}" /* BraceRight */ :
                emitError(5 /* UNBALANCED_CLOSING_BRACE */ , currentPosition(), 0);
                scnr.next();
                return getToken(context, 3 /* BraceRight */ , "}" /* BraceRight */ );
            case "@" /* LinkedAlias */ :
                return readTokenInLinked(scnr, context) || getEndToken(context);
            default:
                if (isPluralStart(scnr)) {
                    token = getToken(context, 1 /* Pipe */ , readPlural(scnr));
                    // reset
                    context.braceNest = 0;
                    context.inLinked = false;
                    return token;
                }
                if (isTextStart(scnr)) return getToken(context, 0 /* Text */ , readText(scnr));
                if (ch === "%" /* Modulo */ ) {
                    scnr.next();
                    return getToken(context, 4 /* Modulo */ , "%" /* Modulo */ );
                }
                break;
        }
        return token;
    }
    function nextToken() {
        const { currentType , offset , startLoc , endLoc  } = _context;
        _context.lastType = currentType;
        _context.lastOffset = offset;
        _context.lastStartLoc = startLoc;
        _context.lastEndLoc = endLoc;
        _context.offset = currentOffset();
        _context.startLoc = currentPosition();
        if (_scnr.currentChar() === EOF) return getToken(_context, 14 /* EOF */ );
        return readToken(_scnr, _context);
    }
    return {
        nextToken,
        currentOffset,
        currentPosition,
        context: context1
    };
}
const ERROR_DOMAIN$1 = "parser";
// Backslash backslash, backslash quote, uHHHH, UHHHHHH.
const KNOWN_ESCAPES = /(?:\\\\|\\'|\\u([0-9a-fA-F]{4})|\\U([0-9a-fA-F]{6}))/g;
function fromEscapeSequence(match, codePoint4, codePoint6) {
    switch(match){
        case `\\\\`:
            return `\\`;
        case `\\\'`:
            return `\'`;
        default:
            {
                const codePoint = parseInt(codePoint4 || codePoint6, 16);
                if (codePoint <= 0xd7ff || codePoint >= 0xe000) return String.fromCodePoint(codePoint);
                // invalid ...
                // Replace them with U+FFFD REPLACEMENT CHARACTER.
                return "\uFFFD";
            }
    }
}
function createParser(options = {}) {
    const location = options.location !== false;
    const { onError  } = options;
    function emitError(tokenzer, code, start, offset, ...args) {
        const end = tokenzer.currentPosition();
        end.offset += offset;
        end.column += offset;
        if (onError) {
            const loc = createLocation(start, end);
            const err = createCompileError(code, loc, {
                domain: ERROR_DOMAIN$1,
                args
            });
            onError(err);
        }
    }
    function startNode(type, offset, loc) {
        const node = {
            type,
            start: offset,
            end: offset
        };
        if (location) node.loc = {
            start: loc,
            end: loc
        };
        return node;
    }
    function endNode(node, offset, pos, type) {
        node.end = offset;
        if (type) node.type = type;
        if (location && node.loc) node.loc.end = pos;
    }
    function parseText(tokenizer, value) {
        const context = tokenizer.context();
        const node = startNode(3 /* Text */ , context.offset, context.startLoc);
        node.value = value;
        endNode(node, tokenizer.currentOffset(), tokenizer.currentPosition());
        return node;
    }
    function parseList(tokenizer, index) {
        const context = tokenizer.context();
        const { lastOffset: offset , lastStartLoc: loc  } = context; // get brace left loc
        const node = startNode(5 /* List */ , offset, loc);
        node.index = parseInt(index, 10);
        tokenizer.nextToken(); // skip brach right
        endNode(node, tokenizer.currentOffset(), tokenizer.currentPosition());
        return node;
    }
    function parseNamed(tokenizer, key) {
        const context = tokenizer.context();
        const { lastOffset: offset , lastStartLoc: loc  } = context; // get brace left loc
        const node = startNode(4 /* Named */ , offset, loc);
        node.key = key;
        tokenizer.nextToken(); // skip brach right
        endNode(node, tokenizer.currentOffset(), tokenizer.currentPosition());
        return node;
    }
    function parseLiteral(tokenizer, value) {
        const context = tokenizer.context();
        const { lastOffset: offset , lastStartLoc: loc  } = context; // get brace left loc
        const node = startNode(9 /* Literal */ , offset, loc);
        node.value = value.replace(KNOWN_ESCAPES, fromEscapeSequence);
        tokenizer.nextToken(); // skip brach right
        endNode(node, tokenizer.currentOffset(), tokenizer.currentPosition());
        return node;
    }
    function parseLinkedModifier(tokenizer) {
        const token = tokenizer.nextToken();
        const context = tokenizer.context();
        const { lastOffset: offset , lastStartLoc: loc  } = context; // get linked dot loc
        const node = startNode(8 /* LinkedModifier */ , offset, loc);
        if (token.type !== 12 /* LinkedModifier */ ) {
            // empty modifier
            emitError(tokenizer, 11 /* UNEXPECTED_EMPTY_LINKED_MODIFIER */ , context.lastStartLoc, 0);
            node.value = "";
            endNode(node, offset, loc);
            return {
                nextConsumeToken: token,
                node
            };
        }
        // check token
        if (token.value == null) emitError(tokenizer, 13 /* UNEXPECTED_LEXICAL_ANALYSIS */ , context.lastStartLoc, 0, getTokenCaption(token));
        node.value = token.value || "";
        endNode(node, tokenizer.currentOffset(), tokenizer.currentPosition());
        return {
            node
        };
    }
    function parseLinkedKey(tokenizer, value) {
        const context = tokenizer.context();
        const node = startNode(7 /* LinkedKey */ , context.offset, context.startLoc);
        node.value = value;
        endNode(node, tokenizer.currentOffset(), tokenizer.currentPosition());
        return node;
    }
    function parseLinked(tokenizer) {
        const context = tokenizer.context();
        const linkedNode = startNode(6 /* Linked */ , context.offset, context.startLoc);
        let token = tokenizer.nextToken();
        if (token.type === 9 /* LinkedDot */ ) {
            const parsed = parseLinkedModifier(tokenizer);
            linkedNode.modifier = parsed.node;
            token = parsed.nextConsumeToken || tokenizer.nextToken();
        }
        // asset check token
        if (token.type !== 10 /* LinkedDelimiter */ ) emitError(tokenizer, 13 /* UNEXPECTED_LEXICAL_ANALYSIS */ , context.lastStartLoc, 0, getTokenCaption(token));
        token = tokenizer.nextToken();
        // skip brace left
        if (token.type === 2 /* BraceLeft */ ) token = tokenizer.nextToken();
        switch(token.type){
            case 11 /* LinkedKey */ :
                if (token.value == null) emitError(tokenizer, 13 /* UNEXPECTED_LEXICAL_ANALYSIS */ , context.lastStartLoc, 0, getTokenCaption(token));
                linkedNode.key = parseLinkedKey(tokenizer, token.value || "");
                break;
            case 5 /* Named */ :
                if (token.value == null) emitError(tokenizer, 13 /* UNEXPECTED_LEXICAL_ANALYSIS */ , context.lastStartLoc, 0, getTokenCaption(token));
                linkedNode.key = parseNamed(tokenizer, token.value || "");
                break;
            case 6 /* List */ :
                if (token.value == null) emitError(tokenizer, 13 /* UNEXPECTED_LEXICAL_ANALYSIS */ , context.lastStartLoc, 0, getTokenCaption(token));
                linkedNode.key = parseList(tokenizer, token.value || "");
                break;
            case 7 /* Literal */ :
                if (token.value == null) emitError(tokenizer, 13 /* UNEXPECTED_LEXICAL_ANALYSIS */ , context.lastStartLoc, 0, getTokenCaption(token));
                linkedNode.key = parseLiteral(tokenizer, token.value || "");
                break;
            default:
                // empty key
                emitError(tokenizer, 12 /* UNEXPECTED_EMPTY_LINKED_KEY */ , context.lastStartLoc, 0);
                const nextContext = tokenizer.context();
                const emptyLinkedKeyNode = startNode(7 /* LinkedKey */ , nextContext.offset, nextContext.startLoc);
                emptyLinkedKeyNode.value = "";
                endNode(emptyLinkedKeyNode, nextContext.offset, nextContext.startLoc);
                linkedNode.key = emptyLinkedKeyNode;
                endNode(linkedNode, nextContext.offset, nextContext.startLoc);
                return {
                    nextConsumeToken: token,
                    node: linkedNode
                };
        }
        endNode(linkedNode, tokenizer.currentOffset(), tokenizer.currentPosition());
        return {
            node: linkedNode
        };
    }
    function parseMessage(tokenizer) {
        const context = tokenizer.context();
        const startOffset = context.currentType === 1 /* Pipe */  ? tokenizer.currentOffset() : context.offset;
        const startLoc = context.currentType === 1 /* Pipe */  ? context.endLoc : context.startLoc;
        const node = startNode(2 /* Message */ , startOffset, startLoc);
        node.items = [];
        let nextToken = null;
        do {
            const token = nextToken || tokenizer.nextToken();
            nextToken = null;
            switch(token.type){
                case 0 /* Text */ :
                    if (token.value == null) emitError(tokenizer, 13 /* UNEXPECTED_LEXICAL_ANALYSIS */ , context.lastStartLoc, 0, getTokenCaption(token));
                    node.items.push(parseText(tokenizer, token.value || ""));
                    break;
                case 6 /* List */ :
                    if (token.value == null) emitError(tokenizer, 13 /* UNEXPECTED_LEXICAL_ANALYSIS */ , context.lastStartLoc, 0, getTokenCaption(token));
                    node.items.push(parseList(tokenizer, token.value || ""));
                    break;
                case 5 /* Named */ :
                    if (token.value == null) emitError(tokenizer, 13 /* UNEXPECTED_LEXICAL_ANALYSIS */ , context.lastStartLoc, 0, getTokenCaption(token));
                    node.items.push(parseNamed(tokenizer, token.value || ""));
                    break;
                case 7 /* Literal */ :
                    if (token.value == null) emitError(tokenizer, 13 /* UNEXPECTED_LEXICAL_ANALYSIS */ , context.lastStartLoc, 0, getTokenCaption(token));
                    node.items.push(parseLiteral(tokenizer, token.value || ""));
                    break;
                case 8 /* LinkedAlias */ :
                    const parsed = parseLinked(tokenizer);
                    node.items.push(parsed.node);
                    nextToken = parsed.nextConsumeToken || null;
                    break;
            }
        }while (context.currentType !== 14 /* EOF */  && context.currentType !== 1 /* Pipe */ );
        // adjust message node loc
        const endOffset = context.currentType === 1 /* Pipe */  ? context.lastOffset : tokenizer.currentOffset();
        const endLoc = context.currentType === 1 /* Pipe */  ? context.lastEndLoc : tokenizer.currentPosition();
        endNode(node, endOffset, endLoc);
        return node;
    }
    function parsePlural(tokenizer, offset, loc, msgNode) {
        const context = tokenizer.context();
        let hasEmptyMessage = msgNode.items.length === 0;
        const node = startNode(1 /* Plural */ , offset, loc);
        node.cases = [];
        node.cases.push(msgNode);
        do {
            const msg = parseMessage(tokenizer);
            if (!hasEmptyMessage) hasEmptyMessage = msg.items.length === 0;
            node.cases.push(msg);
        }while (context.currentType !== 14 /* EOF */ );
        if (hasEmptyMessage) emitError(tokenizer, 10 /* MUST_HAVE_MESSAGES_IN_PLURAL */ , loc, 0);
        endNode(node, tokenizer.currentOffset(), tokenizer.currentPosition());
        return node;
    }
    function parseResource(tokenizer) {
        const context = tokenizer.context();
        const { offset , startLoc  } = context;
        const msgNode = parseMessage(tokenizer);
        if (context.currentType === 14 /* EOF */ ) return msgNode;
        else return parsePlural(tokenizer, offset, startLoc, msgNode);
    }
    function parse(source) {
        const tokenizer = createTokenizer(source, {
            ...options
        });
        const context = tokenizer.context();
        const node = startNode(0 /* Resource */ , context.offset, context.startLoc);
        if (location && node.loc) node.loc.source = source;
        node.body = parseResource(tokenizer);
        // assert wheather achieved to EOF
        if (context.currentType !== 14 /* EOF */ ) emitError(tokenizer, 13 /* UNEXPECTED_LEXICAL_ANALYSIS */ , context.lastStartLoc, 0, source[context.offset] || "");
        endNode(node, tokenizer.currentOffset(), tokenizer.currentPosition());
        return node;
    }
    return {
        parse
    };
}
function getTokenCaption(token) {
    if (token.type === 14 /* EOF */ ) return "EOF";
    const name = (token.value || "").replace(/\r?\n/gu, "\\n");
    return name.length > 10 ? name.slice(0, 9) + "\u2026" : name;
}
function createTransformer(ast, options = {} // eslint-disable-line
) {
    const _context = {
        ast,
        helpers: new Set()
    };
    const context = ()=>_context;
    const helper = (name)=>{
        _context.helpers.add(name);
        return name;
    };
    return {
        context,
        helper
    };
}
function traverseNodes(nodes, transformer) {
    for(let i = 0; i < nodes.length; i++)traverseNode(nodes[i], transformer);
}
function traverseNode(node, transformer) {
    // TODO: if we need pre-hook of transform, should be implemeted to here
    switch(node.type){
        case 1 /* Plural */ :
            traverseNodes(node.cases, transformer);
            transformer.helper("plural" /* PLURAL */ );
            break;
        case 2 /* Message */ :
            traverseNodes(node.items, transformer);
            break;
        case 6 /* Linked */ :
            const linked = node;
            traverseNode(linked.key, transformer);
            transformer.helper("linked" /* LINKED */ );
            break;
        case 5 /* List */ :
            transformer.helper("interpolate" /* INTERPOLATE */ );
            transformer.helper("list" /* LIST */ );
            break;
        case 4 /* Named */ :
            transformer.helper("interpolate" /* INTERPOLATE */ );
            transformer.helper("named" /* NAMED */ );
            break;
    }
// TODO: if we need post-hook of transform, should be implemeted to here
}
// transform AST
function transform(ast, options = {} // eslint-disable-line
) {
    const transformer = createTransformer(ast);
    transformer.helper("normalize" /* NORMALIZE */ );
    // traverse
    ast.body && traverseNode(ast.body, transformer);
    // set meta information
    const context = transformer.context();
    ast.helpers = [
        ...context.helpers
    ];
}
function createCodeGenerator(ast, options) {
    const { sourceMap , filename , breakLineCode , needIndent: _needIndent  } = options;
    const _context = {
        source: ast.loc.source,
        filename,
        code: "",
        column: 1,
        line: 1,
        offset: 0,
        map: undefined,
        breakLineCode,
        needIndent: _needIndent,
        indentLevel: 0
    };
    const context = ()=>_context;
    function push(code, node) {
        _context.code += code;
    }
    function _newline(n, withBreakLine = true) {
        const _breakLineCode = withBreakLine ? breakLineCode : "";
        push(_needIndent ? _breakLineCode + `  `.repeat(n) : _breakLineCode);
    }
    function indent(withNewLine = true) {
        const level = ++_context.indentLevel;
        withNewLine && _newline(level);
    }
    function deindent(withNewLine = true) {
        const level = --_context.indentLevel;
        withNewLine && _newline(level);
    }
    function newline() {
        _newline(_context.indentLevel);
    }
    const helper = (key)=>`_${key}`;
    const needIndent = ()=>_context.needIndent;
    return {
        context,
        push,
        indent,
        deindent,
        newline,
        helper,
        needIndent
    };
}
function generateLinkedNode(generator, node) {
    const { helper  } = generator;
    generator.push(`${helper("linked" /* LINKED */ )}(`);
    generateNode(generator, node.key);
    if (node.modifier) {
        generator.push(`, `);
        generateNode(generator, node.modifier);
    }
    generator.push(`)`);
}
function generateMessageNode(generator, node) {
    const { helper , needIndent  } = generator;
    generator.push(`${helper("normalize" /* NORMALIZE */ )}([`);
    generator.indent(needIndent());
    const length = node.items.length;
    for(let i = 0; i < length; i++){
        generateNode(generator, node.items[i]);
        if (i === length - 1) break;
        generator.push(", ");
    }
    generator.deindent(needIndent());
    generator.push("])");
}
function generatePluralNode(generator, node) {
    const { helper , needIndent  } = generator;
    if (node.cases.length > 1) {
        generator.push(`${helper("plural" /* PLURAL */ )}([`);
        generator.indent(needIndent());
        const length = node.cases.length;
        for(let i = 0; i < length; i++){
            generateNode(generator, node.cases[i]);
            if (i === length - 1) break;
            generator.push(", ");
        }
        generator.deindent(needIndent());
        generator.push(`])`);
    }
}
function generateResource(generator, node) {
    if (node.body) generateNode(generator, node.body);
    else generator.push("null");
}
function generateNode(generator, node) {
    const { helper  } = generator;
    switch(node.type){
        case 0 /* Resource */ :
            generateResource(generator, node);
            break;
        case 1 /* Plural */ :
            generatePluralNode(generator, node);
            break;
        case 2 /* Message */ :
            generateMessageNode(generator, node);
            break;
        case 6 /* Linked */ :
            generateLinkedNode(generator, node);
            break;
        case 8 /* LinkedModifier */ :
            generator.push(JSON.stringify(node.value), node);
            break;
        case 7 /* LinkedKey */ :
            generator.push(JSON.stringify(node.value), node);
            break;
        case 5 /* List */ :
            generator.push(`${helper("interpolate" /* INTERPOLATE */ )}(${helper("list" /* LIST */ )}(${node.index}))`, node);
            break;
        case 4 /* Named */ :
            generator.push(`${helper("interpolate" /* INTERPOLATE */ )}(${helper("named" /* NAMED */ )}(${JSON.stringify(node.key)}))`, node);
            break;
        case 9 /* Literal */ :
            generator.push(JSON.stringify(node.value), node);
            break;
        case 3 /* Text */ :
            generator.push(JSON.stringify(node.value), node);
            break;
        default:
            throw new Error(`unhandled codegen node type: ${node.type}`);
    }
}
// generate code from AST
const generate = (ast, options = {} // eslint-disable-line
)=>{
    const mode = (0, _shared.isString)(options.mode) ? options.mode : "normal";
    const filename = (0, _shared.isString)(options.filename) ? options.filename : "message.intl";
    const sourceMap = !!options.sourceMap;
    // prettier-ignore
    const breakLineCode = options.breakLineCode != null ? options.breakLineCode : mode === "arrow" ? ";" : "\n";
    const needIndent = options.needIndent ? options.needIndent : mode !== "arrow";
    const helpers = ast.helpers || [];
    const generator = createCodeGenerator(ast, {
        mode,
        filename,
        sourceMap,
        breakLineCode,
        needIndent
    });
    generator.push(mode === "normal" ? `function __msg__ (ctx) {` : `(ctx) => {`);
    generator.indent(needIndent);
    if (helpers.length > 0) {
        generator.push(`const { ${helpers.map((s)=>`${s}: _${s}`).join(", ")} } = ctx`);
        generator.newline();
    }
    generator.push(`return `);
    generateNode(generator, ast);
    generator.deindent(needIndent);
    generator.push(`}`);
    const { code , map  } = generator.context();
    return {
        ast,
        code,
        map: map ? map.toJSON() : undefined // eslint-disable-line @typescript-eslint/no-explicit-any
    };
};
function baseCompile(source, options = {}) {
    // parse source codes
    const parser = createParser({
        ...options
    });
    const ast = parser.parse(source);
    // transform ASTs
    transform(ast, {
        ...options
    });
    // generate javascript codes
    return generate(ast, {
        ...options
    });
}

},{"@intlify/shared":"iKoIZ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dc7MH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "setupDevtoolsPlugin", ()=>setupDevtoolsPlugin);
var _envJs = require("./env.js");
var _constJs = require("./const.js");
var _proxyJs = require("./proxy.js");
var _indexJs = require("./api/index.js");
parcelHelpers.exportAll(_indexJs, exports);
var _pluginJs = require("./plugin.js");
parcelHelpers.exportAll(_pluginJs, exports);
var _timeJs = require("./time.js");
parcelHelpers.exportAll(_timeJs, exports);
function setupDevtoolsPlugin(pluginDescriptor, setupFn) {
    const descriptor = pluginDescriptor;
    const target = (0, _envJs.getTarget)();
    const hook = (0, _envJs.getDevtoolsGlobalHook)();
    const enableProxy = (0, _envJs.isProxyAvailable) && descriptor.enableEarlyProxy;
    if (hook && (target.__VUE_DEVTOOLS_PLUGIN_API_AVAILABLE__ || !enableProxy)) hook.emit((0, _constJs.HOOK_SETUP), pluginDescriptor, setupFn);
    else {
        const proxy = enableProxy ? new (0, _proxyJs.ApiProxy)(descriptor, hook) : null;
        const list = target.__VUE_DEVTOOLS_PLUGINS__ = target.__VUE_DEVTOOLS_PLUGINS__ || [];
        list.push({
            pluginDescriptor: descriptor,
            setupFn,
            proxy
        });
        if (proxy) setupFn(proxy.proxiedTarget);
    }
}

},{"./env.js":"djKoa","./const.js":"ePyfE","./proxy.js":"cGXUQ","./api/index.js":"i4WoE","./plugin.js":"fgpC0","./time.js":"cI6M3","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"djKoa":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getDevtoolsGlobalHook", ()=>getDevtoolsGlobalHook);
parcelHelpers.export(exports, "getTarget", ()=>getTarget);
parcelHelpers.export(exports, "isProxyAvailable", ()=>isProxyAvailable);
var global = arguments[3];
function getDevtoolsGlobalHook() {
    return getTarget().__VUE_DEVTOOLS_GLOBAL_HOOK__;
}
function getTarget() {
    // @ts-ignore
    return typeof navigator !== "undefined" && typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : {};
}
const isProxyAvailable = typeof Proxy === "function";

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ePyfE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "HOOK_SETUP", ()=>HOOK_SETUP);
parcelHelpers.export(exports, "HOOK_PLUGIN_SETTINGS_SET", ()=>HOOK_PLUGIN_SETTINGS_SET);
const HOOK_SETUP = "devtools-plugin:setup";
const HOOK_PLUGIN_SETTINGS_SET = "plugin:settings:set";

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cGXUQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ApiProxy", ()=>ApiProxy);
var _constJs = require("./const.js");
var _timeJs = require("./time.js");
class ApiProxy {
    constructor(plugin, hook){
        this.target = null;
        this.targetQueue = [];
        this.onQueue = [];
        this.plugin = plugin;
        this.hook = hook;
        const defaultSettings = {};
        if (plugin.settings) for(const id in plugin.settings){
            const item = plugin.settings[id];
            defaultSettings[id] = item.defaultValue;
        }
        const localSettingsSaveId = `__vue-devtools-plugin-settings__${plugin.id}`;
        let currentSettings = Object.assign({}, defaultSettings);
        try {
            const raw = localStorage.getItem(localSettingsSaveId);
            const data = JSON.parse(raw);
            Object.assign(currentSettings, data);
        } catch (e) {
        // noop
        }
        this.fallbacks = {
            getSettings () {
                return currentSettings;
            },
            setSettings (value) {
                try {
                    localStorage.setItem(localSettingsSaveId, JSON.stringify(value));
                } catch (e) {
                // noop
                }
                currentSettings = value;
            },
            now () {
                return (0, _timeJs.now)();
            }
        };
        if (hook) hook.on((0, _constJs.HOOK_PLUGIN_SETTINGS_SET), (pluginId, value)=>{
            if (pluginId === this.plugin.id) this.fallbacks.setSettings(value);
        });
        this.proxiedOn = new Proxy({}, {
            get: (_target, prop)=>{
                if (this.target) return this.target.on[prop];
                else return (...args)=>{
                    this.onQueue.push({
                        method: prop,
                        args
                    });
                };
            }
        });
        this.proxiedTarget = new Proxy({}, {
            get: (_target, prop)=>{
                if (this.target) return this.target[prop];
                else if (prop === "on") return this.proxiedOn;
                else if (Object.keys(this.fallbacks).includes(prop)) return (...args)=>{
                    this.targetQueue.push({
                        method: prop,
                        args,
                        resolve: ()=>{}
                    });
                    return this.fallbacks[prop](...args);
                };
                else return (...args)=>{
                    return new Promise((resolve)=>{
                        this.targetQueue.push({
                            method: prop,
                            args,
                            resolve
                        });
                    });
                };
            }
        });
    }
    async setRealTarget(target) {
        this.target = target;
        for (const item of this.onQueue)this.target.on[item.method](...item.args);
        for (const item1 of this.targetQueue)item1.resolve(await this.target[item1.method](...item1.args));
    }
}

},{"./const.js":"ePyfE","./time.js":"cI6M3","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cI6M3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isPerformanceSupported", ()=>isPerformanceSupported);
parcelHelpers.export(exports, "now", ()=>now);
var global = arguments[3];
let supported;
let perf;
function isPerformanceSupported() {
    var _a;
    if (supported !== undefined) return supported;
    if (typeof window !== "undefined" && window.performance) {
        supported = true;
        perf = window.performance;
    } else if (typeof global !== "undefined" && ((_a = global.perf_hooks) === null || _a === void 0 ? void 0 : _a.performance)) {
        supported = true;
        perf = global.perf_hooks.performance;
    } else supported = false;
    return supported;
}
function now() {
    return isPerformanceSupported() ? perf.now() : Date.now();
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"i4WoE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _apiJs = require("./api.js");
parcelHelpers.exportAll(_apiJs, exports);
var _appJs = require("./app.js");
parcelHelpers.exportAll(_appJs, exports);
var _componentJs = require("./component.js");
parcelHelpers.exportAll(_componentJs, exports);
var _contextJs = require("./context.js");
parcelHelpers.exportAll(_contextJs, exports);
var _hooksJs = require("./hooks.js");
parcelHelpers.exportAll(_hooksJs, exports);
var _utilJs = require("./util.js");
parcelHelpers.exportAll(_utilJs, exports);

},{"./api.js":"3kxWr","./app.js":"6dGgR","./component.js":"4SgjQ","./context.js":"dt6Ap","./hooks.js":"5yNqE","./util.js":"7FzpQ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3kxWr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6dGgR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4SgjQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dt6Ap":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5yNqE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7FzpQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fgpC0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6uaFt":[function(require,module,exports) {
module.exports = JSON.parse('{"reuses":"reuses","favourites":"favourites","Admin":"Admin","Reply to the discussion":"Reply to the discussion","Comment":"Comment","Reply as":"Reply as","Submit":"Submit","Error sending response":"Error sending response","Discussion closed":"Discussion closed","messages":"messages","Reply":"Reply","The discussion was closed by":"The discussion was closed by","on":"on","Start a new discussion":"Start a new discussion","New discussion":"New discussion","Title":"Title","Message":"Message","You are seeing a specific discussion about this dataset":"You are seeing a specific discussion about this dataset","See all discussions about this dataset":"See all discussions about this dataset","Discussion creation":"Discussion creation","Last reply":"Last reply","An error occurred while fetching discussions":"An error occurred while fetching discussions","An error occurred while fetching the discussion ":"An error occurred while fetching the discussion ","An error occurred while creating the discussion ":"An error occurred while creating the discussion ","There are no results for your search":"There are no results for your search","Search...":"Search...","Organizations":"Organizations","Search an organization...":"Search an organization...","Tags":"Tags","Search a tag...":"Search a tag...","Licenses":"Licenses","Search a license...":"Search a license...","Formats":"Formats","Search a format...":"Search a format...","Search a granularity...":"Search a granularity...","Reset filters":"Reset filters","No dataset matching your query":"No dataset matching your query","You can try to reset the filters to expand your search.":"You can try to reset the filters to expand your search.","No results found.":"No results found.","Ask to join the organization as a producer":"Ask to join the organization as a producer","You can add some details here for your membership request":"You can add some details here for your membership request","A request has been sent to the administrators":"A request has been sent to the administrators","Error while requesting membership":"Error while requesting membership","Read more":"Read more","Read less":"Read less","remove from favorites":"remove from favorites","add to favorites":"add to favorites","Page":"Page {nb}","First page":"First Page","Previous page":"Previous page","Next page":"Next page","Last page":"Last page","X downloads":"{count} downloads","Nameless resource":"Nameless resource","See more details":"See more details","Preview":"Preview","Resource link":"Resource link","Download resource":"Download resource","URL":"URL","Permalink":"Permalink","Type":"Type","MIME Type":"MIME Type","Created on":"Created on","Modified on":"Modified on","Published on":"Published on","An error occurred while fetching resources":"An error occurred while fetching resources","Edit resource":"Edit resource","See schema":"See schema","Associated schema":"Associated schema","This resource is associated to the schema ":"This resource is associated to the schema "," this means that the producer reports that it adheres to the specification.":" this means that the producer reports that it adheres to the specification.","Documentation":"Documentation","You can view the schema documentation, discover some context and recommendations for data producers.":"You can view the schema documentation, discover some context and recommendations for data producers.","Read documentation":"Read documentation","Validation":"Validation","Resource validation based on a schema is a way to verify that the resource complies to the schema it is supposed to abide by. In case of errors, a validation report shows the errors found: wrongly named columns, non conform values, etc.":"Resource validation based on a schema is a way to verify that the resource complies to the schema it is supposed to abide by. In case of errors, a validation report shows the errors found: wrongly named columns, non conform values, etc.","data.gouv.fr allows you to validate your files based on a schema and correct the possible errors.":"data.gouv.fr allows you to validate your files based on a schema and correct the possible errors.","Validate resource":"Validate resource","Others resources":"Others resources","You can specify that a resource complies to a schema on your producer dashboard. Other resources complying with the schema are available on the platform.":"You can specify that a resource complies to a schema on your producer dashboard. Other resources complying with the schema are available on the platform.","See dataset linked to this schema":"See dataset linked to this schema","About schemas":"About schemas","Data schemas allow to describe data models : what are the fields, how is data represented, what are the possible values. Discover how schemas improve data quality and use cases on ":"Data schemas allow to describe data models : what are the fields, how is data represented, what are the possible values. Discover how schemas improve data quality and use cases on ","Unavailable":"Unavailable","Close":"Close","Copy permalink":"Copy permalink","Discussions":"Discussions","Sort discussions by":"Sort discussions by","Unfeature this content":"Unfeature this content","Feature this content":"Feature this content","Preview of resource X":"Preview of resource {title}","From":"From","Updated on X":"Updated on {date}","An error occurred while fetching schemas":"An error occurred while fetching schemas","Search resources":"Search resources","Search":"Search","No resources match your search.":"No resources match your search.","Search {query} in {type}":"Search \u201C{query}\u201D in {type}","datasets":"datasets","organizations":"organizations","Start typing to search in X":"Start typing to search in {type}","Fields preceded by a star ({markup}) are required.":"Fields preceded by a star ({markup}) are required.","{count} results":"{count} results | {count} result | {count} results","Use tab (or arrow down) to move between suggestions":"Use tab (or arrow down) to move between suggestions","{x} available suggestion":"{x} available suggestion","Delete {t}":"Delete {t}","Delete":"Delete","Schema":"Schema","Search a schema...":"Search a schema...","Sort by:":"Sort by:","Relevance":"Relevance","Filter results":"Filter results","Filters":"Filters","All organizations":"All organizations","All tags":"All tags","All formats":"All formats","All licenses":"All licenses","All granularities":"All granularities","All schemas":"All schemas","Data schemas describe data models: what are the fields, how are data shown, what are the available values, etc. See schema.data.gouv.fr":"Data schemas describe data models: what are the fields, how are data shown, what are the available values, etc. See schema.data.gouv.fr","Licenses define reuse rules for published datasets. See page data.gouv.fr/licences":"Licenses define reuse rules for published datasets. See page data.gouv.fr/licences","Spatial coverage":"Spatial coverage","Geographic areas covered by data and for which they are relevant.":"Geographic areas covered by data and for which they are relevant.","Search a spatial coverage...":"Search a spatial coverage...","All coverages":"All coverages","Spatial granularity":"Spatial granularity","Finest level of geographic detail covered by data.":"Finest level of geographic detail covered by data.","Ex. 2022 presidential election":"Ex. 2022 presidential election","Private":"Private","Updated on {date}":"Updated on {date}","{n} favorites":"{n} favorites | {n} favorite | {n} favorites","The identity of this public service is certified by {certifier}":"The identity of this public service is certified by {certifier}","{n} reuses":"{n} reuses | {n} reuse | {n} reuses","Metadata quality:":"Metadata quality","Data description filled":"Data description filled","Data description empty":"Data description empty","License filled":"License filled","No license set":"No license set","Update frequency followed":"Update frequency followed","Update frequency not followed":"Update frequency not followed","Update frequency not set":"Update frequency not set","File formats are open":"File formats are open","File formats are closed":"File formats are closed","Temporal coverage filled":"Temporal coverage filled","Temporal coverage not set":"Temporal coverage not set","Spatial coverage filled":"Spatial coverage filled","Spatial coverage not set":"Spatial coverage not set","Learn more about this indicator":"Learn more about this indicator","Resources documented":"Resources documented","Resources documentation missing":"Resources documentation missing"}');

},{}],"6MKKZ":[function(require,module,exports) {
module.exports = JSON.parse('{"reuses":"reuses","favourites":"favourites","Admin":"Admin","Reply to the discussion":"Reply to the discussion","Comment":"Comment","Reply as":"Reply as","Submit":"Submit","Error sending response":"Error sending response","Discussion closed":"Discussion closed","messages":"messages","Reply":"Reply","The discussion was closed by":"The discussion was closed by","on":"on","Start a new discussion":"Start a new discussion","New discussion":"New discussion","Title":"T\xedtulo","Message":"Message","You are seeing a specific discussion about this dataset":"You are seeing a specific discussion about this dataset","See all discussions about this dataset":"See all discussions about this dataset","Discussion creation":"Discussion creation","Last reply":"Last reply","An error occurred while fetching discussions":"An error occurred while fetching discussions","An error occurred while fetching the discussion ":"An error occurred while fetching the discussion ","An error occurred while creating the discussion ":"An error occurred while creating the discussion ","There are no results for your search":"There are no results for your search","Search...":"Search...","Organizations":"Organizaciones","Search an organization...":"Search an organization...","Tags":"Tags","Search a tag...":"Search a tag...","Licenses":"Licenses","Search a license...":"Search a license...","Formats":"Formats","Search a format...":"Search a format...","Search a granularity...":"Search a granularity...","Reset filters":"Reset filters","No dataset matching your query":"No dataset matching your query","You can try to reset the filters to expand your search.":"You can try to reset the filters to expand your search.","No results found.":"No results found.","Ask to join the organization as a producer":"Ask to join the organization as a producer","You can add some details here for your membership request":"You can add some details here for your membership request","A request has been sent to the administrators":"A request has been sent to the administrators","Error while requesting membership":"Error while requesting membership","Read more":"Read more","Read less":"Read less","remove from favorites":"remove from favorites","add to favorites":"add to favorites","Page":"Page {nb}","First page":"First Page","Previous page":"Previous page","Next page":"Next page","Last page":"Last page","X downloads":"{count} downloads","Nameless resource":"Nameless resource","See more details":"See more details","Preview":"Preview","Resource link":"Resource link","Download resource":"Download resource","URL":"URL","Permalink":"Permalink","Type":"Type","MIME Type":"MIME Type","Created on":"Created on","Modified on":"Modified on","Published on":"Published on","An error occurred while fetching resources":"An error occurred while fetching resources","Edit resource":"Edit resource","See schema":"See schema","Associated schema":"Associated schema","This resource is associated to the schema ":"This resource is associated to the schema "," this means that the producer reports that it adheres to the specification.":" this means that the producer reports that it adheres to the specification.","Documentation":"Documentation","You can view the schema documentation, discover some context and recommendations for data producers.":"You can view the schema documentation, discover some context and recommendations for data producers.","Read documentation":"Read documentation","Validation":"Validation","Resource validation based on a schema is a way to verify that the resource complies to the schema it is supposed to abide by. In case of errors, a validation report shows the errors found: wrongly named columns, non conform values, etc.":"Resource validation based on a schema is a way to verify that the resource complies to the schema it is supposed to abide by. In case of errors, a validation report shows the errors found: wrongly named columns, non conform values, etc.","data.gouv.fr allows you to validate your files based on a schema and correct the possible errors.":"data.gouv.fr allows you to validate your files based on a schema and correct the possible errors.","Validate resource":"Validate resource","Others resources":"Others resources","You can specify that a resource complies to a schema on your producer dashboard. Other resources complying with the schema are available on the platform.":"You can specify that a resource complies to a schema on your producer dashboard. Other resources complying with the schema are available on the platform.","See dataset linked to this schema":"See dataset linked to this schema","About schemas":"About schemas","Data schemas allow to describe data models : what are the fields, how is data represented, what are the possible values. Discover how schemas improve data quality and use cases on ":"Data schemas allow to describe data models : what are the fields, how is data represented, what are the possible values. Discover how schemas improve data quality and use cases on ","Unavailable":"Unavailable","Close":"Close","Copy permalink":"Copy permalink","Discussions":"Discussions","Sort discussions by":"Sort discussions by","Unfeature this content":"Unfeature this content","Feature this content":"Feature this content","Preview of resource X":"Preview of resource {title}","From":"From","Updated on X":"Updated on {date}","An error occurred while fetching schemas":"An error occurred while fetching schemas","Search resources":"Search resources","Search":"Search","No resources match your search.":"No resources match your search.","Search {query} in {type}":"Search \u201C{query}\u201D in {type}","datasets":"datasets","organizations":"organizations","Start typing to search in X":"Start typing to search in {type}","Fields preceded by a star ({markup}) are required.":"Fields preceded by a star ({markup}) are required.","{count} results":"{count} results | {count} result | {count} results","Use tab (or arrow down) to move between suggestions":"Use tab (or arrow down) to move between suggestions","{x} available suggestion":"{x} available suggestion","Delete {t}":"Delete {t}","Delete":"Delete","Schema":"Schema","Search a schema...":"Search a schema...","Sort by:":"Sort by:","Relevance":"Relevance","Filter results":"Filter results","Filters":"Filters","All organizations":"All organizations","All tags":"All tags","All formats":"All formats","All licenses":"All licenses","All granularities":"All granularities","All schemas":"All schemas","Data schemas describe data models: what are the fields, how are data shown, what are the available values, etc. See schema.data.gouv.fr":"Data schemas describe data models: what are the fields, how are data shown, what are the available values, etc. See schema.data.gouv.fr","Licenses define reuse rules for published datasets. See page data.gouv.fr/licences":"Licenses define reuse rules for published datasets. See page data.gouv.fr/licences","Spatial coverage":"Spatial coverage","Geographic areas covered by data and for which they are relevant.":"Geographic areas covered by data and for which they are relevant.","Search a spatial coverage...":"Search a spatial coverage...","All coverages":"All coverages","Spatial granularity":"Spatial granularity","Finest level of geographic detail covered by data.":"Finest level of geographic detail covered by data.","Ex. 2022 presidential election":"Ex. 2022 presidential election","Private":"Private","Updated on {date}":"Updated on {date}","{n} favorites":"{n} favorites | {n} favorite | {n} favorites","The identity of this public service is certified by {certifier}":"The identity of this public service is certified by {certifier}","{n} reuses":"{n} reuses | {n} reuse | {n} reuses","Metadata quality:":"Metadata quality","Data description filled":"Data description filled","Data description empty":"Data description empty","License filled":"License filled","No license set":"No license set","Update frequency followed":"Update frequency followed","Update frequency not followed":"Update frequency not followed","Update frequency not set":"Update frequency not set","File formats are open":"File formats are open","File formats are closed":"File formats are closed","Temporal coverage filled":"Temporal coverage filled","Temporal coverage not set":"Temporal coverage not set","Spatial coverage filled":"Spatial coverage filled","Spatial coverage not set":"Spatial coverage not set","Learn more about this indicator":"Learn more about this indicator","Resources documented":"Resources documented","Resources documentation missing":"Resources documentation missing"}');

},{}],"iW1Wy":[function(require,module,exports) {
module.exports = JSON.parse('{"reuses":"r\xe9utilisations","favourites":"favoris","Admin":"Admin","Reply to the discussion":"R\xe9pondre \xe0 la discussion","Comment":"Commentaire","Reply as":"R\xe9pondre en tant que","Submit":"Soumettre","Error sending response":"Erreur lors de l\'envoi de la r\xe9ponse","Discussion closed":"Discussion ferm\xe9e","messages":"messages","Reply":"R\xe9pondre","The discussion was closed by":"La discussion a \xe9t\xe9 close par","on":"le","Start a new discussion":"D\xe9marrer une nouvelle discussion","New discussion":"Nouvelle discussion","Title":"Titre","Message":"Message","You are seeing a specific discussion about this dataset":"Vous consultez une discussion sp\xe9cifique sur ce jeu de donn\xe9es","See all discussions about this dataset":"Voir toutes les discussions sur ce jeu de donn\xe9es","Discussion creation":"D\xe9but de discussion","Last reply":"Derni\xe8re r\xe9ponse","An error occurred while fetching discussions":"Une erreur est survenue lors de la r\xe9cup\xe9ration des discussions","An error occurred while fetching the discussion ":"Une erreur est survenue lors de la r\xe9cup\xe9ration de la discussion ","An error occurred while creating the discussion ":"Une erreur est survenue lors de la cr\xe9ation de la discussion ","There are no results for your search":"Aucun r\xe9sultat ne correspond \xe0 votre recherche","Search...":"Rechercher...","Organizations":"Organisations","Search an organization...":"Chercher une organisation...","Tags":"Mots cl\xe9s","Search a tag...":"Chercher un mot cl\xe9...","Licenses":"Licences","Search a license...":"Chercher une licence...","Formats":"Formats","Search a format...":"Chercher un format...","Search a granularity...":"Chercher une granularit\xe9...","Reset filters":"R\xe9initialiser les filtres","No dataset matching your query":"Nous n\u2019avons pas de jeu de donn\xe9es correspondant \xe0 votre requ\xeate","You can try to reset the filters to expand your search.":"Vous pouvez essayer de r\xe9initialiser les filtres pour agrandir votre champ de recherche.","No results found.":"Aucun r\xe9sultat.","Ask to join the organization as a producer":"Demander \xe0 rejoindre l\'organisation en tant que producteur","You can add some details here for your membership request":"Vous pouvez ajouter des d\xe9tails sur votre demande d\'adh\xe9sion","A request has been sent to the administrators":"Une demande a \xe9t\xe9 envoy\xe9e aux administrateurs","Error while requesting membership":"Erreur lors de la demande d\'adh\xe9sion","Read more":"Lire plus","Read less":"Lire moins","remove from favorites":"retirer des favoris","add to favorites":"ajouter aux favoris","Page":"Page {nb}","First page":"Premi\xe8re Page","Previous page":"Page pr\xe9c\xe9dente","Next page":"Page suivante","Last page":"Derni\xe8re page","X downloads":"{count} t\xe9l\xe9chargements","Nameless resource":"Ressource sans nom","See more details":"Voir plus de d\xe9tails","Preview":"Pr\xe9visualiser","Resource link":"Lien de la ressource","Download resource":"T\xe9l\xe9charger la ressource","URL":"URL","Permalink":"URL stable","Type":"Type","MIME Type":"Type MIME","Created on":"Cr\xe9\xe9e le","Modified on":"Modifi\xe9e le","Published on":"Publi\xe9e le","An error occurred while fetching resources":"Une erreur est survenue lors de la r\xe9cup\xe9ration des ressources","Edit resource":"Modifier la ressource","See schema":"Voir le sch\xe9ma","Associated schema":"Sch\xe9ma associ\xe9","This resource is associated to the schema ":"Cette ressource est associ\xe9e au sch\xe9ma "," this means that the producer reports that it adheres to the specification.":" ce qui signifie que le producteur a d\xe9clar\xe9 qu\'elle en respectait la sp\xe9cification.","Documentation":"Documentation","You can view the schema documentation, discover some context and recommendations for data producers.":"Vous pouvez consulter la documentation de ce sch\xe9ma, d\xe9couvrir le contexte et les recommandations destin\xe9es aux producteurs de donn\xe9es.","Read documentation":"Lire la documentation","Validation":"Validation","Resource validation based on a schema is a way to verify that the resource complies to the schema it is supposed to abide by. In case of errors, a validation report shows the errors found: wrongly named columns, non conform values, etc.":"La validation d\'une ressource par rapport \xe0 un sch\xe9ma consiste \xe0 v\xe9rifier que la ressource est bien conforme au sch\xe9ma qu\'elle est cens\xe9e respecter. En cas d\'erreurs, un rapport de validation indique les erreurs trouv\xe9es : colonnes mal nomm\xe9es, valeurs non conformes etc.","data.gouv.fr allows you to validate your files based on a schema and correct the possible errors.":"data.gouv.fr met \xe0 votre disposition un outil pour valider vos fichiers par rapport \xe0 un sch\xe9ma et corriger les \xe9ventuelles erreurs.","Validate resource":"Valider la ressource","Others resources":"Autres ressources","You can specify that a resource complies to a schema on your producer dashboard. Other resources complying with the schema are available on the platform.":"Il est possible de sp\xe9cifier qu\'une ressource respecte un sch\xe9ma depuis l\'espace d\'administration en tant que producteur. Plusieurs ressources respectant ce sch\xe9ma sont disponibles sur la plateforme.","See dataset linked to this schema":"Voir les jeux de donn\xe9es associ\xe9s \xe0 ce sch\xe9ma","About schemas":"\xc0 propos des sch\xe9mas","Data schemas allow to describe data models : what are the fields, how is data represented, what are the possible values. Discover how schemas improve data quality and use cases on ":"Les sch\xe9mas de donn\xe9es permettent de d\xe9crire des mod\xe8les de donn\xe9es : quels sont les diff\xe9rents champs, comment sont repr\xe9sent\xe9es les donn\xe9es, quelles sont les valeurs possibles. D\xe9couvrez comment les sch\xe9mas am\xe9liorent la qualit\xe9 des donn\xe9es et quels sont les cas d\'usages possibles sur ","Unavailable":"Indisponible","Close":"Fermer","Copy permalink":"Copier le lien vers la discussion","Discussions":"Discussions","Sort discussions by":"Trier les discussions par","Unfeature this content":"Ne plus mettre en avant ce contenu","Feature this content":"Mettre ce contenu en avant","Preview of resource X":"Pr\xe9visualisation de la ressource {title}","From":"Par","Updated on X":"Mis \xe0 jour le {date}","An error occurred while fetching schemas":"Une erreur est survenue lors de la r\xe9cup\xe9ration des sch\xe9mas","Search resources":"Rechercher dans les ressources","Search":"Recherche","No resources match your search.":"Aucun r\xe9sultat pour votre recherche.","Search {query} in {type}":"Rechercher \xab {query} \xbb dans les {type}","datasets":"jeux de donn\xe9es","organizations":"organisations","Start typing to search in X":"Commencez \xe0 taper pour rechercher parmi les {type}","Fields preceded by a star ({markup}) are required.":"Les champs pr\xe9c\xe9d\xe9s d\'une \xe9toile ({markup}) sont obligatoires.","{count} results":"{count} r\xe9sultats | {count} r\xe9sultat | {count} r\xe9sultats","Use tab (or arrow down) to move between suggestions":"Utiliser la tabulation (ou la fl\xe8che du bas) pour vous d\xe9placer entre les suggestions","{x} available suggestion":"{x} suggestions disponibles","Delete {t}":"Supprimer {t}","Delete":"Supprimer","Schema":"Schema","Search a schema...":"Chercher un sch\xe9ma...","Sort by:":"Trier par :","Relevance":"Pertinence","Filter results":"Filtrer les r\xe9sultats","Filters":"Filtres","All organizations":"Toutes les organisations","All tags":"Tous les mots-cl\xe9s","All formats":"Tous les formats","All licenses":"Toutes les licences","All granularities":"Toutes les granularit\xe9s","All schemas":"Tous les sch\xe9mas","Data schemas describe data models: what are the fields, how are data shown, what are the available values, etc. See schema.data.gouv.fr":"Les sch\xe9mas de donn\xe9es permettent de d\xe9crire des mod\xe8les de donn\xe9es : quels sont les diff\xe9rents champs, comment sont repr\xe9sent\xe9es les donn\xe9es, quelles sont les valeurs possibles etc. Voir schema.data.gouv.fr","Licenses define reuse rules for published datasets. See page data.gouv.fr/licences":"Les licences d\xe9finissent les r\xe8gles de r\xe9utilisation des jeux de donn\xe9es publi\xe9s. Voir la page data.gouv.fr/licences","Spatial coverage":"Couverture spatiale","Geographic areas covered by data and for which they are relevant.":"Zones g\xe9ographiques couvertes par les donn\xe9es et pour lesquelles elles sont pertinentes.","Search a spatial coverage...":"Rechercher une couverture spatiale...","All coverages":"Toutes les couvertures","Spatial granularity":"Granularit\xe9 spatiale","Finest level of geographic detail covered by data.":"Niveau de d\xe9tail g\xe9ographique le plus fin que peut couvrir les donn\xe9es.","Ex. 2022 presidential election":"Ex : \xe9lections pr\xe9sidentielles 2022","Private":"Priv\xe9","Updated on {date}":"Mis \xe0 jour le {date}","{n} favorites":"{n} favoris | {n} favori | {n} favoris","The identity of this public service is certified by {certifier}":"L\'identit\xe9 de ce service public est certifi\xe9e par {certifier}","{n} reuses":"{n} r\xe9utilisations | {n} r\xe9utilisation | {n} r\xe9utilisations","Metadata quality:":"Qualit\xe9 des m\xe9tadonn\xe9es","Data description filled":"Description des donn\xe9es renseign\xe9e","Data description empty":"Description des donn\xe9es non renseign\xe9e","License filled":"Licence renseign\xe9e","No license set":"Licence non renseign\xe9e","Update frequency followed":"Fr\xe9quence de mise \xe0 jour respect\xe9e","Update frequency not followed":"Fr\xe9quence de mise \xe0 jour non respect\xe9e","Update frequency not set":"Fr\xe9quence de mise \xe0 jour non renseign\xe9e","File formats are open":"Formats de fichiers standards","File formats are closed":"Formats de fichiers non standards","Temporal coverage filled":"Couverture temporelle renseign\xe9e","Temporal coverage not set":"Couverture temporelle non renseign\xe9e","Spatial coverage filled":"Couverture spatiale renseign\xe9e","Spatial coverage not set":"Couverture spatiale non renseign\xe9e","Learn more about this indicator":"En savoir plus sur cet indicateur","Resources documented":"Ressources document\xe9es","Resources documentation missing":"Documentation des ressources manquante"}');

},{}],"e3Nqi":[function(require,module,exports) {
module.exports = JSON.parse('{"reuses":"reutiliza","favourites":"favoritos","Admin":"Admin","Reply to the discussion":"Responder \xe0 discuss\xe3o","Comment":"Comente","Reply as":"Responder como","Submit":"Enviar","Error sending response":"Erro ao enviar resposta","Discussion closed":"Discuss\xe3o encerrada","messages":"mensagens","Reply":"Responder","The discussion was closed by":"A discuss\xe3o foi encerrada por","on":"sobre","Start a new discussion":"Iniciar uma nova discuss\xe3o","New discussion":"Nova discuss\xe3o","Title":"T\xedtulo","Message":"Mensagem","You are seeing a specific discussion about this dataset":"Voc\xea est\xe1 vendo uma discuss\xe3o espec\xedfica sobre este conjunto de dados","See all discussions about this dataset":"Veja todas as discuss\xf5es sobre este conjunto de dados","Discussion creation":"Cria\xe7\xe3o de discuss\xe3o","Last reply":"\xdaltima resposta","An error occurred while fetching discussions":"Ocorreu um erro ao buscar as discuss\xf5es","An error occurred while fetching the discussion ":"Ocorreu um erro ao buscar a discuss\xe3o ","An error occurred while creating the discussion ":"Ocorreu um erro ao criar a discuss\xe3o ","There are no results for your search":"N\xe3o h\xe1 resultados para sua busca","Search...":"Procurar...","Organizations":"Organiza\xe7\xf5es","Search an organization...":"Pesquisar uma organiza\xe7\xe3o...","Tags":"Tags","Search a tag...":"Pesquisar uma etiqueta...","Licenses":"Licen\xe7as","Search a license...":"Pesquisar uma licen\xe7a...","Formats":"Formatos","Search a format...":"Pesquisar um formato...","Search a granularity...":"Pesquisar uma granularidade...","Reset filters":"Redefinir filtros","No dataset matching your query":"Nenhum conjunto de dados corresponde \xe0 sua consulta","You can try to reset the filters to expand your search.":"Voc\xea pode tentar redefinir os filtros para expandir sua pesquisa.","No results found.":"Nenhum resultado encontrado.","Ask to join the organization as a producer":"Pe\xe7a para ingressar na organiza\xe7\xe3o como utilizador","You can add some details here for your membership request":"Voc\xea pode adicionar alguns detalhes aqui para sua solicita\xe7\xe3o de associa\xe7\xe3o","A request has been sent to the administrators":"Uma solicita\xe7\xe3o foi enviada aos administradores","Error while requesting membership":"Erro ao solicitar ades\xe3o","Read more":"Consulte mais informa\xe7\xe3o","Read less":"Leia menos","remove from favorites":"remover dos favoritos","add to favorites":"adicionar aos favoritos","Page":"P\xe1gina {nb}","First page":"Primeira p\xe1gina","Previous page":"P\xe1gina anterior","Next page":"Pr\xf3xima p\xe1gina","Last page":"\xdaltima p\xe1gina","X downloads":"{count} transfer\xeancias","Nameless resource":"Recurso sem nome","See more details":"Ver mais detalhes","Preview":"Visualiza\xe7\xe3o","Resource link":"Link do recurso","Download resource":"Baixar recurso","URL":"URL","Permalink":"URL stable","Type":"Tipo","MIME Type":"Type MIME","Created on":"Criado em","Modified on":"Modificado em","Published on":"Publicado em","An error occurred while fetching resources":"Ocorreu um erro ao buscar recursos","Edit resource":"Editar recurso","See schema":"See schema","Associated schema":"Esquema associado","This resource is associated to the schema ":"Este recurso est\xe1 associado ao esquema "," this means that the producer reports that it adheres to the specification.":" isso significa que o utilizador informa que est\xe1 de acordo com a especifica\xe7\xe3o.","Documentation":"Documenta\xe7\xe3o","You can view the schema documentation, discover some context and recommendations for data producers.":"Voc\xea pode visualizar a documenta\xe7\xe3o do esquema, descobrir algum contexto e recomenda\xe7\xf5es para utilizador de dados.","Read documentation":"Leia a documenta\xe7\xe3o","Validation":"Valida\xe7\xe3o","Resource validation based on a schema is a way to verify that the resource complies to the schema it is supposed to abide by. In case of errors, a validation report shows the errors found: wrongly named columns, non conform values, etc.":"A valida\xe7\xe3o de recursos com base em um esquema \xe9 uma maneira de verificar se o recurso est\xe1 em conformidade com o esquema ao qual deve obedecer. Em caso de erros, um relat\xf3rio de valida\xe7\xe3o mostra os erros encontrados: colunas com nomes incorretos, valores n\xe3o conformes, etc.","data.gouv.pt allows you to validate your files based on a schema and correct the possible errors.":"data.gouv.pt permite validar seus arquivos com base em um esquema e corrigir os poss\xedveis erros.","Validate resource":"Validar recurso","Others resources":"Outros recursos","You can specify that a resource complies to a schema on your producer dashboard. Other resources complying with the schema are available on the platform.":"Voc\xea pode especificar que um recurso est\xe1 em conformidade com um esquema em seu painel do utilizador. Outros recursos compat\xedveis com o esquema est\xe3o dispon\xedveis na plataforma.","See dataset linked to this schema":"Veja o conjunto de dados vinculado a este esquema","About schemas":"Sobre esquemas","Data schemas allow to describe data models : what are the fields, how is data represented, what are the possible values. Discover how schemas improve data quality and use cases on ":"Os esquemas de dados permitem descrever modelos de dados: quais s\xe3o os campos, como os dados s\xe3o representados, quais s\xe3o os valores poss\xedveis. Descubra como os esquemas melhoram a qualidade dos dados e os casos de uso em ","Unavailable":"Indispon\xedvel","Close":"Fechado","Copy permalink":"Copiar link ","Discussions":"Discuss\xf5es","Sort discussions by":"Classificar discuss\xf5es por","Unfeature this content":"Excluir este conte\xfado","Feature this content":"Apresentar este conte\xfado","Preview of resource X":"Visualiza\xe7\xe3o do recurso {title}","From":"A partir de","Updated on X":"Atualizado em {date}","An error occurred while fetching schemas":"Ocorreu um erro ao buscar os esquemas","Search resources":"Pesquisar recursos","Search":"Procurar","No resources match your search.":"Nenhum recurso corresponde \xe0 sua pesquisa.","Search {query} in {type}":"Procurar \xab {query} \xbb dentro {type}","datasets":"conjuntos de dados","organizations":"organiza\xe7\xf5es","Start typing to search in X":"Comece a digitar para pesquisar {type}","Fields preceded by a star ({markup}) are required.":"Campos precedidos por uma estrela ({markup}) \xe9 requerido.","{count} results":"{count} resultados | {count} resultados | {count} resultados","Use tab (or arrow down) to move between suggestions":"Use a guia (ou a seta para baixo) para se mover entre as sugest\xf5es","{x} available suggestion":"{x} sugest\xe3o dispon\xedvel","Delete {t}":"Excluir {t}","Delete":"Excluir","Schema":"Esquema","Search a schema...":"Pesquisar um esquema...","Sort by:":"Ordenar por :","Relevance":"Relev\xe2ncia","Filter results":"Filtrar resultados","Filters":"Filtros","All organizations":"Todas as organiza\xe7\xf5es","All tags":"Todas as tags","All formats":"Todos os formatos","All licenses":"Todas as licen\xe7as","All granularities":"Todas as granularidades","All schemas":"Todos os esquemas","Data schemas describe data models: what are the fields, how are data shown, what are the available values, etc. See schema.data.gouv.pt":"Os esquemas de dados descrevem os modelos de dados: quais s\xe3o os campos, como os dados s\xe3o mostrados, quais s\xe3o os valores dispon\xedveis, etc. Veja schema.data.gouv.pt","Licenses define reuse rules for published datasets. See page data.gouv.pt/licences":"As licen\xe7as definem regras de reutiliza\xe7\xe3o para conjuntos de dados publicados. Consulte a p\xe1gina data.gouv.pt/licences","Spatial coverage":"Cobertura espacial","Geographic areas covered by data and for which they are relevant.":"\xc1reas geogr\xe1ficas abrangidas pelos dados e para as quais s\xe3o relevantes.","Search a spatial coverage...":"Pesquise uma cobertura espacial...","All coverages":"Todas as coberturas","Spatial granularity":"Granularidade espacial","Finest level of geographic detail covered by data.":"N\xedvel mais fino de detalhe geogr\xe1fico coberto pelos dados.","Ex. 2022 presidential election":"Ex. elei\xe7\xe3o presidencial de 2022","Private":"Privado","Updated on {date}":"Atualizado em {date}","{n} favorites":"{n} favoritos | {n} favoritos | {n} favoritos","The identity of this public service is certified by {certifier}":"A identidade deste servi\xe7o p\xfablico \xe9 certificada pela {certifier}","{n} reuses":"{n} reutiliza | {n} reutiliza | {n} reutiliza","Metadata quality:":"Qualidade de metadados","Data description filled":"Descri\xe7\xe3o dos dados preenchida","Data description empty":"Descri\xe7\xe3o dos dados vazia","License filled":"Licen\xe7a preenchida","No license set":"Nenhuma licen\xe7a definida","Update frequency followed":"Frequ\xeancia de atualiza\xe7\xe3o seguida","Update frequency not followed":"Frequ\xeancia de atualiza\xe7\xe3o n\xe3o seguida","Update frequency not set":"Frequ\xeancia de atualiza\xe7\xe3o n\xe3o definida","File formats are open":"Os formatos de arquivo s\xe3o abertos","File formats are closed":"Os formatos de arquivo s\xe3o fechados","Temporal coverage filled":"Cobertura temporal preenchida","Temporal coverage not set":"Cobertura temporal n\xe3o definida","Spatial coverage filled":"Cobertura espacial preenchida","Spatial coverage not set":"Cobertura espacial n\xe3o definida","Learn more about this indicator":"Saiba mais sobre este indicador","Resources documented":"Recursos documentados","Resources documentation missing":"Documenta\xe7\xe3o de recursos ausente","data.gouv.fr allows you to validate your files based on a schema and correct the possible errors.":"","Data schemas describe data models: what are the fields, how are data shown, what are the available values, etc. See schema.data.gouv.fr":"","Licenses define reuse rules for published datasets. See page data.gouv.fr/licences":""}');

},{}],"1QLN3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
let script;
let initialize = ()=>{
    script = require("script:./pagination.vue");
    if (script.__esModule) script = script.default;
    script.render = require("template:./pagination.vue").render;
    require("custom:./pagination.vue").default(script);
    script.__scopeId = "data-v-d162b7";
    script.__file = "/home/babel/Documents/workspace/udata_workspace/udata-front/theme/js/components/pagination/pagination.vue";
};
initialize();
if (module.hot) {
    script.__hmrId = "d162b7-hmr";
    module.hot.accept(()=>{
        setTimeout(()=>{
            initialize();
            if (!__VUE_HMR_RUNTIME__.createRecord("d162b7-hmr", script)) __VUE_HMR_RUNTIME__.reload("d162b7-hmr", script);
        }, 0);
    });
}
exports.default = script;

},{"script:./pagination.vue":"39c0x","template:./pagination.vue":"98nSB","custom:./pagination.vue":"dWBnr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"39c0x":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _pagination = require("../vanilla/pagination");
var _paginationDefault = parcelHelpers.interopDefault(_pagination);
exports.default = {
    props: {
        page: {
            type: Number,
            default: 0
        },
        changePage: {
            type: Function,
            required: true
        },
        pageSize: {
            type: Number,
            default: 20
        },
        totalResults: {
            type: Number,
            required: true
        }
    },
    data () {
        return {
            pagesAround: 3
        };
    },
    computed: {
        pageCount () {
            return Math.ceil(this.totalResults / this.pageSize);
        },
        visiblePages () {
            return (0, _paginationDefault.default)(this.page, this.pageCount);
        }
    },
    methods: {
        /**
    * @param {number} index
    */ _onClick (index) {
            if (index !== this.page) return this.changePage(index);
        },
        nextPage () {
            const index = this.page + 1;
            if (index <= this.pageCount) return this.changePage(index);
        },
        previousPage () {
            const index = this.page - 1;
            if (index > 0) return this.changePage(index);
        }
    }
};

},{"../vanilla/pagination":"CjxIx","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"CjxIx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "PAGES_AROUND", ()=>PAGES_AROUND);
const PAGES_AROUND = 3;
function range(size, startAt = 1) {
    return [
        ...Array(size).keys()
    ].map((i)=>i + startAt);
}
function getPages(pageCount) {
    return range(pageCount);
}
function getPagesShown(pages, currentPage) {
    return Math.min(PAGES_AROUND * 2 + 1, pages.length - 2, PAGES_AROUND + currentPage - 1, PAGES_AROUND + pages.length - currentPage // if we're close to the last page, we'll show less than 3 pages on the right
    );
}
function getStartPage(currentPage) {
    return Math.max(currentPage - PAGES_AROUND, 2 // we don't want to start below page 2
    );
}
function getVisiblePages(currentPage, pageCount) {
    const pages = getPages(pageCount);
    const start = getStartPage(currentPage);
    if (pageCount <= 2) return [];
    let pagination = range(getPagesShown(pages, currentPage), start);
    if (!pagination.includes(2)) pagination.unshift(null);
    if (!pagination.includes(pageCount - 1)) pagination.push(null);
    return pagination;
}
exports.default = getVisiblePages;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"98nSB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "render", ()=>render);
var _vue = require("vue");
const _hoisted_1 = {
    role: "navigation",
    class: "fr-pagination fr-pagination--centered",
    "aria-label": "Pagination"
};
const _hoisted_2 = {
    class: "fr-pagination__list"
};
const _hoisted_3 = [
    "href"
];
const _hoisted_4 = [
    "href"
];
const _hoisted_5 = [
    "aria-current",
    "href",
    "title"
];
const _hoisted_6 = [
    "aria-current",
    "href",
    "title",
    "onClick"
];
const _hoisted_7 = {
    key: 1,
    class: "fr-pagination__link fr-hidden fr-unhidden-lg"
};
const _hoisted_8 = [
    "aria-current",
    "href",
    "title"
];
const _hoisted_9 = [
    "href"
];
const _hoisted_10 = [
    "href"
];
function render(_ctx, _cache, $props, $setup, $data, $options) {
    return (0, _vue.openBlock)(), (0, _vue.createElementBlock)("nav", _hoisted_1, [
        (0, _vue.createElementVNode)("ul", _hoisted_2, [
            (0, _vue.createElementVNode)("li", null, [
                (0, _vue.createElementVNode)("a", {
                    href: $props.page === 1 ? undefined : "#",
                    class: "fr-pagination__link fr-pagination__link--first",
                    onClick: _cache[0] || (_cache[0] = (0, _vue.withModifiers)(($event)=>$options._onClick(1), [
                        "prevent"
                    ]))
                }, (0, _vue.toDisplayString)(_ctx.$t("First page")), 9 /* TEXT, PROPS */ , _hoisted_3)
            ]),
            (0, _vue.createElementVNode)("li", null, [
                (0, _vue.createElementVNode)("a", {
                    href: $props.page === 1 ? undefined : "#",
                    class: "fr-pagination__link fr-pagination__link--prev fr-pagination__link--lg-label",
                    onClick: _cache[1] || (_cache[1] = (0, _vue.withModifiers)((...args)=>$options.previousPage && $options.previousPage(...args), [
                        "prevent"
                    ]))
                }, (0, _vue.toDisplayString)(_ctx.$t("Previous page")), 9 /* TEXT, PROPS */ , _hoisted_4)
            ]),
            (0, _vue.createElementVNode)("li", null, [
                (0, _vue.createElementVNode)("a", {
                    "aria-current": $props.page === 1 ? "page" : undefined,
                    href: $props.page === 1 ? undefined : "#",
                    class: (0, _vue.normalizeClass)([
                        "fr-pagination__link",
                        {
                            "fr-hidden fr-unhidden-sm": $props.page > 1
                        }
                    ]),
                    title: _ctx.$t("Page", {
                        nb: 1
                    }),
                    onClick: _cache[2] || (_cache[2] = (0, _vue.withModifiers)(($event)=>$options._onClick(1), [
                        "prevent"
                    ]))
                }, " 1 ", 10 /* CLASS, PROPS */ , _hoisted_5)
            ]),
            ((0, _vue.openBlock)(true), (0, _vue.createElementBlock)((0, _vue.Fragment), null, (0, _vue.renderList)($options.visiblePages, (index)=>{
                return (0, _vue.openBlock)(), (0, _vue.createElementBlock)("li", null, [
                    index ? ((0, _vue.openBlock)(), (0, _vue.createElementBlock)("a", {
                        key: 0,
                        class: (0, _vue.normalizeClass)([
                            "fr-pagination__link",
                            {
                                "fr-hidden fr-unhidden-lg": index < $props.page - 1 || index > $props.page + 1
                            }
                        ]),
                        "aria-current": $props.page === index ? "page" : undefined,
                        href: $props.page === index ? undefined : "#",
                        title: _ctx.$t("Page", {
                            nb: index
                        }),
                        onClick: (0, _vue.withModifiers)(($event)=>$options._onClick(index), [
                            "prevent"
                        ])
                    }, (0, _vue.toDisplayString)(index), 11 /* TEXT, CLASS, PROPS */ , _hoisted_6)) : ((0, _vue.openBlock)(), (0, _vue.createElementBlock)("a", _hoisted_7, " \u2026 "))
                ]);
            }), 256 /* UNKEYED_FRAGMENT */ )),
            (0, _vue.createElementVNode)("li", null, [
                (0, _vue.createElementVNode)("a", {
                    class: "fr-pagination__link",
                    "aria-current": $props.page === $options.pageCount ? "page" : undefined,
                    href: $props.page === $options.pageCount ? undefined : "#",
                    title: _ctx.$t("Page", {
                        nb: $options.pageCount
                    }),
                    onClick: _cache[3] || (_cache[3] = (0, _vue.withModifiers)(($event)=>$options._onClick($options.pageCount), [
                        "prevent"
                    ]))
                }, (0, _vue.toDisplayString)($options.pageCount), 9 /* TEXT, PROPS */ , _hoisted_8)
            ]),
            (0, _vue.createElementVNode)("li", null, [
                (0, _vue.createElementVNode)("a", {
                    class: "fr-pagination__link fr-pagination__link--next fr-pagination__link--lg-label",
                    href: $props.page === $options.pageCount ? undefined : "#",
                    onClick: _cache[4] || (_cache[4] = (0, _vue.withModifiers)((...args)=>$options.nextPage && $options.nextPage(...args), [
                        "prevent"
                    ]))
                }, (0, _vue.toDisplayString)(_ctx.$t("Next page")), 9 /* TEXT, PROPS */ , _hoisted_9)
            ]),
            (0, _vue.createElementVNode)("li", null, [
                (0, _vue.createElementVNode)("a", {
                    class: "fr-pagination__link fr-pagination__link--last",
                    href: $props.page === $options.pageCount ? undefined : "#",
                    onClick: _cache[5] || (_cache[5] = (0, _vue.withModifiers)(($event)=>$options._onClick($options.pageCount), [
                        "prevent"
                    ]))
                }, (0, _vue.toDisplayString)(_ctx.$t("Last page")), 9 /* TEXT, PROPS */ , _hoisted_10)
            ])
        ])
    ]);
}
if (module.hot) module.hot.accept(()=>{
    __VUE_HMR_RUNTIME__.rerender("d162b7-hmr", render);
});

},{"vue":"hRjhg","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dWBnr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
let NOOP = ()=>{};
exports.default = (script)=>{};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"l2HxE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
let script;
let initialize = ()=>{
    script = require("script:./threads-create.vue");
    if (script.__esModule) script = script.default;
    script.render = require("template:./threads-create.vue").render;
    require("custom:./threads-create.vue").default(script);
    script.__scopeId = "data-v-90d6d1";
    script.__file = "/home/babel/Documents/workspace/udata_workspace/udata-front/theme/js/components/discussions/threads-create.vue";
};
initialize();
if (module.hot) {
    script.__hmrId = "90d6d1-hmr";
    module.hot.accept(()=>{
        setTimeout(()=>{
            initialize();
            if (!__VUE_HMR_RUNTIME__.createRecord("90d6d1-hmr", script)) __VUE_HMR_RUNTIME__.reload("90d6d1-hmr", script);
        }, 0);
    });
}
exports.default = script;

},{"script:./threads-create.vue":"16ykl","template:./threads-create.vue":"lW3ow","custom:./threads-create.vue":"cn9Rg","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"16ykl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _config = require("../../config");
var _configDefault = parcelHelpers.interopDefault(_config);
var _author = require("./author");
var _authorDefault = parcelHelpers.interopDefault(_author);
var _threadsCreateButton = require("./threads-create-button");
var _threadsCreateButtonDefault = parcelHelpers.interopDefault(_threadsCreateButton);
exports.default = {
    components: {
        ThreadsCreateButton: (0, _threadsCreateButtonDefault.default),
        Author: (0, _authorDefault.default)
    },
    data () {
        return {
            loading: false,
            showForm: false,
            title: "",
            comment: "",
            user: (0, _configDefault.default).user
        };
    },
    props: {
        showCreateButton: {
            type: Boolean,
            default: false
        },
        subjectId: String,
        subjectClass: String,
        onSubmit: Function
    },
    methods: {
        displayForm () {
            this.$auth();
            this.showForm = true;
        },
        hideForm () {
            this.showForm = false;
        },
        submit () {
            const vm = this;
            this.loading = true;
            const values = {
                title: this.title,
                comment: this.comment,
                subject: {
                    id: this.subjectId,
                    class: this.subjectClass
                }
            };
            if (this.onSubmit) this.onSubmit(values).finally(()=>{
                vm.loading = false;
                vm.showForm = false;
                vm.title = vm.comment = "";
            });
        }
    }
};

},{"../../config":"G7A2j","./author":"hBlLm","./threads-create-button":"gKqmg","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hBlLm":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
let script;
let initialize = ()=>{
    script = require("script:./author.vue");
    if (script.__esModule) script = script.default;
    script.render = require("template:./author.vue").render;
    require("custom:./author.vue").default(script);
    script.__scopeId = "data-v-ce04a6";
    script.__file = "/home/babel/Documents/workspace/udata_workspace/udata-front/theme/js/components/discussions/author.vue";
};
initialize();
if (module.hot) {
    script.__hmrId = "ce04a6-hmr";
    module.hot.accept(()=>{
        setTimeout(()=>{
            initialize();
            if (!__VUE_HMR_RUNTIME__.createRecord("ce04a6-hmr", script)) __VUE_HMR_RUNTIME__.reload("ce04a6-hmr", script);
        }, 0);
    });
}
exports.default = script;

},{"script:./author.vue":"fNpvW","template:./author.vue":"9aBCR","custom:./author.vue":"aKWuD","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fNpvW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    props: {
        author: Object,
        badge: Boolean
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9aBCR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "render", ()=>render);
var _vue = require("vue");
const _hoisted_1 = {
    class: "fr-text--sm fr-mb-0"
};
const _hoisted_2 = {
    key: 0,
    class: "fr-badge fr-ml-3v"
};
function render(_ctx, _cache, $props, $setup, $data, $options) {
    return (0, _vue.openBlock)(), (0, _vue.createElementBlock)("span", _hoisted_1, [
        (0, _vue.createTextVNode)((0, _vue.toDisplayString)($props.author.first_name + " " + $props.author.last_name) + " ", 1 /* TEXT */ ),
        $props.badge ? ((0, _vue.openBlock)(), (0, _vue.createElementBlock)("span", _hoisted_2, (0, _vue.toDisplayString)(_ctx.$t("Admin")), 1 /* TEXT */ )) : (0, _vue.createCommentVNode)("v-if", true)
    ]);
}
if (module.hot) module.hot.accept(()=>{
    __VUE_HMR_RUNTIME__.rerender("ce04a6-hmr", render);
});

},{"vue":"hRjhg","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aKWuD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
let NOOP = ()=>{};
exports.default = (script)=>{};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gKqmg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
let script;
let initialize = ()=>{
    script = require("script:./threads-create-button.vue");
    if (script.__esModule) script = script.default;
    script.render = require("template:./threads-create-button.vue").render;
    require("custom:./threads-create-button.vue").default(script);
    script.__scopeId = "data-v-7c69f9";
    script.__file = "/home/babel/Documents/workspace/udata_workspace/udata-front/theme/js/components/discussions/threads-create-button.vue";
};
initialize();
if (module.hot) {
    script.__hmrId = "7c69f9-hmr";
    module.hot.accept(()=>{
        setTimeout(()=>{
            initialize();
            if (!__VUE_HMR_RUNTIME__.createRecord("7c69f9-hmr", script)) __VUE_HMR_RUNTIME__.reload("7c69f9-hmr", script);
        }, 0);
    });
}
exports.default = script;

},{"script:./threads-create-button.vue":"1h3xV","template:./threads-create-button.vue":"fuxSY","custom:./threads-create-button.vue":"lGhMO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1h3xV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _vue = require("vue");
var _eventbus = require("../../plugins/eventbus");
exports.default = (0, _vue.defineComponent)({
    props: {
        onClick: {
            type: Function
        }
    },
    methods: {
        click () {
            return this.onClick ? this.onClick() : this.$bus.emit((0, _eventbus.DISCUSSIONS_START_THREAD));
        }
    }
});

},{"vue":"hRjhg","../../plugins/eventbus":"6CYPj","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6CYPj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DISCUSSIONS_START_THREAD", ()=>DISCUSSIONS_START_THREAD);
parcelHelpers.export(exports, "RESOURCES_SEARCH", ()=>RESOURCES_SEARCH);
parcelHelpers.export(exports, "RESOURCES_SEARCH_RESULTS_UPDATED", ()=>RESOURCES_SEARCH_RESULTS_UPDATED);
parcelHelpers.export(exports, "RESOURCES_SEARCH_RESULTS_TOTAL", ()=>RESOURCES_SEARCH_RESULTS_TOTAL);
parcelHelpers.export(exports, "bus", ()=>bus);
parcelHelpers.export(exports, "install", ()=>install);
/*
---
name: Events
category: 6 - Technical
---

# Events

Events are dispatched in different parts of the app to allow component interactions or even interaction between multiple vue instances.

Our emitter is available in instance as `$bus` or directly by importing `eventbus.js` file.
It allows us to listen to all events or to a single event type.

```listen.js
import {bus} from "../../plugins/eventbus";
bus.on("*", (type, e) => console.log(type, e));
bus.on("someType", (e) => console.log(e));

// or, inside a component
this.$bus.on("*", (type, e) => console.log(type, e));
this.$bus.on("someType", (e) => console.log(e));
```

## Dispatch event

A new event can be dispatched with the dispatch method.

```listen.js
import {bus} from "../../plugins/eventbus";
bus.dispatch("someType", "someValue");

// or, inside a component
this.$bus.dispatch("someType", "someValue");
```

## Event list

The following events are used :

Type | Parameter | Emitted
--- | --- | ---
`discussions.startThread` | none | when user want to start a new discussion thread
`suggest.startSearch` | none | when user want to start a new suggest search
`resources.search` | search input value | when a new resource search is submitted
`resources.search.results.updated` | {type: the resource type <br/> count : the number of resources for this type} | when search results are received from API
`resources.search.results.total` | total of search results | when search count are received from event `resources.search.results.updated`

*/ var _mitt = require("mitt");
var _mittDefault = parcelHelpers.interopDefault(_mitt);
const DISCUSSIONS_START_THREAD = "discussions.startThread";
const RESOURCES_SEARCH = "resources.search";
const RESOURCES_SEARCH_RESULTS_UPDATED = "resources.search.results.updated";
const RESOURCES_SEARCH_RESULTS_TOTAL = "resources.search.results.total";
const bus = (0, _mittDefault.default)();
const install = (app)=>{
    app.config.globalProperties.$bus = bus;
};
exports.default = install;

},{"mitt":"8Ql8z","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8Ql8z":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function(n1) {
    return {
        all: n1 = n1 || new Map,
        on: function(t, e) {
            var i = n1.get(t);
            i ? i.push(e) : n1.set(t, [
                e
            ]);
        },
        off: function(t, e) {
            var i = n1.get(t);
            i && (e ? i.splice(i.indexOf(e) >>> 0, 1) : n1.set(t, []));
        },
        emit: function(t, e) {
            var i = n1.get(t);
            i && i.slice().map(function(n) {
                n(e);
            }), (i = n1.get("*")) && i.slice().map(function(n) {
                n(t, e);
            });
        }
    };
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fuxSY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "render", ()=>render);
var _vue = require("vue");
function render(_ctx, _cache, $props, $setup, $data, $options) {
    return (0, _vue.openBlock)(), (0, _vue.createElementBlock)("button", {
        class: "fr-btn fr-btn--secondary fr-btn--secondary-grey-500 fr-icon-add-line fr-btn--icon-left",
        onClick: _cache[0] || (_cache[0] = (0, _vue.withModifiers)((...args)=>_ctx.click && _ctx.click(...args), [
            "prevent"
        ]))
    }, (0, _vue.toDisplayString)(_ctx.$t("Start a new discussion")), 1 /* TEXT */ );
}
if (module.hot) module.hot.accept(()=>{
    __VUE_HMR_RUNTIME__.rerender("7c69f9-hmr", render);
});

},{"vue":"hRjhg","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lGhMO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
let NOOP = ()=>{};
exports.default = (script)=>{};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lW3ow":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "render", ()=>render);
var _vue = require("vue");
const _hoisted_1 = {
    class: "thread-create fr-mt-2w"
};
const _hoisted_2 = {
    key: 1,
    class: "bg-contrast-grey"
};
const _hoisted_3 = {
    class: "fr-grid-row fr-grid-row--middle fr-py-2w fr-px-3w"
};
const _hoisted_4 = {
    class: "fr-col fr-h6 fr-mb-0"
};
const _hoisted_5 = {
    class: "thread-comment fr-pb-3w fr-px-3w"
};
const _hoisted_6 = /*#__PURE__*/ (0, _vue.createElementVNode)("span", {
    class: "required-field-star"
}, "*", -1 /* HOISTED */ );
const _hoisted_7 = {
    class: "fr-input-group"
};
const _hoisted_8 = {
    for: "thread-title",
    class: "fr-label required"
};
const _hoisted_9 = [
    "placeholder"
];
const _hoisted_10 = {
    class: "fr-input-group"
};
const _hoisted_11 = {
    for: "thread-comment",
    class: "fr-label required"
};
const _hoisted_12 = [
    "placeholder"
];
const _hoisted_13 = {
    class: "fr-grid-row justify-between fr-grid-row--middle"
};
const _hoisted_14 = {
    class: "text-mention-grey fr-text--sm fr-mb-0"
};
const _hoisted_15 = [
    "value"
];
function render(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_ThreadsCreateButton = (0, _vue.resolveComponent)("ThreadsCreateButton");
    const _component_i18n_t = (0, _vue.resolveComponent)("i18n-t");
    const _component_Author = (0, _vue.resolveComponent)("Author");
    return (0, _vue.openBlock)(), (0, _vue.createElementBlock)("div", _hoisted_1, [
        $props.showCreateButton && !$data.showForm ? ((0, _vue.openBlock)(), (0, _vue.createBlock)(_component_ThreadsCreateButton, {
            key: 0,
            onClick: $options.displayForm
        }, null, 8 /* PROPS */ , [
            "onClick"
        ])) : (0, _vue.createCommentVNode)("v-if", true),
        $data.showForm ? ((0, _vue.openBlock)(), (0, _vue.createElementBlock)("div", _hoisted_2, [
            (0, _vue.createElementVNode)("div", _hoisted_3, [
                (0, _vue.createElementVNode)("div", _hoisted_4, (0, _vue.toDisplayString)(_ctx.$t("New discussion")), 1 /* TEXT */ ),
                (0, _vue.createElementVNode)("div", null, [
                    (0, _vue.createElementVNode)("button", {
                        class: "fr-link--close fr-link text-grey-500 fr-mr-0",
                        onClick: _cache[0] || (_cache[0] = (...args)=>$options.hideForm && $options.hideForm(...args))
                    }, (0, _vue.toDisplayString)(_ctx.$t("Close")), 1 /* TEXT */ )
                ])
            ]),
            (0, _vue.createElementVNode)("div", _hoisted_5, [
                (0, _vue.createElementVNode)("form", {
                    class: "form fr-p-0",
                    onSubmit: _cache[3] || (_cache[3] = (0, _vue.withModifiers)((...args)=>$options.submit && $options.submit(...args), [
                        "prevent"
                    ]))
                }, [
                    (0, _vue.createVNode)(_component_i18n_t, {
                        keypath: "Fields preceded by a star ({markup}) are required.",
                        tag: "p",
                        class: "fr-mt-0 fr-mb-1w fr-text--xs",
                        scope: "global"
                    }, {
                        markup: (0, _vue.withCtx)(()=>[
                                _hoisted_6
                            ]),
                        _: 1 /* STABLE */ 
                    }),
                    (0, _vue.createElementVNode)("div", _hoisted_7, [
                        (0, _vue.createElementVNode)("label", _hoisted_8, (0, _vue.toDisplayString)(_ctx.$t("Title")), 1 /* TEXT */ ),
                        (0, _vue.withDirectives)((0, _vue.createElementVNode)("input", {
                            class: "fr-input",
                            type: "text",
                            id: "thread-title",
                            "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event)=>$data.title = $event),
                            placeholder: _ctx.$t("Title"),
                            required: "required"
                        }, null, 8 /* PROPS */ , _hoisted_9), [
                            [
                                (0, _vue.vModelText),
                                $data.title
                            ]
                        ])
                    ]),
                    (0, _vue.createElementVNode)("div", _hoisted_10, [
                        (0, _vue.createElementVNode)("label", _hoisted_11, (0, _vue.toDisplayString)(_ctx.$t("Message")), 1 /* TEXT */ ),
                        (0, _vue.withDirectives)((0, _vue.createElementVNode)("textarea", {
                            id: "thread-comment",
                            "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event)=>$data.comment = $event),
                            placeholder: _ctx.$t("Comment"),
                            class: "fr-input",
                            required: "required"
                        }, null, 8 /* PROPS */ , _hoisted_12), [
                            [
                                (0, _vue.vModelText),
                                $data.comment
                            ]
                        ])
                    ]),
                    (0, _vue.createElementVNode)("footer", _hoisted_13, [
                        (0, _vue.createElementVNode)("span", _hoisted_14, [
                            (0, _vue.createTextVNode)((0, _vue.toDisplayString)(_ctx.$t("Reply as")) + " ", 1 /* TEXT */ ),
                            (0, _vue.createVNode)(_component_Author, {
                                author: $data.user
                            }, null, 8 /* PROPS */ , [
                                "author"
                            ])
                        ]),
                        (0, _vue.createElementVNode)("input", {
                            type: "submit",
                            value: _ctx.$t("Submit"),
                            class: "fr-btn fr-btn--secondary fr-btn--secondary-grey-500"
                        }, null, 8 /* PROPS */ , _hoisted_15)
                    ])
                ], 32 /* HYDRATE_EVENTS */ )
            ])
        ])) : (0, _vue.createCommentVNode)("v-if", true)
    ]);
}
if (module.hot) module.hot.accept(()=>{
    __VUE_HMR_RUNTIME__.rerender("90d6d1-hmr", render);
});

},{"vue":"hRjhg","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cn9Rg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
let NOOP = ()=>{};
exports.default = (script)=>{};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1Ushq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
let script;
let initialize = ()=>{
    script = require("script:./thread.vue");
    if (script.__esModule) script = script.default;
    script.render = require("template:./thread.vue").render;
    require("custom:./thread.vue").default(script);
    script.__scopeId = "data-v-997188";
    script.__file = "/home/babel/Documents/workspace/udata_workspace/udata-front/theme/js/components/discussions/thread.vue";
};
initialize();
if (module.hot) {
    script.__hmrId = "997188-hmr";
    module.hot.accept(()=>{
        setTimeout(()=>{
            initialize();
            if (!__VUE_HMR_RUNTIME__.createRecord("997188-hmr", script)) __VUE_HMR_RUNTIME__.reload("997188-hmr", script);
        }, 0);
    });
}
exports.default = script;

},{"script:./thread.vue":"aYa18","template:./thread.vue":"fTRq1","custom:./thread.vue":"9gOqq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aYa18":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _threadReplyVue = require("./thread-reply.vue");
var _threadReplyVueDefault = parcelHelpers.interopDefault(_threadReplyVue);
var _avatarVue = require("./avatar.vue");
var _avatarVueDefault = parcelHelpers.interopDefault(_avatarVue);
var _authorVue = require("./author.vue");
var _authorVueDefault = parcelHelpers.interopDefault(_authorVue);
var _config = require("../../config");
var _configDefault = parcelHelpers.interopDefault(_config);
var _vue = require("vue");
exports.default = (0, _vue.defineComponent)({
    inheritAttrs: false,
    components: {
        "thread-reply": (0, _threadReplyVueDefault.default),
        Avatar: (0, _avatarVueDefault.default),
        Author: (0, _authorVueDefault.default)
    },
    props: {
        id: String,
        discussion: Array,
        title: String,
        url: String,
        closed: String,
        closed_by: Object
    },
    data () {
        return {
            showForm: false,
            updatedDiscussion: null,
            collapsed: true,
            readOnlyEnabled: (0, _configDefault.default).read_only_enabled
        };
    },
    computed: {
        _discussion () {
            // Discussion updates are saved locally only
            // This is the logic to get either the original discussion or the updated one
            return this.updatedDiscussion ? this.updatedDiscussion : this.discussion;
        },
        _collapsed () {
            return this.closed && this.collapsed;
        }
    },
    methods: {
        discussionUrl (id, link = false) {
            return (link ? "#" : "") + "discussion-" + id;
        },
        discussionExternalUrl (id) {
            let hash = this.discussionUrl(id, true);
            return window.location.origin + window.location.pathname + hash;
        },
        replyToThread (values) {
            return this.$api.post("/discussions/" + this.id + "/", values).then((resp)=>resp.data).then((updatedDiscussion)=>{
                this.updatedDiscussion = updatedDiscussion.discussion;
                this.showForm = false;
            });
        },
        displayForm () {
            this.$auth();
            this.showForm = true;
        }
    }
});

},{"./thread-reply.vue":"3V8zn","./avatar.vue":"6G61T","./author.vue":"hBlLm","../../config":"G7A2j","vue":"hRjhg","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3V8zn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
let script;
let initialize = ()=>{
    script = require("script:./thread-reply.vue");
    if (script.__esModule) script = script.default;
    script.render = require("template:./thread-reply.vue").render;
    require("custom:./thread-reply.vue").default(script);
    script.__scopeId = "data-v-138b46";
    script.__file = "/home/babel/Documents/workspace/udata_workspace/udata-front/theme/js/components/discussions/thread-reply.vue";
};
initialize();
if (module.hot) {
    script.__hmrId = "138b46-hmr";
    module.hot.accept(()=>{
        setTimeout(()=>{
            initialize();
            if (!__VUE_HMR_RUNTIME__.createRecord("138b46-hmr", script)) __VUE_HMR_RUNTIME__.reload("138b46-hmr", script);
        }, 0);
    });
}
exports.default = script;

},{"script:./thread-reply.vue":"j5wqh","template:./thread-reply.vue":"iXMNi","custom:./thread-reply.vue":"5q8oE","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"j5wqh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _config = require("../../config");
var _configDefault = parcelHelpers.interopDefault(_config);
var _authorVue = require("./author.vue");
var _authorVueDefault = parcelHelpers.interopDefault(_authorVue);
const log = console.log;
exports.default = {
    components: {
        Author: (0, _authorVueDefault.default)
    },
    emits: [
        "close"
    ],
    data () {
        return {
            loading: false,
            comment: "",
            user: (0, _configDefault.default).user
        };
    },
    props: {
        subjectId: String,
        subjectClass: String,
        onSubmit: Function
    },
    methods: {
        submit () {
            const vm = this;
            this.loading = true;
            const values = {
                comment: this.comment,
                subject: {
                    id: this.subjectId,
                    class: this.subjectClass
                }
            };
            if (this.onSubmit) this.onSubmit(values).catch((err)=>{
                vm.$toast.error(vm.$t("Error sending response"));
            }).finally(()=>{
                vm.loading = false;
                vm.comment = "";
            });
        }
    }
};

},{"../../config":"G7A2j","./author.vue":"hBlLm","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iXMNi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "render", ()=>render);
var _vue = require("vue");
const _hoisted_1 = {
    class: "thread-reply"
};
const _hoisted_2 = {
    class: "fr-grid-row fr-grid-row--middle fr-mb-3v"
};
const _hoisted_3 = {
    class: "fr-col fr-text--bold fr-mb-0"
};
const _hoisted_4 = {
    class: "fr-col-auto"
};
const _hoisted_5 = /*#__PURE__*/ (0, _vue.createElementVNode)("span", {
    class: "required-field-star"
}, "*", -1 /* HOISTED */ );
const _hoisted_6 = {
    class: "fr-input-group"
};
const _hoisted_7 = {
    class: "fr-label required",
    for: "textarea"
};
const _hoisted_8 = {
    class: "fr-grid-row justify-between fr-grid-row--middle"
};
const _hoisted_9 = {
    class: "text-mention-grey fr-text--sm fr-mb-0"
};
const _hoisted_10 = [
    "value"
];
function render(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_i18n_t = (0, _vue.resolveComponent)("i18n-t");
    const _component_Author = (0, _vue.resolveComponent)("Author");
    return (0, _vue.openBlock)(), (0, _vue.createElementBlock)("div", _hoisted_1, [
        (0, _vue.createElementVNode)("div", _hoisted_2, [
            (0, _vue.createElementVNode)("h4", _hoisted_3, (0, _vue.toDisplayString)(_ctx.$t("Reply to the discussion")), 1 /* TEXT */ ),
            (0, _vue.createElementVNode)("div", _hoisted_4, [
                (0, _vue.createElementVNode)("button", {
                    class: "fr-link--close fr-link text-grey-500 fr-mr-0",
                    onClick: _cache[0] || (_cache[0] = ($event)=>_ctx.$emit("close"))
                }, (0, _vue.toDisplayString)(_ctx.$t("Close")), 1 /* TEXT */ )
            ])
        ]),
        (0, _vue.createElementVNode)("form", {
            class: "form fr-p-0",
            onSubmit: _cache[2] || (_cache[2] = (0, _vue.withModifiers)((...args)=>$options.submit && $options.submit(...args), [
                "prevent"
            ]))
        }, [
            (0, _vue.createVNode)(_component_i18n_t, {
                keypath: "Fields preceded by a star ({markup}) are required.",
                tag: "p",
                class: "fr-mt-0 fr-mb-1w fr-text--xs",
                scope: "global"
            }, {
                markup: (0, _vue.withCtx)(()=>[
                        _hoisted_5
                    ]),
                _: 1 /* STABLE */ 
            }),
            (0, _vue.createElementVNode)("div", _hoisted_6, [
                (0, _vue.createElementVNode)("label", _hoisted_7, (0, _vue.toDisplayString)(_ctx.$t("Comment")), 1 /* TEXT */ ),
                (0, _vue.withDirectives)((0, _vue.createElementVNode)("textarea", {
                    "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event)=>$data.comment = $event),
                    required: "",
                    class: "fr-input",
                    id: "textarea"
                }, null, 512 /* NEED_PATCH */ ), [
                    [
                        (0, _vue.vModelText),
                        $data.comment
                    ]
                ])
            ]),
            (0, _vue.createElementVNode)("footer", _hoisted_8, [
                (0, _vue.createElementVNode)("span", _hoisted_9, [
                    (0, _vue.createTextVNode)((0, _vue.toDisplayString)(_ctx.$t("Reply as")) + " ", 1 /* TEXT */ ),
                    (0, _vue.createVNode)(_component_Author, {
                        author: $data.user
                    }, null, 8 /* PROPS */ , [
                        "author"
                    ])
                ]),
                (0, _vue.createElementVNode)("input", {
                    type: "submit",
                    value: _ctx.$t("Submit"),
                    class: "fr-btn fr-btn--secondary fr-btn--secondary-grey-500"
                }, null, 8 /* PROPS */ , _hoisted_10)
            ])
        ], 32 /* HYDRATE_EVENTS */ )
    ]);
}
if (module.hot) module.hot.accept(()=>{
    __VUE_HMR_RUNTIME__.rerender("138b46-hmr", render);
});

},{"vue":"hRjhg","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5q8oE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
let NOOP = ()=>{};
exports.default = (script)=>{};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6G61T":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
let script;
let initialize = ()=>{
    script = require("script:./avatar.vue");
    if (script.__esModule) script = script.default;
    script.render = require("template:./avatar.vue").render;
    require("custom:./avatar.vue").default(script);
    script.__scopeId = "data-v-24c2a9";
    script.__file = "/home/babel/Documents/workspace/udata_workspace/udata-front/theme/js/components/discussions/avatar.vue";
};
initialize();
if (module.hot) {
    script.__hmrId = "24c2a9-hmr";
    module.hot.accept(()=>{
        setTimeout(()=>{
            initialize();
            if (!__VUE_HMR_RUNTIME__.createRecord("24c2a9-hmr", script)) __VUE_HMR_RUNTIME__.reload("24c2a9-hmr", script);
        }, 0);
    });
}
exports.default = script;

},{"script:./avatar.vue":"630Ye","template:./avatar.vue":"kXkLX","custom:./avatar.vue":"eQ8Pi","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"630Ye":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _useUserAvatar = require("../../composables/useUserAvatar");
var _useUserAvatarDefault = parcelHelpers.interopDefault(_useUserAvatar);
exports.default = {
    props: {
        user: Object,
        size: {
            type: Number,
            default: 40
        }
    },
    setup (props) {
        const avatarUrl = (0, _useUserAvatarDefault.default)(props.user, props.size);
        return {
            avatarUrl
        };
    }
};

},{"../../composables/useUserAvatar":"7NNSq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7NNSq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _config = require("../config");
var _configDefault = parcelHelpers.interopDefault(_config);
function useUserAvatar(user, size1) {
    const getIdenticon = (id, size)=>`${(0, _configDefault.default).api_root}avatars/${id}/${size}`;
    return user.avatar || getIdenticon(user.id, size1);
}
exports.default = useUserAvatar;

},{"../config":"G7A2j","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kXkLX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "render", ()=>render);
var _vue = require("vue");
const _hoisted_1 = {
    class: "avatar"
};
const _hoisted_2 = [
    "src",
    "width",
    "height"
];
function render(_ctx, _cache, $props, $setup, $data, $options) {
    return (0, _vue.openBlock)(), (0, _vue.createElementBlock)("div", _hoisted_1, [
        (0, _vue.createElementVNode)("img", {
            src: $setup.avatarUrl,
            width: $props.size,
            height: $props.size,
            loading: "lazy",
            alt: ""
        }, null, 8 /* PROPS */ , _hoisted_2)
    ]);
}
if (module.hot) module.hot.accept(()=>{
    __VUE_HMR_RUNTIME__.rerender("24c2a9-hmr", render);
});

},{"vue":"hRjhg","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eQ8Pi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
let NOOP = ()=>{};
exports.default = (script)=>{};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fTRq1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "render", ()=>render);
var _vue = require("vue");
const _hoisted_1 = [
    "id"
];
const _hoisted_2 = {
    class: "fr-grid-row fr-grid-row--middle justify-between fr-py-2w fr-px-3w no-wrap wrap-md"
};
const _hoisted_3 = {
    key: 0,
    class: "fr-col-auto text-default-warning fr-text--bold fr-pr-2w"
};
const _hoisted_4 = {
    class: "fr-mx-3v fr-mx-md-0 fr-h6 fr-mb-0"
};
const _hoisted_5 = {
    class: "text-align-right"
};
const _hoisted_6 = [
    "id",
    "href",
    "data-clipboard-text"
];
const _hoisted_7 = {
    class: "fr-grid-row fr-grid-row--gutters"
};
const _hoisted_8 = {
    class: "fr-col"
};
const _hoisted_9 = {
    class: "fr-text--sm text-mention-grey fr-mb-0"
};
const _hoisted_10 = {
    class: "white-space-pre-wrap overflow-wrap-anywhere"
};
const _hoisted_11 = {
    class: "fr-mt-3v fr-mb-0"
};
const _hoisted_12 = {
    key: 0,
    class: "fr-grid-row"
};
const _hoisted_13 = {
    class: "fr-py-2w fr-px-3w"
};
const _hoisted_14 = {
    key: 1,
    class: "text-grey-380"
};
const _hoisted_15 = {
    class: "fr-px-1v"
};
function render(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_avatar = (0, _vue.resolveComponent)("avatar");
    const _component_Author = (0, _vue.resolveComponent)("Author");
    const _component_thread_reply = (0, _vue.resolveComponent)("thread-reply");
    return (0, _vue.openBlock)(), (0, _vue.createElementBlock)("div", {
        class: "bg-contrast-grey fr-mt-2w",
        id: _ctx.discussionUrl(_ctx.id)
    }, [
        (0, _vue.createElementVNode)("header", _hoisted_2, [
            _ctx.closed ? ((0, _vue.openBlock)(), (0, _vue.createElementBlock)("div", _hoisted_3, [
                (0, _vue.createElementVNode)("span", null, (0, _vue.toDisplayString)(_ctx.$t("Discussion closed")), 1 /* TEXT */ )
            ])) : (0, _vue.createCommentVNode)("v-if", true),
            (0, _vue.createElementVNode)("h3", _hoisted_4, (0, _vue.toDisplayString)(_ctx.title), 1 /* TEXT */ ),
            (0, _vue.createElementVNode)("div", _hoisted_5, [
                (0, _vue.createElementVNode)("a", {
                    id: _ctx.id + "-copy",
                    href: _ctx.discussionUrl(_ctx.id, true),
                    "data-clipboard-text": _ctx.discussionExternalUrl(_ctx.id),
                    class: "fr-link fr-link--icon-right fr-icon-links-fill unstyled"
                }, (0, _vue.toDisplayString)(_ctx.$t("Copy permalink")), 9 /* TEXT, PROPS */ , _hoisted_6)
            ])
        ]),
        (0, _vue.createElementVNode)("div", null, [
            (0, _vue.createVNode)((0, _vue.TransitionGroup), {
                name: "list"
            }, {
                default: (0, _vue.withCtx)(()=>[
                        !_ctx._collapsed ? ((0, _vue.openBlock)(true), (0, _vue.createElementBlock)((0, _vue.Fragment), {
                            key: 0
                        }, (0, _vue.renderList)(_ctx._discussion, (comment)=>{
                            return (0, _vue.openBlock)(), (0, _vue.createElementBlock)("article", {
                                class: "thread-comment fr-py-3w fr-px-3w fr-pr-5w",
                                key: "comment-" + comment.id
                            }, [
                                (0, _vue.createElementVNode)("div", _hoisted_7, [
                                    (0, _vue.createVNode)(_component_avatar, {
                                        class: "fr-col-auto",
                                        user: comment.posted_by
                                    }, null, 8 /* PROPS */ , [
                                        "user"
                                    ]),
                                    (0, _vue.createElementVNode)("div", _hoisted_8, [
                                        (0, _vue.createVNode)(_component_Author, {
                                            author: comment.posted_by,
                                            badge: false
                                        }, null, 8 /* PROPS */ , [
                                            "author"
                                        ]),
                                        (0, _vue.createElementVNode)("div", _hoisted_9, (0, _vue.toDisplayString)(_ctx.$filters.formatDate(comment.posted_on)), 1 /* TEXT */ ),
                                        (0, _vue.createElementVNode)("div", _hoisted_10, [
                                            (0, _vue.createElementVNode)("p", _hoisted_11, (0, _vue.toDisplayString)(comment.content), 1 /* TEXT */ )
                                        ])
                                    ])
                                ])
                            ]);
                        }), 128 /* KEYED_FRAGMENT */ )) : (0, _vue.createCommentVNode)("v-if", true)
                    ]),
                _: 1 /* STABLE */ 
            }),
            _ctx._collapsed ? ((0, _vue.openBlock)(), (0, _vue.createElementBlock)("div", _hoisted_12, [
                (0, _vue.createElementVNode)("button", {
                    class: "fr-px-3w fr-col fr-link text-mention-grey fr-text--sm fr-mb-0 rounded-0",
                    onClick: _cache[0] || (_cache[0] = (0, _vue.withModifiers)(($event)=>_ctx.collapsed = false, [
                        "prevent"
                    ]))
                }, (0, _vue.toDisplayString)(_ctx._discussion.length) + " " + (0, _vue.toDisplayString)(_ctx.$t("messages")), 1 /* TEXT */ )
            ])) : (0, _vue.createCommentVNode)("v-if", true)
        ]),
        (0, _vue.createElementVNode)("footer", _hoisted_13, [
            !_ctx.closed && !_ctx.readOnlyEnabled ? ((0, _vue.openBlock)(), (0, _vue.createElementBlock)((0, _vue.Fragment), {
                key: 0
            }, [
                !_ctx.showForm ? ((0, _vue.openBlock)(), (0, _vue.createElementBlock)("button", {
                    key: 0,
                    class: "fr-btn fr-btn--secondary fr-btn--secondary-grey-500 fr-btn--icon-right fr-icon-arrow-right-s-line",
                    onClick: _cache[1] || (_cache[1] = (0, _vue.withModifiers)((...args)=>_ctx.displayForm && _ctx.displayForm(...args), [
                        "stop"
                    ]))
                }, (0, _vue.toDisplayString)(_ctx.$t("Reply")), 1 /* TEXT */ )) : ((0, _vue.openBlock)(), (0, _vue.createBlock)(_component_thread_reply, {
                    key: 1,
                    subjectId: _ctx.id,
                    onSubmit: _ctx.replyToThread,
                    onClose: _cache[2] || (_cache[2] = ($event)=>_ctx.showForm = false)
                }, null, 8 /* PROPS */ , [
                    "subjectId",
                    "onSubmit"
                ]))
            ], 2112 /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */ )) : (0, _vue.createCommentVNode)("v-if", true),
            _ctx.closed ? ((0, _vue.openBlock)(), (0, _vue.createElementBlock)("div", _hoisted_14, [
                (0, _vue.createTextVNode)((0, _vue.toDisplayString)(_ctx.$t("The discussion was closed by")) + " ", 1 /* TEXT */ ),
                (0, _vue.createElementVNode)("strong", _hoisted_15, [
                    (0, _vue.createVNode)(_component_Author, {
                        author: _ctx.closed_by
                    }, null, 8 /* PROPS */ , [
                        "author"
                    ])
                ]),
                (0, _vue.createTextVNode)(" " + (0, _vue.toDisplayString)(_ctx.$t("on")) + " " + (0, _vue.toDisplayString)(_ctx.$filters.formatDate(_ctx.closed)), 1 /* TEXT */ )
            ])) : (0, _vue.createCommentVNode)("v-if", true)
        ])
    ], 8 /* PROPS */ , _hoisted_1);
}
if (module.hot) module.hot.accept(()=>{
    __VUE_HMR_RUNTIME__.rerender("997188-hmr", render);
});

},{"vue":"hRjhg","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9gOqq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
let NOOP = ()=>{};
exports.default = (script)=>{};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aQsCi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
let script;
let initialize = ()=>{
    script = require("script:./loader.vue");
    if (script.__esModule) script = script.default;
    script.render = require("template:./loader.vue").render;
    require("custom:./loader.vue").default(script);
    script.__scopeId = "data-v-466ddf";
    script.__file = "/home/babel/Documents/workspace/udata_workspace/udata-front/theme/js/components/discussions/loader.vue";
};
initialize();
if (module.hot) {
    script.__hmrId = "466ddf-hmr";
    module.hot.accept(()=>{
        setTimeout(()=>{
            initialize();
            if (!__VUE_HMR_RUNTIME__.createRecord("466ddf-hmr", script)) __VUE_HMR_RUNTIME__.reload("466ddf-hmr", script);
        }, 0);
    });
}
exports.default = script;

},{"script:./loader.vue":"l9J4X","template:./loader.vue":"iPfWS","custom:./loader.vue":"j6Arc","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"l9J4X":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _vueContentLoader = require("vue-content-loader");
exports.default = {
    components: {
        ContentLoader: (0, _vueContentLoader.ContentLoader)
    }
};

},{"vue-content-loader":"50WZy","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"50WZy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "BulletListLoader", ()=>BulletListLoader);
parcelHelpers.export(exports, "CodeLoader", ()=>CodeLoader);
parcelHelpers.export(exports, "ContentLoader", ()=>ContentLoader);
parcelHelpers.export(exports, "FacebookLoader", ()=>FacebookLoader);
parcelHelpers.export(exports, "InstagramLoader", ()=>InstagramLoader);
parcelHelpers.export(exports, "ListLoader", ()=>ListLoader);
var _vue = require("vue");
var uid = function() {
    return Math.random().toString(36).substring(2);
};
var ContentLoader = (0, _vue.defineComponent)({
    name: "ContentLoader",
    props: {
        width: {
            type: [
                Number,
                String
            ]
        },
        height: {
            type: [
                Number,
                String
            ]
        },
        viewBox: {
            type: String
        },
        preserveAspectRatio: {
            type: String,
            "default": "xMidYMid meet"
        },
        speed: {
            type: Number,
            "default": 2
        },
        baseUrl: {
            type: String,
            "default": ""
        },
        primaryColor: {
            type: String,
            "default": "#f9f9f9"
        },
        secondaryColor: {
            type: String,
            "default": "#ecebeb"
        },
        primaryOpacity: {
            type: Number,
            "default": 1
        },
        secondaryOpacity: {
            type: Number,
            "default": 1
        },
        uniqueKey: {
            type: String
        },
        animate: {
            type: Boolean,
            "default": true
        }
    },
    setup: function setup(props) {
        var _a, _b, _c;
        var idClip = props.uniqueKey ? props.uniqueKey + "-idClip" : uid();
        var idGradient = props.uniqueKey ? props.uniqueKey + "-idGradient" : uid();
        var width = (_a = props.width) !== null && _a !== void 0 ? _a : 400;
        var height = (_b = props.height) !== null && _b !== void 0 ? _b : 130;
        var computedViewBox = (_c = props.viewBox) !== null && _c !== void 0 ? _c : "0 0 " + width + " " + height;
        return {
            idClip: idClip,
            idGradient: idGradient,
            computedViewBox: computedViewBox
        };
    },
    render: function render() {
        return (0, _vue.createVNode)("svg", {
            "width": this.width,
            "height": this.height,
            "viewBox": this.computedViewBox,
            "version": "1.1",
            "preserveAspectRatio": this.preserveAspectRatio
        }, [
            (0, _vue.createVNode)("rect", {
                "style": {
                    fill: "url(" + this.baseUrl + "#" + this.idGradient + ")"
                },
                "clip-path": "url(" + this.baseUrl + "#" + this.idClip + ")",
                "x": "0",
                "y": "0",
                "width": "100%",
                "height": "100%"
            }, null),
            (0, _vue.createVNode)("defs", null, [
                (0, _vue.createVNode)("clipPath", {
                    "id": this.idClip
                }, [
                    this.$slots["default"] ? this.$slots["default"]() : (0, _vue.createVNode)("rect", {
                        "x": "0",
                        "y": "0",
                        "rx": "5",
                        "ry": "5",
                        "width": "100%",
                        "height": "100%"
                    }, null)
                ]),
                (0, _vue.createVNode)("linearGradient", {
                    "id": this.idGradient
                }, [
                    (0, _vue.createVNode)("stop", {
                        "offset": "0%",
                        "stop-color": this.primaryColor,
                        "stop-opacity": this.primaryOpacity
                    }, [
                        this.animate ? (0, _vue.createVNode)("animate", {
                            "attributeName": "offset",
                            "values": "-2; 1",
                            "dur": this.speed + "s",
                            "repeatCount": "indefinite"
                        }, null) : null
                    ]),
                    (0, _vue.createVNode)("stop", {
                        "offset": "50%",
                        "stop-color": this.secondaryColor,
                        "stop-opacity": this.secondaryOpacity
                    }, [
                        this.animate ? (0, _vue.createVNode)("animate", {
                            "attributeName": "offset",
                            "values": "-1.5; 1.5",
                            "dur": this.speed + "s",
                            "repeatCount": "indefinite"
                        }, null) : null
                    ]),
                    (0, _vue.createVNode)("stop", {
                        "offset": "100%",
                        "stop-color": this.primaryColor,
                        "stop-opacity": this.primaryOpacity
                    }, [
                        this.animate ? (0, _vue.createVNode)("animate", {
                            "attributeName": "offset",
                            "values": "-1; 2",
                            "dur": this.speed + "s",
                            "repeatCount": "indefinite"
                        }, null) : null
                    ])
                ])
            ])
        ]);
    }
});
var BulletListLoader = (0, _vue.defineComponent)(function(props, _a) {
    var attrs = _a.attrs;
    return function() {
        return (0, _vue.createVNode)(ContentLoader, attrs, {
            "default": function _default() {
                return [
                    (0, _vue.createVNode)("circle", {
                        "cx": "10",
                        "cy": "20",
                        "r": "8"
                    }, null),
                    (0, _vue.createVNode)("rect", {
                        "x": "25",
                        "y": "15",
                        "rx": "5",
                        "ry": "5",
                        "width": "220",
                        "height": "10"
                    }, null),
                    (0, _vue.createVNode)("circle", {
                        "cx": "10",
                        "cy": "50",
                        "r": "8"
                    }, null),
                    (0, _vue.createVNode)("rect", {
                        "x": "25",
                        "y": "45",
                        "rx": "5",
                        "ry": "5",
                        "width": "220",
                        "height": "10"
                    }, null),
                    (0, _vue.createVNode)("circle", {
                        "cx": "10",
                        "cy": "80",
                        "r": "8"
                    }, null),
                    (0, _vue.createVNode)("rect", {
                        "x": "25",
                        "y": "75",
                        "rx": "5",
                        "ry": "5",
                        "width": "220",
                        "height": "10"
                    }, null),
                    (0, _vue.createVNode)("circle", {
                        "cx": "10",
                        "cy": "110",
                        "r": "8"
                    }, null),
                    (0, _vue.createVNode)("rect", {
                        "x": "25",
                        "y": "105",
                        "rx": "5",
                        "ry": "5",
                        "width": "220",
                        "height": "10"
                    }, null)
                ];
            }
        });
    };
});
var CodeLoader = (0, _vue.defineComponent)(function(props, _a) {
    var attrs = _a.attrs;
    return function() {
        return (0, _vue.createVNode)(ContentLoader, attrs, {
            "default": function _default() {
                return [
                    (0, _vue.createVNode)("rect", {
                        "x": "0",
                        "y": "0",
                        "rx": "3",
                        "ry": "3",
                        "width": "70",
                        "height": "10"
                    }, null),
                    (0, _vue.createVNode)("rect", {
                        "x": "80",
                        "y": "0",
                        "rx": "3",
                        "ry": "3",
                        "width": "100",
                        "height": "10"
                    }, null),
                    (0, _vue.createVNode)("rect", {
                        "x": "190",
                        "y": "0",
                        "rx": "3",
                        "ry": "3",
                        "width": "10",
                        "height": "10"
                    }, null),
                    (0, _vue.createVNode)("rect", {
                        "x": "15",
                        "y": "20",
                        "rx": "3",
                        "ry": "3",
                        "width": "130",
                        "height": "10"
                    }, null),
                    (0, _vue.createVNode)("rect", {
                        "x": "155",
                        "y": "20",
                        "rx": "3",
                        "ry": "3",
                        "width": "130",
                        "height": "10"
                    }, null),
                    (0, _vue.createVNode)("rect", {
                        "x": "15",
                        "y": "40",
                        "rx": "3",
                        "ry": "3",
                        "width": "90",
                        "height": "10"
                    }, null),
                    (0, _vue.createVNode)("rect", {
                        "x": "115",
                        "y": "40",
                        "rx": "3",
                        "ry": "3",
                        "width": "60",
                        "height": "10"
                    }, null),
                    (0, _vue.createVNode)("rect", {
                        "x": "185",
                        "y": "40",
                        "rx": "3",
                        "ry": "3",
                        "width": "60",
                        "height": "10"
                    }, null),
                    (0, _vue.createVNode)("rect", {
                        "x": "0",
                        "y": "60",
                        "rx": "3",
                        "ry": "3",
                        "width": "30",
                        "height": "10"
                    }, null)
                ];
            }
        });
    };
});
var FacebookLoader = (0, _vue.defineComponent)(function(props, _a) {
    var attrs = _a.attrs;
    return function() {
        return (0, _vue.createVNode)(ContentLoader, attrs, {
            "default": function _default() {
                return [
                    (0, _vue.createVNode)("rect", {
                        "x": "70",
                        "y": "15",
                        "rx": "4",
                        "ry": "4",
                        "width": "117",
                        "height": "6.4"
                    }, null),
                    (0, _vue.createVNode)("rect", {
                        "x": "70",
                        "y": "35",
                        "rx": "3",
                        "ry": "3",
                        "width": "85",
                        "height": "6.4"
                    }, null),
                    (0, _vue.createVNode)("rect", {
                        "x": "0",
                        "y": "80",
                        "rx": "3",
                        "ry": "3",
                        "width": "350",
                        "height": "6.4"
                    }, null),
                    (0, _vue.createVNode)("rect", {
                        "x": "0",
                        "y": "100",
                        "rx": "3",
                        "ry": "3",
                        "width": "380",
                        "height": "6.4"
                    }, null),
                    (0, _vue.createVNode)("rect", {
                        "x": "0",
                        "y": "120",
                        "rx": "3",
                        "ry": "3",
                        "width": "201",
                        "height": "6.4"
                    }, null),
                    (0, _vue.createVNode)("circle", {
                        "cx": "30",
                        "cy": "30",
                        "r": "30"
                    }, null)
                ];
            }
        });
    };
});
var ListLoader = (0, _vue.defineComponent)(function(props, _a) {
    var attrs = _a.attrs;
    return function() {
        return (0, _vue.createVNode)(ContentLoader, attrs, {
            "default": function _default() {
                return [
                    (0, _vue.createVNode)("rect", {
                        "x": "0",
                        "y": "0",
                        "rx": "3",
                        "ry": "3",
                        "width": "250",
                        "height": "10"
                    }, null),
                    (0, _vue.createVNode)("rect", {
                        "x": "20",
                        "y": "20",
                        "rx": "3",
                        "ry": "3",
                        "width": "220",
                        "height": "10"
                    }, null),
                    (0, _vue.createVNode)("rect", {
                        "x": "20",
                        "y": "40",
                        "rx": "3",
                        "ry": "3",
                        "width": "170",
                        "height": "10"
                    }, null),
                    (0, _vue.createVNode)("rect", {
                        "x": "0",
                        "y": "60",
                        "rx": "3",
                        "ry": "3",
                        "width": "250",
                        "height": "10"
                    }, null),
                    (0, _vue.createVNode)("rect", {
                        "x": "20",
                        "y": "80",
                        "rx": "3",
                        "ry": "3",
                        "width": "200",
                        "height": "10"
                    }, null),
                    (0, _vue.createVNode)("rect", {
                        "x": "20",
                        "y": "100",
                        "rx": "3",
                        "ry": "3",
                        "width": "80",
                        "height": "10"
                    }, null)
                ];
            }
        });
    };
});
var InstagramLoader = (0, _vue.defineComponent)(function(props, _a) {
    var attrs = _a.attrs;
    return function() {
        return (0, _vue.createVNode)(ContentLoader, (0, _vue.mergeProps)(attrs, {
            "viewBox": "0 0 400 480"
        }), {
            "default": function _default() {
                return [
                    (0, _vue.createVNode)("circle", {
                        "cx": "30",
                        "cy": "30",
                        "r": "30"
                    }, null),
                    (0, _vue.createVNode)("rect", {
                        "x": "75",
                        "y": "13",
                        "rx": "4",
                        "ry": "4",
                        "width": "100",
                        "height": "13"
                    }, null),
                    (0, _vue.createVNode)("rect", {
                        "x": "75",
                        "y": "37",
                        "rx": "4",
                        "ry": "4",
                        "width": "50",
                        "height": "8"
                    }, null),
                    (0, _vue.createVNode)("rect", {
                        "x": "0",
                        "y": "70",
                        "rx": "5",
                        "ry": "5",
                        "width": "400",
                        "height": "400"
                    }, null)
                ];
            }
        });
    };
});

},{"vue":"hRjhg","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iPfWS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "render", ()=>render);
var _vue = require("vue");
const _hoisted_1 = /*#__PURE__*/ (0, _vue.createElementVNode)("rect", {
    x: "104",
    y: "41",
    rx: "3",
    ry: "3",
    width: "162",
    height: "10"
}, null, -1 /* HOISTED */ );
const _hoisted_2 = /*#__PURE__*/ (0, _vue.createElementVNode)("rect", {
    x: "105",
    y: "63",
    rx: "3",
    ry: "3",
    width: "139",
    height: "5"
}, null, -1 /* HOISTED */ );
const _hoisted_3 = /*#__PURE__*/ (0, _vue.createElementVNode)("rect", {
    x: "26",
    y: "99",
    rx: "5",
    ry: "5",
    width: "60",
    height: "60"
}, null, -1 /* HOISTED */ );
const _hoisted_4 = /*#__PURE__*/ (0, _vue.createElementVNode)("rect", {
    x: "104",
    y: "113",
    rx: "3",
    ry: "3",
    width: "162",
    height: "10"
}, null, -1 /* HOISTED */ );
const _hoisted_5 = /*#__PURE__*/ (0, _vue.createElementVNode)("rect", {
    x: "105",
    y: "135",
    rx: "3",
    ry: "3",
    width: "139",
    height: "5"
}, null, -1 /* HOISTED */ );
const _hoisted_6 = /*#__PURE__*/ (0, _vue.createElementVNode)("rect", {
    x: "26",
    y: "24",
    rx: "5",
    ry: "5",
    width: "60",
    height: "60"
}, null, -1 /* HOISTED */ );
function render(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_ContentLoader = (0, _vue.resolveComponent)("ContentLoader");
    return (0, _vue.openBlock)(), (0, _vue.createBlock)(_component_ContentLoader, {
        width: 280,
        height: 180,
        speed: 2,
        primaryColor: "#7c7c7c",
        secondaryColor: "#2d2d2d"
    }, {
        default: (0, _vue.withCtx)(()=>[
                _hoisted_1,
                _hoisted_2,
                _hoisted_3,
                _hoisted_4,
                _hoisted_5,
                _hoisted_6
            ]),
        _: 1 /* STABLE */ 
    });
}
if (module.hot) module.hot.accept(()=>{
    __VUE_HMR_RUNTIME__.rerender("466ddf-hmr", render);
});

},{"vue":"hRjhg","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"j6Arc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
let NOOP = ()=>{};
exports.default = (script)=>{};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"h8fs7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "render", ()=>render);
var _vue = require("vue");
const _hoisted_1 = {
    class: "discussions-wrapper",
    ref: "top",
    key: "top"
};
const _hoisted_2 = {
    class: "fr-grid-row"
};
const _hoisted_3 = {
    class: "fr-col"
};
const _hoisted_4 = {
    id: "community-discussions",
    class: "fr-h2"
};
const _hoisted_5 = {
    key: 0,
    class: "fr-col-12 fr-col-sm-6 fr-col-md-5 fr-col-lg-4 fr-grid-row fr-grid-row--bottom flex-direction-column justify-between"
};
const _hoisted_6 = {
    class: "fr-mt-5v"
};
const _hoisted_7 = [
    "aria-label"
];
const _hoisted_8 = [
    "value",
    "selected"
];
const _hoisted_9 = {
    key: 0
};
const _hoisted_10 = {
    class: "fr-mt-2w fr-px-3w well well-secondary-success"
};
const _hoisted_11 = {
    class: "fr-grid-row fr-grid-row--middle justify-between"
};
const _hoisted_12 = {
    class: "text-decoration-underline"
};
const _hoisted_13 = {
    key: 1
};
const _hoisted_14 = {
    class: "fr-mb-5v"
};
function render(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_ThreadsCreateButton = (0, _vue.resolveComponent)("ThreadsCreateButton");
    const _component_Loader = (0, _vue.resolveComponent)("Loader");
    const _component_thread = (0, _vue.resolveComponent)("thread");
    const _component_create_thread = (0, _vue.resolveComponent)("create-thread");
    const _component_pagination = (0, _vue.resolveComponent)("pagination");
    return (0, _vue.openBlock)(), (0, _vue.createElementBlock)("section", _hoisted_1, [
        (0, _vue.createElementVNode)("div", _hoisted_2, [
            (0, _vue.createElementVNode)("div", _hoisted_3, [
                (0, _vue.createElementVNode)("h2", _hoisted_4, [
                    (0, _vue.createTextVNode)((0, _vue.toDisplayString)(_ctx.title) + " ", 1 /* TEXT */ ),
                    (0, _vue.createElementVNode)("sup", null, (0, _vue.toDisplayString)(_ctx.totalResults), 1 /* TEXT */ )
                ]),
                (0, _vue.renderSlot)(_ctx.$slots, "default")
            ]),
            !_ctx.threadFromURL ? ((0, _vue.openBlock)(), (0, _vue.createElementBlock)("div", _hoisted_5, [
                (0, _vue.createVNode)(_component_ThreadsCreateButton, {
                    class: "fr-col--bottom",
                    onClick: _ctx.startThreadWithoutScroll
                }, null, 8 /* PROPS */ , [
                    "onClick"
                ]),
                (0, _vue.createElementVNode)("div", _hoisted_6, [
                    (0, _vue.withDirectives)((0, _vue.createElementVNode)("select", {
                        name: "sortBy",
                        id: "sortBy",
                        "aria-label": _ctx.$t("Sort discussions by"),
                        onChange: _cache[0] || (_cache[0] = ($event)=>_ctx.changeSort(_ctx.currentSort)),
                        "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event)=>_ctx.currentSort = $event),
                        class: "fr-select fr-select--no-border"
                    }, [
                        ((0, _vue.openBlock)(true), (0, _vue.createElementBlock)((0, _vue.Fragment), null, (0, _vue.renderList)(_ctx.sorts, (sort)=>{
                            return (0, _vue.openBlock)(), (0, _vue.createElementBlock)("option", {
                                value: sort,
                                selected: sort === _ctx.currentSort
                            }, (0, _vue.toDisplayString)(sort.name), 9 /* TEXT, PROPS */ , _hoisted_8);
                        }), 256 /* UNKEYED_FRAGMENT */ ))
                    ], 40 /* PROPS, HYDRATE_EVENTS */ , _hoisted_7), [
                        [
                            (0, _vue.vModelSelect),
                            _ctx.currentSort
                        ]
                    ])
                ])
            ])) : (0, _vue.createCommentVNode)("v-if", true)
        ]),
        (0, _vue.createVNode)((0, _vue.Transition), {
            mode: "out-in"
        }, {
            default: (0, _vue.withCtx)(()=>[
                    _ctx.loading ? ((0, _vue.openBlock)(), (0, _vue.createBlock)(_component_Loader, {
                        key: 0,
                        class: "fr-mt-2w"
                    })) : ((0, _vue.openBlock)(), (0, _vue.createElementBlock)((0, _vue.Fragment), {
                        key: 1
                    }, [
                        _ctx.threadFromURL ? ((0, _vue.openBlock)(), (0, _vue.createElementBlock)("div", _hoisted_9, [
                            (0, _vue.createElementVNode)("div", _hoisted_10, [
                                (0, _vue.createElementVNode)("div", _hoisted_11, [
                                    (0, _vue.createTextVNode)((0, _vue.toDisplayString)(_ctx.$t("You are seeing a specific discussion about this dataset")) + " ", 1 /* TEXT */ ),
                                    (0, _vue.createElementVNode)("button", {
                                        class: "fr-link--close fr-link fr-mr-0",
                                        onClick: _cache[2] || (_cache[2] = (0, _vue.withModifiers)((...args)=>_ctx.viewAllDiscussions && _ctx.viewAllDiscussions(...args), [
                                            "prevent"
                                        ]))
                                    }, (0, _vue.toDisplayString)(_ctx.$t("Close")), 1 /* TEXT */ )
                                ])
                            ]),
                            (0, _vue.createVNode)(_component_thread, (0, _vue.normalizeProps)((0, _vue.guardReactiveProps)(_ctx.threadFromURL)), null, 16 /* FULL_PROPS */ ),
                            (0, _vue.createElementVNode)("button", {
                                class: "nav-link nav-link--no-icon text-decoration-none fr-link fr-mt-9v fr-link--icon-left fr-icon-arrow-right-s-line",
                                onClick: _cache[3] || (_cache[3] = (0, _vue.withModifiers)((...args)=>_ctx.viewAllDiscussions && _ctx.viewAllDiscussions(...args), [
                                    "prevent"
                                ]))
                            }, [
                                (0, _vue.createElementVNode)("span", _hoisted_12, (0, _vue.toDisplayString)(_ctx.$t("See all discussions about this dataset")), 1 /* TEXT */ )
                            ])
                        ])) : ((0, _vue.openBlock)(), (0, _vue.createElementBlock)("div", _hoisted_13, [
                            !_ctx.readOnlyEnabled ? ((0, _vue.openBlock)(), (0, _vue.createBlock)(_component_create_thread, {
                                key: 0,
                                ref: "createThread",
                                onSubmit: _ctx.createThread,
                                subjectId: _ctx.subjectId,
                                subjectClass: _ctx.subjectClass
                            }, null, 8 /* PROPS */ , [
                                "onSubmit",
                                "subjectId",
                                "subjectClass"
                            ])) : (0, _vue.createCommentVNode)("v-if", true),
                            (0, _vue.createElementVNode)("ul", _hoisted_14, [
                                ((0, _vue.openBlock)(true), (0, _vue.createElementBlock)((0, _vue.Fragment), null, (0, _vue.renderList)(_ctx.discussions, (discussion)=>{
                                    return (0, _vue.openBlock)(), (0, _vue.createElementBlock)("li", null, [
                                        (0, _vue.createVNode)(_component_thread, (0, _vue.normalizeProps)((0, _vue.guardReactiveProps)(discussion)), null, 16 /* FULL_PROPS */ )
                                    ]);
                                }), 256 /* UNKEYED_FRAGMENT */ ))
                            ]),
                            _ctx.totalResults > _ctx.pageSize ? ((0, _vue.openBlock)(), (0, _vue.createBlock)(_component_pagination, {
                                key: 1,
                                page: _ctx.currentPage,
                                "page-size": _ctx.pageSize,
                                "total-results": _ctx.totalResults,
                                changePage: _ctx.changePage
                            }, null, 8 /* PROPS */ , [
                                "page",
                                "page-size",
                                "total-results",
                                "changePage"
                            ])) : (0, _vue.createCommentVNode)("v-if", true)
                        ]))
                    ], 2112 /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */ ))
                ]),
            _: 1 /* STABLE */ 
        })
    ], 512 /* NEED_PATCH */ );
}
if (module.hot) module.hot.accept(()=>{
    __VUE_HMR_RUNTIME__.rerender("ef67b7-hmr", render);
});

},{"vue":"hRjhg","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2Vtkc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
let NOOP = ()=>{};
exports.default = (script)=>{};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fJRlf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
let script;
let initialize = ()=>{
    script = require("script:./menu-search.vue");
    if (script.__esModule) script = script.default;
    script.render = require("template:./menu-search.vue").render;
    require("custom:./menu-search.vue").default(script);
    script.__scopeId = "data-v-c559ec";
    script.__file = "/home/babel/Documents/workspace/udata_workspace/udata-front/theme/js/components/search/menu-search.vue";
};
initialize();
if (module.hot) {
    script.__hmrId = "c559ec-hmr";
    module.hot.accept(()=>{
        setTimeout(()=>{
            initialize();
            if (!__VUE_HMR_RUNTIME__.createRecord("c559ec-hmr", script)) __VUE_HMR_RUNTIME__.reload("c559ec-hmr", script);
        }, 0);
    });
}
exports.default = script;

},{"script:./menu-search.vue":"8qJr7","template:./menu-search.vue":"6oVOC","custom:./menu-search.vue":"6UFUs","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8qJr7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _vue = require("vue");
var _vueI18N = require("vue-i18n");
var _useCollapse = require("../../composables/useCollapse");
var _menuSearchOptionVue = require("./menu-search-option.vue");
var _menuSearchOptionVueDefault = parcelHelpers.interopDefault(_menuSearchOptionVue);
var _datasetSvg = require("bundle-text:svg/search/dataset.svg");
var _datasetSvgDefault = parcelHelpers.interopDefault(_datasetSvg);
var _reuseSvg = require("bundle-text:svg/search/reuse.svg");
var _reuseSvgDefault = parcelHelpers.interopDefault(_reuseSvg);
var _organizationSvg = require("bundle-text:svg/search/organization.svg");
var _organizationSvgDefault = parcelHelpers.interopDefault(_organizationSvg);
var _useSearchUrl = require("../../composables/useSearchUrl");
var _useSearchUrlDefault = parcelHelpers.interopDefault(_useSearchUrl);
var _useActiveDescendant = require("../../composables/useActiveDescendant");
var _useActiveDescendantDefault = parcelHelpers.interopDefault(_useActiveDescendant);
exports.default = (0, _vue.defineComponent)({
    components: {
        MenuSearchOption: (0, _menuSearchOptionVueDefault.default)
    },
    setup () {
        const { t  } = (0, _vueI18N.useI18n)();
        const { handleKeyPressForCollapse , expanded , uid , show , hide , registerBackgroundEvent , removeBackgroundEvent  } = (0, _useCollapse.useCollapse)();
        const q = (0, _vue.ref)("");
        const { datasetUrl , reuseUrl , organizationUrl  } = (0, _useSearchUrlDefault.default)(q);
        /**
     * @typedef MenuOption
     * @property {string} id
     * @property {string} icon
     * @property {string} type
     * @property {string} link
     */ /**
     * @type {MenuOption[]}
     */ const options = (0, _vue.reactive)([
            {
                id: "dataset-option",
                icon: (0, _datasetSvgDefault.default),
                type: t("datasets"),
                link: datasetUrl
            },
            {
                id: "reuse-option",
                icon: (0, _reuseSvgDefault.default),
                type: t("reuses"),
                link: reuseUrl
            },
            {
                id: "organization-option",
                icon: (0, _organizationSvgDefault.default),
                type: t("organizations"),
                link: organizationUrl
            }, 
        ]);
        const { handleKeyPressForActiveDescendant , select , selected , selectedOption , isSelected , focusOut , NOT_MOVED_YET , ALREADY_MOVED_DOWN  } = (0, _useActiveDescendantDefault.default)(options);
        const input = (0, _vue.ref)(null);
        const button = (0, _vue.ref)(null);
        const list = (0, _vue.ref)(null);
        (0, _vue.onMounted)(()=>registerBackgroundEvent(input, list, button));
        (0, _vue.onUnmounted)(()=>removeBackgroundEvent());
        const showAndFocus = ()=>{
            if (!expanded.value) {
                input.value.focus();
                showAndSelectIfQuery();
            } else searchSelectedOption();
        };
        const showAndSelectIfQuery = ()=>{
            if (q.value) {
                show();
                select(selected.value);
            }
        };
        const handleKeyDown = (e)=>{
            showAndSelectIfQuery();
            let moved = NOT_MOVED_YET;
            if (!expanded.value) moved = ALREADY_MOVED_DOWN;
            handleKeyPressForCollapse(e);
            handleKeyPressForActiveDescendant(e, moved);
        };
        const handleFocusOut = ()=>{
            focusOut();
            hide();
        };
        const searchSelectedOption = ()=>{
            if (selectedOption.value) window.location.href = selectedOption.value.link;
        };
        return {
            options,
            button,
            input,
            list,
            expanded,
            selected,
            isSelected,
            uid,
            q,
            showAndFocus,
            handleFocusOut,
            showAndSelectIfQuery,
            handleKeyDown,
            searchSelectedOption
        };
    }
});

},{"vue":"hRjhg","vue-i18n":"92JeB","../../composables/useCollapse":"bFkPy","./menu-search-option.vue":"j0Z0L","bundle-text:svg/search/dataset.svg":"jXRHk","bundle-text:svg/search/reuse.svg":"iMXsi","bundle-text:svg/search/organization.svg":"ksAer","../../composables/useSearchUrl":"lDDSQ","../../composables/useActiveDescendant":"1k5Ps","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bFkPy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useCollapse", ()=>useCollapse);
var _vue = require("vue");
var _useKeyCodes = require("./useKeyCodes");
var _useKeyCodesDefault = parcelHelpers.interopDefault(_useKeyCodes);
let uid = 0;
function useCollapse() {
    const { KEYCODES  } = (0, _useKeyCodesDefault.default)();
    uid += 1;
    const collapseId = `collaspe-${uid}`;
    const expanded = (0, _vue.ref)(false);
    const show = ()=>expanded.value = true;
    const hide = ()=>expanded.value = false;
    const toggle = ()=>expanded.value = !expanded.value;
    let registeredEventHandler = null;
    const registerBackgroundEvent = (inputRef, listRef, buttonRef)=>{
        const input = (0, _vue.unref)(inputRef);
        const list = (0, _vue.unref)(listRef);
        const button = (0, _vue.unref)(buttonRef);
        registeredEventHandler = onBackgroundPointerUp(input, list, button);
        document.body.addEventListener("pointerup", registeredEventHandler, true);
    };
    const removeBackgroundEvent = ()=>{
        document.body.addEventListener("pointerup", registeredEventHandler, true);
    };
    const onBackgroundPointerUp = (input, list, button)=>(event)=>{
            if (!input.contains(event.target) && !list.contains(event.target) && !button.contains(event.target)) hide();
        };
    /**
   *
   * @param {KeyboardEvent} key
   */ const handleKeyPressForCollapse = (key)=>{
        switch(key.keyCode){
            case KEYCODES.ALT:
            case KEYCODES.CTRL:
            case KEYCODES.SHIFT:
            case KEYCODES.CAPS_LOCK:
                break;
            case KEYCODES.ESCAPE:
            case KEYCODES.TAB:
                hide();
                break;
            default:
                show();
        }
    };
    return {
        expanded,
        uid: collapseId,
        show,
        hide,
        toggle,
        registerBackgroundEvent,
        removeBackgroundEvent,
        handleKeyPressForCollapse
    };
}

},{"vue":"hRjhg","./useKeyCodes":"7UvL2","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7UvL2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @typedef keyCodesModel
 * @property {number} TAB
 * @property {number} ESCAPE
 * @property {number} END
 * @property {number} HOME
 * @property {number} LEFT
 * @property {number} UP
 * @property {number} RIGHT
 * @property {number} DOWN
 */ /**
 * @type keyCodesModel
 */ const KEYCODES = window.dsfr.core.KeyCodes;
function useKeyCodes() {
    return {
        KEYCODES: {
            ...KEYCODES,
            ALT: 18,
            CTRL: 17,
            SHIFT: 16,
            CAPS_LOCK: 20
        }
    };
}
exports.default = useKeyCodes;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"j0Z0L":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
let script;
let initialize = ()=>{
    script = require("script:./menu-search-option.vue");
    if (script.__esModule) script = script.default;
    script.render = require("template:./menu-search-option.vue").render;
    require("custom:./menu-search-option.vue").default(script);
    script.__scopeId = "data-v-83d2da";
    script.__file = "/home/babel/Documents/workspace/udata_workspace/udata-front/theme/js/components/search/menu-search-option.vue";
};
initialize();
if (module.hot) {
    script.__hmrId = "83d2da-hmr";
    module.hot.accept(()=>{
        setTimeout(()=>{
            initialize();
            if (!__VUE_HMR_RUNTIME__.createRecord("83d2da-hmr", script)) __VUE_HMR_RUNTIME__.reload("83d2da-hmr", script);
        }, 0);
    });
}
exports.default = script;

},{"script:./menu-search-option.vue":"5Awsc","template:./menu-search-option.vue":"gk064","custom:./menu-search-option.vue":"dj2pK","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5Awsc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _vue = require("vue");
exports.default = (0, _vue.defineComponent)({
    props: {
        icon: {
            type: String,
            required: true
        },
        query: {
            type: String,
            required: true
        },
        link: {
            type: String,
            required: true
        },
        type: {
            type: String,
            required: true
        }
    }
});

},{"vue":"hRjhg","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gk064":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "render", ()=>render);
var _vue = require("vue");
const _hoisted_1 = [
    "href"
];
const _hoisted_2 = {
    class: "fr-grid-row fr-grid-row--middle"
};
const _hoisted_3 = [
    "innerHTML"
];
const _hoisted_4 = /*#__PURE__*/ (0, _vue.createElementVNode)("div", {
    "aria-hidden": "true",
    class: "fr-col-auto"
}, [
    /*#__PURE__*/ (0, _vue.createElementVNode)("span", {
        class: "fr-icon-arrow-right-s-line fr-icon--sm",
        "aria-hidden": "true"
    })
], -1 /* HOISTED */ );
function render(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_i18n_t = (0, _vue.resolveComponent)("i18n-t");
    return (0, _vue.openBlock)(), (0, _vue.createElementBlock)("a", {
        class: "fr-nav__link unstyled",
        href: _ctx.link
    }, [
        (0, _vue.createElementVNode)("div", _hoisted_2, [
            (0, _vue.createElementVNode)("div", {
                "aria-hidden": "true",
                class: "fr-col-auto fr-mr-2w",
                innerHTML: _ctx.icon
            }, null, 8 /* PROPS */ , _hoisted_3),
            _ctx.query ? ((0, _vue.openBlock)(), (0, _vue.createBlock)(_component_i18n_t, {
                key: 0,
                keypath: "Search {query} in {type}",
                class: "fr-col",
                tag: "div",
                scope: "global"
            }, {
                query: (0, _vue.withCtx)(()=>[
                        (0, _vue.createElementVNode)("em", null, (0, _vue.toDisplayString)(_ctx.query), 1 /* TEXT */ )
                    ]),
                type: (0, _vue.withCtx)(()=>[
                        (0, _vue.createElementVNode)("strong", null, (0, _vue.toDisplayString)(_ctx.type), 1 /* TEXT */ )
                    ]),
                _: 1 /* STABLE */ 
            })) : ((0, _vue.openBlock)(), (0, _vue.createBlock)(_component_i18n_t, {
                key: 1,
                keypath: "Start typing to search in X",
                class: "fr-col",
                tag: "div",
                scope: "global"
            }, {
                type: (0, _vue.withCtx)(()=>[
                        (0, _vue.createElementVNode)("strong", null, (0, _vue.toDisplayString)(_ctx.type), 1 /* TEXT */ )
                    ]),
                _: 1 /* STABLE */ 
            })),
            _hoisted_4
        ])
    ], 8 /* PROPS */ , _hoisted_1);
}
if (module.hot) module.hot.accept(()=>{
    __VUE_HMR_RUNTIME__.rerender("83d2da-hmr", render);
});

},{"vue":"hRjhg","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dj2pK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
let NOOP = ()=>{};
exports.default = (script)=>{};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jXRHk":[function(require,module,exports) {
module.exports = "<svg width=\"20\" height=\"19\" viewBox=\"0 0 20 19\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M18.125 0.75H1.875C0.820312 0.75 0 1.60938 0 2.625V16.375C0 17.4297 0.820312 18.25 1.875 18.25H18.125C19.1406 18.25 20 17.4297 20 16.375V2.625C20 1.60938 19.1406 0.75 18.125 0.75ZM6.25 17H1.875C1.52344 17 1.25 16.7266 1.25 16.375V13.25H6.25V17ZM6.25 12H1.25V8.25H6.25V12ZM6.25 7H1.25V3.25H6.25V7ZM12.5 17H7.5V13.25H12.5V17ZM12.5 12H7.5V8.25H12.5V12ZM12.5 7H7.5V3.25H12.5V7ZM18.75 13.25V16.375C18.75 16.7266 18.4375 17 18.125 17H13.75V13.25H18.75ZM18.75 12H13.75V8.25H18.75V12ZM18.75 7H13.75V3.25H18.75V7Z\" fill=\"#3A3A3A\"></path>\n</svg>\n";

},{}],"iMXsi":[function(require,module,exports) {
module.exports = "<svg width=\"20\" height=\"15\" viewBox=\"0 0 20 15\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M19.6875 13.75H1.25V0.3125C1.25 0.15625 1.09375 0 0.9375 0H0.3125C0.117188 0 0 0.15625 0 0.3125V14.375C0 14.7266 0.273438 15 0.625 15H19.6875C19.8438 15 20 14.8828 20 14.6875V14.0625C20 13.9062 19.8438 13.75 19.6875 13.75ZM3.82812 7.8125C3.71094 7.92969 3.71094 8.125 3.82812 8.24219L4.25781 8.67188C4.375 8.78906 4.57031 8.78906 4.6875 8.67188L7.53906 5.85938L10.8594 9.17969C11.0938 9.41406 11.4844 9.41406 11.7188 9.17969L15.3906 5.50781L17.1094 7.22656C17.3047 7.42188 17.5391 7.5 17.7734 7.5C18.2812 7.5 18.75 7.14844 18.75 6.5625V1.91406C18.75 1.5625 18.4375 1.25 18.0859 1.25H13.4375C12.5781 1.25 12.1484 2.30469 12.7734 2.89062L14.4922 4.64844L11.2891 7.85156L8.00781 4.53125C7.73438 4.29688 7.34375 4.29688 7.10938 4.53125L3.82812 7.8125ZM14.1406 2.5H17.5V5.85938L14.1406 2.5Z\" fill=\"#3A3A3A\"></path>\n</svg>\n";

},{}],"ksAer":[function(require,module,exports) {
module.exports = "<svg width=\"20\" height=\"19\" viewBox=\"0 0 20 19\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M19.375 17H18.75V15.4375C18.75 14.9297 18.3203 14.5 17.8125 14.5H16.25V7.625H15V14.5H12.5V7.625H11.25V14.5H8.75V7.625H7.5V14.5H5V7.625H3.75V14.5H2.1875C1.64062 14.5 1.25 14.9297 1.25 15.4375V17H0.625C0.273438 17 0 17.3125 0 17.625V17.9375C0 18.1328 0.117188 18.25 0.3125 18.25H19.6875C19.8438 18.25 20 18.1328 20 17.9375V17.625C20 17.3125 19.6875 17 19.375 17ZM2.5 15.75H17.5V17H2.5V15.75ZM19.6875 4.8125L10.5859 0.867188C10.4297 0.828125 10.1562 0.75 10 0.75C9.80469 0.75 9.53125 0.828125 9.375 0.867188L0.273438 4.8125C0.117188 4.89062 0 5.08594 0 5.28125V5.59375C0 5.86719 0.195312 6.0625 0.46875 6.0625H1.25V6.53125C1.25 6.80469 1.44531 7 1.71875 7H18.2812C18.5156 7 18.75 6.80469 18.75 6.53125V6.0625H19.5312C19.7656 6.0625 20 5.86719 20 5.59375V5.28125C20 5.08594 19.8438 4.89062 19.6875 4.8125ZM17.5 5.75H2.5V5.24219L9.80469 2.03906C9.88281 2.03906 9.92188 2 10 2C10.0391 2 10.0781 2.03906 10.1562 2.03906L17.5 5.24219V5.75Z\" fill=\"#3A3A3A\"></path>\n</svg>\n";

},{}],"lDDSQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _vue = require("vue");
var _config = require("../config");
var _configDefault = parcelHelpers.interopDefault(_config);
function useSearchUrl(q) {
    const datasetUrl = (0, _vue.computed)(()=>`${(0, _configDefault.default).values.datasetUrl}?q=${q.value}`);
    const organizationUrl = (0, _vue.computed)(()=>`${(0, _configDefault.default).values.organizationUrl}?q=${q.value}`);
    const reuseUrl = (0, _vue.computed)(()=>`${(0, _configDefault.default).values.reuseUrl}?q=${q.value}`);
    return {
        datasetUrl,
        organizationUrl,
        reuseUrl
    };
}
exports.default = useSearchUrl;

},{"vue":"hRjhg","../config":"G7A2j","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1k5Ps":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _vue = require("vue");
var _useKeyCodes = require("./useKeyCodes");
var _useKeyCodesDefault = parcelHelpers.interopDefault(_useKeyCodes);
function useActiveDescendant(options) {
    const { KEYCODES  } = (0, _useKeyCodesDefault.default)();
    /** @type Ref<string|null> */ const selected = (0, _vue.ref)(null);
    /** @type Ref<T|null> */ const selectedOption = (0, _vue.computed)(()=>options.find((option)=>option.id === selected.value));
    /**
   *
   * @param {string|null} id
   * @returns {boolean}
   */ const isSelected = (id)=>selected.value === id;
    /**
   *
   * @param {?string} id
   */ const select = (id = null)=>{
        if (id === null) return selectAtPosition(0);
        selected.value = id;
    };
    const focusOut = ()=>{
        selected.value = null;
    };
    /**
   * Select option at position
   * @param {number} position 
   */ const selectAtPosition = (position)=>{
        select(options[position].id);
    };
    const selectNextOption = ()=>{
        let selectedPosition = 0;
        if (selected.value) {
            selectedPosition = options.findIndex((option)=>option.id === selected.value);
            selectedPosition++;
            if (selectedPosition === options.length) selectedPosition = 0;
        }
        selectAtPosition(selectedPosition);
    };
    const selectPreviousOption = ()=>{
        const lastOptionPosition = options.length - 1;
        let selectedPosition = lastOptionPosition;
        if (selected.value) {
            selectedPosition = options.findIndex((option)=>option.id === selected.value);
            selectedPosition--;
            if (selectedPosition < 0) selectedPosition = lastOptionPosition;
        }
        selectAtPosition(selectedPosition);
    };
    /**
   *
   * @param {KeyboardEvent} key
   * @param {boolean} alreadyMovedDown
   */ const handleKeyPressForActiveDescendant = (key, alreadyMovedDown = false)=>{
        switch(key.keyCode){
            case KEYCODES.DOWN:
                if (!alreadyMovedDown && !key.altKey) selectNextOption();
                break;
            case KEYCODES.UP:
                selectPreviousOption();
                break;
            case KEYCODES.LEFT:
            case KEYCODES.RIGHT:
            case KEYCODES.HOME:
            case KEYCODES.END:
            case KEYCODES.ESCAPE:
                focusOut();
                break;
        }
    };
    const ALREADY_MOVED_DOWN = true;
    const NOT_MOVED_YET = false;
    return {
        select,
        selected,
        selectedOption,
        isSelected,
        focusOut,
        handleKeyPressForActiveDescendant,
        ALREADY_MOVED_DOWN,
        NOT_MOVED_YET
    };
}
exports.default = useActiveDescendant;

},{"vue":"hRjhg","./useKeyCodes":"7UvL2","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6oVOC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "render", ()=>render);
var _vue = require("vue");
const _hoisted_1 = {
    class: "fr-col fr-grid-row"
};
const _hoisted_2 = [
    "placeholder",
    "aria-controls",
    "aria-expanded",
    "aria-activedescendant"
];
const _hoisted_3 = [
    "aria-controls",
    "aria-expanded"
];
const _hoisted_4 = [
    "id"
];
const _hoisted_5 = {
    class: "fr-menu__list",
    role: "listbox"
};
const _hoisted_6 = [
    "id",
    "aria-selected"
];
function render(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_MenuSearchOption = (0, _vue.resolveComponent)("MenuSearchOption");
    return (0, _vue.openBlock)(), (0, _vue.createElementBlock)("div", _hoisted_1, [
        (0, _vue.withDirectives)((0, _vue.createElementVNode)("input", {
            class: "fr-input fr-col",
            placeholder: _ctx.$t("Search"),
            ref: "input",
            autocomplete: "off",
            role: "combobox",
            "aria-autocomplete": "list",
            "aria-controls": _ctx.uid,
            "aria-expanded": _ctx.expanded,
            id: "search-input",
            "data-cy": "search-input",
            "aria-activedescendant": _ctx.selected,
            name: "q",
            "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event)=>_ctx.q = $event),
            onClickCapture: _cache[1] || (_cache[1] = (0, _vue.withModifiers)((...args)=>_ctx.showAndSelectIfQuery && _ctx.showAndSelectIfQuery(...args), [
                "stop"
            ])),
            onKeydown: _cache[2] || (_cache[2] = (...args)=>_ctx.handleKeyDown && _ctx.handleKeyDown(...args)),
            onKeypress: _cache[3] || (_cache[3] = (0, _vue.withKeys)((0, _vue.withModifiers)((...args)=>_ctx.searchSelectedOption && _ctx.searchSelectedOption(...args), [
                "prevent"
            ]), [
                "enter"
            ])),
            onBlur: _cache[4] || (_cache[4] = (...args)=>_ctx.handleFocusOut && _ctx.handleFocusOut(...args))
        }, null, 40 /* PROPS, HYDRATE_EVENTS */ , _hoisted_2), [
            [
                (0, _vue.vModelText),
                _ctx.q
            ]
        ]),
        (0, _vue.createElementVNode)("button", {
            type: "button",
            ref: "button",
            class: "fr-btn",
            tabindex: "-1",
            "aria-controls": _ctx.uid,
            "aria-expanded": _ctx.expanded,
            onClickCapture: _cache[5] || (_cache[5] = (0, _vue.withModifiers)((...args)=>_ctx.showAndFocus && _ctx.showAndFocus(...args), [
                "prevent",
                "stop"
            ]))
        }, (0, _vue.toDisplayString)(_ctx.$t("Search")), 41 /* TEXT, PROPS, HYDRATE_EVENTS */ , _hoisted_3),
        (0, _vue.createElementVNode)("div", {
            class: "fr-menu fr-collapse autocomplete",
            id: _ctx.uid,
            ref: "list",
            role: "listbox",
            "aria-labelledby": "search-label",
            onMousedown: _cache[6] || (_cache[6] = (0, _vue.withModifiers)(()=>{}, [
                "prevent"
            ]))
        }, [
            (0, _vue.createElementVNode)("ul", _hoisted_5, [
                ((0, _vue.openBlock)(true), (0, _vue.createElementBlock)((0, _vue.Fragment), null, (0, _vue.renderList)(_ctx.options, (option)=>{
                    return (0, _vue.openBlock)(), (0, _vue.createElementBlock)("li", {
                        key: option.id,
                        id: option.id,
                        role: "option",
                        "aria-selected": _ctx.isSelected(option.id)
                    }, [
                        (0, _vue.createVNode)(_component_MenuSearchOption, {
                            icon: option.icon,
                            query: _ctx.q,
                            type: option.type,
                            link: option.link
                        }, null, 8 /* PROPS */ , [
                            "icon",
                            "query",
                            "type",
                            "link"
                        ])
                    ], 8 /* PROPS */ , _hoisted_6);
                }), 128 /* KEYED_FRAGMENT */ ))
            ])
        ], 40 /* PROPS, HYDRATE_EVENTS */ , _hoisted_4)
    ]);
}
if (module.hot) module.hot.accept(()=>{
    __VUE_HMR_RUNTIME__.rerender("c559ec-hmr", render);
});

},{"vue":"hRjhg","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6UFUs":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
let NOOP = ()=>{};
exports.default = (script)=>{};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"JGfuh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
let script;
let initialize = ()=>{
    script = require("script:./search.vue");
    if (script.__esModule) script = script.default;
    script.render = require("template:./search.vue").render;
    require("custom:./search.vue").default(script);
    script.__scopeId = "data-v-59d15d";
    script.__file = "/home/babel/Documents/workspace/udata_workspace/udata-front/theme/js/components/search/search.vue";
};
initialize();
if (module.hot) {
    script.__hmrId = "59d15d-hmr";
    module.hot.accept(()=>{
        setTimeout(()=>{
            initialize();
            if (!__VUE_HMR_RUNTIME__.createRecord("59d15d-hmr", script)) __VUE_HMR_RUNTIME__.reload("59d15d-hmr", script);
        }, 0);
    });
}
exports.default = script;

},{"script:./search.vue":"lFPIH","template:./search.vue":"jL1yZ","custom:./search.vue":"917yS","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lFPIH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _vue = require("vue");
var _vueI18N = require("vue-i18n");
var _axios = require("axios");
var _axiosDefault = parcelHelpers.interopDefault(_axios);
var _api = require("../../plugins/api");
var _useToast = require("../../composables/useToast");
var _useSearchUrl = require("../../composables/useSearchUrl");
var _useSearchUrlDefault = parcelHelpers.interopDefault(_useSearchUrl);
var _searchInputVue = require("./search-input.vue");
var _searchInputVueDefault = parcelHelpers.interopDefault(_searchInputVue);
var _searchResultVue = require("../dataset/search-result.vue");
var _searchResultVueDefault = parcelHelpers.interopDefault(_searchResultVue);
var _loaderVue = require("../dataset/loader.vue");
var _loaderVueDefault = parcelHelpers.interopDefault(_loaderVue);
var _schemaFilterVue = require("./schema-filter.vue");
var _schemaFilterVueDefault = parcelHelpers.interopDefault(_schemaFilterVue);
var _emptyVue = require("./empty.vue");
var _emptyVueDefault = parcelHelpers.interopDefault(_emptyVue);
var _paginationVue = require("../pagination/pagination.vue");
var _paginationVueDefault = parcelHelpers.interopDefault(_paginationVue);
var _multiSelectVue = require("./multi-select.vue");
var _multiSelectVueDefault = parcelHelpers.interopDefault(_multiSelectVue);
var _config = require("../../config");
var _useDebouncedRef = require("../../composables/useDebouncedRef");
exports.default = (0, _vue.defineComponent)({
    inheritAttrs: false,
    components: {
        MultiSelect: (0, _multiSelectVueDefault.default),
        SearchInput: (0, _searchInputVueDefault.default),
        SchemaFilter: (0, _schemaFilterVueDefault.default),
        Dataset: (0, _searchResultVueDefault.default),
        Empty: (0, _emptyVueDefault.default),
        Loader: (0, _loaderVueDefault.default),
        Pagination: (0, _paginationVueDefault.default)
    },
    props: {
        disableFirstSearch: {
            type: Boolean,
            default: false
        },
        sorts: {
            /** @type {import("vue").PropType<Array<{label: string, order: string, value: string}>>} */ type: Array,
            default: []
        }
    },
    setup (props) {
        const { t  } = (0, _vueI18N.useI18n)();
        const toast = (0, _useToast.useToast)();
        /**
     * Update search params from URL on page load for deep linking
     */ const url1 = new URL(window.location.href);
        const params1 = new URLSearchParams(url1.search);
        /**
     * Search query
     */ const queryString = (0, _vue.ref)("");
        /**
     * Reuse url of the query
     */ const { reuseUrl  } = (0, _useSearchUrlDefault.default)(queryString);
        /**
     * Query sort
     */ const searchSort = (0, _vue.ref)("");
        /**
     * Search results
     * @type {import("vue").Ref<Array>}
     */ const results = (0, _vue.ref)([]);
        /**
     *
     * @param {number} key
     */ const zIndex = (key)=>{
            return {
                zIndex: results.value.length - key
            };
        };
        /**
     * Count of search results
     */ const totalResults = (0, _vue.ref)(0);
        /**
     * Current page of results
     */ const currentPage = (0, _vue.ref)(1);
        /**
     * Search page size
     */ const pageSize = 20;
        /**
     * All other params are kept here as facets
     */ const facets = (0, _vue.ref)({});
        /**
     * Search loading state
     */ const loading = (0, _vue.ref)(false);
        /**
     * Current request if any to be cancelled if a new one comes
     * @type {import("vue").Ref<import("axios").CancelTokenSource | null>}
     */ const currentRequest = (0, _vue.ref)(null);
        /**
     * Vue ref to results HTML
     * @type {import("vue").Ref<HTMLElement | null>}
     */ const resultsRef = (0, _vue.ref)(null);
        /**
     * Vue ref to results HTML
     * @type {import("vue").Ref<HTMLElement | null>}
     */ const searchRef = (0, _vue.ref)(null);
        /**
     *
     * @param {Array} data
     */ const formatResults = (data)=>{
            results.value = data.map((result)=>{
                result.last_modified = new Date(result.last_modified);
                return result;
            });
            return results;
        };
        const SAVE_TO_HISTORY = true;
        const DONT_SAVE_TO_HISTORY = false;
        const updateUrl = (save = SAVE_TO_HISTORY)=>{
            // Update URL to match current search params value for deep linking
            let url = new URL(window.location.href);
            url.search = new URLSearchParams(searchParameters.value).toString();
            if (save) window.history.pushState(null, "", url);
            /** @type NodeListOf<HTMLAnchorElement> */ let linksWithQuery = document.querySelectorAll("[data-q]");
            for (let link of linksWithQuery)link.href = reuseUrl.value;
        };
        /**
     * Search new dataset results
     */ const search = (0, _useDebouncedRef.debounce)((saveToHistory = SAVE_TO_HISTORY)=>{
            loading.value = true;
            if (currentRequest.value) currentRequest.value.cancel();
            currentRequest.value = (0, _api.generateCancelToken)();
            (0, _api.apiv2).get("/datasets/search/", {
                cancelToken: currentRequest.value.token,
                params: {
                    ...searchParameters.value,
                    page_size: pageSize
                }
            }).then((res)=>res.data).then((result)=>{
                formatResults(result.data);
                totalResults.value = result.total;
                loading.value = false;
                updateUrl(saveToHistory);
            }).catch((error)=>{
                if (!(0, _axiosDefault.default).isCancel(error)) {
                    toast.error(t("Error getting search results."));
                    loading.value = false;
                }
            });
        }, (0, _config.search_autocomplete_debounce));
        /**
     * Called when user type in search field
     * @param {string} input - input typed by user
     */ const handleSearchChange = (input)=>{
            queryString.value = input;
            currentPage.value = 1;
            search();
        };
        /**
     * Called on every facet selector change, updates the `facets.xxx` object then searches with new values
     */ const handleFacetChange = (facet)=>{
            return (values)=>{
                // Values can either be an array of varying length, or a String.
                if (Array.isArray(values)) {
                    if (values.length > 1) facets.value[facet] = values.map((obj)=>obj.value);
                    else if (values.length === 1) facets.value[facet] = values[0].value;
                    else facets.value[facet] = null;
                } else if (values) facets.value[facet] = values;
                else facets.value[facet] = null;
                currentPage.value = 1;
                search();
            };
        };
        /**
     * Called when user change sort
     */ const handleSortChange = ()=>{
            currentPage.value = 1;
            search();
        };
        /**
     * Change current page
     * @param {number} page
     */ const changePage = (page)=>{
            currentPage.value = page;
            search();
            scrollToTop();
        };
        const scrollToTop = ()=>{
            if (searchRef.value) searchRef.value.scrollIntoView({
                behavior: "smooth"
            });
        };
        const reloadFilters = ({ page =1 , sort ="" , ...params } = {}, saveToHistory = SAVE_TO_HISTORY)=>{
            facets.value = params;
            currentPage.value = page;
            searchSort.value = sort;
            search(saveToHistory);
        };
        const resetFilters = ()=>{
            reloadFilters({});
        };
        const reloadForm = ({ q ="" , ...params } = {}, saveToHistory = SAVE_TO_HISTORY)=>{
            queryString.value = q;
            reloadFilters(params, saveToHistory);
        };
        /**
     * Is any filter active ?
     */ const isFiltered = (0, _vue.computed)(()=>{
            return Object.keys(facets.value).some((key)=>facets.value[key]?.length > 0);
        });
        const sortOptions = (0, _vue.computed)(()=>props.sorts.map((sort)=>({
                    value: sort.order == "asc" ? sort.value : "-" + sort.value,
                    label: sort.label
                })));
        const searchParameters = (0, _vue.computed)(()=>{
            /**
       *  @type Record<string, string>
       */ let params = {};
            for(key in facets.value)if (facets.value[key]) params[key] = facets.value[key];
            if (currentPage.value > 1) params.page = currentPage.value.toString();
            if (queryString.value) params.q = queryString.value;
            if (searchSort.value) params.sort = searchSort.value;
            return params;
        });
        const q1 = params1.get("q");
        if (q1) {
            queryString.value = q1;
            params1.delete("q");
        }
        const page1 = params1.get("page");
        if (page1) {
            currentPage.value = parseInt(page1);
            params1.delete("page");
        }
        const sort1 = params1.get("sort");
        if (sort1) {
            searchSort.value = sort1;
            params1.delete("sort");
        }
        /**
     * @type {import("vue").Ref<{organization: ?string, tag: ?string, license: ?string, format: ?string, geozone: ?string, granularity: ?string, schema: ?string}>}
     */ facets.value = Object.fromEntries(params1);
        if (props.disableFirstSearch) loading.value = true;
        else search();
        (0, _vue.onMounted)(()=>{
            if (props.disableFirstSearch && resultsRef.value) {
                let total = resultsRef.value.dataset.totalResults;
                if (total && parseInt(total) > 0) {
                    let datasetResults = resultsRef.value.dataset.results;
                    if (datasetResults) formatResults(JSON.parse(datasetResults));
                    totalResults.value = JSON.parse(total);
                }
                loading.value = false;
            }
            addEventListener("popstate", ()=>{
                // Update URL to match current search params value for deep linking
                const url = new URL(window.location.href);
                const params = {};
                for (const [key, value] of url.searchParams)params[key] = value;
                reloadForm(params, DONT_SAVE_TO_HISTORY);
            });
        });
        return {
            isFiltered,
            search,
            handleSearchChange,
            handleFacetChange,
            changePage,
            reloadForm,
            resetFilters,
            facets,
            results,
            totalResults,
            queryString,
            loading,
            pageSize,
            currentPage,
            resultsRef,
            searchRef,
            sortOptions,
            searchSort,
            handleSortChange,
            zIndex
        };
    }
});

},{"vue":"hRjhg","vue-i18n":"92JeB","axios":"jo6P5","../../plugins/api":"8P8eo","../../composables/useToast":"g8lph","../../composables/useSearchUrl":"lDDSQ","./search-input.vue":"1tej2","../dataset/search-result.vue":"Vuh1h","../dataset/loader.vue":"jXP52","./schema-filter.vue":"hHSYB","./empty.vue":"bFP1H","../pagination/pagination.vue":"1QLN3","./multi-select.vue":"1DRgy","../../config":"G7A2j","../../composables/useDebouncedRef":"a6pE2","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jo6P5":[function(require,module,exports) {
module.exports = require("./lib/axios");

},{"./lib/axios":"63MyY"}],"63MyY":[function(require,module,exports) {
"use strict";
var utils = require("./utils");
var bind = require("./helpers/bind");
var Axios = require("./core/Axios");
var mergeConfig = require("./core/mergeConfig");
var defaults = require("./defaults");
/**
 * Create an instance of Axios
 *
 * @param {Object} defaultConfig The default config for the instance
 * @return {Axios} A new instance of Axios
 */ function createInstance(defaultConfig) {
    var context = new Axios(defaultConfig);
    var instance = bind(Axios.prototype.request, context);
    // Copy axios.prototype to instance
    utils.extend(instance, Axios.prototype, context);
    // Copy context to instance
    utils.extend(instance, context);
    // Factory for creating new instances
    instance.create = function create(instanceConfig) {
        return createInstance(mergeConfig(defaultConfig, instanceConfig));
    };
    return instance;
}
// Create the default instance to be exported
var axios = createInstance(defaults);
// Expose Axios class to allow class inheritance
axios.Axios = Axios;
// Expose Cancel & CancelToken
axios.Cancel = require("./cancel/Cancel");
axios.CancelToken = require("./cancel/CancelToken");
axios.isCancel = require("./cancel/isCancel");
axios.VERSION = require("./env/data").version;
// Expose all/spread
axios.all = function all(promises) {
    return Promise.all(promises);
};
axios.spread = require("./helpers/spread");
// Expose isAxiosError
axios.isAxiosError = require("./helpers/isAxiosError");
module.exports = axios;
// Allow use of default import syntax in TypeScript
module.exports.default = axios;

},{"./utils":"5By4s","./helpers/bind":"haRQb","./core/Axios":"cpqD8","./core/mergeConfig":"b85oP","./defaults":"hXfHM","./cancel/Cancel":"kjMy2","./cancel/CancelToken":"45wzn","./cancel/isCancel":"a0VmF","./env/data":"h29L9","./helpers/spread":"dyQ8N","./helpers/isAxiosError":"eyiLq"}],"5By4s":[function(require,module,exports) {
"use strict";
var bind = require("./helpers/bind");
// utils is a library of generic helper functions non-specific to axios
var toString = Object.prototype.toString;
/**
 * Determine if a value is an Array
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Array, otherwise false
 */ function isArray(val) {
    return Array.isArray(val);
}
/**
 * Determine if a value is undefined
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if the value is undefined, otherwise false
 */ function isUndefined(val) {
    return typeof val === "undefined";
}
/**
 * Determine if a value is a Buffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Buffer, otherwise false
 */ function isBuffer(val) {
    return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor) && typeof val.constructor.isBuffer === "function" && val.constructor.isBuffer(val);
}
/**
 * Determine if a value is an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
 */ function isArrayBuffer(val) {
    return toString.call(val) === "[object ArrayBuffer]";
}
/**
 * Determine if a value is a FormData
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an FormData, otherwise false
 */ function isFormData(val) {
    return toString.call(val) === "[object FormData]";
}
/**
 * Determine if a value is a view on an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
 */ function isArrayBufferView(val) {
    var result;
    if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) result = ArrayBuffer.isView(val);
    else result = val && val.buffer && isArrayBuffer(val.buffer);
    return result;
}
/**
 * Determine if a value is a String
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a String, otherwise false
 */ function isString(val) {
    return typeof val === "string";
}
/**
 * Determine if a value is a Number
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Number, otherwise false
 */ function isNumber(val) {
    return typeof val === "number";
}
/**
 * Determine if a value is an Object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Object, otherwise false
 */ function isObject(val) {
    return val !== null && typeof val === "object";
}
/**
 * Determine if a value is a plain Object
 *
 * @param {Object} val The value to test
 * @return {boolean} True if value is a plain Object, otherwise false
 */ function isPlainObject(val) {
    if (toString.call(val) !== "[object Object]") return false;
    var prototype = Object.getPrototypeOf(val);
    return prototype === null || prototype === Object.prototype;
}
/**
 * Determine if a value is a Date
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Date, otherwise false
 */ function isDate(val) {
    return toString.call(val) === "[object Date]";
}
/**
 * Determine if a value is a File
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a File, otherwise false
 */ function isFile(val) {
    return toString.call(val) === "[object File]";
}
/**
 * Determine if a value is a Blob
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Blob, otherwise false
 */ function isBlob(val) {
    return toString.call(val) === "[object Blob]";
}
/**
 * Determine if a value is a Function
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Function, otherwise false
 */ function isFunction(val) {
    return toString.call(val) === "[object Function]";
}
/**
 * Determine if a value is a Stream
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Stream, otherwise false
 */ function isStream(val) {
    return isObject(val) && isFunction(val.pipe);
}
/**
 * Determine if a value is a URLSearchParams object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a URLSearchParams object, otherwise false
 */ function isURLSearchParams(val) {
    return toString.call(val) === "[object URLSearchParams]";
}
/**
 * Trim excess whitespace off the beginning and end of a string
 *
 * @param {String} str The String to trim
 * @returns {String} The String freed of excess whitespace
 */ function trim(str) {
    return str.trim ? str.trim() : str.replace(/^\s+|\s+$/g, "");
}
/**
 * Determine if we're running in a standard browser environment
 *
 * This allows axios to run in a web worker, and react-native.
 * Both environments support XMLHttpRequest, but not fully standard globals.
 *
 * web workers:
 *  typeof window -> undefined
 *  typeof document -> undefined
 *
 * react-native:
 *  navigator.product -> 'ReactNative'
 * nativescript
 *  navigator.product -> 'NativeScript' or 'NS'
 */ function isStandardBrowserEnv() {
    if (typeof navigator !== "undefined" && (navigator.product === "ReactNative" || navigator.product === "NativeScript" || navigator.product === "NS")) return false;
    return typeof window !== "undefined" && typeof document !== "undefined";
}
/**
 * Iterate over an Array or an Object invoking a function for each item.
 *
 * If `obj` is an Array callback will be called passing
 * the value, index, and complete array for each item.
 *
 * If 'obj' is an Object callback will be called passing
 * the value, key, and complete object for each property.
 *
 * @param {Object|Array} obj The object to iterate
 * @param {Function} fn The callback to invoke for each item
 */ function forEach(obj, fn) {
    // Don't bother if no value provided
    if (obj === null || typeof obj === "undefined") return;
    // Force an array if not already something iterable
    if (typeof obj !== "object") /*eslint no-param-reassign:0*/ obj = [
        obj
    ];
    if (isArray(obj)) // Iterate over array values
    for(var i = 0, l = obj.length; i < l; i++)fn.call(null, obj[i], i, obj);
    else {
        // Iterate over object keys
        for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) fn.call(null, obj[key], key, obj);
    }
}
/**
 * Accepts varargs expecting each argument to be an object, then
 * immutably merges the properties of each object and returns result.
 *
 * When multiple objects contain the same key the later object in
 * the arguments list will take precedence.
 *
 * Example:
 *
 * ```js
 * var result = merge({foo: 123}, {foo: 456});
 * console.log(result.foo); // outputs 456
 * ```
 *
 * @param {Object} obj1 Object to merge
 * @returns {Object} Result of all merge properties
 */ function merge() {
    var result = {};
    function assignValue(val, key) {
        if (isPlainObject(result[key]) && isPlainObject(val)) result[key] = merge(result[key], val);
        else if (isPlainObject(val)) result[key] = merge({}, val);
        else if (isArray(val)) result[key] = val.slice();
        else result[key] = val;
    }
    for(var i = 0, l = arguments.length; i < l; i++)forEach(arguments[i], assignValue);
    return result;
}
/**
 * Extends object a by mutably adding to it the properties of object b.
 *
 * @param {Object} a The object to be extended
 * @param {Object} b The object to copy properties from
 * @param {Object} thisArg The object to bind function to
 * @return {Object} The resulting value of object a
 */ function extend(a, b, thisArg) {
    forEach(b, function assignValue(val, key) {
        if (thisArg && typeof val === "function") a[key] = bind(val, thisArg);
        else a[key] = val;
    });
    return a;
}
/**
 * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)
 *
 * @param {string} content with BOM
 * @return {string} content value without BOM
 */ function stripBOM(content) {
    if (content.charCodeAt(0) === 0xFEFF) content = content.slice(1);
    return content;
}
module.exports = {
    isArray: isArray,
    isArrayBuffer: isArrayBuffer,
    isBuffer: isBuffer,
    isFormData: isFormData,
    isArrayBufferView: isArrayBufferView,
    isString: isString,
    isNumber: isNumber,
    isObject: isObject,
    isPlainObject: isPlainObject,
    isUndefined: isUndefined,
    isDate: isDate,
    isFile: isFile,
    isBlob: isBlob,
    isFunction: isFunction,
    isStream: isStream,
    isURLSearchParams: isURLSearchParams,
    isStandardBrowserEnv: isStandardBrowserEnv,
    forEach: forEach,
    merge: merge,
    extend: extend,
    trim: trim,
    stripBOM: stripBOM
};

},{"./helpers/bind":"haRQb"}],"haRQb":[function(require,module,exports) {
"use strict";
module.exports = function bind(fn, thisArg) {
    return function wrap() {
        var args = new Array(arguments.length);
        for(var i = 0; i < args.length; i++)args[i] = arguments[i];
        return fn.apply(thisArg, args);
    };
};

},{}],"cpqD8":[function(require,module,exports) {
"use strict";
var utils = require("./../utils");
var buildURL = require("../helpers/buildURL");
var InterceptorManager = require("./InterceptorManager");
var dispatchRequest = require("./dispatchRequest");
var mergeConfig = require("./mergeConfig");
var validator = require("../helpers/validator");
var validators = validator.validators;
/**
 * Create a new instance of Axios
 *
 * @param {Object} instanceConfig The default config for the instance
 */ function Axios(instanceConfig) {
    this.defaults = instanceConfig;
    this.interceptors = {
        request: new InterceptorManager(),
        response: new InterceptorManager()
    };
}
/**
 * Dispatch a request
 *
 * @param {Object} config The config specific for this request (merged with this.defaults)
 */ Axios.prototype.request = function request(configOrUrl, config) {
    /*eslint no-param-reassign:0*/ // Allow for axios('example/url'[, config]) a la fetch API
    if (typeof configOrUrl === "string") {
        config = config || {};
        config.url = configOrUrl;
    } else config = configOrUrl || {};
    config = mergeConfig(this.defaults, config);
    // Set config.method
    if (config.method) config.method = config.method.toLowerCase();
    else if (this.defaults.method) config.method = this.defaults.method.toLowerCase();
    else config.method = "get";
    var transitional = config.transitional;
    if (transitional !== undefined) validator.assertOptions(transitional, {
        silentJSONParsing: validators.transitional(validators.boolean),
        forcedJSONParsing: validators.transitional(validators.boolean),
        clarifyTimeoutError: validators.transitional(validators.boolean)
    }, false);
    // filter out skipped interceptors
    var requestInterceptorChain = [];
    var synchronousRequestInterceptors = true;
    this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
        if (typeof interceptor.runWhen === "function" && interceptor.runWhen(config) === false) return;
        synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;
        requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
    });
    var responseInterceptorChain = [];
    this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
        responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
    });
    var promise;
    if (!synchronousRequestInterceptors) {
        var chain = [
            dispatchRequest,
            undefined
        ];
        Array.prototype.unshift.apply(chain, requestInterceptorChain);
        chain = chain.concat(responseInterceptorChain);
        promise = Promise.resolve(config);
        while(chain.length)promise = promise.then(chain.shift(), chain.shift());
        return promise;
    }
    var newConfig = config;
    while(requestInterceptorChain.length){
        var onFulfilled = requestInterceptorChain.shift();
        var onRejected = requestInterceptorChain.shift();
        try {
            newConfig = onFulfilled(newConfig);
        } catch (error) {
            onRejected(error);
            break;
        }
    }
    try {
        promise = dispatchRequest(newConfig);
    } catch (error) {
        return Promise.reject(error);
    }
    while(responseInterceptorChain.length)promise = promise.then(responseInterceptorChain.shift(), responseInterceptorChain.shift());
    return promise;
};
Axios.prototype.getUri = function getUri(config) {
    config = mergeConfig(this.defaults, config);
    return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\?/, "");
};
// Provide aliases for supported request methods
utils.forEach([
    "delete",
    "get",
    "head",
    "options"
], function forEachMethodNoData(method) {
    /*eslint func-names:0*/ Axios.prototype[method] = function(url, config) {
        return this.request(mergeConfig(config || {}, {
            method: method,
            url: url,
            data: (config || {}).data
        }));
    };
});
utils.forEach([
    "post",
    "put",
    "patch"
], function forEachMethodWithData(method) {
    /*eslint func-names:0*/ Axios.prototype[method] = function(url, data, config) {
        return this.request(mergeConfig(config || {}, {
            method: method,
            url: url,
            data: data
        }));
    };
});
module.exports = Axios;

},{"./../utils":"5By4s","../helpers/buildURL":"3bwC2","./InterceptorManager":"1VRIM","./dispatchRequest":"6sjJ6","./mergeConfig":"b85oP","../helpers/validator":"9vgkY"}],"3bwC2":[function(require,module,exports) {
"use strict";
var utils = require("./../utils");
function encode(val) {
    return encodeURIComponent(val).replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+").replace(/%5B/gi, "[").replace(/%5D/gi, "]");
}
/**
 * Build a URL by appending params to the end
 *
 * @param {string} url The base of the url (e.g., http://www.google.com)
 * @param {object} [params] The params to be appended
 * @returns {string} The formatted url
 */ module.exports = function buildURL(url, params, paramsSerializer) {
    /*eslint no-param-reassign:0*/ if (!params) return url;
    var serializedParams;
    if (paramsSerializer) serializedParams = paramsSerializer(params);
    else if (utils.isURLSearchParams(params)) serializedParams = params.toString();
    else {
        var parts = [];
        utils.forEach(params, function serialize(val, key) {
            if (val === null || typeof val === "undefined") return;
            if (utils.isArray(val)) key = key + "[]";
            else val = [
                val
            ];
            utils.forEach(val, function parseValue(v) {
                if (utils.isDate(v)) v = v.toISOString();
                else if (utils.isObject(v)) v = JSON.stringify(v);
                parts.push(encode(key) + "=" + encode(v));
            });
        });
        serializedParams = parts.join("&");
    }
    if (serializedParams) {
        var hashmarkIndex = url.indexOf("#");
        if (hashmarkIndex !== -1) url = url.slice(0, hashmarkIndex);
        url += (url.indexOf("?") === -1 ? "?" : "&") + serializedParams;
    }
    return url;
};

},{"./../utils":"5By4s"}],"1VRIM":[function(require,module,exports) {
"use strict";
var utils = require("./../utils");
function InterceptorManager() {
    this.handlers = [];
}
/**
 * Add a new interceptor to the stack
 *
 * @param {Function} fulfilled The function to handle `then` for a `Promise`
 * @param {Function} rejected The function to handle `reject` for a `Promise`
 *
 * @return {Number} An ID used to remove interceptor later
 */ InterceptorManager.prototype.use = function use(fulfilled, rejected, options) {
    this.handlers.push({
        fulfilled: fulfilled,
        rejected: rejected,
        synchronous: options ? options.synchronous : false,
        runWhen: options ? options.runWhen : null
    });
    return this.handlers.length - 1;
};
/**
 * Remove an interceptor from the stack
 *
 * @param {Number} id The ID that was returned by `use`
 */ InterceptorManager.prototype.eject = function eject(id) {
    if (this.handlers[id]) this.handlers[id] = null;
};
/**
 * Iterate over all the registered interceptors
 *
 * This method is particularly useful for skipping over any
 * interceptors that may have become `null` calling `eject`.
 *
 * @param {Function} fn The function to call for each interceptor
 */ InterceptorManager.prototype.forEach = function forEach(fn) {
    utils.forEach(this.handlers, function forEachHandler(h) {
        if (h !== null) fn(h);
    });
};
module.exports = InterceptorManager;

},{"./../utils":"5By4s"}],"6sjJ6":[function(require,module,exports) {
"use strict";
var utils = require("./../utils");
var transformData = require("./transformData");
var isCancel = require("../cancel/isCancel");
var defaults = require("../defaults");
var Cancel = require("../cancel/Cancel");
/**
 * Throws a `Cancel` if cancellation has been requested.
 */ function throwIfCancellationRequested(config) {
    if (config.cancelToken) config.cancelToken.throwIfRequested();
    if (config.signal && config.signal.aborted) throw new Cancel("canceled");
}
/**
 * Dispatch a request to the server using the configured adapter.
 *
 * @param {object} config The config that is to be used for the request
 * @returns {Promise} The Promise to be fulfilled
 */ module.exports = function dispatchRequest(config) {
    throwIfCancellationRequested(config);
    // Ensure headers exist
    config.headers = config.headers || {};
    // Transform request data
    config.data = transformData.call(config, config.data, config.headers, config.transformRequest);
    // Flatten headers
    config.headers = utils.merge(config.headers.common || {}, config.headers[config.method] || {}, config.headers);
    utils.forEach([
        "delete",
        "get",
        "head",
        "post",
        "put",
        "patch",
        "common"
    ], function cleanHeaderConfig(method) {
        delete config.headers[method];
    });
    var adapter = config.adapter || defaults.adapter;
    return adapter(config).then(function onAdapterResolution(response) {
        throwIfCancellationRequested(config);
        // Transform response data
        response.data = transformData.call(config, response.data, response.headers, config.transformResponse);
        return response;
    }, function onAdapterRejection(reason) {
        if (!isCancel(reason)) {
            throwIfCancellationRequested(config);
            // Transform response data
            if (reason && reason.response) reason.response.data = transformData.call(config, reason.response.data, reason.response.headers, config.transformResponse);
        }
        return Promise.reject(reason);
    });
};

},{"./../utils":"5By4s","./transformData":"eRqJY","../cancel/isCancel":"a0VmF","../defaults":"hXfHM","../cancel/Cancel":"kjMy2"}],"eRqJY":[function(require,module,exports) {
"use strict";
var utils = require("./../utils");
var defaults = require("../defaults");
/**
 * Transform the data for a request or a response
 *
 * @param {Object|String} data The data to be transformed
 * @param {Array} headers The headers for the request or response
 * @param {Array|Function} fns A single function or Array of functions
 * @returns {*} The resulting transformed data
 */ module.exports = function transformData(data, headers, fns) {
    var context = this || defaults;
    /*eslint no-param-reassign:0*/ utils.forEach(fns, function transform(fn) {
        data = fn.call(context, data, headers);
    });
    return data;
};

},{"./../utils":"5By4s","../defaults":"hXfHM"}],"hXfHM":[function(require,module,exports) {
"use strict";
var process = require("process");
var utils = require("../utils");
var normalizeHeaderName = require("../helpers/normalizeHeaderName");
var enhanceError = require("../core/enhanceError");
var transitionalDefaults = require("./transitional");
var DEFAULT_CONTENT_TYPE = {
    "Content-Type": "application/x-www-form-urlencoded"
};
function setContentTypeIfUnset(headers, value) {
    if (!utils.isUndefined(headers) && utils.isUndefined(headers["Content-Type"])) headers["Content-Type"] = value;
}
function getDefaultAdapter() {
    var adapter;
    if (typeof XMLHttpRequest !== "undefined") // For browsers use XHR adapter
    adapter = require("../adapters/xhr");
    else if (typeof process !== "undefined" && Object.prototype.toString.call(process) === "[object process]") // For node use HTTP adapter
    adapter = require("../adapters/http");
    return adapter;
}
function stringifySafely(rawValue, parser, encoder) {
    if (utils.isString(rawValue)) try {
        (parser || JSON.parse)(rawValue);
        return utils.trim(rawValue);
    } catch (e) {
        if (e.name !== "SyntaxError") throw e;
    }
    return (encoder || JSON.stringify)(rawValue);
}
var defaults = {
    transitional: transitionalDefaults,
    adapter: getDefaultAdapter(),
    transformRequest: [
        function transformRequest(data, headers) {
            normalizeHeaderName(headers, "Accept");
            normalizeHeaderName(headers, "Content-Type");
            if (utils.isFormData(data) || utils.isArrayBuffer(data) || utils.isBuffer(data) || utils.isStream(data) || utils.isFile(data) || utils.isBlob(data)) return data;
            if (utils.isArrayBufferView(data)) return data.buffer;
            if (utils.isURLSearchParams(data)) {
                setContentTypeIfUnset(headers, "application/x-www-form-urlencoded;charset=utf-8");
                return data.toString();
            }
            if (utils.isObject(data) || headers && headers["Content-Type"] === "application/json") {
                setContentTypeIfUnset(headers, "application/json");
                return stringifySafely(data);
            }
            return data;
        }
    ],
    transformResponse: [
        function transformResponse(data) {
            var transitional = this.transitional || defaults.transitional;
            var silentJSONParsing = transitional && transitional.silentJSONParsing;
            var forcedJSONParsing = transitional && transitional.forcedJSONParsing;
            var strictJSONParsing = !silentJSONParsing && this.responseType === "json";
            if (strictJSONParsing || forcedJSONParsing && utils.isString(data) && data.length) try {
                return JSON.parse(data);
            } catch (e) {
                if (strictJSONParsing) {
                    if (e.name === "SyntaxError") throw enhanceError(e, this, "E_JSON_PARSE");
                    throw e;
                }
            }
            return data;
        }
    ],
    /**
   * A timeout in milliseconds to abort a request. If set to 0 (default) a
   * timeout is not created.
   */ timeout: 0,
    xsrfCookieName: "XSRF-TOKEN",
    xsrfHeaderName: "X-XSRF-TOKEN",
    maxContentLength: -1,
    maxBodyLength: -1,
    validateStatus: function validateStatus(status) {
        return status >= 200 && status < 300;
    },
    headers: {
        common: {
            "Accept": "application/json, text/plain, */*"
        }
    }
};
utils.forEach([
    "delete",
    "get",
    "head"
], function forEachMethodNoData(method) {
    defaults.headers[method] = {};
});
utils.forEach([
    "post",
    "put",
    "patch"
], function forEachMethodWithData(method) {
    defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
});
module.exports = defaults;

},{"process":"d5jf4","../utils":"5By4s","../helpers/normalizeHeaderName":"adBZo","../core/enhanceError":"itUQr","./transitional":"lM32f","../adapters/xhr":"ldm57","../adapters/http":"ldm57"}],"d5jf4":[function(require,module,exports) {
// shim for using process in browser
var process = module.exports = {};
// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.
var cachedSetTimeout;
var cachedClearTimeout;
function defaultSetTimout() {
    throw new Error("setTimeout has not been defined");
}
function defaultClearTimeout() {
    throw new Error("clearTimeout has not been defined");
}
(function() {
    try {
        if (typeof setTimeout === "function") cachedSetTimeout = setTimeout;
        else cachedSetTimeout = defaultSetTimout;
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === "function") cachedClearTimeout = clearTimeout;
        else cachedClearTimeout = defaultClearTimeout;
    } catch (e1) {
        cachedClearTimeout = defaultClearTimeout;
    }
})();
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) //normal enviroments in sane situations
    return setTimeout(fun, 0);
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }
}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) //normal enviroments in sane situations
    return clearTimeout(marker);
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }
}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;
function cleanUpNextTick() {
    if (!draining || !currentQueue) return;
    draining = false;
    if (currentQueue.length) queue = currentQueue.concat(queue);
    else queueIndex = -1;
    if (queue.length) drainQueue();
}
function drainQueue() {
    if (draining) return;
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;
    var len = queue.length;
    while(len){
        currentQueue = queue;
        queue = [];
        while(++queueIndex < len)if (currentQueue) currentQueue[queueIndex].run();
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}
process.nextTick = function(fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) for(var i = 1; i < arguments.length; i++)args[i - 1] = arguments[i];
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) runTimeout(drainQueue);
};
// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function() {
    this.fun.apply(null, this.array);
};
process.title = "browser";
process.browser = true;
process.env = {};
process.argv = [];
process.version = ""; // empty string to avoid regexp issues
process.versions = {};
function noop() {}
process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;
process.listeners = function(name) {
    return [];
};
process.binding = function(name) {
    throw new Error("process.binding is not supported");
};
process.cwd = function() {
    return "/";
};
process.chdir = function(dir) {
    throw new Error("process.chdir is not supported");
};
process.umask = function() {
    return 0;
};

},{}],"adBZo":[function(require,module,exports) {
"use strict";
var utils = require("../utils");
module.exports = function normalizeHeaderName(headers, normalizedName) {
    utils.forEach(headers, function processHeader(value, name) {
        if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
            headers[normalizedName] = value;
            delete headers[name];
        }
    });
};

},{"../utils":"5By4s"}],"itUQr":[function(require,module,exports) {
"use strict";
/**
 * Update an Error with the specified config, error code, and response.
 *
 * @param {Error} error The error to update.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The error.
 */ module.exports = function enhanceError(error, config, code, request, response) {
    error.config = config;
    if (code) error.code = code;
    error.request = request;
    error.response = response;
    error.isAxiosError = true;
    error.toJSON = function toJSON() {
        return {
            // Standard
            message: this.message,
            name: this.name,
            // Microsoft
            description: this.description,
            number: this.number,
            // Mozilla
            fileName: this.fileName,
            lineNumber: this.lineNumber,
            columnNumber: this.columnNumber,
            stack: this.stack,
            // Axios
            config: this.config,
            code: this.code,
            status: this.response && this.response.status ? this.response.status : null
        };
    };
    return error;
};

},{}],"lM32f":[function(require,module,exports) {
"use strict";
module.exports = {
    silentJSONParsing: true,
    forcedJSONParsing: true,
    clarifyTimeoutError: false
};

},{}],"ldm57":[function(require,module,exports) {
"use strict";
var utils = require("./../utils");
var settle = require("./../core/settle");
var cookies = require("./../helpers/cookies");
var buildURL = require("./../helpers/buildURL");
var buildFullPath = require("../core/buildFullPath");
var parseHeaders = require("./../helpers/parseHeaders");
var isURLSameOrigin = require("./../helpers/isURLSameOrigin");
var createError = require("../core/createError");
var transitionalDefaults = require("../defaults/transitional");
var Cancel = require("../cancel/Cancel");
module.exports = function xhrAdapter(config) {
    return new Promise(function dispatchXhrRequest(resolve, reject) {
        var requestData = config.data;
        var requestHeaders = config.headers;
        var responseType = config.responseType;
        var onCanceled;
        function done() {
            if (config.cancelToken) config.cancelToken.unsubscribe(onCanceled);
            if (config.signal) config.signal.removeEventListener("abort", onCanceled);
        }
        if (utils.isFormData(requestData)) delete requestHeaders["Content-Type"]; // Let the browser set it
        var request = new XMLHttpRequest();
        // HTTP basic authentication
        if (config.auth) {
            var username = config.auth.username || "";
            var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : "";
            requestHeaders.Authorization = "Basic " + btoa(username + ":" + password);
        }
        var fullPath = buildFullPath(config.baseURL, config.url);
        request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);
        // Set the request timeout in MS
        request.timeout = config.timeout;
        function onloadend() {
            if (!request) return;
            // Prepare the response
            var responseHeaders = "getAllResponseHeaders" in request ? parseHeaders(request.getAllResponseHeaders()) : null;
            var responseData = !responseType || responseType === "text" || responseType === "json" ? request.responseText : request.response;
            var response = {
                data: responseData,
                status: request.status,
                statusText: request.statusText,
                headers: responseHeaders,
                config: config,
                request: request
            };
            settle(function _resolve(value) {
                resolve(value);
                done();
            }, function _reject(err) {
                reject(err);
                done();
            }, response);
            // Clean up request
            request = null;
        }
        if ("onloadend" in request) // Use onloadend if available
        request.onloadend = onloadend;
        else // Listen for ready state to emulate onloadend
        request.onreadystatechange = function handleLoad() {
            if (!request || request.readyState !== 4) return;
            // The request errored out and we didn't get a response, this will be
            // handled by onerror instead
            // With one exception: request that using file: protocol, most browsers
            // will return status as 0 even though it's a successful request
            if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf("file:") === 0)) return;
            // readystate handler is calling before onerror or ontimeout handlers,
            // so we should call onloadend on the next 'tick'
            setTimeout(onloadend);
        };
        // Handle browser request cancellation (as opposed to a manual cancellation)
        request.onabort = function handleAbort() {
            if (!request) return;
            reject(createError("Request aborted", config, "ECONNABORTED", request));
            // Clean up request
            request = null;
        };
        // Handle low level network errors
        request.onerror = function handleError() {
            // Real errors are hidden from us by the browser
            // onerror should only fire if it's a network error
            reject(createError("Network Error", config, null, request));
            // Clean up request
            request = null;
        };
        // Handle timeout
        request.ontimeout = function handleTimeout() {
            var timeoutErrorMessage = config.timeout ? "timeout of " + config.timeout + "ms exceeded" : "timeout exceeded";
            var transitional = config.transitional || transitionalDefaults;
            if (config.timeoutErrorMessage) timeoutErrorMessage = config.timeoutErrorMessage;
            reject(createError(timeoutErrorMessage, config, transitional.clarifyTimeoutError ? "ETIMEDOUT" : "ECONNABORTED", request));
            // Clean up request
            request = null;
        };
        // Add xsrf header
        // This is only done if running in a standard browser environment.
        // Specifically not if we're in a web worker, or react-native.
        if (utils.isStandardBrowserEnv()) {
            // Add xsrf header
            var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ? cookies.read(config.xsrfCookieName) : undefined;
            if (xsrfValue) requestHeaders[config.xsrfHeaderName] = xsrfValue;
        }
        // Add headers to the request
        if ("setRequestHeader" in request) utils.forEach(requestHeaders, function setRequestHeader(val, key) {
            if (typeof requestData === "undefined" && key.toLowerCase() === "content-type") // Remove Content-Type if data is undefined
            delete requestHeaders[key];
            else // Otherwise add header to the request
            request.setRequestHeader(key, val);
        });
        // Add withCredentials to request if needed
        if (!utils.isUndefined(config.withCredentials)) request.withCredentials = !!config.withCredentials;
        // Add responseType to request if needed
        if (responseType && responseType !== "json") request.responseType = config.responseType;
        // Handle progress if needed
        if (typeof config.onDownloadProgress === "function") request.addEventListener("progress", config.onDownloadProgress);
        // Not all browsers support upload events
        if (typeof config.onUploadProgress === "function" && request.upload) request.upload.addEventListener("progress", config.onUploadProgress);
        if (config.cancelToken || config.signal) {
            // Handle cancellation
            // eslint-disable-next-line func-names
            onCanceled = function(cancel) {
                if (!request) return;
                reject(!cancel || cancel && cancel.type ? new Cancel("canceled") : cancel);
                request.abort();
                request = null;
            };
            config.cancelToken && config.cancelToken.subscribe(onCanceled);
            if (config.signal) config.signal.aborted ? onCanceled() : config.signal.addEventListener("abort", onCanceled);
        }
        if (!requestData) requestData = null;
        // Send the request
        request.send(requestData);
    });
};

},{"./../utils":"5By4s","./../core/settle":"dD9aC","./../helpers/cookies":"4WJjt","./../helpers/buildURL":"3bwC2","../core/buildFullPath":"1I5TW","./../helpers/parseHeaders":"kqDd5","./../helpers/isURLSameOrigin":"lxXtv","../core/createError":"5nVS9","../defaults/transitional":"lM32f","../cancel/Cancel":"kjMy2"}],"dD9aC":[function(require,module,exports) {
"use strict";
var createError = require("./createError");
/**
 * Resolve or reject a Promise based on response status.
 *
 * @param {Function} resolve A function that resolves the promise.
 * @param {Function} reject A function that rejects the promise.
 * @param {object} response The response.
 */ module.exports = function settle(resolve, reject, response) {
    var validateStatus = response.config.validateStatus;
    if (!response.status || !validateStatus || validateStatus(response.status)) resolve(response);
    else reject(createError("Request failed with status code " + response.status, response.config, null, response.request, response));
};

},{"./createError":"5nVS9"}],"5nVS9":[function(require,module,exports) {
"use strict";
var enhanceError = require("./enhanceError");
/**
 * Create an Error with the specified message, config, error code, request and response.
 *
 * @param {string} message The error message.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The created error.
 */ module.exports = function createError(message, config, code, request, response) {
    var error = new Error(message);
    return enhanceError(error, config, code, request, response);
};

},{"./enhanceError":"itUQr"}],"4WJjt":[function(require,module,exports) {
"use strict";
var utils = require("./../utils");
module.exports = utils.isStandardBrowserEnv() ? // Standard browser envs support document.cookie
function standardBrowserEnv() {
    return {
        write: function write(name, value, expires, path, domain, secure) {
            var cookie = [];
            cookie.push(name + "=" + encodeURIComponent(value));
            if (utils.isNumber(expires)) cookie.push("expires=" + new Date(expires).toGMTString());
            if (utils.isString(path)) cookie.push("path=" + path);
            if (utils.isString(domain)) cookie.push("domain=" + domain);
            if (secure === true) cookie.push("secure");
            document.cookie = cookie.join("; ");
        },
        read: function read(name) {
            var match = document.cookie.match(new RegExp("(^|;\\s*)(" + name + ")=([^;]*)"));
            return match ? decodeURIComponent(match[3]) : null;
        },
        remove: function remove(name) {
            this.write(name, "", Date.now() - 86400000);
        }
    };
}() : // Non standard browser env (web workers, react-native) lack needed support.
function nonStandardBrowserEnv() {
    return {
        write: function write() {},
        read: function read() {
            return null;
        },
        remove: function remove() {}
    };
}();

},{"./../utils":"5By4s"}],"1I5TW":[function(require,module,exports) {
"use strict";
var isAbsoluteURL = require("../helpers/isAbsoluteURL");
var combineURLs = require("../helpers/combineURLs");
/**
 * Creates a new URL by combining the baseURL with the requestedURL,
 * only when the requestedURL is not already an absolute URL.
 * If the requestURL is absolute, this function returns the requestedURL untouched.
 *
 * @param {string} baseURL The base URL
 * @param {string} requestedURL Absolute or relative URL to combine
 * @returns {string} The combined full path
 */ module.exports = function buildFullPath(baseURL, requestedURL) {
    if (baseURL && !isAbsoluteURL(requestedURL)) return combineURLs(baseURL, requestedURL);
    return requestedURL;
};

},{"../helpers/isAbsoluteURL":"jD6NM","../helpers/combineURLs":"brOWK"}],"jD6NM":[function(require,module,exports) {
"use strict";
/**
 * Determines whether the specified URL is absolute
 *
 * @param {string} url The URL to test
 * @returns {boolean} True if the specified URL is absolute, otherwise false
 */ module.exports = function isAbsoluteURL(url) {
    // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
    // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
    // by any combination of letters, digits, plus, period, or hyphen.
    return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
};

},{}],"brOWK":[function(require,module,exports) {
"use strict";
/**
 * Creates a new URL by combining the specified URLs
 *
 * @param {string} baseURL The base URL
 * @param {string} relativeURL The relative URL
 * @returns {string} The combined URL
 */ module.exports = function combineURLs(baseURL, relativeURL) {
    return relativeURL ? baseURL.replace(/\/+$/, "") + "/" + relativeURL.replace(/^\/+/, "") : baseURL;
};

},{}],"kqDd5":[function(require,module,exports) {
"use strict";
var utils = require("./../utils");
// Headers whose duplicates are ignored by node
// c.f. https://nodejs.org/api/http.html#http_message_headers
var ignoreDuplicateOf = [
    "age",
    "authorization",
    "content-length",
    "content-type",
    "etag",
    "expires",
    "from",
    "host",
    "if-modified-since",
    "if-unmodified-since",
    "last-modified",
    "location",
    "max-forwards",
    "proxy-authorization",
    "referer",
    "retry-after",
    "user-agent"
];
/**
 * Parse headers into an object
 *
 * ```
 * Date: Wed, 27 Aug 2014 08:58:49 GMT
 * Content-Type: application/json
 * Connection: keep-alive
 * Transfer-Encoding: chunked
 * ```
 *
 * @param {String} headers Headers needing to be parsed
 * @returns {Object} Headers parsed into an object
 */ module.exports = function parseHeaders(headers) {
    var parsed = {};
    var key;
    var val;
    var i;
    if (!headers) return parsed;
    utils.forEach(headers.split("\n"), function parser(line) {
        i = line.indexOf(":");
        key = utils.trim(line.substr(0, i)).toLowerCase();
        val = utils.trim(line.substr(i + 1));
        if (key) {
            if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) return;
            if (key === "set-cookie") parsed[key] = (parsed[key] ? parsed[key] : []).concat([
                val
            ]);
            else parsed[key] = parsed[key] ? parsed[key] + ", " + val : val;
        }
    });
    return parsed;
};

},{"./../utils":"5By4s"}],"lxXtv":[function(require,module,exports) {
"use strict";
var utils = require("./../utils");
module.exports = utils.isStandardBrowserEnv() ? // Standard browser envs have full support of the APIs needed to test
// whether the request URL is of the same origin as current location.
function standardBrowserEnv() {
    var msie = /(msie|trident)/i.test(navigator.userAgent);
    var urlParsingNode = document.createElement("a");
    var originURL;
    /**
    * Parse a URL to discover it's components
    *
    * @param {String} url The URL to be parsed
    * @returns {Object}
    */ function resolveURL(url) {
        var href = url;
        if (msie) {
            // IE needs attribute set twice to normalize properties
            urlParsingNode.setAttribute("href", href);
            href = urlParsingNode.href;
        }
        urlParsingNode.setAttribute("href", href);
        // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
        return {
            href: urlParsingNode.href,
            protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, "") : "",
            host: urlParsingNode.host,
            search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, "") : "",
            hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, "") : "",
            hostname: urlParsingNode.hostname,
            port: urlParsingNode.port,
            pathname: urlParsingNode.pathname.charAt(0) === "/" ? urlParsingNode.pathname : "/" + urlParsingNode.pathname
        };
    }
    originURL = resolveURL(window.location.href);
    /**
    * Determine if a URL shares the same origin as the current location
    *
    * @param {String} requestURL The URL to test
    * @returns {boolean} True if URL shares the same origin, otherwise false
    */ return function isURLSameOrigin(requestURL) {
        var parsed = utils.isString(requestURL) ? resolveURL(requestURL) : requestURL;
        return parsed.protocol === originURL.protocol && parsed.host === originURL.host;
    };
}() : // Non standard browser envs (web workers, react-native) lack needed support.
function nonStandardBrowserEnv() {
    return function isURLSameOrigin() {
        return true;
    };
}();

},{"./../utils":"5By4s"}],"kjMy2":[function(require,module,exports) {
"use strict";
/**
 * A `Cancel` is an object that is thrown when an operation is canceled.
 *
 * @class
 * @param {string=} message The message.
 */ function Cancel(message) {
    this.message = message;
}
Cancel.prototype.toString = function toString() {
    return "Cancel" + (this.message ? ": " + this.message : "");
};
Cancel.prototype.__CANCEL__ = true;
module.exports = Cancel;

},{}],"a0VmF":[function(require,module,exports) {
"use strict";
module.exports = function isCancel(value) {
    return !!(value && value.__CANCEL__);
};

},{}],"b85oP":[function(require,module,exports) {
"use strict";
var utils = require("../utils");
/**
 * Config-specific merge-function which creates a new config-object
 * by merging two configuration objects together.
 *
 * @param {Object} config1
 * @param {Object} config2
 * @returns {Object} New object resulting from merging config2 to config1
 */ module.exports = function mergeConfig(config1, config2) {
    // eslint-disable-next-line no-param-reassign
    config2 = config2 || {};
    var config = {};
    function getMergedValue(target, source) {
        if (utils.isPlainObject(target) && utils.isPlainObject(source)) return utils.merge(target, source);
        else if (utils.isPlainObject(source)) return utils.merge({}, source);
        else if (utils.isArray(source)) return source.slice();
        return source;
    }
    // eslint-disable-next-line consistent-return
    function mergeDeepProperties(prop) {
        if (!utils.isUndefined(config2[prop])) return getMergedValue(config1[prop], config2[prop]);
        else if (!utils.isUndefined(config1[prop])) return getMergedValue(undefined, config1[prop]);
    }
    // eslint-disable-next-line consistent-return
    function valueFromConfig2(prop) {
        if (!utils.isUndefined(config2[prop])) return getMergedValue(undefined, config2[prop]);
    }
    // eslint-disable-next-line consistent-return
    function defaultToConfig2(prop) {
        if (!utils.isUndefined(config2[prop])) return getMergedValue(undefined, config2[prop]);
        else if (!utils.isUndefined(config1[prop])) return getMergedValue(undefined, config1[prop]);
    }
    // eslint-disable-next-line consistent-return
    function mergeDirectKeys(prop) {
        if (prop in config2) return getMergedValue(config1[prop], config2[prop]);
        else if (prop in config1) return getMergedValue(undefined, config1[prop]);
    }
    var mergeMap = {
        "url": valueFromConfig2,
        "method": valueFromConfig2,
        "data": valueFromConfig2,
        "baseURL": defaultToConfig2,
        "transformRequest": defaultToConfig2,
        "transformResponse": defaultToConfig2,
        "paramsSerializer": defaultToConfig2,
        "timeout": defaultToConfig2,
        "timeoutMessage": defaultToConfig2,
        "withCredentials": defaultToConfig2,
        "adapter": defaultToConfig2,
        "responseType": defaultToConfig2,
        "xsrfCookieName": defaultToConfig2,
        "xsrfHeaderName": defaultToConfig2,
        "onUploadProgress": defaultToConfig2,
        "onDownloadProgress": defaultToConfig2,
        "decompress": defaultToConfig2,
        "maxContentLength": defaultToConfig2,
        "maxBodyLength": defaultToConfig2,
        "transport": defaultToConfig2,
        "httpAgent": defaultToConfig2,
        "httpsAgent": defaultToConfig2,
        "cancelToken": defaultToConfig2,
        "socketPath": defaultToConfig2,
        "responseEncoding": defaultToConfig2,
        "validateStatus": mergeDirectKeys
    };
    utils.forEach(Object.keys(config1).concat(Object.keys(config2)), function computeConfigValue(prop) {
        var merge = mergeMap[prop] || mergeDeepProperties;
        var configValue = merge(prop);
        utils.isUndefined(configValue) && merge !== mergeDirectKeys || (config[prop] = configValue);
    });
    return config;
};

},{"../utils":"5By4s"}],"9vgkY":[function(require,module,exports) {
"use strict";
var VERSION = require("../env/data").version;
var validators = {};
// eslint-disable-next-line func-names
[
    "object",
    "boolean",
    "number",
    "function",
    "string",
    "symbol"
].forEach(function(type, i) {
    validators[type] = function validator(thing) {
        return typeof thing === type || "a" + (i < 1 ? "n " : " ") + type;
    };
});
var deprecatedWarnings = {};
/**
 * Transitional option validator
 * @param {function|boolean?} validator - set to false if the transitional option has been removed
 * @param {string?} version - deprecated version / removed since version
 * @param {string?} message - some message with additional info
 * @returns {function}
 */ validators.transitional = function transitional(validator, version, message) {
    function formatMessage(opt, desc) {
        return "[Axios v" + VERSION + "] Transitional option '" + opt + "'" + desc + (message ? ". " + message : "");
    }
    // eslint-disable-next-line func-names
    return function(value, opt, opts) {
        if (validator === false) throw new Error(formatMessage(opt, " has been removed" + (version ? " in " + version : "")));
        if (version && !deprecatedWarnings[opt]) {
            deprecatedWarnings[opt] = true;
            // eslint-disable-next-line no-console
            console.warn(formatMessage(opt, " has been deprecated since v" + version + " and will be removed in the near future"));
        }
        return validator ? validator(value, opt, opts) : true;
    };
};
/**
 * Assert object's properties type
 * @param {object} options
 * @param {object} schema
 * @param {boolean?} allowUnknown
 */ function assertOptions(options, schema, allowUnknown) {
    if (typeof options !== "object") throw new TypeError("options must be an object");
    var keys = Object.keys(options);
    var i = keys.length;
    while(i-- > 0){
        var opt = keys[i];
        var validator = schema[opt];
        if (validator) {
            var value = options[opt];
            var result = value === undefined || validator(value, opt, options);
            if (result !== true) throw new TypeError("option " + opt + " must be " + result);
            continue;
        }
        if (allowUnknown !== true) throw Error("Unknown option " + opt);
    }
}
module.exports = {
    assertOptions: assertOptions,
    validators: validators
};

},{"../env/data":"h29L9"}],"h29L9":[function(require,module,exports) {
module.exports = {
    "version": "0.26.1"
};

},{}],"45wzn":[function(require,module,exports) {
"use strict";
var Cancel = require("./Cancel");
/**
 * A `CancelToken` is an object that can be used to request cancellation of an operation.
 *
 * @class
 * @param {Function} executor The executor function.
 */ function CancelToken(executor) {
    if (typeof executor !== "function") throw new TypeError("executor must be a function.");
    var resolvePromise;
    this.promise = new Promise(function promiseExecutor(resolve) {
        resolvePromise = resolve;
    });
    var token = this;
    // eslint-disable-next-line func-names
    this.promise.then(function(cancel) {
        if (!token._listeners) return;
        var i;
        var l = token._listeners.length;
        for(i = 0; i < l; i++)token._listeners[i](cancel);
        token._listeners = null;
    });
    // eslint-disable-next-line func-names
    this.promise.then = function(onfulfilled) {
        var _resolve;
        // eslint-disable-next-line func-names
        var promise = new Promise(function(resolve) {
            token.subscribe(resolve);
            _resolve = resolve;
        }).then(onfulfilled);
        promise.cancel = function reject() {
            token.unsubscribe(_resolve);
        };
        return promise;
    };
    executor(function cancel(message) {
        if (token.reason) // Cancellation has already been requested
        return;
        token.reason = new Cancel(message);
        resolvePromise(token.reason);
    });
}
/**
 * Throws a `Cancel` if cancellation has been requested.
 */ CancelToken.prototype.throwIfRequested = function throwIfRequested() {
    if (this.reason) throw this.reason;
};
/**
 * Subscribe to the cancel signal
 */ CancelToken.prototype.subscribe = function subscribe(listener) {
    if (this.reason) {
        listener(this.reason);
        return;
    }
    if (this._listeners) this._listeners.push(listener);
    else this._listeners = [
        listener
    ];
};
/**
 * Unsubscribe from the cancel signal
 */ CancelToken.prototype.unsubscribe = function unsubscribe(listener) {
    if (!this._listeners) return;
    var index = this._listeners.indexOf(listener);
    if (index !== -1) this._listeners.splice(index, 1);
};
/**
 * Returns an object that contains a new `CancelToken` and a function that, when called,
 * cancels the `CancelToken`.
 */ CancelToken.source = function source() {
    var cancel;
    var token = new CancelToken(function executor(c) {
        cancel = c;
    });
    return {
        token: token,
        cancel: cancel
    };
};
module.exports = CancelToken;

},{"./Cancel":"kjMy2"}],"dyQ8N":[function(require,module,exports) {
"use strict";
/**
 * Syntactic sugar for invoking a function and expanding an array for arguments.
 *
 * Common use case would be to use `Function.prototype.apply`.
 *
 *  ```js
 *  function f(x, y, z) {}
 *  var args = [1, 2, 3];
 *  f.apply(null, args);
 *  ```
 *
 * With `spread` this example can be re-written.
 *
 *  ```js
 *  spread(function(x, y, z) {})([1, 2, 3]);
 *  ```
 *
 * @param {Function} callback
 * @returns {Function}
 */ module.exports = function spread(callback) {
    return function wrap(arr) {
        return callback.apply(null, arr);
    };
};

},{}],"eyiLq":[function(require,module,exports) {
"use strict";
var utils = require("./../utils");
/**
 * Determines whether the payload is an error thrown by Axios
 *
 * @param {*} payload The value to test
 * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false
 */ module.exports = function isAxiosError(payload) {
    return utils.isObject(payload) && payload.isAxiosError === true;
};

},{"./../utils":"5By4s"}],"8P8eo":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "generateCancelToken", ()=>generateCancelToken);
parcelHelpers.export(exports, "api", ()=>api);
parcelHelpers.export(exports, "apiv2", ()=>apiv2);
parcelHelpers.export(exports, "install", ()=>install);
var _axios = require("axios");
var _axiosDefault = parcelHelpers.interopDefault(_axios);
var _config = require("../config");
var _configDefault = parcelHelpers.interopDefault(_config);
const CancelToken = (0, _axiosDefault.default).CancelToken;
const generateCancelToken = ()=>CancelToken.source();
const api = (0, _axiosDefault.default).create({
    baseURL: (0, _configDefault.default).api_root
});
const apiv2 = (0, _axiosDefault.default).create({
    baseURL: (0, _configDefault.default).api_2_root
});
const install = (app)=>{
    app.config.globalProperties.$api = api;
    app.config.globalProperties.$apiv2 = apiv2;
};
exports.default = install;

},{"axios":"jo6P5","../config":"G7A2j","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"g8lph":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useToast", ()=>useToast);
var _vue = require("vue");
function useToast() {
    return (0, _vue.inject)("toast");
}

},{"vue":"hRjhg","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1tej2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
let script;
let initialize = ()=>{
    script = require("script:./search-input.vue");
    if (script.__esModule) script = script.default;
    script.render = require("template:./search-input.vue").render;
    require("custom:./search-input.vue").default(script);
    script.__scopeId = "data-v-c3e6e8";
    script.__file = "/home/babel/Documents/workspace/udata_workspace/udata-front/theme/js/components/search/search-input.vue";
};
initialize();
if (module.hot) {
    script.__hmrId = "c3e6e8-hmr";
    module.hot.accept(()=>{
        setTimeout(()=>{
            initialize();
            if (!__VUE_HMR_RUNTIME__.createRecord("c3e6e8-hmr", script)) __VUE_HMR_RUNTIME__.reload("c3e6e8-hmr", script);
        }, 0);
    });
}
exports.default = script;

},{"script:./search-input.vue":"2GR7E","template:./search-input.vue":"46hRX","custom:./search-input.vue":"8wqEx","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2GR7E":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _searchSvg = require("bundle-text:svg/search.svg");
var _searchSvgDefault = parcelHelpers.interopDefault(_searchSvg);
var _vue = require("vue");
exports.default = (0, _vue.defineComponent)({
    created () {
        this.icon = (0, _searchSvgDefault.default);
        this.queryString = this.value;
    },
    watch: {
        value: function(val) {
            this.queryString = val;
        }
    },
    async mounted () {
        //this.$nextTick doesn't work because of browsers®
        setTimeout(()=>this.focus(), 100);
    },
    props: {
        onChange: Function,
        value: String,
        placeholder: String
    },
    data () {
        return {
            queryString: ""
        };
    },
    methods: {
        _onChange (e) {
            if (this.onChange) this.onChange(e.target.value);
        },
        onDelete () {
            if (this.queryString === "") this.onChange(this.queryString);
        },
        focus () {
            this.$refs.input.focus({
                preventScroll: true
            });
        }
    }
});

},{"bundle-text:svg/search.svg":"1hvSi","vue":"hRjhg","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1hvSi":[function(require,module,exports) {
module.exports = "<svg aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" width=\"58\" height=\"55\" viewBox=\"0 0 58 55\"><g><g><path fill=\"none\" stroke=\"#7c7c7c\" stroke-miterlimit=\"20\" stroke-width=\"4\" d=\"M46.072 24.377c0 11.985-9.716 21.7-21.7 21.7-11.985 0-21.7-9.716-21.7-21.7 0-11.985 9.715-21.7 21.7-21.7s21.7 9.715 21.7 21.7z\"></path></g><g><path fill=\"none\" stroke=\"#7c7c7c\" stroke-miterlimit=\"20\" stroke-width=\"4\" d=\"M40.822 38.026l15.05 15.05\"></path></g></g></svg>\n";

},{}],"46hRX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "render", ()=>render);
var _vue = require("vue");
const _hoisted_1 = {
    class: "fr-search-bar fr-search-bar--lg w-100"
};
const _hoisted_2 = [
    "value",
    "aria-label",
    "placeholder"
];
const _hoisted_3 = {
    class: "fr-btn",
    type: "submit"
};
function render(_ctx, _cache, $props, $setup, $data, $options) {
    return (0, _vue.openBlock)(), (0, _vue.createElementBlock)("section", _hoisted_1, [
        (0, _vue.createElementVNode)("input", {
            type: "search",
            name: "q",
            value: _ctx.queryString,
            onInput: _cache[0] || (_cache[0] = (...args)=>_ctx._onChange && _ctx._onChange(...args)),
            onKeydown: _cache[1] || (_cache[1] = (0, _vue.withKeys)((...args)=>_ctx.onDelete && _ctx.onDelete(...args), [
                "delete"
            ])),
            ref: "input",
            class: "fr-input",
            "aria-label": _ctx.placeholder || _ctx.$t("Search..."),
            placeholder: _ctx.placeholder || _ctx.$t("Search..."),
            "data-cy": "search-input"
        }, null, 40 /* PROPS, HYDRATE_EVENTS */ , _hoisted_2),
        (0, _vue.createElementVNode)("button", _hoisted_3, (0, _vue.toDisplayString)(_ctx.$t("Search")), 1 /* TEXT */ )
    ]);
}
if (module.hot) module.hot.accept(()=>{
    __VUE_HMR_RUNTIME__.rerender("c3e6e8-hmr", render);
});

},{"vue":"hRjhg","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8wqEx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
let NOOP = ()=>{};
exports.default = (script)=>{};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"Vuh1h":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
let script;
let initialize = ()=>{
    script = require("script:./search-result.vue");
    if (script.__esModule) script = script.default;
    script.render = require("template:./search-result.vue").render;
    require("custom:./search-result.vue").default(script);
    script.__scopeId = "data-v-03fbd6";
    script.__file = "/home/babel/Documents/workspace/udata_workspace/udata-front/theme/js/components/dataset/search-result.vue";
};
initialize();
if (module.hot) {
    script.__hmrId = "03fbd6-hmr";
    module.hot.accept(()=>{
        setTimeout(()=>{
            initialize();
            if (!__VUE_HMR_RUNTIME__.createRecord("03fbd6-hmr", script)) __VUE_HMR_RUNTIME__.reload("03fbd6-hmr", script);
        }, 0);
    });
}
exports.default = script;

},{"script:./search-result.vue":"1gdVl","template:./search-result.vue":"kDBUB","custom:./search-result.vue":"4hARv","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1gdVl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _vue = require("vue");
var _privateSvg = require("bundle-text:svg/private.svg");
var _privateSvgDefault = parcelHelpers.interopDefault(_privateSvg);
var _useLicense = require("../../composables/useLicense");
var _useLicenseDefault = parcelHelpers.interopDefault(_useLicense);
var _useOwnerName = require("../../composables/useOwnerName");
var _useOwnerNameDefault = parcelHelpers.interopDefault(_useOwnerName);
var _avatarVue = require("../discussions/avatar.vue");
var _avatarVueDefault = parcelHelpers.interopDefault(_avatarVue);
var _organizationNameWithCertificateVue = require("../organization/organization-name-with-certificate.vue");
var _organizationNameWithCertificateVueDefault = parcelHelpers.interopDefault(_organizationNameWithCertificateVue);
var _placeholderVue = require("../utils/placeholder.vue");
var _placeholderVueDefault = parcelHelpers.interopDefault(_placeholderVue);
var _qualityScoreVue = require("./quality-score.vue");
var _qualityScoreVueDefault = parcelHelpers.interopDefault(_qualityScoreVue);
var _tooltipVue = require("../utils/tooltip.vue");
var _tooltipVueDefault = parcelHelpers.interopDefault(_tooltipVue);
var _qualityItemVue = require("./quality-item.vue");
var _qualityItemVueDefault = parcelHelpers.interopDefault(_qualityItemVue);
exports.default = (0, _vue.defineComponent)({
    components: {
        Avatar: (0, _avatarVueDefault.default),
        OrganizationNameWithCertificate: (0, _organizationNameWithCertificateVueDefault.default),
        Placeholder: (0, _placeholderVueDefault.default),
        QualityScore: (0, _qualityScoreVueDefault.default),
        Tooltip: (0, _tooltipVueDefault.default),
        QualityItem: (0, _qualityItemVueDefault.default)
    },
    inheritAttrs: false,
    props: {
        acronym: String,
        description: {
            type: String,
            required: true
        },
        last_update: {
            type: Date,
            required: true
        },
        license: {
            type: String,
            required: true
        },
        metrics: Object,
        organization: Object,
        owner: Object,
        page: {
            type: String,
            required: true
        },
        private: Boolean,
        quality: {
            type: Object,
            required: true
        },
        resources: Object,
        style: {
            type: Object,
            default: ()=>({})
        },
        title: {
            type: String,
            required: true
        }
    },
    setup (props) {
        /** @type {ComputedRef<import("../../composables/useOwnerName").Owned>} */ const owned1 = (0, _vue.computed)(()=>{
            let owned = {};
            if (props.organization) owned.organization = props.organization;
            if (props.owner) owned.owner = props.owner;
            return owned;
        });
        const ownerName = (0, _useOwnerNameDefault.default)(owned1);
        const license = (0, _useLicenseDefault.default)(props.license);
        return {
            license,
            lock: (0, _privateSvgDefault.default),
            ownerName
        };
    }
});

},{"vue":"hRjhg","bundle-text:svg/private.svg":"4OXgg","../../composables/useLicense":"8Bu0Z","../../composables/useOwnerName":"lARlQ","../discussions/avatar.vue":"6G61T","../organization/organization-name-with-certificate.vue":"aMjvv","../utils/placeholder.vue":"6Abp0","./quality-score.vue":"jc2rA","../utils/tooltip.vue":"8mUty","./quality-item.vue":"8KSN1","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4OXgg":[function(require,module,exports) {
module.exports = "<svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 18 18\">\n<path d=\"M17.5 9.00068C17.5 13.6947 13.6945 17.5 9 17.5C4.30549 17.5 0.5 13.6947 0.5 9.00068C0.5 4.30657 4.30622 0.5 9.00068 0.5C13.695 0.5 17.5 4.30647 17.5 9.00068Z\" fill=\"#999999\" stroke=\"white\"></path>\n<path d=\"M12.0312 8.0625H11.6094V6.79688C11.6094 5.33789 10.3965 4.125 8.9375 4.125C7.46094 4.125 6.26562 5.33789 6.26562 6.79688V8.0625H5.84375C5.36914 8.0625 5 8.44922 5 8.90625V12.2812C5 12.7559 5.36914 13.125 5.84375 13.125H12.0312C12.4883 13.125 12.875 12.7559 12.875 12.2812V8.90625C12.875 8.44922 12.4883 8.0625 12.0312 8.0625ZM10.2031 8.0625H7.67188V6.79688C7.67188 6.11133 8.23438 5.53125 8.9375 5.53125C9.62305 5.53125 10.2031 6.11133 10.2031 6.79688V8.0625Z\" fill=\"white\"></path>\n</svg>\n";

},{}],"8Bu0Z":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _vue = require("vue");
var _licenses = require("../api/licenses");
var _licensesDefault = parcelHelpers.interopDefault(_licenses);
function useLicense(id) {
    id = (0, _vue.unref)(id);
    /** @type {Ref<Object | null>} */ const license1 = (0, _vue.ref)(null);
    (0, _licensesDefault.default)().then((licenses)=>{
        const found = licenses.find((license)=>license.id === id);
        if (found) license1.value = found;
    });
    return license1;
}
exports.default = useLicense;

},{"vue":"hRjhg","../api/licenses":"A4AsN","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"A4AsN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _api = require("../plugins/api");
let licenses = null;
let licensesRequest = null;
function fetchLicenses() {
    if (licensesRequest) return licensesRequest;
    return licensesRequest = (0, _api.api).get("/datasets/licenses/").then((resp)=>resp.data).then((data)=>licenses = data);
}
exports.default = fetchLicenses;

},{"../plugins/api":"8P8eo","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lARlQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _vue = require("vue");
function useOwnerName(owned) {
    owned = (0, _vue.unref)(owned);
    const owner = (0, _vue.ref)("");
    if (!owned) return owner;
    if (owned.organization) owner.value = owned.organization.name;
    else if (owned.owner) owner.value = owned.owner.first_name + " " + owned.owner.last_name;
    return owner;
}
exports.default = useOwnerName;

},{"vue":"hRjhg","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aMjvv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
let script;
let initialize = ()=>{
    script = require("script:./organization-name-with-certificate.vue");
    if (script.__esModule) script = script.default;
    script.render = require("template:./organization-name-with-certificate.vue").render;
    require("custom:./organization-name-with-certificate.vue").default(script);
    script.__scopeId = "data-v-12f241";
    script.__file = "/home/babel/Documents/workspace/udata_workspace/udata-front/theme/js/components/organization/organization-name-with-certificate.vue";
};
initialize();
if (module.hot) {
    script.__hmrId = "12f241-hmr";
    module.hot.accept(()=>{
        setTimeout(()=>{
            initialize();
            if (!__VUE_HMR_RUNTIME__.createRecord("12f241-hmr", script)) __VUE_HMR_RUNTIME__.reload("12f241-hmr", script);
        }, 0);
    });
}
exports.default = script;

},{"script:./organization-name-with-certificate.vue":"7xyvH","template:./organization-name-with-certificate.vue":"icf2r","custom:./organization-name-with-certificate.vue":"85qdQ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7xyvH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _vue = require("vue");
var _certifiedSvg = require("bundle-text:svg/certified.svg");
var _certifiedSvgDefault = parcelHelpers.interopDefault(_certifiedSvg);
var _config = require("../../config");
var _useOrganizationCertified = require("../../composables/useOrganizationCertified");
var _useOrganizationCertifiedDefault = parcelHelpers.interopDefault(_useOrganizationCertified);
exports.default = (0, _vue.defineComponent)({
    props: {
        organization: {
            type: Object,
            required: true
        }
    },
    setup (props) {
        const { organizationCertified  } = (0, _useOrganizationCertifiedDefault.default)(props.organization);
        return {
            certified: (0, _certifiedSvgDefault.default),
            organizationCertified,
            title: (0, _config.title)
        };
    }
});

},{"vue":"hRjhg","bundle-text:svg/certified.svg":"bSyQp","../../config":"G7A2j","../../composables/useOrganizationCertified":"4Z3sq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bSyQp":[function(require,module,exports) {
module.exports = "<svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M15.3326 7.65352C15.3326 11.6974 11.9761 14.9755 7.83597 14.9755C3.69537 14.9755 0.338867 11.6974 0.338867 7.65352C0.338867 3.61011 3.69537 0.332031 7.83597 0.332031C11.9761 0.332031 15.3326 3.61011 15.3326 7.65397V7.65352Z\" fill=\"white\"></path>\n<path d=\"M0 7.65332C0 3.43347 3.51516 0 7.83643 0C12.1577 0 15.6729 3.43347 15.6729 7.65332C15.6729 11.8732 12.1577 15.3066 7.83643 15.3066C3.51516 15.3066 0 11.8732 0 7.65332ZM0.679554 7.65332C0.679554 11.5077 3.89024 14.6434 7.83643 14.6434C11.7826 14.6434 14.9933 11.5077 14.9933 7.65287C14.9933 3.79889 11.7826 0.663228 7.83643 0.663228C3.89024 0.663228 0.679554 3.79889 0.679554 7.65332Z\" fill=\"#f39200\"></path>\n<path d=\"M13.8912 7.65376C13.8912 10.9197 11.1808 13.5677 7.83671 13.5677C4.49213 13.5677 1.78125 10.9197 1.78125 7.65376C1.78125 4.38777 4.49213 1.74023 7.83671 1.74023C11.1808 1.74023 13.8917 4.38777 13.8917 7.65376H13.8912Z\" fill=\"#f39200\"></path>\n<path d=\"M7.18271 10.4824C7.00984 10.4824 6.83605 10.4184 6.70399 10.2894L4.47458 8.1237C4.34689 7.99964 4.27489 7.83113 4.27442 7.65522C4.27394 7.47932 4.34504 7.31044 4.47206 7.18573C4.59909 7.06102 4.77163 6.9907 4.95174 6.99024C5.13186 6.98977 5.30478 7.05921 5.43247 7.18327L7.66096 9.34895C7.75632 9.44146 7.82141 9.55955 7.84796 9.68823C7.87451 9.81692 7.86134 9.95041 7.81011 10.0718C7.75888 10.1931 7.6719 10.2969 7.5602 10.3699C7.44851 10.443 7.31712 10.4819 7.18271 10.4819V10.4824Z\" fill=\"white\"></path>\n<path d=\"M7.18125 10.4814C7.06117 10.4812 6.94329 10.4499 6.83961 10.3907C6.73593 10.3315 6.65016 10.2466 6.59103 10.1445C6.5319 10.0424 6.50152 9.92688 6.50298 9.80961C6.50444 9.69234 6.5377 9.57755 6.59936 9.47691L9.65599 4.50159C9.7019 4.4269 9.76243 4.36178 9.83412 4.30994C9.9058 4.2581 9.98724 4.22055 10.0738 4.19945C10.1603 4.17834 10.2503 4.17409 10.3385 4.18694C10.4267 4.19979 10.5115 4.22948 10.588 4.27432C10.6644 4.31916 10.7311 4.37828 10.7842 4.44829C10.8373 4.5183 10.8757 4.59783 10.8973 4.68235C10.919 4.76687 10.9233 4.85472 10.9101 4.94088C10.897 5.02705 10.8666 5.10984 10.8207 5.18452L7.76451 10.1594C7.70428 10.2577 7.61895 10.339 7.51687 10.3955C7.41479 10.4519 7.29855 10.4815 7.18125 10.4814Z\" fill=\"white\"></path>\n</svg>\n";

},{}],"4Z3sq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _vue = require("vue");
function useOrganizationCertified(organizationRef) {
    const PUBLIC_SERVICE = "public-service";
    const CERTIFIED = "certified";
    const organizationCertified = (0, _vue.ref)(false);
    const isOrganizationCertified = ()=>{
        const organization = (0, _vue.unref)(organizationRef);
        if (!organization) {
            organizationCertified.value = false;
            return;
        }
        organizationCertified.value = organization.badges.some((badge)=>badge.kind === PUBLIC_SERVICE) && organization.badges.some((badge)=>badge.kind === CERTIFIED);
    };
    (0, _vue.onMounted)(isOrganizationCertified);
    return {
        organizationCertified
    };
}
exports.default = useOrganizationCertified;

},{"vue":"hRjhg","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"icf2r":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "render", ()=>render);
var _vue = require("vue");
const _hoisted_1 = [
    "innerHTML",
    "title"
];
function render(_ctx, _cache, $props, $setup, $data, $options) {
    return (0, _vue.openBlock)(), (0, _vue.createElementBlock)((0, _vue.Fragment), null, [
        (0, _vue.createTextVNode)((0, _vue.toDisplayString)(_ctx.organization.name) + " ", 1 /* TEXT */ ),
        _ctx.organizationCertified ? ((0, _vue.openBlock)(), (0, _vue.createElementBlock)("span", {
            key: 0,
            innerHTML: _ctx.certified,
            class: "fr-icon-svg fr-icon--sm",
            title: _ctx.$t("The identity of this public service is certified by {certifier}", {
                certifier: _ctx.title
            })
        }, null, 8 /* PROPS */ , _hoisted_1)) : (0, _vue.createCommentVNode)("v-if", true)
    ], 64 /* STABLE_FRAGMENT */ );
}
if (module.hot) module.hot.accept(()=>{
    __VUE_HMR_RUNTIME__.rerender("12f241-hmr", render);
});

},{"vue":"hRjhg","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"85qdQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
let NOOP = ()=>{};
exports.default = (script)=>{};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6Abp0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
let script;
let initialize = ()=>{
    script = require("script:./placeholder.vue");
    if (script.__esModule) script = script.default;
    script.render = require("template:./placeholder.vue").render;
    require("custom:./placeholder.vue").default(script);
    script.__scopeId = "data-v-28d857";
    script.__file = "/home/babel/Documents/workspace/udata_workspace/udata-front/theme/js/components/utils/placeholder.vue";
};
initialize();
if (module.hot) {
    script.__hmrId = "28d857-hmr";
    module.hot.accept(()=>{
        setTimeout(()=>{
            initialize();
            if (!__VUE_HMR_RUNTIME__.createRecord("28d857-hmr", script)) __VUE_HMR_RUNTIME__.reload("28d857-hmr", script);
        }, 0);
    });
}
exports.default = script;

},{"script:./placeholder.vue":"9jfQ0","template:./placeholder.vue":"57y47","custom:./placeholder.vue":"iC3aE","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9jfQ0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "placeholderUrl", ()=>placeholderUrl);
var _config = require("../../config");
var _configDefault = parcelHelpers.interopDefault(_config);
const placeholderUrl = (src, type)=>src ? src : `${(0, _configDefault.default).theme_static}img/placeholders/${type}.png`;
exports.default = {
    props: {
        type: String,
        src: String,
        alt: String,
        size: Number
    },
    computed: {
        alternativeTextForDefinedImageOnly () {
            return this.src ? this.alt : "";
        },
        path () {
            return placeholderUrl(this.src, this.type);
        }
    }
};

},{"../../config":"G7A2j","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"57y47":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "render", ()=>render);
var _vue = require("vue");
const _hoisted_1 = [
    "src",
    "alt",
    "width",
    "height"
];
function render(_ctx, _cache, $props, $setup, $data, $options) {
    return (0, _vue.openBlock)(), (0, _vue.createElementBlock)("img", (0, _vue.mergeProps)({
        loading: "lazy",
        src: $options.path,
        alt: $options.alternativeTextForDefinedImageOnly,
        width: $props.size,
        height: $props.size
    }, _ctx.$attrs), null, 16 /* FULL_PROPS */ , _hoisted_1);
}
if (module.hot) module.hot.accept(()=>{
    __VUE_HMR_RUNTIME__.rerender("28d857-hmr", render);
});

},{"vue":"hRjhg","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iC3aE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
let NOOP = ()=>{};
exports.default = (script)=>{};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jc2rA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
let script;
let initialize = ()=>{
    script = require("script:./quality-score.vue");
    if (script.__esModule) script = script.default;
    script.render = require("template:./quality-score.vue").render;
    require("custom:./quality-score.vue").default(script);
    script.__scopeId = "data-v-0dc1ec";
    script.__file = "/home/babel/Documents/workspace/udata_workspace/udata-front/theme/js/components/dataset/quality-score.vue";
};
initialize();
if (module.hot) {
    script.__hmrId = "0dc1ec-hmr";
    module.hot.accept(()=>{
        setTimeout(()=>{
            initialize();
            if (!__VUE_HMR_RUNTIME__.createRecord("0dc1ec-hmr", script)) __VUE_HMR_RUNTIME__.reload("0dc1ec-hmr", script);
        }, 0);
    });
}
exports.default = script;

},{"script:./quality-score.vue":"cLFEM","template:./quality-score.vue":"aMfQJ","custom:./quality-score.vue":"6y4if","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cLFEM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _vue = require("vue");
exports.default = (0, _vue.defineComponent)({
    props: {
        score: {
            type: Number,
            required: true
        }
    },
    setup (props) {
        const quality_max_score = 1;
        return {
            high: quality_max_score * 2 / 3,
            quality_max_score,
            score: props.score
        };
    }
});

},{"vue":"hRjhg","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aMfQJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "render", ()=>render);
var _vue = require("vue");
const _hoisted_1 = [
    "high",
    "max",
    "optimum",
    "value"
];
function render(_ctx, _cache, $props, $setup, $data, $options) {
    return (0, _vue.openBlock)(), (0, _vue.createElementBlock)("meter", {
        class: "quality-score",
        min: "0",
        low: "0",
        high: _ctx.high,
        max: _ctx.quality_max_score,
        optimum: _ctx.quality_max_score,
        value: _ctx.score
    }, (0, _vue.toDisplayString)(_ctx.score) + "/" + (0, _vue.toDisplayString)(_ctx.quality_max_score), 9 /* TEXT, PROPS */ , _hoisted_1);
}
if (module.hot) module.hot.accept(()=>{
    __VUE_HMR_RUNTIME__.rerender("0dc1ec-hmr", render);
});

},{"vue":"hRjhg","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6y4if":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
let NOOP = ()=>{};
exports.default = (script)=>{};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8mUty":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
let script;
let initialize = ()=>{
    script = require("script:./tooltip.vue");
    if (script.__esModule) script = script.default;
    script.render = require("template:./tooltip.vue").render;
    require("custom:./tooltip.vue").default(script);
    script.__scopeId = "data-v-603595";
    script.__file = "/home/babel/Documents/workspace/udata_workspace/udata-front/theme/js/components/utils/tooltip.vue";
};
initialize();
if (module.hot) {
    script.__hmrId = "603595-hmr";
    module.hot.accept(()=>{
        setTimeout(()=>{
            initialize();
            if (!__VUE_HMR_RUNTIME__.createRecord("603595-hmr", script)) __VUE_HMR_RUNTIME__.reload("603595-hmr", script);
        }, 0);
    });
}
exports.default = script;

},{"script:./tooltip.vue":"7rBcb","template:./tooltip.vue":"5DCaY","custom:./tooltip.vue":"8AJKU","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7rBcb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _vue = require("vue");
exports.default = (0, _vue.defineComponent)({});

},{"vue":"hRjhg","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5DCaY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "render", ()=>render);
var _vue = require("vue");
const _hoisted_1 = {
    class: "tooltip__wrapper text-grey-500"
};
const _hoisted_2 = {
    class: "tooltip"
};
function render(_ctx, _cache, $props, $setup, $data, $options) {
    return (0, _vue.openBlock)(), (0, _vue.createElementBlock)("span", _hoisted_1, [
        (0, _vue.renderSlot)(_ctx.$slots, "default"),
        (0, _vue.createElementVNode)("div", _hoisted_2, [
            (0, _vue.renderSlot)(_ctx.$slots, "tooltip")
        ])
    ]);
}
if (module.hot) module.hot.accept(()=>{
    __VUE_HMR_RUNTIME__.rerender("603595-hmr", render);
});

},{"vue":"hRjhg","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8AJKU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
let NOOP = ()=>{};
exports.default = (script)=>{};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8KSN1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
let script;
let initialize = ()=>{
    script = require("script:./quality-item.vue");
    if (script.__esModule) script = script.default;
    script.render = require("template:./quality-item.vue").render;
    require("custom:./quality-item.vue").default(script);
    script.__scopeId = "data-v-5d558a";
    script.__file = "/home/babel/Documents/workspace/udata_workspace/udata-front/theme/js/components/dataset/quality-item.vue";
};
initialize();
if (module.hot) {
    script.__hmrId = "5d558a-hmr";
    module.hot.accept(()=>{
        setTimeout(()=>{
            initialize();
            if (!__VUE_HMR_RUNTIME__.createRecord("5d558a-hmr", script)) __VUE_HMR_RUNTIME__.reload("5d558a-hmr", script);
        }, 0);
    });
}
exports.default = script;

},{"script:./quality-item.vue":"6Bcgo","template:./quality-item.vue":"70jHf","custom:./quality-item.vue":"8uw3v","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6Bcgo":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _vue = require("vue");
exports.default = (0, _vue.defineComponent)({
    props: {
        passed: {
            type: Boolean,
            required: true
        },
        messagePassed: {
            type: String,
            required: true
        },
        messageFailed: {
            type: String,
            required: true
        }
    }
});

},{"vue":"hRjhg","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"70jHf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "render", ()=>render);
var _vue = require("vue");
const _hoisted_1 = {
    key: 0
};
const _hoisted_2 = /*#__PURE__*/ (0, _vue.createElementVNode)("span", {
    class: "fr-icon-check-line",
    "aria-hidden": "true"
}, null, -1 /* HOISTED */ );
const _hoisted_3 = {
    key: 1,
    class: "text-mention-grey"
};
const _hoisted_4 = /*#__PURE__*/ (0, _vue.createElementVNode)("span", {
    class: "fr-icon-warning-line",
    "aria-hidden": "true"
}, null, -1 /* HOISTED */ );
function render(_ctx, _cache, $props, $setup, $data, $options) {
    return _ctx.passed ? ((0, _vue.openBlock)(), (0, _vue.createElementBlock)("div", _hoisted_1, [
        _hoisted_2,
        (0, _vue.createTextVNode)(" " + (0, _vue.toDisplayString)(_ctx.messagePassed), 1 /* TEXT */ )
    ])) : ((0, _vue.openBlock)(), (0, _vue.createElementBlock)("div", _hoisted_3, [
        _hoisted_4,
        (0, _vue.createTextVNode)(" " + (0, _vue.toDisplayString)(_ctx.messageFailed), 1 /* TEXT */ )
    ]));
}
if (module.hot) module.hot.accept(()=>{
    __VUE_HMR_RUNTIME__.rerender("5d558a-hmr", render);
});

},{"vue":"hRjhg","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8uw3v":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
let NOOP = ()=>{};
exports.default = (script)=>{};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kDBUB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "render", ()=>render);
var _vue = require("vue");
const _hoisted_1 = {
    class: "fr-grid-row fr-grid-row--gutters fr-grid-row--top"
};
const _hoisted_2 = {
    class: "fr-col-auto"
};
const _hoisted_3 = {
    class: "logo"
};
const _hoisted_4 = {
    class: "fr-col"
};
const _hoisted_5 = {
    class: "fr-mb-1v"
};
const _hoisted_6 = [
    "href"
];
const _hoisted_7 = {
    key: 0
};
const _hoisted_8 = {
    key: 0,
    class: "badge grey-300 fr-ml-1w"
};
const _hoisted_9 = {
    key: 0,
    class: "not-enlarged"
};
const _hoisted_10 = [
    "href"
];
const _hoisted_11 = {
    class: "fr-mt-1w fr-mb-2w fr-hidden fr-unhidden-sm"
};
const _hoisted_12 = {
    class: "fr-mb-0 text-mention-grey"
};
const _hoisted_13 = {
    class: "fr-text--sm fr-my-0"
};
const _hoisted_14 = {
    class: "fr-grid-row fr-grid-row--right not-enlarged"
};
const _hoisted_15 = {
    href: "https://guides.etalab.gouv.fr/qualite/documenter-les-donnees/#le-score-de-qualite-des-metadonnees",
    target: "_blank"
};
const _hoisted_16 = /*#__PURE__*/ (0, _vue.createElementVNode)("span", {
    class: "fr-icon-info-line",
    "aria-hidden": "true"
}, null, -1 /* HOISTED */ );
const _hoisted_17 = {
    class: "fr-mx-1v"
};
const _hoisted_18 = /*#__PURE__*/ (0, _vue.createElementVNode)("span", {
    class: "fr-hidden inline-sm"
}, " \u2014 ", -1 /* HOISTED */ );
const _hoisted_19 = {
    class: "fr-hidden fr-unhidden-sm fr-hidden-md fr-unhidden-lg fr-col-auto fr-tags-group fr-grid-row--bottom self-center flex-direction-column"
};
const _hoisted_20 = {
    class: "fr-tag"
};
const _hoisted_21 = {
    class: "fr-mr-1v"
};
const _hoisted_22 = {
    class: "fr-tag"
};
const _hoisted_23 = {
    class: "fr-mr-1v"
};
function render(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_Placeholder = (0, _vue.resolveComponent)("Placeholder");
    const _component_Avatar = (0, _vue.resolveComponent)("Avatar");
    const _component_OrganizationNameWithCertificate = (0, _vue.resolveComponent)("OrganizationNameWithCertificate");
    const _component_QualityItem = (0, _vue.resolveComponent)("QualityItem");
    const _component_QualityScore = (0, _vue.resolveComponent)("QualityScore");
    const _component_Tooltip = (0, _vue.resolveComponent)("Tooltip");
    const _component_i18n_t = (0, _vue.resolveComponent)("i18n-t");
    return (0, _vue.openBlock)(), (0, _vue.createElementBlock)("article", {
        class: "fr-pt-5v fr-pb-6v fr-px-1w border-bottom border-default-grey fr-enlarge-link",
        style: (0, _vue.normalizeStyle)(_ctx.style)
    }, [
        (0, _vue.createElementVNode)("div", _hoisted_1, [
            (0, _vue.createElementVNode)("div", _hoisted_2, [
                (0, _vue.createElementVNode)("div", _hoisted_3, [
                    _ctx.organization ? ((0, _vue.openBlock)(), (0, _vue.createBlock)(_component_Placeholder, {
                        key: 0,
                        type: "dataset",
                        src: _ctx.organization.logo_thumbnail,
                        alt: _ctx.organization.name,
                        size: 60
                    }, null, 8 /* PROPS */ , [
                        "src",
                        "alt"
                    ])) : _ctx.owner ? ((0, _vue.openBlock)(), (0, _vue.createBlock)(_component_Avatar, {
                        key: 1,
                        user: _ctx.owner,
                        size: 60
                    }, null, 8 /* PROPS */ , [
                        "user"
                    ])) : ((0, _vue.openBlock)(), (0, _vue.createBlock)(_component_Placeholder, {
                        key: 2,
                        type: "dataset"
                    }))
                ])
            ]),
            (0, _vue.createElementVNode)("div", _hoisted_4, [
                (0, _vue.createElementVNode)("h4", _hoisted_5, [
                    (0, _vue.createElementVNode)("a", {
                        href: _ctx.page,
                        class: "text-grey-500"
                    }, [
                        (0, _vue.createTextVNode)((0, _vue.toDisplayString)(_ctx.title) + " ", 1 /* TEXT */ ),
                        _ctx.acronym ? ((0, _vue.openBlock)(), (0, _vue.createElementBlock)("small", _hoisted_7, (0, _vue.toDisplayString)(_ctx.acronym), 1 /* TEXT */ )) : (0, _vue.createCommentVNode)("v-if", true)
                    ], 8 /* PROPS */ , _hoisted_6),
                    _ctx.private ? ((0, _vue.openBlock)(), (0, _vue.createElementBlock)("span", _hoisted_8, (0, _vue.toDisplayString)(_ctx.$t("Private")), 1 /* TEXT */ )) : (0, _vue.createCommentVNode)("v-if", true)
                ]),
                _ctx.organization || _ctx.owner ? ((0, _vue.openBlock)(), (0, _vue.createElementBlock)("span", _hoisted_9, [
                    (0, _vue.createTextVNode)((0, _vue.toDisplayString)(_ctx.$t("From")) + " ", 1 /* TEXT */ ),
                    _ctx.organization ? ((0, _vue.openBlock)(), (0, _vue.createElementBlock)("a", {
                        key: 0,
                        href: _ctx.organization.page
                    }, [
                        (0, _vue.createVNode)(_component_OrganizationNameWithCertificate, {
                            organization: _ctx.organization
                        }, null, 8 /* PROPS */ , [
                            "organization"
                        ])
                    ], 8 /* PROPS */ , _hoisted_10)) : (0, _vue.createCommentVNode)("v-if", true),
                    _ctx.owner ? ((0, _vue.openBlock)(), (0, _vue.createElementBlock)((0, _vue.Fragment), {
                        key: 1
                    }, [
                        (0, _vue.createTextVNode)((0, _vue.toDisplayString)(_ctx.ownerName), 1 /* TEXT */ )
                    ], 2112 /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */ )) : (0, _vue.createCommentVNode)("v-if", true)
                ])) : (0, _vue.createCommentVNode)("v-if", true),
                (0, _vue.createElementVNode)("p", _hoisted_11, (0, _vue.toDisplayString)(_ctx.$filters.excerpt(_ctx.description, 160)), 1 /* TEXT */ ),
                (0, _vue.createElementVNode)("p", _hoisted_12, [
                    (0, _vue.createVNode)(_component_Tooltip, {
                        class: "fr-hidden inline-sm"
                    }, {
                        tooltip: (0, _vue.withCtx)(()=>[
                                (0, _vue.createElementVNode)("h5", _hoisted_13, (0, _vue.toDisplayString)(_ctx.$t("Metadata quality:")), 1 /* TEXT */ ),
                                (0, _vue.createVNode)(_component_QualityItem, {
                                    passed: _ctx.quality.dataset_description_quality,
                                    messagePassed: _ctx.$t("Data description filled"),
                                    messageFailed: _ctx.$t("Data description empty"),
                                    class: "fr-my-1w"
                                }, null, 8 /* PROPS */ , [
                                    "passed",
                                    "messagePassed",
                                    "messageFailed"
                                ]),
                                (0, _vue.createVNode)(_component_QualityItem, {
                                    passed: _ctx.quality.resources_documentation,
                                    messagePassed: _ctx.$t("Resources documented"),
                                    messageFailed: _ctx.$t("Resources documentation missing"),
                                    class: "fr-my-1w"
                                }, null, 8 /* PROPS */ , [
                                    "passed",
                                    "messagePassed",
                                    "messageFailed"
                                ]),
                                (0, _vue.createVNode)(_component_QualityItem, {
                                    passed: _ctx.quality.license,
                                    messagePassed: _ctx.$t("License filled"),
                                    messageFailed: _ctx.$t("No license set"),
                                    class: "fr-my-1w"
                                }, null, 8 /* PROPS */ , [
                                    "passed",
                                    "messagePassed",
                                    "messageFailed"
                                ]),
                                (0, _vue.createVNode)(_component_QualityItem, {
                                    passed: _ctx.quality.update_frequency && !!_ctx.quality.update_fulfilled_in_time,
                                    messagePassed: _ctx.$t("Update frequency followed"),
                                    messageFailed: _ctx.quality.update_frequency ? _ctx.$t("Update frequency not followed") : _ctx.$t("Update frequency not set"),
                                    class: "fr-my-1w"
                                }, null, 8 /* PROPS */ , [
                                    "passed",
                                    "messagePassed",
                                    "messageFailed"
                                ]),
                                (0, _vue.createVNode)(_component_QualityItem, {
                                    passed: _ctx.quality.has_open_format,
                                    messagePassed: _ctx.$t("File formats are open"),
                                    messageFailed: _ctx.$t("File formats are closed"),
                                    class: "fr-my-1w"
                                }, null, 8 /* PROPS */ , [
                                    "passed",
                                    "messagePassed",
                                    "messageFailed"
                                ]),
                                (0, _vue.createVNode)(_component_QualityItem, {
                                    passed: _ctx.quality.temporal_coverage,
                                    messagePassed: _ctx.$t("Temporal coverage filled"),
                                    messageFailed: _ctx.$t("Temporal coverage not set"),
                                    class: "fr-my-1w"
                                }, null, 8 /* PROPS */ , [
                                    "passed",
                                    "messagePassed",
                                    "messageFailed"
                                ]),
                                (0, _vue.createVNode)(_component_QualityItem, {
                                    passed: _ctx.quality.spatial,
                                    messagePassed: _ctx.$t("Spatial coverage filled"),
                                    messageFailed: _ctx.$t("Spatial coverage not set"),
                                    class: "fr-my-1w"
                                }, null, 8 /* PROPS */ , [
                                    "passed",
                                    "messagePassed",
                                    "messageFailed"
                                ]),
                                (0, _vue.createElementVNode)("div", _hoisted_14, [
                                    (0, _vue.createElementVNode)("a", _hoisted_15, (0, _vue.toDisplayString)(_ctx.$t("Learn more about this indicator")), 1 /* TEXT */ )
                                ])
                            ]),
                        default: (0, _vue.withCtx)(()=>[
                                _hoisted_16,
                                (0, _vue.createElementVNode)("span", _hoisted_17, (0, _vue.toDisplayString)(_ctx.$t("Metadata quality:")), 1 /* TEXT */ ),
                                (0, _vue.createVNode)(_component_QualityScore, {
                                    score: _ctx.quality.score
                                }, null, 8 /* PROPS */ , [
                                    "score"
                                ])
                            ]),
                        _: 1 /* STABLE */ 
                    }),
                    _hoisted_18,
                    (0, _vue.createTextVNode)(" " + (0, _vue.toDisplayString)(_ctx.$t("Updated on {date}", {
                        date: _ctx.$filters.formatDate(_ctx.last_update)
                    })), 1 /* TEXT */ )
                ])
            ]),
            (0, _vue.createElementVNode)("ul", _hoisted_19, [
                (0, _vue.createElementVNode)("li", null, [
                    (0, _vue.createElementVNode)("span", _hoisted_20, [
                        (0, _vue.createVNode)(_component_i18n_t, {
                            keypath: "{n} reuses",
                            plural: _ctx.metrics.reuses || 0,
                            scope: "global"
                        }, {
                            n: (0, _vue.withCtx)(()=>[
                                    (0, _vue.createElementVNode)("strong", _hoisted_21, (0, _vue.toDisplayString)(_ctx.metrics.reuses || 0), 1 /* TEXT */ )
                                ]),
                            _: 1 /* STABLE */ 
                        }, 8 /* PROPS */ , [
                            "plural"
                        ])
                    ])
                ]),
                (0, _vue.createElementVNode)("li", null, [
                    (0, _vue.createElementVNode)("span", _hoisted_22, [
                        (0, _vue.createVNode)(_component_i18n_t, {
                            keypath: "{n} favorites",
                            plural: _ctx.metrics.followers || 0,
                            scope: "global"
                        }, {
                            n: (0, _vue.withCtx)(()=>[
                                    (0, _vue.createElementVNode)("strong", _hoisted_23, (0, _vue.toDisplayString)(_ctx.metrics.followers), 1 /* TEXT */ )
                                ]),
                            _: 1 /* STABLE */ 
                        }, 8 /* PROPS */ , [
                            "plural"
                        ])
                    ])
                ])
            ])
        ])
    ], 4 /* STYLE */ );
}
if (module.hot) module.hot.accept(()=>{
    __VUE_HMR_RUNTIME__.rerender("03fbd6-hmr", render);
});

},{"vue":"hRjhg","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4hARv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
let NOOP = ()=>{};
exports.default = (script)=>{};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jXP52":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
let script;
let initialize = ()=>{
    script = require("script:./loader.vue");
    if (script.__esModule) script = script.default;
    script.render = require("template:./loader.vue").render;
    require("custom:./loader.vue").default(script);
    script.__scopeId = "data-v-088355";
    script.__file = "/home/babel/Documents/workspace/udata_workspace/udata-front/theme/js/components/dataset/loader.vue";
};
initialize();
if (module.hot) {
    script.__hmrId = "088355-hmr";
    module.hot.accept(()=>{
        setTimeout(()=>{
            initialize();
            if (!__VUE_HMR_RUNTIME__.createRecord("088355-hmr", script)) __VUE_HMR_RUNTIME__.reload("088355-hmr", script);
        }, 0);
    });
}
exports.default = script;

},{"script:./loader.vue":"4Hr4X","template:./loader.vue":"hb5oj","custom:./loader.vue":"d1CpE","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4Hr4X":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _vue = require("vue");
var _vueContentLoader = require("vue-content-loader");
exports.default = (0, _vue.defineComponent)({
    components: {
        ContentLoader: (0, _vueContentLoader.ContentLoader)
    }
});

},{"vue":"hRjhg","vue-content-loader":"50WZy","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hb5oj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "render", ()=>render);
var _vue = require("vue");
const _hoisted_1 = /*#__PURE__*/ (0, _vue.createElementVNode)("rect", {
    x: "104",
    y: "41",
    rx: "3",
    ry: "3",
    width: "162",
    height: "10"
}, null, -1 /* HOISTED */ );
const _hoisted_2 = /*#__PURE__*/ (0, _vue.createElementVNode)("rect", {
    x: "105",
    y: "63",
    rx: "3",
    ry: "3",
    width: "139",
    height: "5"
}, null, -1 /* HOISTED */ );
const _hoisted_3 = /*#__PURE__*/ (0, _vue.createElementVNode)("rect", {
    x: "26",
    y: "99",
    rx: "5",
    ry: "5",
    width: "60",
    height: "60"
}, null, -1 /* HOISTED */ );
const _hoisted_4 = /*#__PURE__*/ (0, _vue.createElementVNode)("rect", {
    x: "104",
    y: "113",
    rx: "3",
    ry: "3",
    width: "162",
    height: "10"
}, null, -1 /* HOISTED */ );
const _hoisted_5 = /*#__PURE__*/ (0, _vue.createElementVNode)("rect", {
    x: "105",
    y: "135",
    rx: "3",
    ry: "3",
    width: "139",
    height: "5"
}, null, -1 /* HOISTED */ );
const _hoisted_6 = /*#__PURE__*/ (0, _vue.createElementVNode)("rect", {
    x: "26",
    y: "24",
    rx: "5",
    ry: "5",
    width: "60",
    height: "60"
}, null, -1 /* HOISTED */ );
function render(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_ContentLoader = (0, _vue.resolveComponent)("ContentLoader");
    return (0, _vue.openBlock)(), (0, _vue.createBlock)(_component_ContentLoader, {
        width: 280,
        height: 180,
        speed: 2,
        primaryColor: "#f3f3f3",
        secondaryColor: "#ecebeb"
    }, {
        default: (0, _vue.withCtx)(()=>[
                _hoisted_1,
                _hoisted_2,
                _hoisted_3,
                _hoisted_4,
                _hoisted_5,
                _hoisted_6
            ]),
        _: 1 /* STABLE */ 
    });
}
if (module.hot) module.hot.accept(()=>{
    __VUE_HMR_RUNTIME__.rerender("088355-hmr", render);
});

},{"vue":"hRjhg","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"d1CpE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
let NOOP = ()=>{};
exports.default = (script)=>{};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hHSYB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
let script;
let initialize = ()=>{
    script = require("script:./schema-filter.vue");
    if (script.__esModule) script = script.default;
    script.render = require("template:./schema-filter.vue").render;
    require("custom:./schema-filter.vue").default(script);
    script.__scopeId = "data-v-0608ac";
    script.__file = "/home/babel/Documents/workspace/udata_workspace/udata-front/theme/js/components/search/schema-filter.vue";
};
initialize();
if (module.hot) {
    script.__hmrId = "0608ac-hmr";
    module.hot.accept(()=>{
        setTimeout(()=>{
            initialize();
            if (!__VUE_HMR_RUNTIME__.createRecord("0608ac-hmr", script)) __VUE_HMR_RUNTIME__.reload("0608ac-hmr", script);
        }, 0);
    });
}
exports.default = script;

},{"script:./schema-filter.vue":"lwCUz","template:./schema-filter.vue":"aKg25","custom:./schema-filter.vue":"77pzc","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lwCUz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _vue = require("vue");
var _schemas = require("../../api/schemas");
var _schemasDefault = parcelHelpers.interopDefault(_schemas);
var _multiSelectVue = require("./multi-select.vue");
var _multiSelectVueDefault = parcelHelpers.interopDefault(_multiSelectVue);
exports.default = (0, _vue.defineComponent)({
    components: {
        MultiSelect: (0, _multiSelectVueDefault.default)
    },
    props: {
        onChange: {
            type: Function,
            required: true
        },
        values: {
            type: [
                String,
                Array
            ]
        }
    },
    setup (props) {
        /** @type {Promise<import('../search/multi-select.vue').Option[]>} */ const initialOptions = (0, _schemasDefault.default)().then((catalog)=>catalog.map((schema)=>({
                    label: schema.name,
                    value: schema.name
                })));
        return {
            initialOptions
        };
    }
});

},{"vue":"hRjhg","../../api/schemas":"4Vtbf","./multi-select.vue":"1DRgy","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4Vtbf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _axios = require("axios");
var _axiosDefault = parcelHelpers.interopDefault(_axios);
var _config = require("../config");
var _configDefault = parcelHelpers.interopDefault(_config);
/**
 * A schema version.
 * @typedef SchemaVersion
 * @type {object}
 *  @property {string} version_name - The version name, ex: 1.0.0
 *  @property {string} schema_url - The version url
 */ /**
 * A json schema associated with a resource.
 * @typedef Schema
 * @type {object}
 *  @property {string} name - The schema name.
 *  @property {string} schema_type - The schema type.
 *  @property {Array<SchemaVersion>} versions - The schema versions.
 */ let catalog = null;
let catalogRequest = null;
function getCatalog() {
    if (catalogRequest) return catalogRequest;
    catalogRequest = (0, _axiosDefault.default).get((0, _configDefault.default).schema_catalog_url).then((resp)=>resp.data).then((data)=>{
        if (data.schemas) catalog = data.schemas;
        return catalog;
    });
    return catalogRequest;
}
exports.default = getCatalog;

},{"axios":"jo6P5","../config":"G7A2j","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1DRgy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
let script;
let initialize = ()=>{
    script = require("script:./multi-select.vue");
    if (script.__esModule) script = script.default;
    script.render = require("template:./multi-select.vue").render;
    script.__cssModules = require("style:./multi-select.vue").default;
    require("custom:./multi-select.vue").default(script);
    script.__scopeId = "data-v-999727";
    script.__file = "/home/babel/Documents/workspace/udata_workspace/udata-front/theme/js/components/search/multi-select.vue";
};
initialize();
if (module.hot) {
    script.__hmrId = "999727-hmr";
    module.hot.accept(()=>{
        setTimeout(()=>{
            initialize();
            if (!__VUE_HMR_RUNTIME__.createRecord("999727-hmr", script)) __VUE_HMR_RUNTIME__.reload("999727-hmr", script);
        }, 0);
    });
}
exports.default = script;

},{"script:./multi-select.vue":"aVLw6","template:./multi-select.vue":"4rXRS","style:./multi-select.vue":"iEXv5","custom:./multi-select.vue":"fdvrP","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aVLw6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _vue = require("vue");
var _selectA11Y = require("@conciergerie.dev/select-a11y");
var _selectA11YDefault = parcelHelpers.interopDefault(_selectA11Y);
var _vueI18N = require("vue-i18n");
var _axios = require("axios");
var _axiosDefault = parcelHelpers.interopDefault(_axios);
var _api = require("../../plugins/api");
var _useUid = require("../../composables/useUid");
var _useUidDefault = parcelHelpers.interopDefault(_useUid);
var _useToast = require("../../composables/useToast");
/**
 * @typedef {Object} Option
 * @property {string} label - Label (display) of the option
 * @property {string} value - Value (id) of the option
 * @property {string} [image] - Image (optional) to show
 */ exports.default = (0, _vue.defineComponent)({
    props: {
        suggestUrl: String,
        listUrl: String,
        entityUrl: String,
        /** @type {import("vue").PropType<Promise<Option[]>>} */ initialOptions: Promise,
        values: [
            Array,
            String
        ],
        onChange: {
            type: Function,
            required: true
        },
        placeholder: {
            type: String,
            required: true
        },
        explanation: {
            type: String,
            default: ""
        },
        searchPlaceholder: {
            type: String,
            required: true
        },
        emptyPlaceholder: {
            type: String
        },
        allOption: {
            type: String,
            default: ""
        },
        minimumCharacterBeforeSuggest: {
            type: Number,
            default: 1
        }
    },
    setup (props) {
        const { t  } = (0, _vueI18N.useI18n)();
        const toast = (0, _useToast.useToast)();
        const { id  } = (0, _useUidDefault.default)("multiselect");
        /**
    * Select template Ref
    * @type {import("vue").Ref<HTMLSelectElement|null>}
    */ const select = (0, _vue.ref)(null);
        /**
     * Container Template Ref
     * @type {import("vue").Ref<HTMLElement|null>}
     */ const container = (0, _vue.ref)(null);
        /**
     * Popup offset if required
     */ const offset = (0, _vue.ref)(0);
        /**
     * Mimimum popup width
     */ const minWidth = 350;
        /**
     * Maximum options count
     */ const maxOptionsCount = 200;
        /**
     * Current options
     * @type {import("vue").Ref<Option[]>}
     */ const options1 = (0, _vue.ref)([]);
        /**
     * Displayed Options limited to {@link maxOptionsCount}
     */ const displayedOptions = (0, _vue.computed)(()=>options1.value.slice(0, maxOptionsCount));
        /**
     * Current selected value(s)
     * @type {import("vue").Ref<string | null>}
     */ const selected1 = (0, _vue.ref)(null);
        const defaultValue = "";
        /**
     * Current request if any to be cancelled if a new one comes
     * @type {import("vue").Ref<import("axios").CancelTokenSource | null>}
     */ const currentRequest = (0, _vue.ref)(null);
        /**
     * SelectA11y instance
     * @type {import("vue").Ref<import("@conciergerie.dev/select-a11y").Select | null>}
     */ const selectA11y1 = (0, _vue.ref)(null);
        const noResultAfterSearch = (0, _vue.computed)(()=>props.emptyPlaceholder || t("No results found."));
        const texts = (0, _vue.reactive)({
            help: t("Use tab (or arrow down) to move between suggestions"),
            placeholder: props.searchPlaceholder,
            noResult: noResultAfterSearch.value,
            results: t("{x} available suggestion"),
            deleteItem: t("Delete {t}"),
            delete: t("Delete")
        });
        /**
     * Get initial set of options from API or an empty array
     * @returns {Promise<Option[]>}
     */ const getInitialOptions = async ()=>{
            if (props.initialOptions) return props.initialOptions;
            if (!props.listUrl) return [];
            /**
       * @type {import("axios").AxiosResponse<{data: Array}|Array>}
       */ const resp = await (0, _api.api).get(props.listUrl);
            let data = resp.data;
            if (!Array.isArray(data)) data = data.data;
            return mapToOption(data);
        };
        /**
     * Map an array of all different objects received from API to an array of {@link Option}
     * @param {Array} data
     * @returns {Array<Option>}
     **/ const mapToOption = (data)=>data.map((obj)=>({
                    label: ((((obj.name ?? obj.title) ?? obj.text) ?? obj?.properties?.name) ?? obj.label) ?? obj,
                    value: ((obj.id ?? obj.text) ?? obj.value) ?? obj,
                    image: ((obj.logo_thumbnail ?? obj.logo) ?? obj.image_url) ?? obj.image
                }));
        /**
     * Get options from suggest API
     * It uses list API if no query is provided
     * Fallback to an empty array without props.listUrl
     * @param {string} q
     * @returns {Promise<Array<Option>>}
     */ const suggest = (q)=>{
            if (q.length < props.minimumCharacterBeforeSuggest || !props.suggestUrl) return getInitialOptions();
            if (currentRequest.value) currentRequest.value.cancel();
            currentRequest.value = (0, _api.generateCancelToken)();
            return (0, _api.api).get(props.suggestUrl, {
                params: {
                    q,
                    size: maxOptionsCount
                },
                cancelToken: currentRequest.value.token
            }).then((resp)=>{
                /** @type Array */ const suggestions = resp.data;
                return suggestions;
            }).catch((error)=>{
                if (!(0, _axiosDefault.default).isCancel(error)) toast.error(t("Error getting {type}.", {
                    type: props.placeholder
                }));
                return [];
            });
        };
        const suggestAndMapToOption = (q = "")=>suggest(q).then(addAllOptionAndMapToOption);
        /**
     * Get options from suggest API
     * It uses list API if no query is provided
     * Fallback to an empty array without query and props.listUrl
     * @param {Array} suggestions
     * @returns {Array<Option>}
     */ const addAllOptionAndMapToOption = (suggestions)=>{
            if (props.allOption) suggestions.unshift({
                name: props.allOption,
                id: ""
            });
            return mapToOption(suggestions);
        };
        /**
     * Set options from DOM processing
     * @param {Option[] | void} values
     * @returns {Option[] | void}
     */ const setOptions = (values)=>{
            if (values) options1.value = values;
            return values;
        };
        /**
     * Normalize provided values to array
     * @param {string | Array | undefined} values
     * @returns {import("vue").Ref<string>}
     */ const normalizeValues = (values)=>{
            /**
       * Selected value
       * @type {import("vue").Ref<string>}
       */ const selected = (0, _vue.ref)("");
            if (typeof values === "string") selected.value = values;
            else if (Array.isArray(values)) selected.value = values[0];
            return selected;
        };
        /**
     * Fill selected array with initial props.values.
     * It tries to augment the values with data from props.entityUrl or options.
     */ const fillSelectedFromValues = ()=>{
            let selectedPromise = null;
            let value1 = (0, _vue.unref)(normalizeValues(props.values));
            if (value1 && props.entityUrl) selectedPromise = (0, _api.api).get(props.entityUrl + value1).then((resp)=>resp.data).then((data)=>mapToOption([
                    data
                ])).then((entities)=>entities[0]?.label ?? value1).then((label)=>{
                const newOption = options1.value.every((option)=>option.value !== value1);
                if (newOption) options1.value.push({
                    label,
                    value: value1
                });
            }).then(()=>value1);
            else {
                let option = options1.value.find((opt)=>opt.value === value1);
                if (!option) {
                    option = {
                        label: value1,
                        value: value1
                    };
                    options1.value.push(option);
                }
                selectedPromise = Promise.resolve(option.value);
            }
            return selectedPromise.then((value)=>selected1.value = value).then((value)=>value ? value : selected1.value = defaultValue);
        };
        /**
     * Register event listener to trigger on change on select change event
     */ const registerTriggerOnChange = ()=>{
            if (select.value) props.onChange(select.value.value);
        };
        const updateStylesAndEvents = ()=>{
            updatePopupStyle();
            updateSelectStyle();
            registerSelectEvents();
        };
        const updatePopupStyle = ()=>{
            if (!container.value) return;
            let rect = container.value.getBoundingClientRect();
            let popupWidth = minWidth;
            if (window.innerWidth < popupWidth) popupWidth = Math.min(minWidth, rect.width);
            let availableSpace = window.innerWidth - rect.x;
            let popupMustMove = availableSpace < popupWidth;
            offset.value = popupMustMove ? popupWidth - rect.width : 0;
            const styles = container.value.style;
            styles.setProperty("--offset-select-a11y__overlay", `-${offset.value}px`);
            styles.setProperty("--min-width-select-a11y__overlay", `${popupWidth}px`);
        };
        const updateSelectStyle = ()=>{
            if (!container.value) return;
            const selectA11y = container.value.querySelector(".select-a11y");
            if (selectA11y) selectA11y.classList.add("fr-select");
        };
        const registerSelectEvents = ()=>{
            if (!container.value) return;
            if (select.value) {
                select.value.removeEventListener("change", registerTriggerOnChange);
                select.value.addEventListener("change", registerTriggerOnChange);
            }
        };
        const makeSelect = ()=>{
            const options = {
                text: texts,
                clearable: true
            };
            if (props.suggestUrl) options.fillSuggestions = suggestAndMapToOption;
            try {
                selectA11y1.value = new (0, _selectA11YDefault.default)(select.value, options);
                updateStylesAndEvents();
            } catch (e) {
                console.log(e);
            }
        };
        (0, _vue.watch)(()=>props.values, ()=>{
            let value = (0, _vue.unref)(normalizeValues(props.values));
            selectA11y1.value?.selectOptionSilently(value);
        });
        const fillOptionsAndValues = suggestAndMapToOption().then(setOptions).then(fillSelectedFromValues);
        (0, _vue.onMounted)(()=>fillOptionsAndValues.then(makeSelect));
        (0, _vue.onUpdated)(updateStylesAndEvents);
        return {
            id,
            displayedOptions,
            selected: selected1,
            select,
            container,
            offset
        };
    }
});

},{"vue":"hRjhg","@conciergerie.dev/select-a11y":"dpSTy","vue-i18n":"92JeB","axios":"jo6P5","../../plugins/api":"8P8eo","../../composables/useUid":"3yETw","../../composables/useToast":"g8lph","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dpSTy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Select", ()=>$5a3b80354f588438$export$ef9b1a59e592288f);
parcelHelpers.export(exports, "default", ()=>$5a3b80354f588438$export$2e2bcd8739ae039);
const $5a3b80354f588438$var$text = {
    help: "Utilisez la tabulation (ou les touches fl\xe8ches) pour naviguer dans la liste des suggestions",
    placeholder: "Rechercher dans la liste",
    noResult: "Aucun r\xe9sultat",
    results: "{x} suggestion(s) disponibles",
    deleteItem: "Supprimer {t}",
    delete: "Supprimer",
    clear: "Vider"
};
const $5a3b80354f588438$var$matches = Element.prototype.matches;
let $5a3b80354f588438$var$closest = Element.prototype.closest;
if (!$5a3b80354f588438$var$closest) $5a3b80354f588438$var$closest = function(s) {
    var el = this;
    do {
        if ($5a3b80354f588438$var$matches.call(el, s)) return el;
        el = el.parentElement || el.parentNode;
    }while (el !== null && el.nodeType === 1);
    return null;
};
const $5a3b80354f588438$var$DEEP_CLONE = true;
const $5a3b80354f588438$var$SILENTLY = false;
/**
 * Deep copy of an {@link Iterable} as {@link Array}
 * @template {HTMLElement} T
 * @param {Iterable<T>} array
 * @returns {Array<T>}
 */ function $5a3b80354f588438$var$deepCopy(array) {
    return /** @type {Array<T>} */ Array.from(array).map((option)=>option.cloneNode($5a3b80354f588438$var$DEEP_CLONE));
}
class $5a3b80354f588438$export$ef9b1a59e592288f {
    /**
   * @param {HTMLSelectElement} el - Select HTML element
   * @param {object} [options] - options to control select-a11y behavior
   * @param {object} [options.text] - texts used in the class
   * @param {object} [options.text.help] - helper text used for assistive technologies
   * @param {object} [options.text.placeholder] - search input placeholder
   * @param {object} [options.text.noResult] - text shown when there is no option
   * @param {object} [options.text.results] - text to show the number of results available for assistive technologies
   * @param {object} [options.text.deleteItem] - text used as title for "x" close button for selected option (see options.showSelected below)
   * @param {object} [options.text.delete] - text used for assistive technologies for the "x" close button for selected option (see options.showSelected below)
   * @param {object} [options.text.clear] - text used for assistive technologies for the "x" clear button for clearable single select (see options.clearable below)
   * @param {FillSuggestions} [options.fillSuggestions] - fill suggestions based on search input content
   * @param {boolean} [options.showSelected=true] - show selected options for multiple select
   * @param {boolean} [options.useLabelAsButton=false] - use label as button even for single select.
   * Only work if select value is set to `null` otherwise its value defaults to first option.
   * @param {boolean} [options.clearable=false] - show clear icon for single select.
   * Only work if select value is set. It resets it to `null`.
   */ constructor(el, options){
        /** @type {HTMLSelectElement} */ this.el = el;
        /** @type {HTMLLabelElement | null} */ this.label = document.querySelector(`label[for=${el.id}]`);
        this.id = el.id;
        this.open = false;
        this.multiple = this.el.multiple;
        this.search = "";
        /** @type {Array<HTMLElement>} */ this.suggestions = [];
        this.focusIndex = null;
        const passedOptions = Object.assign({}, options);
        const textOptions = Object.assign({}, $5a3b80354f588438$var$text, passedOptions.text);
        delete passedOptions.text;
        this._defaultSearch = this._defaultSearch.bind(this);
        this._options = Object.assign({
            text: textOptions,
            showSelected: true,
            fillSuggestions: this._defaultSearch,
            useLabelAsButton: false,
            clearable: false
        }, passedOptions);
        this._handleFocus = this._handleFocus.bind(this);
        this._handleInput = this._handleInput.bind(this);
        this._handleKeyboard = this._handleKeyboard.bind(this);
        this._handleOpener = this._handleOpener.bind(this);
        this._handleClear = this._handleClear.bind(this);
        this._handleReset = this._handleReset.bind(this);
        this._handleSuggestionClick = this._handleSuggestionClick.bind(this);
        this._positionCursor = this._positionCursor.bind(this);
        this._removeOption = this._removeOption.bind(this);
        this.setText = this.setText.bind(this);
        this._setButtonText = this._setButtonText.bind(this);
        if (!this.multiple) {
            const hasSelectedOption = Array.from(this.el.options).some((option)=>option.selected);
            if (this._options.useLabelAsButton && !hasSelectedOption) {
                const option = document.createElement("option");
                option.innerText = this.label?.innerText ?? "";
                option.setAttribute("value", "");
                option.setAttribute("selected", "selected");
                option.setAttribute("disabled", "disabled");
                option.setAttribute("hidden", "hidden");
                this.el.options.add(option, 0);
            }
        }
        /**
     * Select original options at initialization of the component.
     * They are never modified and are used to handle reset.
     * @type {Array<HTMLOptionElement>}
     */ this.originalOptions = $5a3b80354f588438$var$deepCopy(this.el.options);
        /**
     * Select original options at initialization of the component.
     * They are updated based on select / unselect of options but no options are added or removed to it.
     * This is the set of options passed to {@link FillSuggestions} callback.
     * @type {Array<HTMLOptionElement>}
     */ this.updatedOriginalOptions = Array.from(this.el.options);
        /**
     * Select current options. These can be completely differents options than {@link originalOptions}
     * if the provided promise fetches some from an API.
     * @type {Array<HTMLOptionElement>}
     */ this.currentOptions = Array.from(this.el.options);
        this._disable();
        this.button = this._createButton();
        this._setButtonText();
        this.clearButton = this._createClearButton();
        this.liveZone = this._createLiveZone();
        this.overlay = this._createOverlay();
        this.wrap = this._wrap();
        if (this.multiple && this._options.showSelected) {
            this.selectedList = this._createSelectedList();
            this._updateSelectedList();
            this.selectedList.addEventListener("click", this._removeOption);
        }
        this.button.addEventListener("click", this._handleOpener);
        this.clearButton.addEventListener("click", this._handleClear);
        this.wrap.addEventListener("keydown", this._handleKeyboard);
        document.addEventListener("blur", this._handleFocus, true);
        if (this.el.form) this.el.form.addEventListener("reset", this._handleReset);
    }
    /**
   * Update texts with new texts
   * @param {object} newText
   */ setText(newText) {
        Object.assign(this._options.text, newText);
    }
    /**
   * Select new value
   * @param {*} value option value
   */ selectOption(value, dispatchEvent = true) {
        const optionIndex = this.currentOptions.findIndex((option)=>option.value === value);
        if (optionIndex === -1) return;
        const shouldClose = this.multiple ? false : true;
        this._toggleSelection(optionIndex, shouldClose, dispatchEvent);
    }
    /**
   * Select new value without dispatching the change Event
   * @param {*} value option value
   */ selectOptionSilently(value) {
        this.selectOption(value, $5a3b80354f588438$var$SILENTLY);
    }
    _createButton() {
        const button = document.createElement("button");
        button.setAttribute("type", "button");
        button.setAttribute("aria-expanded", this.open ? "true" : "false");
        button.className = "select-a11y-button";
        const text = document.createElement("span");
        text.className = "select-a11y-button__text";
        if (this.multiple) text.innerText = this.label?.innerText ?? "";
        else {
            if (this.label && !this.label.id) this.label.id = `${this.el.id}-label`;
            button.setAttribute("id", this.el.id + "-button");
            button.setAttribute("aria-labelledby", this.label?.id + " " + button.id);
        }
        button.appendChild(text);
        button.insertAdjacentHTML("beforeend", '<span class="select-a11y-button__icon" aria-hidden="true"></span>');
        return button;
    }
    _createClearButton() {
        const clear = document.createElement("button");
        clear.setAttribute("type", "button");
        clear.setAttribute("aria-label", this._options.text.clear);
        clear.className = "select-a11y-button__clear";
        return clear;
    }
    _createLiveZone() {
        const live = document.createElement("p");
        live.setAttribute("aria-live", "polite");
        live.classList.add("sr-only");
        return live;
    }
    _createOverlay() {
        const container = document.createElement("div");
        container.classList.add("select-a11y__overlay");
        const suggestions = document.createElement("div");
        suggestions.classList.add("select-a11y-suggestions");
        suggestions.id = `a11y-${this.id}-suggestions`;
        container.innerHTML = `
      <p id="a11y-usage-${this.id}-js" class="sr-only">${this._options.text.help}</p>
      <label for="a11y-${this.id}-js" class="sr-only">${this._options.text.placeholder}</label>
      <input type="search" id="a11y-${this.id}-js" class="${this.el.className}" autocomplete="off" autocapitalize="off" spellcheck="false" placeholder="${this._options.text.placeholder}" aria-describedby="a11y-usage-${this.id}-js">
    `;
        container.appendChild(suggestions);
        this.list = suggestions;
        this.list.addEventListener("click", this._handleSuggestionClick);
        /** @type {HTMLInputElement | null} */ this.input = container.querySelector("input");
        if (this.input) {
            this.input.addEventListener("input", this._handleInput);
            this.input.addEventListener("focus", this._positionCursor, true);
        }
        return container;
    }
    _createSelectedList() {
        const list = document.createElement("ul");
        list.className = "select-a11y__selected-list";
        return list;
    }
    _disable() {
        this.el.setAttribute("tabindex", "-1");
    }
    /**
   *
   * @typedef Suggestion
   * @property {boolean} hidden - if suggestion is hidden
   * @property {boolean} disabled - if suggestion is disabled
   * @property {boolean} selected - if suggestion is selected
   * @property {string} label - label shown
   * @property {any} value - suggestion value
   * @property {string} [image] - suggestion image
   * @property {string} [alt] - suggestion image alt
   */ /**
   *
   * @param {HTMLOptionElement} option
   * @returns {Suggestion} - a suggestion
   */ _mapToSuggestion(option) {
        return {
            hidden: option.hidden,
            disabled: option.disabled,
            selected: option.hasAttribute("selected"),
            label: option.label,
            value: option.value,
            image: option.dataset.image,
            alt: option.dataset.alt
        };
    }
    /**
   *
   * @param {Suggestion} suggestion
   * @returns {HTMLOptionElement} - an option
   */ _mapToOption(suggestion) {
        const option = document.createElement("option");
        option.label = suggestion.label;
        option.value = suggestion.value;
        if (suggestion.hidden) option.setAttribute("hidden", "hidden");
        if (suggestion.disabled) option.setAttribute("disabled", "disabled");
        if (suggestion.selected) option.setAttribute("selected", "selected");
        if (suggestion.image) option.dataset.image = suggestion.image;
        if (suggestion.alt) option.dataset.alt = suggestion.alt;
        return option;
    }
    /**
   * @callback FillSuggestions
   * @param {string} search - searched term
   * @param {Array<HTMLOptionElement>} options - original select options
   * @returns {Promise<Array<Suggestion>>} suggestions
   */ /**
   *
   * @type {FillSuggestions}
   */ _defaultSearch(search, options) {
        const newOptions = options.filter((option)=>{
            const text = option.label || option.value;
            return text.toLocaleLowerCase().indexOf(search) !== -1;
        }).map(this._mapToSuggestion);
        return Promise.resolve(newOptions);
    }
    /**
   *
   * @returns {Promise<Array<Suggestion>>}
   */ async _fillSuggestions() {
        const search = this.search.toLowerCase();
        // loop over the
        const suggestions = await this._options.fillSuggestions(search, this.updatedOriginalOptions);
        this.currentOptions = suggestions.map(this._mapToOption);
        this.el.replaceChildren(...this.currentOptions);
        const suggestionElements = suggestions.filter((suggestion)=>!suggestion.hidden && !suggestion.disabled).map((suggestion, index)=>{
            const suggestionElement = document.createElement("div");
            suggestionElement.setAttribute("role", "option");
            suggestionElement.setAttribute("tabindex", "0");
            suggestionElement.setAttribute("data-index", index.toString());
            suggestionElement.classList.add("select-a11y-suggestion");
            suggestionElement.innerText = suggestion.label || suggestion.value;
            // check if the option is selected
            if (suggestion.selected) suggestionElement.setAttribute("aria-selected", "true");
            if (suggestion.image) {
                const image = document.createElement("img");
                image.setAttribute("src", suggestion.image);
                image.setAttribute("alt", suggestion.alt ? suggestion.alt : "");
                image.classList.add("select-a11y-suggestion__image");
                suggestionElement.prepend(image);
            }
            return suggestionElement;
        });
        this.suggestions = suggestionElements;
        if (this.list) {
            if (!suggestionElements.length) this.list.innerHTML = `<p class="select-a11y__no-suggestion">${this._options.text.noResult}</p>`;
            else {
                const listBox = document.createElement("div");
                listBox.setAttribute("role", "listbox");
                if (this.multiple) listBox.setAttribute("aria-multiselectable", "true");
                suggestionElements.forEach((suggestionElement)=>{
                    listBox.appendChild(suggestionElement);
                });
                this.list.innerHTML = "";
                this.list.appendChild(listBox);
            }
        }
        this._setLiveZone();
        return suggestions;
    }
    _handleOpener(event) {
        this._toggleOverlay();
    }
    _handleFocus() {
        if (!this.open) return;
        clearTimeout(this._focusTimeout);
        this._focusTimeout = setTimeout(()=>{
            if (!this.overlay.contains(document.activeElement) && this.button !== document.activeElement) this._toggleOverlay(false, document.activeElement === document.body);
            else if (document.activeElement === this.input) this.focusIndex = null;
            else {
                const optionIndex = this.suggestions.indexOf(document.activeElement);
                if (optionIndex !== -1) this.focusIndex = optionIndex;
            }
        }, 10);
    }
    _handleClear() {
        this.el.value = "";
        this._handleReset();
    }
    _handleReset() {
        clearTimeout(this._resetTimeout);
        this._resetTimeout = setTimeout(async ()=>{
            this.search = "";
            this.updatedOriginalOptions = $5a3b80354f588438$var$deepCopy(this.originalOptions);
            this.currentOptions = $5a3b80354f588438$var$deepCopy(this.originalOptions);
            await this._fillSuggestions();
            this.el.dispatchEvent(new Event("change"));
            this._setButtonText();
            if (this.multiple && this._options.showSelected) this._updateSelectedList();
        }, 10);
    }
    _handleSuggestionClick(event) {
        const option = $5a3b80354f588438$var$closest.call(event.target, '[role="option"]');
        if (!option) return;
        const optionIndex = parseInt(option.getAttribute("data-index"), 10);
        const shouldClose = this.multiple && event.metaKey ? false : true;
        this._toggleSelection(optionIndex, shouldClose);
    }
    _handleInput() {
        // prevent event fireing on focus and blur
        if (this.search === this.input?.value) return;
        this.search = this.input?.value ?? "";
        this._fillSuggestions();
    }
    _handleKeyboard(event) {
        const option = $5a3b80354f588438$var$closest.call(event.target, '[role="option"]');
        const input = $5a3b80354f588438$var$closest.call(event.target, "input");
        if (event.keyCode === 27) {
            this._toggleOverlay();
            return;
        }
        if (input && event.keyCode === 13) {
            event.preventDefault();
            return;
        }
        if (event.keyCode === 40) {
            event.preventDefault();
            this._moveIndex(1);
            return;
        }
        if (!option) return;
        if (event.keyCode === 39) {
            event.preventDefault();
            this._moveIndex(1);
            return;
        }
        if (event.keyCode === 37 || event.keyCode === 38) {
            event.preventDefault();
            this._moveIndex(-1);
            return;
        }
        if (!this.multiple && event.keyCode === 13 || event.keyCode === 32) {
            event.preventDefault();
            this._toggleSelection(parseInt(option.getAttribute("data-index"), 10), this.multiple ? false : true);
        }
        if (this.multiple && event.keyCode === 13) this._toggleOverlay();
    }
    _moveIndex(step) {
        if (this.focusIndex === null) this.focusIndex = 0;
        else {
            const nextIndex = this.focusIndex + step;
            const selectionItems = this.suggestions.length - 1;
            if (nextIndex > selectionItems) this.focusIndex = 0;
            else if (nextIndex < 0) this.focusIndex = selectionItems;
            else this.focusIndex = nextIndex;
        }
        this.suggestions[this.focusIndex].focus();
    }
    _positionCursor() {
        setTimeout(()=>{
            if (this.input) {
                const endOfInput = this.input.value.length ?? 0;
                this.input.setSelectionRange(endOfInput, endOfInput);
            }
        });
    }
    _removeOption(event) {
        const button = $5a3b80354f588438$var$closest.call(event.target, "button");
        if (!button) return;
        const currentButtons = this.selectedList?.querySelectorAll("button");
        const buttonPreviousIndex = Array.prototype.indexOf.call(currentButtons, button) - 1;
        const optionIndex = parseInt(button.getAttribute("data-index"), 10);
        // disable the option
        this._toggleSelection(optionIndex);
        // manage the focus if there's still the selected list
        if (this.selectedList?.parentElement) {
            const buttons = this.selectedList.querySelectorAll("button");
            // look for the bouton before the one clicked
            if (buttons[buttonPreviousIndex]) buttons[buttonPreviousIndex].focus();
            else buttons[0].focus();
        } else this.button.focus();
    }
    _setButtonText() {
        if (!this.multiple) {
            const selectedOption = this.el.item(this.el.selectedIndex);
            if (selectedOption) {
                if (selectedOption.value) this.button.classList.remove("select-a11y-button--no-selected-option");
                else this.button.classList.add("select-a11y-button--no-selected-option");
                const child = this.button.firstElementChild;
                if (child instanceof HTMLElement) child.innerText = selectedOption.label || selectedOption.value;
            }
        }
    }
    _setLiveZone() {
        const suggestions = this.suggestions.length;
        let text = "";
        if (this.open) {
            if (!suggestions) text = this._options.text.noResult;
            else text = this._options.text.results.replace("{x}", suggestions);
        }
        this.liveZone.innerText = text;
    }
    _toggleOverlay(state, focusBack) {
        this.open = state !== undefined ? state : !this.open;
        this.button.setAttribute("aria-expanded", this.open ? "true" : "false");
        if (this.open) {
            this._fillSuggestions();
            this.button.insertAdjacentElement("afterend", this.overlay);
            this.input?.focus();
        } else if (this.wrap.contains(this.overlay)) {
            this.wrap.removeChild(this.overlay);
            // reset the focus index
            this.focusIndex = null;
            // reset search values
            if (this.input) this.input.value = "";
            this.search = "";
            // reset aria-live
            this._setLiveZone();
            if (state === undefined || focusBack) setTimeout(()=>{
                this.button.focus();
            });
        }
    }
    _toggleSelection(optionIndex, close = true, dispatch = true) {
        const toggledOption = this.el.item(optionIndex);
        if (this.multiple) {
            if (toggledOption?.hasAttribute("selected")) toggledOption.removeAttribute("selected");
            else toggledOption?.setAttribute("selected", "selected");
        } else {
            toggledOption?.setAttribute("selected", "selected");
            this.el.selectedIndex = optionIndex;
        }
        this.updatedOriginalOptions = this.updatedOriginalOptions.map((option)=>{
            if (option.value === toggledOption?.value) {
                if (toggledOption.hasAttribute("selected")) option.setAttribute("selected", "selected");
                else option.removeAttribute("selected");
            }
            if (!this.multiple && option.value !== toggledOption?.value) option.removeAttribute("selected");
            return option;
        });
        this.suggestions = this.suggestions.map((suggestion)=>{
            const index = parseInt(suggestion.getAttribute("data-index") ?? "", 10);
            const option = this.el.item(index);
            if (option && option.selected) suggestion.setAttribute("aria-selected", "true");
            else suggestion.removeAttribute("aria-selected");
            return suggestion;
        });
        if (dispatch) this.el.dispatchEvent(new Event("change"));
        this._setButtonText();
        if (this.multiple && this._options.showSelected) this._updateSelectedList();
        if (close && this.open) this._toggleOverlay();
    }
    _updateSelectedList() {
        const items = this.currentOptions.map((option, index)=>{
            if (!option.selected) return;
            const text = option.label || option.value;
            return `
        <li class="select-a11y__selected-item">
          <span>${text}</span>
          <button class="select-a11y-delete" title="${this._options.text.deleteItem.replace("{t}", text)}" type="button" data-index="${index}">
            <span class="sr-only">${this._options.text.delete}</span>
            <span class="select-a11y-delete__icon" aria-hidden="true"></span>
          </button>
        </li>`;
        }).filter(Boolean);
        if (this.selectedList) {
            this.selectedList.innerHTML = items.join("");
            if (items.length) {
                if (!this.selectedList?.parentElement) this.wrap.appendChild(this.selectedList);
            } else if (this.selectedList.parentElement) this.wrap.removeChild(this.selectedList);
        }
    }
    _wrap() {
        const wrapper = document.createElement("div");
        wrapper.classList.add("select-a11y");
        this.el.parentElement?.appendChild(wrapper);
        const tagHidden = document.createElement("div");
        tagHidden.classList.add("select-a11y__hidden");
        tagHidden.setAttribute("aria-hidden", "true");
        if (this.multiple || this._options.useLabelAsButton) tagHidden.appendChild(this.label);
        tagHidden.appendChild(this.el);
        wrapper.appendChild(tagHidden);
        wrapper.appendChild(this.liveZone);
        wrapper.appendChild(this.button);
        if (this._options.clearable) wrapper.appendChild(this.clearButton);
        return wrapper;
    }
}
var $5a3b80354f588438$export$2e2bcd8739ae039 = $5a3b80354f588438$export$ef9b1a59e592288f;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3yETw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
let uid = 0;
function useUid(id = "id") {
    uid++;
    return {
        id: `${id}-${uid}`
    };
}
exports.default = useUid;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4rXRS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "render", ()=>render);
var _vue = require("vue");
const _withScopeId = (n)=>((0, _vue.pushScopeId)("data-v-999727"), n = n(), (0, _vue.popScopeId)(), n);
const _hoisted_1 = [
    "data-selected"
];
const _hoisted_2 = [
    "for",
    "title"
];
const _hoisted_3 = {
    key: 0,
    class: "fr-icon-information-line",
    "aria-hidden": "true"
};
const _hoisted_4 = [
    "id"
];
const _hoisted_5 = [
    "value",
    "data-image"
];
function render(_ctx, _cache, $props, $setup, $data, $options) {
    return (0, _vue.openBlock)(), (0, _vue.createElementBlock)("div", {
        class: "multiselect w-100",
        ref: "container",
        "data-selected": !!_ctx.selected
    }, [
        (0, _vue.createElementVNode)("label", {
            for: _ctx.id,
            title: _ctx.explanation
        }, [
            (0, _vue.createTextVNode)((0, _vue.toDisplayString)(_ctx.placeholder) + " ", 1 /* TEXT */ ),
            _ctx.explanation ? ((0, _vue.openBlock)(), (0, _vue.createElementBlock)("span", _hoisted_3)) : (0, _vue.createCommentVNode)("v-if", true)
        ], 8 /* PROPS */ , _hoisted_2),
        (0, _vue.withDirectives)((0, _vue.createElementVNode)("select", {
            class: "multiselect__input",
            id: _ctx.id,
            ref: "select",
            "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event)=>_ctx.selected = $event)
        }, [
            ((0, _vue.openBlock)(true), (0, _vue.createElementBlock)((0, _vue.Fragment), null, (0, _vue.renderList)(_ctx.displayedOptions, (option)=>{
                return (0, _vue.openBlock)(), (0, _vue.createElementBlock)("option", {
                    key: option.value,
                    value: option.value,
                    "data-image": option.image
                }, (0, _vue.toDisplayString)(option.label), 9 /* TEXT, PROPS */ , _hoisted_5);
            }), 128 /* KEYED_FRAGMENT */ ))
        ], 8 /* PROPS */ , _hoisted_4), [
            [
                (0, _vue.vModelSelect),
                _ctx.selected
            ]
        ])
    ], 8 /* PROPS */ , _hoisted_1);
}
if (module.hot) module.hot.accept(()=>{
    __VUE_HMR_RUNTIME__.rerender("999727-hmr", render);
});

},{"vue":"hRjhg","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iEXv5":[function() {},{}],"fdvrP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
let NOOP = ()=>{};
exports.default = (script)=>{};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aKg25":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "render", ()=>render);
var _vue = require("vue");
function render(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_MultiSelect = (0, _vue.resolveComponent)("MultiSelect");
    return (0, _vue.openBlock)(), (0, _vue.createBlock)(_component_MultiSelect, {
        placeholder: _ctx.$t("Schema"),
        explanation: _ctx.$t("Data schemas describe data models: what are the fields, how are data shown, what are the available values, etc. See schema.data.gouv.fr"),
        searchPlaceholder: _ctx.$t("Search a schema..."),
        allOption: _ctx.$t("All schemas"),
        initialOptions: _ctx.initialOptions,
        values: _ctx.values,
        onChange: _ctx.onChange
    }, null, 8 /* PROPS */ , [
        "placeholder",
        "explanation",
        "searchPlaceholder",
        "allOption",
        "initialOptions",
        "values",
        "onChange"
    ]);
}
if (module.hot) module.hot.accept(()=>{
    __VUE_HMR_RUNTIME__.rerender("0608ac-hmr", render);
});

},{"vue":"hRjhg","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"77pzc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
let NOOP = ()=>{};
exports.default = (script)=>{};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bFP1H":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
let script;
let initialize = ()=>{
    script = require("script:./empty.vue");
    if (script.__esModule) script = script.default;
    script.render = require("template:./empty.vue").render;
    require("custom:./empty.vue").default(script);
    script.__scopeId = "data-v-5903b3";
    script.__file = "/home/babel/Documents/workspace/udata_workspace/udata-front/theme/js/components/search/empty.vue";
};
initialize();
if (module.hot) {
    script.__hmrId = "5903b3-hmr";
    module.hot.accept(()=>{
        setTimeout(()=>{
            initialize();
            if (!__VUE_HMR_RUNTIME__.createRecord("5903b3-hmr", script)) __VUE_HMR_RUNTIME__.reload("5903b3-hmr", script);
        }, 0);
    });
}
exports.default = script;

},{"script:./empty.vue":"31A9y","template:./empty.vue":"a8Po6","custom:./empty.vue":"aC9GT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"31A9y":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _emptySvg = require("bundle-text:svg/search/empty.svg");
var _emptySvgDefault = parcelHelpers.interopDefault(_emptySvg);
exports.default = {
    props: {
        queryString: String,
        cta: String,
        copy: String,
        copyAfter: String,
        link: String,
        onClick: Function,
        wide: Boolean
    },
    data () {
        return {
            Empty: (0, _emptySvgDefault.default)
        };
    }
};

},{"bundle-text:svg/search/empty.svg":"ct5sg","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ct5sg":[function(require,module,exports) {
module.exports = "<svg aria-hidden=\"true\" width=\"60\" height=\"60\" viewBox=\"0 0 60 60\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<rect width=\"60\" height=\"60\" rx=\"30\" fill=\"#232323\"></rect>\n<path d=\"M45.4785 26.793L41.9141 18.1016C41.6699 17.5645 41.0352 17.1738 40.4492 17.1738C40.3027 17.1738 40.0098 17.2227 39.8633 17.2715L34.541 19.4688C33.8086 19.7617 33.4668 20.5918 33.6621 21.3242L18.0371 28.9414C17.5977 29.1367 17.4023 29.5762 17.5488 29.9668L17.9395 30.9922L14.8145 32.3105C14.5703 32.4082 14.375 32.75 14.375 33.043C14.375 33.0918 14.375 33.2383 14.4238 33.3359L15.4004 35.6797C15.498 35.9727 15.8398 36.168 16.1328 36.168C16.1816 36.168 16.3281 36.168 16.4258 36.1191L19.5508 34.8008L19.9902 35.8262C20.1855 36.3145 20.7227 36.3633 21.0645 36.2656L27.5586 33.9707C27.6562 34.0684 27.7051 34.1172 27.8027 34.166L25.3125 41.6367C25.3125 41.6855 25.3125 41.7344 25.3125 41.7344C25.3125 41.9785 25.459 42.125 25.7031 42.125H26.4844C26.6797 42.125 26.8262 42.0273 26.875 41.8809L29.1699 34.9961C29.7559 35.1426 30.2441 35.1426 30.7812 34.9961L33.0762 41.8809C33.125 42.0273 33.2715 42.125 33.4668 42.125H34.248C34.4922 42.125 34.6387 41.9785 34.6387 41.7344C34.6387 41.7344 34.6387 41.6855 34.6387 41.6367L32.1484 34.2148C32.6855 33.7266 33.0762 32.75 33.0762 32.0664L37.5195 30.5527C37.8613 30.9434 38.5449 31.334 39.3262 30.9922L44.6484 28.7949C45.1855 28.5996 45.5762 27.9648 45.5762 27.3789C45.5762 27.1836 45.5273 26.9395 45.4785 26.793ZM16.5234 34.3613L16.1328 33.4336L18.5742 32.457L18.9648 33.3848L16.5234 34.3613ZM30 33.5312C29.1211 33.5312 28.4375 32.8477 28.4375 31.9688C28.4375 31.1387 29.1211 30.4062 30 30.4062C30.8301 30.4062 31.5625 31.1387 31.5625 31.9688C31.5137 32.8477 30.8301 33.5312 30 33.5312ZM32.7344 30.5527C32.2461 29.625 31.0254 28.8438 29.9512 28.8438C28.2422 28.8438 26.8262 30.2598 26.8262 31.9688C26.8262 32.1152 26.875 32.4082 26.9238 32.5547L21.1133 34.5566L19.2578 30.0645L34.248 22.7891L36.8359 29.0879L32.7344 30.5527ZM38.7402 29.5762L35.127 20.8848L40.4492 18.7363L44.0137 27.3789L38.7402 29.5762Z\" fill=\"white\"></path>\n</svg>\n";

},{}],"a8Po6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "render", ()=>render);
var _vue = require("vue");
const _hoisted_1 = [
    "innerHTML"
];
const _hoisted_2 = {
    key: 0
};
const _hoisted_3 = {
    key: 0
};
const _hoisted_4 = [
    "href"
];
function render(_ctx, _cache, $props, $setup, $data, $options) {
    return (0, _vue.openBlock)(), (0, _vue.createElementBlock)("div", {
        class: (0, _vue.normalizeClass)([
            "search-empty bg-grey-50 fr-p-3w fr-my-2w fr-pb-7w",
            {
                "fr-grid-row": $props.wide
            }
        ])
    }, [
        (0, _vue.createElementVNode)("div", {
            class: (0, _vue.normalizeClass)({
                "fr-pr-3w": $props.wide
            }),
            innerHTML: $data.Empty
        }, null, 10 /* CLASS, PROPS */ , _hoisted_1),
        (0, _vue.createElementVNode)("div", {
            class: (0, _vue.normalizeClass)({
                "fr-mt-3w": !$props.wide
            })
        }, [
            (0, _vue.createElementVNode)("h4", null, (0, _vue.toDisplayString)(_ctx.$t("There are no results for your search")), 1 /* TEXT */ ),
            (0, _vue.createElementVNode)("p", null, [
                (0, _vue.createTextVNode)((0, _vue.toDisplayString)($props.copy) + " ", 1 /* TEXT */ ),
                $props.queryString ? ((0, _vue.openBlock)(), (0, _vue.createElementBlock)("span", _hoisted_2, (0, _vue.toDisplayString)(`"${$props.queryString}"`), 1 /* TEXT */ )) : (0, _vue.createCommentVNode)("v-if", true)
            ]),
            $props.copyAfter ? ((0, _vue.openBlock)(), (0, _vue.createElementBlock)("p", _hoisted_3, (0, _vue.toDisplayString)($props.copyAfter), 1 /* TEXT */ )) : (0, _vue.createCommentVNode)("v-if", true),
            $props.onClick ? ((0, _vue.openBlock)(), (0, _vue.createElementBlock)("button", {
                key: 1,
                class: "nav-link",
                onClick: _cache[0] || (_cache[0] = (...args)=>$props.onClick && $props.onClick(...args))
            }, (0, _vue.toDisplayString)($props.cta), 1 /* TEXT */ )) : ((0, _vue.openBlock)(), (0, _vue.createElementBlock)("a", {
                key: 2,
                class: "nav-link",
                href: $props.link
            }, (0, _vue.toDisplayString)($props.cta), 9 /* TEXT, PROPS */ , _hoisted_4))
        ], 2 /* CLASS */ )
    ], 2 /* CLASS */ );
}
if (module.hot) module.hot.accept(()=>{
    __VUE_HMR_RUNTIME__.rerender("5903b3-hmr", render);
});

},{"vue":"hRjhg","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aC9GT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
let NOOP = ()=>{};
exports.default = (script)=>{};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"a6pE2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "debounce", ()=>debounce);
var _vue = require("vue");
const debounce = (fn, delay = 0, immediate = false)=>{
    let timeout;
    return (...args)=>{
        if (immediate && !timeout) fn(...args);
        clearTimeout(timeout);
        timeout = setTimeout(()=>{
            fn(...args);
        }, delay);
    };
};
function useDebouncedRef(initialValue, delay, immediate) {
    const state = (0, _vue.ref)(initialValue);
    return (0, _vue.customRef)((track, trigger)=>({
            get () {
                track();
                return state.value;
            },
            set: debounce((value)=>{
                state.value = value;
                trigger();
            }, delay, immediate)
        }));
}
exports.default = useDebouncedRef;

},{"vue":"hRjhg","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jL1yZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "render", ()=>render);
var _vue = require("vue");
const _hoisted_1 = {
    class: "fr-grid-row fr-grid-row--middle justify-between search-bar",
    ref: "searchRef"
};
const _hoisted_2 = {
    class: "fr-grid-row fr-mt-1w fr-mt-md-5v"
};
const _hoisted_3 = {
    class: "fr-col-12 fr-col-md-4 fr-col-lg-3"
};
const _hoisted_4 = [
    "aria-label"
];
const _hoisted_5 = {
    class: "fr-sidemenu__inner"
};
const _hoisted_6 = {
    class: "fr-sidemenu__btn fr-mt-1w",
    hidden: "",
    "aria-controls": "fr-sidemenu-wrapper",
    "aria-expanded": "false"
};
const _hoisted_7 = {
    class: "fr-collapse",
    id: "fr-sidemenu-wrapper"
};
const _hoisted_8 = {
    class: "fr-sidemenu__title fr-mb-3v"
};
const _hoisted_9 = {
    class: "fr-grid-row fr-grid-row--gutters"
};
const _hoisted_10 = {
    class: "fr-col-12"
};
const _hoisted_11 = {
    class: "fr-col-12"
};
const _hoisted_12 = {
    class: "fr-col-12"
};
const _hoisted_13 = {
    class: "fr-col-12"
};
const _hoisted_14 = {
    class: "fr-col-12"
};
const _hoisted_15 = {
    class: "fr-col-12 fr-mb-3w"
};
const _hoisted_16 = {
    class: "fr-grid-row fr-grid-row--gutters fr-grid-row--middle justify-between fr-pb-1w"
};
const _hoisted_17 = {
    key: 0,
    class: "fr-col-auto fr-my-0",
    role: "status"
};
const _hoisted_18 = {
    class: "fr-col-auto fr-grid-row fr-grid-row--middle"
};
const _hoisted_19 = {
    for: "sort-search",
    class: "fr-col-auto fr-text--sm fr-m-0 fr-mr-1w"
};
const _hoisted_20 = {
    class: "fr-col"
};
const _hoisted_21 = {
    value: ""
};
const _hoisted_22 = [
    "value"
];
const _hoisted_23 = {
    key: 0
};
const _hoisted_24 = {
    key: 1
};
const _hoisted_25 = {
    class: "fr-mt-1w border-default-grey border-top relative z-2"
};
const _hoisted_26 = {
    key: 2
};
function render(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_SearchInput = (0, _vue.resolveComponent)("SearchInput");
    const _component_MultiSelect = (0, _vue.resolveComponent)("MultiSelect");
    const _component_Loader = (0, _vue.resolveComponent)("Loader");
    const _component_Dataset = (0, _vue.resolveComponent)("Dataset");
    const _component_Pagination = (0, _vue.resolveComponent)("Pagination");
    const _component_Empty = (0, _vue.resolveComponent)("Empty");
    return (0, _vue.openBlock)(), (0, _vue.createElementBlock)("form", {
        class: "fr-pt-3v",
        onSubmit: _cache[3] || (_cache[3] = (0, _vue.withModifiers)((...args)=>_ctx.search && _ctx.search(...args), [
            "prevent"
        ]))
    }, [
        (0, _vue.createElementVNode)("div", _hoisted_1, [
            (0, _vue.createVNode)(_component_SearchInput, {
                onChange: _ctx.handleSearchChange,
                value: _ctx.queryString,
                placeholder: _ctx.$t("Ex. 2022 presidential election")
            }, null, 8 /* PROPS */ , [
                "onChange",
                "value",
                "placeholder"
            ])
        ], 512 /* NEED_PATCH */ ),
        (0, _vue.createElementVNode)("div", _hoisted_2, [
            (0, _vue.createElementVNode)("div", _hoisted_3, [
                (0, _vue.createElementVNode)("nav", {
                    class: "fr-sidemenu",
                    "aria-label": _ctx.$t("Filter results")
                }, [
                    (0, _vue.createElementVNode)("div", _hoisted_5, [
                        (0, _vue.createElementVNode)("button", _hoisted_6, (0, _vue.toDisplayString)(_ctx.$t("Filter results")), 1 /* TEXT */ ),
                        (0, _vue.createElementVNode)("div", _hoisted_7, [
                            (0, _vue.createElementVNode)("div", _hoisted_8, (0, _vue.toDisplayString)(_ctx.$t("Filters")), 1 /* TEXT */ ),
                            (0, _vue.createElementVNode)("div", _hoisted_9, [
                                (0, _vue.createElementVNode)("div", _hoisted_10, [
                                    (0, _vue.createVNode)(_component_MultiSelect, {
                                        placeholder: _ctx.$t("Organizations"),
                                        searchPlaceholder: _ctx.$t("Search an organization..."),
                                        allOption: _ctx.$t("All organizations"),
                                        listUrl: "/organizations/?sort=-followers",
                                        suggestUrl: "/organizations/suggest/",
                                        entityUrl: "/organizations/",
                                        values: _ctx.facets.organization,
                                        onChange: _ctx.handleFacetChange("organization")
                                    }, null, 8 /* PROPS */ , [
                                        "placeholder",
                                        "searchPlaceholder",
                                        "allOption",
                                        "values",
                                        "onChange"
                                    ])
                                ]),
                                (0, _vue.createCommentVNode)('\n                <div class="fr-col-12">\n                  <MultiSelect\n                    :placeholder="$t(\'Tags\')"\n                    :searchPlaceholder="$t(\'Search a tag...\')"\n                    :allOption="$t(\'All tags\')"\n                    suggestUrl="/tags/suggest/"\n                    :values="facets.tag"\n                    :onChange="handleFacetChange(\'tag\')"\n                    :minimumCharacterBeforeSuggest="2"\n                  />\n                </div>\n                '),
                                (0, _vue.createElementVNode)("div", _hoisted_11, [
                                    (0, _vue.createVNode)(_component_MultiSelect, {
                                        placeholder: _ctx.$t("Formats"),
                                        searchPlaceholder: _ctx.$t("Search a format..."),
                                        allOption: _ctx.$t("All formats"),
                                        listUrl: "/datasets/extensions/",
                                        values: _ctx.facets.format,
                                        onChange: _ctx.handleFacetChange("format")
                                    }, null, 8 /* PROPS */ , [
                                        "placeholder",
                                        "searchPlaceholder",
                                        "allOption",
                                        "values",
                                        "onChange"
                                    ])
                                ]),
                                (0, _vue.createElementVNode)("div", _hoisted_12, [
                                    (0, _vue.createVNode)(_component_MultiSelect, {
                                        placeholder: _ctx.$t("Licenses"),
                                        explanation: _ctx.$t("Licenses define reuse rules for published datasets. See page data.gouv.fr/licences"),
                                        searchPlaceholder: _ctx.$t("Search a license..."),
                                        allOption: _ctx.$t("All licenses"),
                                        listUrl: "/datasets/licenses/",
                                        values: _ctx.facets.license,
                                        onChange: _ctx.handleFacetChange("license")
                                    }, null, 8 /* PROPS */ , [
                                        "placeholder",
                                        "explanation",
                                        "searchPlaceholder",
                                        "allOption",
                                        "values",
                                        "onChange"
                                    ])
                                ]),
                                (0, _vue.createCommentVNode)('\n                <div class="fr-col-12">\n                  <SchemaFilter\n                    :values="facets.schema"\n                    :onChange="handleFacetChange(\'schema\')"\n                  />\n                </div>\n                '),
                                (0, _vue.createElementVNode)("div", _hoisted_13, [
                                    (0, _vue.createVNode)(_component_MultiSelect, {
                                        placeholder: _ctx.$t("Spatial coverage"),
                                        explanation: _ctx.$t("Geographic areas covered by data and for which they are relevant."),
                                        searchPlaceholder: _ctx.$t("Search a spatial coverage..."),
                                        allOption: _ctx.$t("All coverages"),
                                        suggestUrl: "/spatial/zones/suggest/",
                                        entityUrl: "/spatial/zone/",
                                        values: _ctx.facets.geozone,
                                        onChange: _ctx.handleFacetChange("geozone")
                                    }, null, 8 /* PROPS */ , [
                                        "placeholder",
                                        "explanation",
                                        "searchPlaceholder",
                                        "allOption",
                                        "values",
                                        "onChange"
                                    ])
                                ]),
                                (0, _vue.createElementVNode)("div", _hoisted_14, [
                                    (0, _vue.createVNode)(_component_MultiSelect, {
                                        placeholder: _ctx.$t("Spatial granularity"),
                                        explanation: _ctx.$t("Finest level of geographic detail covered by data."),
                                        searchPlaceholder: _ctx.$t("Search a granularity..."),
                                        allOption: _ctx.$t("All granularities"),
                                        listUrl: "/spatial/granularities/",
                                        values: _ctx.facets.granularity,
                                        onChange: _ctx.handleFacetChange("granularity")
                                    }, null, 8 /* PROPS */ , [
                                        "placeholder",
                                        "explanation",
                                        "searchPlaceholder",
                                        "allOption",
                                        "values",
                                        "onChange"
                                    ])
                                ]),
                                (0, _vue.createElementVNode)("div", _hoisted_15, [
                                    _ctx.isFiltered ? ((0, _vue.openBlock)(), (0, _vue.createElementBlock)("button", {
                                        key: 0,
                                        class: "fr-btn fr-btn--secondary fr-icon-close-circle-line fr-btn--icon-left",
                                        onClick: _cache[0] || (_cache[0] = (...args)=>_ctx.resetFilters && _ctx.resetFilters(...args))
                                    }, (0, _vue.toDisplayString)(_ctx.$t("Reset filters")), 1 /* TEXT */ )) : (0, _vue.createCommentVNode)("v-if", true)
                                ])
                            ])
                        ])
                    ])
                ], 8 /* PROPS */ , _hoisted_4)
            ]),
            (0, _vue.createElementVNode)("section", (0, _vue.mergeProps)({
                class: "fr-col-12 fr-col-md-8 fr-col-lg-9 fr-mt-2w fr-mt-md-0 search-results",
                ref: "resultsRef"
            }, _ctx.$attrs), [
                (0, _vue.createElementVNode)("div", _hoisted_16, [
                    _ctx.totalResults ? ((0, _vue.openBlock)(), (0, _vue.createElementBlock)("p", _hoisted_17, (0, _vue.toDisplayString)(_ctx.$t("{count} results", _ctx.totalResults)), 1 /* TEXT */ )) : (0, _vue.createCommentVNode)("v-if", true),
                    (0, _vue.createElementVNode)("div", _hoisted_18, [
                        (0, _vue.createElementVNode)("label", _hoisted_19, (0, _vue.toDisplayString)(_ctx.$t("Sort by:")), 1 /* TEXT */ ),
                        (0, _vue.createElementVNode)("div", _hoisted_20, [
                            (0, _vue.withDirectives)((0, _vue.createElementVNode)("select", {
                                id: "sort-search",
                                class: "fr-select",
                                name: "sort",
                                "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event)=>_ctx.searchSort = $event),
                                onChange: _cache[2] || (_cache[2] = (...args)=>_ctx.handleSortChange && _ctx.handleSortChange(...args))
                            }, [
                                (0, _vue.createElementVNode)("option", _hoisted_21, (0, _vue.toDisplayString)(_ctx.$t("Relevance")), 1 /* TEXT */ ),
                                ((0, _vue.openBlock)(true), (0, _vue.createElementBlock)((0, _vue.Fragment), null, (0, _vue.renderList)(_ctx.sortOptions, ({ value , label  })=>{
                                    return (0, _vue.openBlock)(), (0, _vue.createElementBlock)("option", {
                                        value: value
                                    }, (0, _vue.toDisplayString)(label), 9 /* TEXT, PROPS */ , _hoisted_22);
                                }), 256 /* UNKEYED_FRAGMENT */ ))
                            ], 544 /* HYDRATE_EVENTS, NEED_PATCH */ ), [
                                [
                                    (0, _vue.vModelSelect),
                                    _ctx.searchSort
                                ]
                            ])
                        ])
                    ])
                ]),
                (0, _vue.createVNode)((0, _vue.Transition), {
                    mode: "out-in"
                }, {
                    default: (0, _vue.withCtx)(()=>[
                            _ctx.loading ? ((0, _vue.openBlock)(), (0, _vue.createElementBlock)("div", _hoisted_23, [
                                (0, _vue.createVNode)(_component_Loader)
                            ])) : _ctx.results.length ? ((0, _vue.openBlock)(), (0, _vue.createElementBlock)("div", _hoisted_24, [
                                (0, _vue.createElementVNode)("ul", _hoisted_25, [
                                    ((0, _vue.openBlock)(true), (0, _vue.createElementBlock)((0, _vue.Fragment), null, (0, _vue.renderList)(_ctx.results, (result, key)=>{
                                        return (0, _vue.openBlock)(), (0, _vue.createElementBlock)("li", {
                                            key: result.id
                                        }, [
                                            (0, _vue.createVNode)(_component_Dataset, (0, _vue.mergeProps)(result, {
                                                style: _ctx.zIndex(key)
                                            }), null, 16 /* FULL_PROPS */ , [
                                                "style"
                                            ])
                                        ]);
                                    }), 128 /* KEYED_FRAGMENT */ ))
                                ]),
                                _ctx.totalResults > _ctx.pageSize ? ((0, _vue.openBlock)(), (0, _vue.createBlock)(_component_Pagination, {
                                    key: 0,
                                    page: _ctx.currentPage,
                                    pageSize: _ctx.pageSize,
                                    totalResults: _ctx.totalResults,
                                    changePage: _ctx.changePage,
                                    class: "fr-mt-2w"
                                }, null, 8 /* PROPS */ , [
                                    "page",
                                    "pageSize",
                                    "totalResults",
                                    "changePage"
                                ])) : (0, _vue.createCommentVNode)("v-if", true)
                            ])) : ((0, _vue.openBlock)(), (0, _vue.createElementBlock)("div", _hoisted_26, [
                                (0, _vue.createVNode)(_component_Empty, {
                                    wide: "",
                                    queryString: _ctx.queryString,
                                    cta: _ctx.$t("Reset filters"),
                                    copy: _ctx.$t("No dataset matching your query"),
                                    copyAfter: _ctx.$t("You can try to reset the filters to expand your search."),
                                    onClick: ()=>_ctx.reloadForm()
                                }, null, 8 /* PROPS */ , [
                                    "queryString",
                                    "cta",
                                    "copy",
                                    "copyAfter",
                                    "onClick"
                                ])
                            ]))
                        ]),
                    _: 1 /* STABLE */ 
                })
            ], 16 /* FULL_PROPS */ )
        ])
    ], 32 /* HYDRATE_EVENTS */ );
}
if (module.hot) module.hot.accept(()=>{
    __VUE_HMR_RUNTIME__.rerender("59d15d-hmr", render);
});

},{"vue":"hRjhg","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"917yS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
let NOOP = ()=>{};
exports.default = (script)=>{};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5gn4S":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
let script;
let initialize = ()=>{
    script = require("script:./featured.vue");
    if (script.__esModule) script = script.default;
    script.render = require("template:./featured.vue").render;
    require("custom:./featured.vue").default(script);
    script.__scopeId = "data-v-ec744b";
    script.__file = "/home/babel/Documents/workspace/udata_workspace/udata-front/theme/js/components/utils/featured.vue";
};
initialize();
if (module.hot) {
    script.__hmrId = "ec744b-hmr";
    module.hot.accept(()=>{
        setTimeout(()=>{
            initialize();
            if (!__VUE_HMR_RUNTIME__.createRecord("ec744b-hmr", script)) __VUE_HMR_RUNTIME__.reload("ec744b-hmr", script);
        }, 0);
    });
}
exports.default = script;

},{"script:./featured.vue":"1Brda","template:./featured.vue":"9p90B","custom:./featured.vue":"duViY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1Brda":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _vue = require("vue");
var _vueI18N = require("vue-i18n");
var _useToast = require("../../composables/useToast");
var _api = require("../../plugins/api");
exports.default = (0, _vue.defineComponent)({
    name: "featured-button",
    props: {
        subjectId: {
            type: String,
            required: true
        },
        subjectType: {
            type: String,
            required: true
        },
        featured: {
            type: Boolean,
            required: true
        }
    },
    setup (props) {
        const { t  } = (0, _vueI18N.useI18n)();
        const toast = (0, _useToast.useToast)();
        const isFeatured = (0, _vue.ref)(props.featured);
        /** @type {Ref<HTMLElement | null>} */ const toggleInput = (0, _vue.ref)(null);
        const toggleFeatured = ()=>{
            const method = isFeatured.value ? "delete" : "post";
            const url = `${props.subjectType.toLowerCase()}s/${props.subjectId}/featured/`;
            (0, _api.api)[method](url).then((response)=>{
                isFeatured.value = !isFeatured.value;
            }).catch(()=>toast.error(t("An error occurred while featuring this subject.")));
        };
        (0, _vue.onMounted)(()=>toggleInput.value?.toggleAttribute("checked", isFeatured.value));
        return {
            isFeatured,
            t,
            toggleFeatured,
            toggleInput
        };
    }
});

},{"vue":"hRjhg","vue-i18n":"92JeB","../../composables/useToast":"g8lph","../../plugins/api":"8P8eo","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9p90B":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "render", ()=>render);
var _vue = require("vue");
const _hoisted_1 = {
    class: "fr-toggle fr-toggle--label-left"
};
const _hoisted_2 = [
    "checked"
];
const _hoisted_3 = [
    "data-fr-checked-label",
    "data-fr-unchecked-label"
];
function render(_ctx, _cache, $props, $setup, $data, $options) {
    return (0, _vue.openBlock)(), (0, _vue.createElementBlock)("div", _hoisted_1, [
        (0, _vue.createElementVNode)("input", {
            ref: "toggleInput",
            onClick: _cache[0] || (_cache[0] = (...args)=>_ctx.toggleFeatured && _ctx.toggleFeatured(...args)),
            type: "checkbox",
            class: "fr-toggle__input",
            id: "featured-toggle",
            checked: _ctx.isFeatured
        }, null, 8 /* PROPS */ , _hoisted_2),
        (0, _vue.createElementVNode)("label", {
            class: "fr-toggle__label",
            for: "featured-toggle",
            "data-fr-checked-label": _ctx.t("Unfeature this content"),
            "data-fr-unchecked-label": _ctx.t("Feature this content")
        }, null, 8 /* PROPS */ , _hoisted_3)
    ]);
}
if (module.hot) module.hot.accept(()=>{
    __VUE_HMR_RUNTIME__.rerender("ec744b-hmr", render);
});

},{"vue":"hRjhg","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"duViY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
let NOOP = ()=>{};
exports.default = (script)=>{};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hcdrh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
let script;
let initialize = ()=>{
    script = require("script:./follow-button.vue");
    if (script.__esModule) script = script.default;
    script.render = require("template:./follow-button.vue").render;
    require("custom:./follow-button.vue").default(script);
    script.__scopeId = "data-v-79294f";
    script.__file = "/home/babel/Documents/workspace/udata_workspace/udata-front/theme/js/components/utils/follow-button.vue";
};
initialize();
if (module.hot) {
    script.__hmrId = "79294f-hmr";
    module.hot.accept(()=>{
        setTimeout(()=>{
            initialize();
            if (!__VUE_HMR_RUNTIME__.createRecord("79294f-hmr", script)) __VUE_HMR_RUNTIME__.reload("79294f-hmr", script);
        }, 0);
    });
}
exports.default = script;

},{"script:./follow-button.vue":"aD6tf","template:./follow-button.vue":"20oes","custom:./follow-button.vue":"sBG0U","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aD6tf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _vue = require("vue");
var _config = require("../../config");
var _configDefault = parcelHelpers.interopDefault(_config);
var _starSvg = require("bundle-text:svg/actions/star.svg");
var _starSvgDefault = parcelHelpers.interopDefault(_starSvg);
exports.default = (0, _vue.defineComponent)({
    props: {
        followers: Number,
        url: String,
        following: Boolean
    },
    computed: {
        label () {
            let action = this._following ? this.$t("remove from favorites") : this.$t("add to favorites");
            return this._followers + " " + this.$t("favourites", this._followers) + ", " + action;
        }
    },
    created () {
        this.icon = (0, _starSvgDefault.default);
    },
    data () {
        return {
            loading: false,
            _followers: this.followers || 0,
            _following: this.following,
            animating: false,
            readOnlyEnabled: (0, _configDefault.default).read_only_enabled
        };
    },
    methods: {
        toggleFollow () {
            this.$auth();
            this.loading = true;
            let request;
            if (!this._following) request = this.$api.post(this.url);
            else request = this.$api.delete(this.url);
            request.then((resp)=>resp.data).then((data)=>{
                this._followers = data.followers;
                this._following = !this._following;
                // Trigger sparkles animation
                if (this._following) {
                    this.animating = true;
                    setTimeout(()=>this.animating = false, 1300);
                }
            }).finally(()=>this.loading = false);
        }
    }
});

},{"vue":"hRjhg","../../config":"G7A2j","bundle-text:svg/actions/star.svg":"ckF4w","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ckF4w":[function(require,module,exports) {
module.exports = "<svg aria-hidden=\"true\" width=\"16\" height=\"15\" viewBox=\"0 0 16 15\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M7.20703 1.24224L5.42968 4.87896L1.41015 5.45318C0.699214 5.56255 0.425776 6.43755 0.945308 6.95709L3.8164 9.77349L3.13281 13.7383C3.02343 14.4493 3.78906 14.9961 4.41796 14.668L8 12.7813L11.5547 14.668C12.1836 14.9961 12.9492 14.4493 12.8398 13.7383L12.1562 9.77349L15.0273 6.95709C15.5469 6.43755 15.2734 5.56255 14.5625 5.45318L10.5703 4.87896L8.76562 1.24224C8.46484 0.613336 7.53515 0.585992 7.20703 1.24224Z\" stroke=\"#f39200\"></path>\n</svg>\n";

},{}],"20oes":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "render", ()=>render);
var _vue = require("vue");
const _hoisted_1 = [
    "aria-label"
];
const _hoisted_2 = [
    "innerHTML"
];
const _hoisted_3 = {
    class: "fr-ml-1w"
};
function render(_ctx, _cache, $props, $setup, $data, $options) {
    return (0, _vue.withDirectives)(((0, _vue.openBlock)(), (0, _vue.createElementBlock)("button", {
        onClick: _cache[0] || (_cache[0] = (0, _vue.withModifiers)((...args)=>_ctx.toggleFollow && _ctx.toggleFollow(...args), [
            "prevent"
        ])),
        type: "button",
        class: "fr-btn fr-btn--secondary follow-button",
        "aria-label": _ctx.label
    }, [
        (0, _vue.createElementVNode)("span", {
            innerHTML: _ctx.icon,
            class: (0, _vue.normalizeClass)([
                "magic fr-grid-row",
                {
                    active: _ctx.animating
                }
            ]),
            style: (0, _vue.normalizeStyle)({
                color: _ctx._following ? "inherit" : "transparent"
            })
        }, null, 14 /* CLASS, STYLE, PROPS */ , _hoisted_2),
        (0, _vue.createElementVNode)("span", _hoisted_3, (0, _vue.toDisplayString)(_ctx._followers) + " " + (0, _vue.toDisplayString)(_ctx.$t("favourites", _ctx._followers)), 1 /* TEXT */ )
    ], 8 /* PROPS */ , _hoisted_1)), [
        [
            (0, _vue.vShow),
            !_ctx.readOnlyEnabled
        ]
    ]);
}
if (module.hot) module.hot.accept(()=>{
    __VUE_HMR_RUNTIME__.rerender("79294f-hmr", render);
});

},{"vue":"hRjhg","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"sBG0U":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
let NOOP = ()=>{};
exports.default = (script)=>{};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3gHKy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
let script;
let initialize = ()=>{
    script = require("script:./read-more.vue");
    if (script.__esModule) script = script.default;
    script.render = require("template:./read-more.vue").render;
    require("custom:./read-more.vue").default(script);
    script.__scopeId = "data-v-336432";
    script.__file = "/home/babel/Documents/workspace/udata_workspace/udata-front/theme/js/components/utils/read-more.vue";
};
initialize();
if (module.hot) {
    script.__hmrId = "336432-hmr";
    module.hot.accept(()=>{
        setTimeout(()=>{
            initialize();
            if (!__VUE_HMR_RUNTIME__.createRecord("336432-hmr", script)) __VUE_HMR_RUNTIME__.reload("336432-hmr", script);
        }, 0);
    });
}
exports.default = script;

},{"script:./read-more.vue":"6xuMs","template:./read-more.vue":"hKjQK","custom:./read-more.vue":"71jjO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6xuMs":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _vue = require("vue");
var _popmotion = require("popmotion");
function getHeight(elt) {
    const style = getComputedStyle(elt);
    return parseFloat(style.getPropertyValue("height")) + parseFloat(style.getPropertyValue("margin-top")) + parseFloat(style.getPropertyValue("margin-bottom"));
}
const DEFAULT_HEIGHT = 284;
exports.default = (0, _vue.defineComponent)({
    name: "read-more",
    data () {
        return {
            containerHeight: DEFAULT_HEIGHT,
            expanded: false,
            readMoreRequired: false
        };
    },
    mounted () {
        this.updateReadMoreHeight();
        setTimeout(()=>this.updateReadMoreHeight(), 500);
    },
    methods: {
        toggle () {
            this.expanded = !this.expanded;
            const divStyler = (0, _popmotion.styler)(this.$refs.container);
            if (this.expanded) (0, _popmotion.tween)({
                from: {
                    height: DEFAULT_HEIGHT
                },
                to: {
                    height: this.$refs.container.scrollHeight
                },
                duration: 300,
                ease: (0, _popmotion.easing).anticipate
            }).start({
                update: divStyler.set,
                complete: ()=>divStyler.set({
                        height: "auto"
                    })
            });
            else (0, _popmotion.tween)({
                from: {
                    height: this.$refs.container.scrollHeight
                },
                to: {
                    height: DEFAULT_HEIGHT
                },
                duration: 300,
                ease: (0, _popmotion.easing).anticipate
            }).start(divStyler.set);
        },
        updateReadMoreHeight () {
            let contentHeight = Array.from(this.$refs.container.children).map(getHeight).reduce((total, height)=>total + height, 0);
            this.containerHeight = DEFAULT_HEIGHT;
            this.readMoreRequired = contentHeight > this.containerHeight;
            if (!this.readMoreRequired) this.containerHeight = contentHeight;
        }
    }
});

},{"vue":"hRjhg","popmotion":"gniPK","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gniPK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "valueTypes", ()=>_styleValueTypes);
parcelHelpers.export(exports, "easing", ()=>_easing);
parcelHelpers.export(exports, "styler", ()=>(0, _stylefireDefault.default));
parcelHelpers.export(exports, "Action", ()=>Action);
parcelHelpers.export(exports, "ValueReaction", ()=>ValueReaction);
parcelHelpers.export(exports, "action", ()=>action);
parcelHelpers.export(exports, "calc", ()=>calc);
parcelHelpers.export(exports, "chain", ()=>chain);
parcelHelpers.export(exports, "composite", ()=>composite);
parcelHelpers.export(exports, "crossfade", ()=>crossfade);
parcelHelpers.export(exports, "css", ()=>css);
parcelHelpers.export(exports, "decay", ()=>vectorDecay);
parcelHelpers.export(exports, "delay", ()=>delay);
parcelHelpers.export(exports, "everyFrame", ()=>frame);
parcelHelpers.export(exports, "inertia", ()=>index);
parcelHelpers.export(exports, "keyframes", ()=>keyframes);
parcelHelpers.export(exports, "listen", ()=>listen);
parcelHelpers.export(exports, "merge", ()=>merge);
parcelHelpers.export(exports, "mouse", ()=>mouse);
parcelHelpers.export(exports, "multicast", ()=>multicast);
parcelHelpers.export(exports, "multitouch", ()=>multitouch);
parcelHelpers.export(exports, "parallel", ()=>parallel$1);
parcelHelpers.export(exports, "physics", ()=>vectorPhysics);
parcelHelpers.export(exports, "pointer", ()=>index$1);
parcelHelpers.export(exports, "schedule", ()=>schedule);
parcelHelpers.export(exports, "spring", ()=>vectorSpring);
parcelHelpers.export(exports, "stagger", ()=>stagger);
parcelHelpers.export(exports, "svg", ()=>svg);
parcelHelpers.export(exports, "timeline", ()=>timeline);
parcelHelpers.export(exports, "transform", ()=>transformers);
parcelHelpers.export(exports, "tween", ()=>tween);
parcelHelpers.export(exports, "value", ()=>value);
var _tslib = require("tslib");
var _popcorn = require("@popmotion/popcorn");
var _framesync = require("framesync");
var _framesyncDefault = parcelHelpers.interopDefault(_framesync);
var _styleValueTypes = require("style-value-types");
var _easing = require("@popmotion/easing");
var _stylefire = require("stylefire");
var _stylefireDefault = parcelHelpers.interopDefault(_stylefire);
var _heyListen = require("hey-listen");
var Chainable = /*#__PURE__*/ function() {
    function Chainable1(props) {
        if (props === void 0) props = {};
        this.props = props;
    }
    Chainable1.prototype.applyMiddleware = function(middleware) {
        return this.create((0, _tslib.__assign)((0, _tslib.__assign)({}, this.props), {
            middleware: this.props.middleware ? (0, _tslib.__spreadArrays)([
                middleware
            ], this.props.middleware) : [
                middleware
            ]
        }));
    };
    Chainable1.prototype.pipe = function() {
        var funcs = [];
        for(var _i = 0; _i < arguments.length; _i++)funcs[_i] = arguments[_i];
        var pipedUpdate = funcs.length === 1 ? funcs[0] : (0, _popcorn.pipe).apply(void 0, funcs);
        return this.applyMiddleware(function(update) {
            return function(v) {
                return update(pipedUpdate(v));
            };
        });
    };
    Chainable1.prototype.while = function(predicate) {
        return this.applyMiddleware(function(update, complete) {
            return function(v) {
                return predicate(v) ? update(v) : complete();
            };
        });
    };
    Chainable1.prototype.filter = function(predicate) {
        return this.applyMiddleware(function(update) {
            return function(v) {
                return predicate(v) && update(v);
            };
        });
    };
    return Chainable1;
}();
var Observer = /*#__PURE__*/ function() {
    function Observer1(_a, observer) {
        var _this = this;
        var middleware = _a.middleware, onComplete = _a.onComplete;
        this.isActive = true;
        this.update = function(v) {
            if (_this.observer.update) _this.updateObserver(v);
        };
        this.complete = function() {
            if (_this.observer.complete && _this.isActive) _this.observer.complete();
            if (_this.onComplete) _this.onComplete();
            _this.isActive = false;
        };
        this.error = function(err) {
            if (_this.observer.error && _this.isActive) _this.observer.error(err);
            _this.isActive = false;
        };
        this.observer = observer;
        this.updateObserver = function(v) {
            return observer.update(v);
        };
        this.onComplete = onComplete;
        if (observer.update && middleware && middleware.length) middleware.forEach(function(m) {
            return _this.updateObserver = m(_this.updateObserver, _this.complete);
        });
    }
    return Observer1;
}();
var createObserver = function(observerCandidate, _a, onComplete) {
    var middleware = _a.middleware;
    if (typeof observerCandidate === "function") return new Observer({
        middleware: middleware,
        onComplete: onComplete
    }, {
        update: observerCandidate
    });
    else return new Observer({
        middleware: middleware,
        onComplete: onComplete
    }, observerCandidate);
};
var Action = /*#__PURE__*/ function(_super) {
    (0, _tslib.__extends)(Action1, _super);
    function Action1() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Action1.prototype.create = function(props) {
        return new Action1(props);
    };
    Action1.prototype.start = function(observerCandidate) {
        if (observerCandidate === void 0) observerCandidate = {};
        var isComplete = false;
        var subscription = {
            stop: function() {
                return undefined;
            }
        };
        var _a = this.props, init = _a.init, observerProps = (0, _tslib.__rest)(_a, [
            "init"
        ]);
        var observer = createObserver(observerCandidate, observerProps, function() {
            isComplete = true;
            subscription.stop();
        });
        var api = init(observer);
        subscription = api ? (0, _tslib.__assign)((0, _tslib.__assign)({}, subscription), api) : subscription;
        if (observerCandidate.registerParent) observerCandidate.registerParent(subscription);
        if (isComplete) subscription.stop();
        return subscription;
    };
    return Action1;
}(Chainable);
var action = function(init) {
    return new Action({
        init: init
    });
};
var BaseMulticast = /*#__PURE__*/ function(_super) {
    (0, _tslib.__extends)(BaseMulticast1, _super);
    function BaseMulticast1() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.subscribers = [];
        return _this;
    }
    BaseMulticast1.prototype.complete = function() {
        this.subscribers.forEach(function(subscriber) {
            return subscriber.complete();
        });
    };
    BaseMulticast1.prototype.error = function(err) {
        this.subscribers.forEach(function(subscriber) {
            return subscriber.error(err);
        });
    };
    BaseMulticast1.prototype.update = function(v) {
        for(var i = 0; i < this.subscribers.length; i++)this.subscribers[i].update(v);
    };
    BaseMulticast1.prototype.subscribe = function(observerCandidate) {
        var _this = this;
        var observer = createObserver(observerCandidate, this.props);
        this.subscribers.push(observer);
        var subscription = {
            unsubscribe: function() {
                var index1 = _this.subscribers.indexOf(observer);
                if (index1 !== -1) _this.subscribers.splice(index1, 1);
            }
        };
        return subscription;
    };
    BaseMulticast1.prototype.stop = function() {
        if (this.parent) this.parent.stop();
    };
    BaseMulticast1.prototype.registerParent = function(subscription) {
        this.stop();
        this.parent = subscription;
    };
    return BaseMulticast1;
}(Chainable);
var Multicast = /*#__PURE__*/ function(_super) {
    (0, _tslib.__extends)(Multicast1, _super);
    function Multicast1() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Multicast1.prototype.create = function(props) {
        return new Multicast1(props);
    };
    return Multicast1;
}(BaseMulticast);
var multicast = function() {
    return new Multicast();
};
var stepProgress = function(steps1, progress) {
    var segment = 1 / (steps1 - 1);
    var subsegment = 1 / (2 * (steps1 - 1));
    var percentProgressOfTarget = Math.min(progress, 1);
    var subsegmentProgressOfTarget = percentProgressOfTarget / subsegment;
    var segmentProgressOfTarget = Math.floor((subsegmentProgressOfTarget + 1) / 2);
    return segmentProgressOfTarget * segment;
};
var calc = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    angle: (0, _popcorn.angle),
    degreesToRadians: (0, _popcorn.degreesToRadians),
    distance: (0, _popcorn.distance),
    isPoint3D: (0, _popcorn.isPoint3D),
    isPoint: (0, _popcorn.isPoint),
    dilate: (0, _popcorn.mix),
    getValueFromProgress: (0, _popcorn.mix),
    pointFromAngleAndDistance: (0, _popcorn.pointFromVector),
    getProgressFromValue: (0, _popcorn.progress),
    radiansToDegrees: (0, _popcorn.radiansToDegrees),
    smooth: (0, _popcorn.smoothFrame),
    speedPerFrame: (0, _popcorn.velocityPerFrame),
    speedPerSecond: (0, _popcorn.velocityPerSecond),
    stepProgress: stepProgress
});
var isValueList = function(v) {
    return Array.isArray(v);
};
var isSingleValue = function(v) {
    var typeOfV = typeof v;
    return typeOfV === "string" || typeOfV === "number";
};
var ValueReaction = /*#__PURE__*/ function(_super) {
    (0, _tslib.__extends)(ValueReaction1, _super);
    function ValueReaction1(props) {
        var _this = _super.call(this, props) || this;
        _this.scheduleVelocityCheck = function() {
            return (0, _framesyncDefault.default).postRender(_this.velocityCheck);
        };
        _this.velocityCheck = function(_a) {
            var timestamp = _a.timestamp;
            if (timestamp !== _this.lastUpdated) _this.prev = _this.current;
        };
        _this.prev = _this.current = props.value || 0;
        if (isSingleValue(_this.current)) {
            _this.updateCurrent = function(v) {
                return _this.current = v;
            };
            _this.getVelocityOfCurrent = function() {
                return _this.getSingleVelocity(_this.current, _this.prev);
            };
        } else if (isValueList(_this.current)) {
            _this.updateCurrent = function(v) {
                return _this.current = (0, _tslib.__spreadArrays)(v);
            };
            _this.getVelocityOfCurrent = function() {
                return _this.getListVelocity();
            };
        } else {
            _this.updateCurrent = function(v) {
                _this.current = {};
                for(var key in v)if (v.hasOwnProperty(key)) _this.current[key] = v[key];
            };
            _this.getVelocityOfCurrent = function() {
                return _this.getMapVelocity();
            };
        }
        if (props.initialSubscription) _this.subscribe(props.initialSubscription);
        return _this;
    }
    ValueReaction1.prototype.create = function(props) {
        return new ValueReaction1(props);
    };
    ValueReaction1.prototype.get = function() {
        return this.current;
    };
    ValueReaction1.prototype.getVelocity = function() {
        return this.getVelocityOfCurrent();
    };
    ValueReaction1.prototype.update = function(v) {
        _super.prototype.update.call(this, v);
        this.prev = this.current;
        this.updateCurrent(v);
        var _a = (0, _framesync.getFrameData)(), delta = _a.delta, timestamp = _a.timestamp;
        this.timeDelta = delta;
        this.lastUpdated = timestamp;
        (0, _framesyncDefault.default).postRender(this.scheduleVelocityCheck);
    };
    ValueReaction1.prototype.subscribe = function(observerCandidate) {
        var sub = _super.prototype.subscribe.call(this, observerCandidate);
        this.subscribers[this.subscribers.length - 1].update(this.current);
        return sub;
    };
    ValueReaction1.prototype.getSingleVelocity = function(current, prev) {
        return typeof current === "number" && typeof prev === "number" ? (0, _popcorn.velocityPerSecond)(current - prev, this.timeDelta) : (0, _popcorn.velocityPerSecond)(parseFloat(current) - parseFloat(prev), this.timeDelta) || 0;
    };
    ValueReaction1.prototype.getListVelocity = function() {
        var _this = this;
        return this.current.map(function(c, i) {
            return _this.getSingleVelocity(c, _this.prev[i]);
        });
    };
    ValueReaction1.prototype.getMapVelocity = function() {
        var velocity = {};
        for(var key in this.current)if (this.current.hasOwnProperty(key)) velocity[key] = this.getSingleVelocity(this.current[key], this.prev[key]);
        return velocity;
    };
    return ValueReaction1;
}(BaseMulticast);
var value = function(value1, initialSubscription) {
    return new ValueReaction({
        value: value1,
        initialSubscription: initialSubscription
    });
};
var multi = function(_a1) {
    var getCount = _a1.getCount, getFirst = _a1.getFirst, getOutput = _a1.getOutput, mapApi = _a1.mapApi, setProp = _a1.setProp, startActions = _a1.startActions;
    return function(actions) {
        return action(function(_a) {
            var update = _a.update, complete = _a.complete, error = _a.error;
            var numActions = getCount(actions);
            var output = getOutput();
            var updateOutput = function() {
                return update(output);
            };
            var numCompletedActions = 0;
            var subs = startActions(actions, function(a, name) {
                var hasCompleted = false;
                return a.start({
                    complete: function() {
                        if (!hasCompleted) {
                            hasCompleted = true;
                            numCompletedActions++;
                            if (numCompletedActions === numActions) (0, _framesyncDefault.default).update(complete);
                        }
                    },
                    error: error,
                    update: function(v) {
                        setProp(output, name, v);
                        (0, _framesyncDefault.default).update(updateOutput, false, true);
                    }
                });
            });
            return Object.keys(getFirst(subs)).reduce(function(api, methodName) {
                api[methodName] = mapApi(subs, methodName);
                return api;
            }, {});
        });
    };
};
var composite = /*#__PURE__*/ multi({
    getOutput: function() {
        return {};
    },
    getCount: function(subs) {
        return Object.keys(subs).length;
    },
    getFirst: function(subs) {
        return subs[Object.keys(subs)[0]];
    },
    mapApi: function(subs, methodName) {
        return function() {
            var args = [];
            for(var _i = 0; _i < arguments.length; _i++)args[_i] = arguments[_i];
            return Object.keys(subs).reduce(function(output, propKey) {
                var _a;
                if (subs[propKey][methodName]) args[0] && args[0][propKey] !== undefined ? output[propKey] = subs[propKey][methodName](args[0][propKey]) : output[propKey] = (_a = subs[propKey])[methodName].apply(_a, args);
                return output;
            }, {});
        };
    },
    setProp: function(output, name, v) {
        return output[name] = v;
    },
    startActions: function(actions, starter) {
        return Object.keys(actions).reduce(function(subs, key) {
            subs[key] = starter(actions[key], key);
            return subs;
        }, {});
    }
});
var parallel = /*#__PURE__*/ multi({
    getOutput: function() {
        return [];
    },
    getCount: function(subs) {
        return subs.length;
    },
    getFirst: function(subs) {
        return subs[0];
    },
    mapApi: function(subs, methodName) {
        return function() {
            var args = [];
            for(var _i = 0; _i < arguments.length; _i++)args[_i] = arguments[_i];
            return subs.map(function(sub, i) {
                if (sub[methodName]) return Array.isArray(args[0]) ? sub[methodName](args[0][i]) : sub[methodName].apply(sub, args);
            });
        };
    },
    setProp: function(output, name, v) {
        return output[name] = v;
    },
    startActions: function(actions, starter) {
        return actions.map(function(action1, i) {
            return starter(action1, i);
        });
    }
});
var parallel$1 = function() {
    var actions = [];
    for(var _i = 0; _i < arguments.length; _i++)actions[_i] = arguments[_i];
    return parallel(actions);
};
var createVectorTests = function(typeTests) {
    var testNames = Object.keys(typeTests);
    var isVectorProp = function(prop, key) {
        return prop !== undefined && !typeTests[key](prop);
    };
    var getVectorKeys = function(props) {
        return testNames.reduce(function(vectorKeys, key) {
            if (isVectorProp(props[key], key)) vectorKeys.push(key);
            return vectorKeys;
        }, []);
    };
    var testVectorProps = function(props) {
        return props && testNames.some(function(key) {
            return isVectorProp(props[key], key);
        });
    };
    return {
        getVectorKeys: getVectorKeys,
        testVectorProps: testVectorProps
    };
};
var unitTypes = [
    (0, _styleValueTypes.px),
    (0, _styleValueTypes.percent),
    (0, _styleValueTypes.degrees),
    (0, _styleValueTypes.vh),
    (0, _styleValueTypes.vw)
];
var findUnitType = function(prop) {
    return unitTypes.find(function(type) {
        return type.test(prop);
    });
};
var isUnitProp = function(prop) {
    return Boolean(findUnitType(prop));
};
var createAction = function(action2, props) {
    return action2(props);
};
var reduceArrayValue = function(i) {
    return function(props, key) {
        props[key] = props[key][i];
        return props;
    };
};
var createArrayAction = function(action3, props, vectorKeys) {
    var firstVectorKey = vectorKeys[0];
    var actionList = props[firstVectorKey].map(function(v, i) {
        var childActionProps = vectorKeys.reduce(reduceArrayValue(i), (0, _tslib.__assign)({}, props));
        return getActionCreator(v)(action3, childActionProps);
    });
    return parallel$1.apply(void 0, actionList);
};
var reduceObjectValue = function(key) {
    return function(props, propKey) {
        props[propKey] = props[propKey][key];
        return props;
    };
};
var createObjectAction = function(action4, props, vectorKeys) {
    var firstVectorKey = vectorKeys[0];
    var actionMap = Object.keys(props[firstVectorKey]).reduce(function(map, key) {
        var childActionProps = vectorKeys.reduce(reduceObjectValue(key), (0, _tslib.__assign)({}, props));
        map[key] = getActionCreator(props[firstVectorKey][key])(action4, childActionProps);
        return map;
    }, {});
    return composite(actionMap);
};
var createUnitAction = function(action5, _a) {
    var from = _a.from, to = _a.to, props = (0, _tslib.__rest)(_a, [
        "from",
        "to"
    ]);
    var unitType = findUnitType(from) || findUnitType(to);
    var transform = unitType.transform, parse = unitType.parse;
    return action5((0, _tslib.__assign)((0, _tslib.__assign)({}, props), {
        from: typeof from === "string" ? parse(from) : from,
        to: typeof to === "string" ? parse(to) : to
    })).pipe(transform);
};
var createMixerAction = function(mixer) {
    return function(action6, _a) {
        var from = _a.from, to = _a.to, props = (0, _tslib.__rest)(_a, [
            "from",
            "to"
        ]);
        return action6((0, _tslib.__assign)((0, _tslib.__assign)({}, props), {
            from: 0,
            to: 1
        })).pipe(mixer(from, to));
    };
};
var createColorAction = /*#__PURE__*/ createMixerAction((0, _popcorn.mixColor));
var createComplexAction = /*#__PURE__*/ createMixerAction((0, _popcorn.mixComplex));
var createVectorAction = function(action7, typeTests) {
    var _a = createVectorTests(typeTests), testVectorProps = _a.testVectorProps, getVectorKeys = _a.getVectorKeys;
    var vectorAction = function(props) {
        var isVector = testVectorProps(props);
        if (!isVector) return action7(props);
        var vectorKeys = getVectorKeys(props);
        var testKey = vectorKeys[0];
        var testProp = props[testKey];
        return getActionCreator(testProp)(action7, props, vectorKeys);
    };
    return vectorAction;
};
var getActionCreator = function(prop) {
    if (typeof prop === "number") return createAction;
    else if (Array.isArray(prop)) return createArrayAction;
    else if (isUnitProp(prop)) return createUnitAction;
    else if ((0, _styleValueTypes.color).test(prop)) return createColorAction;
    else if ((0, _styleValueTypes.complex).test(prop)) return createComplexAction;
    else if (typeof prop === "object") return createObjectAction;
    else return createAction;
};
var decay = function(props) {
    if (props === void 0) props = {};
    return action(function(_a2) {
        var complete = _a2.complete, update = _a2.update;
        var _b = props.velocity, velocity = _b === void 0 ? 0 : _b, _c = props.from, from = _c === void 0 ? 0 : _c, _d = props.power, power = _d === void 0 ? 0.8 : _d, _e = props.timeConstant, timeConstant = _e === void 0 ? 350 : _e, _f = props.restDelta, restDelta = _f === void 0 ? 0.5 : _f, modifyTarget = props.modifyTarget;
        var elapsed = 0;
        var amplitude = power * velocity;
        var idealTarget = from + amplitude;
        var target = typeof modifyTarget === "undefined" ? idealTarget : modifyTarget(idealTarget);
        if (target !== idealTarget) amplitude = target - from;
        var process = (0, _framesyncDefault.default).update(function(_a) {
            var frameDelta = _a.delta;
            elapsed += frameDelta;
            var delta = -amplitude * Math.exp(-elapsed / timeConstant);
            var isMoving = delta > restDelta || delta < -restDelta;
            var current = isMoving ? target + delta : target;
            update(current);
            if (!isMoving) {
                (0, _framesync.cancelSync).update(process);
                complete();
            }
        }, true);
        return {
            stop: function() {
                return (0, _framesync.cancelSync).update(process);
            }
        };
    });
};
var vectorDecay = /*#__PURE__*/ createVectorAction(decay, {
    from: (0, _styleValueTypes.number).test,
    modifyTarget: function(func) {
        return typeof func === "function";
    },
    velocity: (0, _styleValueTypes.number).test
});
var spring = function(props) {
    if (props === void 0) props = {};
    return action(function(_a3) {
        var update = _a3.update, complete = _a3.complete;
        var _b = props.velocity, velocity = _b === void 0 ? 0.0 : _b;
        var _c = props.from, from = _c === void 0 ? 0.0 : _c, _d = props.to, to = _d === void 0 ? 0.0 : _d, _e = props.stiffness, stiffness = _e === void 0 ? 100 : _e, _f = props.damping, damping = _f === void 0 ? 10 : _f, _g = props.mass, mass = _g === void 0 ? 1.0 : _g, _h = props.restSpeed, restSpeed = _h === void 0 ? 0.01 : _h, _j = props.restDelta, restDelta = _j === void 0 ? 0.01 : _j;
        var initialVelocity = velocity ? -(velocity / 1000) : 0.0;
        var t = 0;
        var delta = to - from;
        var position = from;
        var prevPosition = position;
        var process = (0, _framesyncDefault.default).update(function(_a) {
            var timeDelta = _a.delta;
            t += timeDelta;
            var dampingRatio = damping / (2 * Math.sqrt(stiffness * mass));
            var angularFreq = Math.sqrt(stiffness / mass) / 1000;
            prevPosition = position;
            if (dampingRatio < 1) {
                var envelope = Math.exp(-dampingRatio * angularFreq * t);
                var expoDecay = angularFreq * Math.sqrt(1.0 - dampingRatio * dampingRatio);
                position = to - envelope * ((initialVelocity + dampingRatio * angularFreq * delta) / expoDecay * Math.sin(expoDecay * t) + delta * Math.cos(expoDecay * t));
            } else {
                var envelope = Math.exp(-angularFreq * t);
                position = to - envelope * (delta + (initialVelocity + angularFreq * delta) * t);
            }
            velocity = (0, _popcorn.velocityPerSecond)(position - prevPosition, timeDelta);
            var isBelowVelocityThreshold = Math.abs(velocity) <= restSpeed;
            var isBelowDisplacementThreshold = Math.abs(to - position) <= restDelta;
            if (isBelowVelocityThreshold && isBelowDisplacementThreshold) {
                position = to;
                update(position);
                (0, _framesync.cancelSync).update(process);
                complete();
            } else update(position);
        }, true);
        return {
            stop: function() {
                return (0, _framesync.cancelSync).update(process);
            }
        };
    });
};
var vectorSpring = /*#__PURE__*/ createVectorAction(spring, {
    from: (0, _styleValueTypes.number).test,
    to: (0, _styleValueTypes.number).test,
    stiffness: (0, _styleValueTypes.number).test,
    damping: (0, _styleValueTypes.number).test,
    mass: (0, _styleValueTypes.number).test,
    velocity: (0, _styleValueTypes.number).test
});
var inertia = function(_a4) {
    var _b = _a4.from, from = _b === void 0 ? 0 : _b, _c = _a4.velocity, velocity = _c === void 0 ? 0 : _c, min = _a4.min, max = _a4.max, _d = _a4.power, power = _d === void 0 ? 0.8 : _d, _e = _a4.timeConstant, timeConstant = _e === void 0 ? 700 : _e, _f = _a4.bounceStiffness, bounceStiffness = _f === void 0 ? 500 : _f, _g = _a4.bounceDamping, bounceDamping = _g === void 0 ? 10 : _g, _h = _a4.restDelta, restDelta = _h === void 0 ? 1 : _h, modifyTarget = _a4.modifyTarget;
    return action(function(_a) {
        var update = _a.update, complete = _a.complete;
        var prev = from;
        var current = from;
        var activeAnimation;
        var isOutOfBounds = function(v) {
            return min !== undefined && v < min || max !== undefined && v > max;
        };
        var boundaryNearest = function(v) {
            return Math.abs(min - v) < Math.abs(max - v) ? min : max;
        };
        var startAnimation = function(animation, next) {
            activeAnimation && activeAnimation.stop();
            activeAnimation = animation.start({
                update: update,
                complete: function() {
                    if (next) {
                        next();
                        return;
                    }
                    complete();
                }
            });
        };
        var startSpring = function(props) {
            startAnimation(spring((0, _tslib.__assign)((0, _tslib.__assign)({}, props), {
                stiffness: bounceStiffness,
                damping: bounceDamping,
                restDelta: restDelta
            })));
        };
        if (isOutOfBounds(from)) startSpring({
            from: from,
            velocity: velocity,
            to: boundaryNearest(from)
        });
        else {
            var to = power * velocity + from;
            if (typeof modifyTarget !== "undefined") {
                to = modifyTarget(to);
                modifyTarget = void 0;
                velocity = (to - from) / power;
            }
            var animation1 = decay({
                from: from,
                velocity: velocity,
                timeConstant: timeConstant,
                power: power,
                restDelta: restDelta,
                modifyTarget: modifyTarget
            });
            var next1 = void 0;
            if (isOutOfBounds(to)) {
                var boundary_1 = boundaryNearest(to);
                var heading_1 = boundary_1 == min ? -1 : 1;
                animation1 = animation1.while(function(v) {
                    prev = current;
                    velocity = (0, _popcorn.velocityPerSecond)(v - prev, (0, _framesync.getFrameData)().delta);
                    current = v;
                    return boundary_1 - v * heading_1 > 0;
                });
                next1 = function() {
                    return startSpring({
                        from: current,
                        to: boundary_1,
                        velocity: velocity
                    });
                };
            }
            startAnimation(animation1, next1);
        }
        return {
            stop: function() {
                return activeAnimation && activeAnimation.stop();
            }
        };
    });
};
var index = /*#__PURE__*/ createVectorAction(inertia, {
    from: (0, _styleValueTypes.number).test,
    velocity: (0, _styleValueTypes.number).test,
    min: (0, _styleValueTypes.number).test,
    max: (0, _styleValueTypes.number).test,
    damping: (0, _styleValueTypes.number).test,
    stiffness: (0, _styleValueTypes.number).test,
    modifyTarget: function(func) {
        return typeof func === "function";
    }
});
var frame = function() {
    return action(function(_a5) {
        var update = _a5.update;
        var initialTime = 0;
        var process = (0, _framesyncDefault.default).update(function(_a) {
            var timestamp = _a.timestamp;
            if (!initialTime) initialTime = timestamp;
            update(timestamp - initialTime);
        }, true, true);
        return {
            stop: function() {
                return (0, _framesync.cancelSync).update(process);
            }
        };
    });
};
var scrubber = function(_a6) {
    var _b = _a6.from, from = _b === void 0 ? 0 : _b, _c = _a6.to, to = _c === void 0 ? 1 : _c, _d = _a6.ease, ease = _d === void 0 ? (0, _easing.linear) : _d, _e = _a6.reverseEase, reverseEase = _e === void 0 ? false : _e;
    if (reverseEase) ease = (0, _easing.createReversedEasing)(ease);
    return action(function(_a) {
        var update = _a.update;
        return {
            seek: function(progress) {
                return update(progress);
            }
        };
    }).pipe(ease, function(v) {
        return (0, _popcorn.mix)(from, to, v);
    });
};
var vectorScrubber = /*#__PURE__*/ createVectorAction(scrubber, {
    ease: function(func) {
        return typeof func === "function";
    },
    from: (0, _styleValueTypes.number).test,
    to: (0, _styleValueTypes.number).test
});
var clampProgress = /*#__PURE__*/ (0, _popcorn.clamp)(0, 1);
var tween = function(props) {
    if (props === void 0) props = {};
    return action(function(_a7) {
        var update = _a7.update, complete = _a7.complete;
        var _b = props.duration, duration = _b === void 0 ? 300 : _b, _c = props.ease, ease = _c === void 0 ? (0, _easing.easeOut) : _c, _d = props.flip, flip = _d === void 0 ? 0 : _d, _e = props.loop, loop = _e === void 0 ? 0 : _e, _f = props.yoyo, yoyo = _f === void 0 ? 0 : _f, _g = props.repeatDelay, repeatDelay = _g === void 0 ? 0 : _g;
        var _h = props.from, from = _h === void 0 ? 0 : _h, _j = props.to, to = _j === void 0 ? 1 : _j, _k = props.elapsed, elapsed = _k === void 0 ? 0 : _k, _l = props.flipCount, flipCount = _l === void 0 ? 0 : _l, _m = props.yoyoCount, yoyoCount = _m === void 0 ? 0 : _m, _o = props.loopCount, loopCount = _o === void 0 ? 0 : _o;
        var playhead = vectorScrubber({
            from: from,
            to: to,
            ease: ease
        }).start(update);
        var currentProgress = 0;
        var process;
        var isActive = false;
        var reverseAnimation = function(reverseEase) {
            var _a;
            if (reverseEase === void 0) reverseEase = false;
            _a = [
                to,
                from
            ], from = _a[0], to = _a[1];
            playhead = vectorScrubber({
                from: from,
                to: to,
                ease: ease,
                reverseEase: reverseEase
            }).start(update);
        };
        var isTweenComplete = function() {
            var isComplete = isActive && elapsed > duration + repeatDelay;
            if (!isComplete) return false;
            if (isComplete && !loop && !flip && !yoyo) return true;
            elapsed = duration - (elapsed - repeatDelay);
            if (loop && loopCount < loop) {
                loopCount++;
                return false;
            } else if (flip && flipCount < flip) {
                flipCount++;
                reverseAnimation();
                return false;
            } else if (yoyo && yoyoCount < yoyo) {
                yoyoCount++;
                reverseAnimation(yoyoCount % 2 !== 0);
                return false;
            }
            return true;
        };
        var updateTween = function() {
            currentProgress = clampProgress((0, _popcorn.progress)(0, duration, elapsed));
            playhead.seek(currentProgress);
        };
        var startTimer = function() {
            isActive = true;
            process = (0, _framesyncDefault.default).update(function(_a) {
                var delta = _a.delta;
                elapsed += delta;
                updateTween();
                if (isTweenComplete()) {
                    (0, _framesync.cancelSync).update(process);
                    complete && (0, _framesyncDefault.default).update(complete, false, true);
                }
            }, true);
        };
        var stopTimer = function() {
            isActive = false;
            if (process) (0, _framesync.cancelSync).update(process);
        };
        startTimer();
        return {
            isActive: function() {
                return isActive;
            },
            getElapsed: function() {
                return (0, _popcorn.clamp)(0, duration, elapsed);
            },
            getProgress: function() {
                return currentProgress;
            },
            stop: function() {
                stopTimer();
            },
            pause: function() {
                stopTimer();
                return this;
            },
            resume: function() {
                if (!isActive) startTimer();
                return this;
            },
            seek: function(newProgress) {
                elapsed = (0, _popcorn.mix)(0, duration, newProgress);
                (0, _framesyncDefault.default).update(updateTween, false, true);
                return this;
            },
            reverse: function() {
                reverseAnimation();
                return this;
            }
        };
    });
};
var clampProgress$1 = /*#__PURE__*/ (0, _popcorn.clamp)(0, 1);
var defaultEasings = function(values, easing) {
    return values.map(function() {
        return easing || (0, _easing.easeOut);
    }).splice(0, values.length - 1);
};
var defaultTimings = function(values) {
    var numValues = values.length;
    return values.map(function(value, i) {
        return i !== 0 ? i / (numValues - 1) : 0;
    });
};
var interpolateScrubbers = function(input, scrubbers, update) {
    var rangeLength = input.length;
    var finalInputIndex = rangeLength - 1;
    var finalScrubberIndex = finalInputIndex - 1;
    var subs = scrubbers.map(function(scrub) {
        return scrub.start(update);
    });
    return function(v) {
        if (v <= input[0]) subs[0].seek(0);
        if (v >= input[finalInputIndex]) subs[finalScrubberIndex].seek(1);
        var i = 1;
        for(; i < rangeLength; i++){
            if (input[i] > v || i === finalInputIndex) break;
        }
        var progressInRange = (0, _popcorn.progress)(input[i - 1], input[i], v);
        subs[i - 1].seek(clampProgress$1(progressInRange));
    };
};
var keyframes = function(_a) {
    var easings = _a.easings, _b = _a.ease, ease = _b === void 0 ? (0, _easing.linear) : _b, times = _a.times, values = _a.values, tweenProps = (0, _tslib.__rest)(_a, [
        "easings",
        "ease",
        "times",
        "values"
    ]);
    easings = Array.isArray(easings) ? easings : defaultEasings(values, easings);
    times = times || defaultTimings(values);
    var scrubbers = easings.map(function(easing, i) {
        return vectorScrubber({
            from: values[i],
            to: values[i + 1],
            ease: easing
        });
    });
    return tween((0, _tslib.__assign)((0, _tslib.__assign)({}, tweenProps), {
        ease: ease
    })).applyMiddleware(function(update) {
        return interpolateScrubbers(times, scrubbers, update);
    });
};
var physics = function(props) {
    if (props === void 0) props = {};
    return action(function(_a8) {
        var complete = _a8.complete, update = _a8.update;
        var _b = props.acceleration, acceleration = _b === void 0 ? 0 : _b, _c = props.friction, friction = _c === void 0 ? 0 : _c, _d = props.velocity, velocity = _d === void 0 ? 0 : _d, springStrength = props.springStrength, to = props.to;
        var _e = props.restSpeed, restSpeed = _e === void 0 ? 0.001 : _e, _f = props.from, from = _f === void 0 ? 0 : _f;
        var current = from;
        var process = (0, _framesyncDefault.default).update(function(_a) {
            var delta = _a.delta;
            var elapsed = Math.max(delta, 16);
            if (acceleration) velocity += (0, _popcorn.velocityPerFrame)(acceleration, elapsed);
            if (friction) velocity *= Math.pow(1 - friction, elapsed / 100);
            if (springStrength !== undefined && to !== undefined) {
                var distanceToTarget = to - current;
                velocity += distanceToTarget * (0, _popcorn.velocityPerFrame)(springStrength, elapsed);
            }
            current += (0, _popcorn.velocityPerFrame)(velocity, elapsed);
            update(current);
            var isComplete = restSpeed !== false && (!velocity || Math.abs(velocity) <= restSpeed);
            if (isComplete) {
                (0, _framesync.cancelSync).update(process);
                complete();
            }
        }, true);
        return {
            set: function(v) {
                current = v;
                return this;
            },
            setAcceleration: function(v) {
                acceleration = v;
                return this;
            },
            setFriction: function(v) {
                friction = v;
                return this;
            },
            setSpringStrength: function(v) {
                springStrength = v;
                return this;
            },
            setSpringTarget: function(v) {
                to = v;
                return this;
            },
            setVelocity: function(v) {
                velocity = v;
                return this;
            },
            stop: function() {
                return (0, _framesync.cancelSync).update(process);
            }
        };
    });
};
var vectorPhysics = /*#__PURE__*/ createVectorAction(physics, {
    acceleration: (0, _styleValueTypes.number).test,
    friction: (0, _styleValueTypes.number).test,
    velocity: (0, _styleValueTypes.number).test,
    from: (0, _styleValueTypes.number).test,
    to: (0, _styleValueTypes.number).test,
    springStrength: (0, _styleValueTypes.number).test
});
var DEFAULT_DURATION = 300;
var flattenTimings = function(instructions) {
    var flatInstructions = [];
    var lastArg = instructions[instructions.length - 1];
    var isStaggered = typeof lastArg === "number";
    var staggerDelay = isStaggered ? lastArg : 0;
    var segments = isStaggered ? instructions.slice(0, -1) : instructions;
    var numSegments = segments.length;
    var offset = 0;
    segments.forEach(function(item, i) {
        flatInstructions.push(item);
        if (i !== numSegments - 1) {
            var duration = item.duration || DEFAULT_DURATION;
            offset = staggerDelay;
            flatInstructions.push("" + (offset - duration));
        }
    });
    return flatInstructions;
};
var flattenArrayInstructions = function(instructions, instruction) {
    Array.isArray(instruction) ? instructions.push.apply(instructions, flattenTimings(instruction)) : instructions.push(instruction);
    return instructions;
};
var convertDefToProps = function(props, def, i) {
    var duration = props.duration, easings = props.easings, times = props.times, values = props.values;
    var numValues = values.length;
    var prevTimeTo = times[numValues - 1];
    var timeFrom = def.at === 0 ? 0 : def.at / duration;
    var timeTo = (def.at + def.duration) / duration;
    if (i === 0) {
        values.push(def.from);
        times.push(timeFrom);
    } else {
        if (prevTimeTo !== timeFrom) {
            if (def.from !== undefined) {
                values.push(values[numValues - 1]);
                times.push(timeFrom);
                easings.push((0, _easing.linear));
            }
            var from = def.from !== undefined ? def.from : values[numValues - 1];
            values.push(from);
            times.push(timeFrom);
            easings.push((0, _easing.linear));
        } else if (def.from !== undefined) {
            values.push(def.from);
            times.push(timeFrom);
            easings.push((0, _easing.linear));
        }
    }
    values.push(def.to);
    times.push(timeTo);
    easings.push(def.ease || (0, _easing.easeInOut));
    return props;
};
var timeline = function(instructions, _a) {
    var _b = _a === void 0 ? {} : _a, duration = _b.duration, elapsed = _b.elapsed, ease = _b.ease, loop = _b.loop, flip = _b.flip, yoyo = _b.yoyo;
    var playhead = 0;
    var calculatedDuration = 0;
    var flatInstructions = instructions.reduce(flattenArrayInstructions, []);
    var animationDefs = [];
    flatInstructions.forEach(function(instruction) {
        if (typeof instruction === "string") playhead += parseFloat(instruction);
        else if (typeof instruction === "number") playhead = instruction;
        else {
            var def = (0, _tslib.__assign)((0, _tslib.__assign)({}, instruction), {
                at: playhead
            });
            def.duration = def.duration === undefined ? DEFAULT_DURATION : def.duration;
            animationDefs.push(def);
            playhead += def.duration;
            calculatedDuration = Math.max(calculatedDuration, def.at + def.duration);
        }
    });
    var tracks = {};
    var numDefs = animationDefs.length;
    for(var i = 0; i < numDefs; i++){
        var def1 = animationDefs[i];
        var track = def1.track;
        if (track === undefined) throw new Error("No track defined");
        if (!tracks.hasOwnProperty(track)) tracks[track] = [];
        tracks[track].push(def1);
    }
    var trackKeyframes = {};
    for(var key in tracks)if (tracks.hasOwnProperty(key)) {
        var keyframeProps = tracks[key].reduce(convertDefToProps, {
            duration: calculatedDuration,
            easings: [],
            times: [],
            values: []
        });
        trackKeyframes[key] = keyframes((0, _tslib.__assign)((0, _tslib.__assign)({}, keyframeProps), {
            duration: duration || calculatedDuration,
            ease: ease,
            elapsed: elapsed,
            loop: loop,
            yoyo: yoyo,
            flip: flip
        }));
    }
    return composite(trackKeyframes);
};
var listen = function(element, events, options) {
    return action(function(_a) {
        var update = _a.update;
        var eventNames = events.split(" ").map(function(eventName) {
            element.addEventListener(eventName, update, options);
            return eventName;
        });
        return {
            stop: function() {
                return eventNames.forEach(function(eventName) {
                    return element.removeEventListener(eventName, update, options);
                });
            }
        };
    });
};
var defaultPointerPos = function() {
    return {
        clientX: 0,
        clientY: 0,
        pageX: 0,
        pageY: 0,
        x: 0,
        y: 0
    };
};
var eventToPoint = function(e, point1) {
    if (point1 === void 0) point1 = defaultPointerPos();
    point1.clientX = point1.x = e.clientX;
    point1.clientY = point1.y = e.clientY;
    point1.pageX = e.pageX;
    point1.pageY = e.pageY;
    return point1;
};
var points = [
    /*#__PURE__*/ defaultPointerPos()
];
var isTouchDevice = false;
if (typeof document !== "undefined") {
    var updatePointsLocation = function(_a) {
        var touches = _a.touches;
        isTouchDevice = true;
        var numTouches = touches.length;
        points.length = 0;
        for(var i = 0; i < numTouches; i++){
            var thisTouch = touches[i];
            points.push(eventToPoint(thisTouch));
        }
    };
    listen(document, "touchstart touchmove", {
        passive: true,
        capture: true
    }).start(updatePointsLocation);
}
var multitouch = function(_a9) {
    var _b = _a9 === void 0 ? {} : _a9, _c = _b.preventDefault, preventDefault = _c === void 0 ? true : _c, _d = _b.scale, scale = _d === void 0 ? 1.0 : _d, _e = _b.rotate, rotate = _e === void 0 ? 0.0 : _e;
    return action(function(_a) {
        var update = _a.update;
        var output = {
            touches: points,
            scale: scale,
            rotate: rotate
        };
        var initialDistance = 0.0;
        var initialRotation = 0.0;
        var isGesture = points.length > 1;
        if (isGesture) {
            var firstTouch = points[0], secondTouch = points[1];
            initialDistance = (0, _popcorn.distance)(firstTouch, secondTouch);
            initialRotation = (0, _popcorn.angle)(firstTouch, secondTouch);
        }
        var updatePoint = function() {
            if (isGesture) {
                var firstTouch = points[0], secondTouch = points[1];
                var newDistance = (0, _popcorn.distance)(firstTouch, secondTouch);
                var newRotation = (0, _popcorn.angle)(firstTouch, secondTouch);
                output.scale = scale * (newDistance / initialDistance);
                output.rotate = rotate + (newRotation - initialRotation);
            }
            update(output);
        };
        var onMove = function(e) {
            if (preventDefault || e.touches.length > 1) e.preventDefault();
            (0, _framesyncDefault.default).update(updatePoint);
        };
        var updateOnMove = listen(document, "touchmove", {
            passive: !preventDefault
        }).start(onMove);
        if (isTouchDevice) (0, _framesyncDefault.default).update(updatePoint);
        return {
            stop: function() {
                (0, _framesync.cancelSync).update(updatePoint);
                updateOnMove.stop();
            }
        };
    });
};
var getIsTouchDevice = function() {
    return isTouchDevice;
};
var point = /*#__PURE__*/ defaultPointerPos();
var isMouseDevice = false;
if (typeof document !== "undefined") {
    var updatePointLocation = function(e) {
        isMouseDevice = true;
        eventToPoint(e, point);
    };
    listen(document, "mousedown mousemove", true).start(updatePointLocation);
}
var mouse = function(_a10) {
    var _b = (_a10 === void 0 ? {} : _a10).preventDefault, preventDefault = _b === void 0 ? true : _b;
    return action(function(_a) {
        var update = _a.update;
        var updatePoint = function() {
            return update(point);
        };
        var onMove = function(e) {
            if (preventDefault) e.preventDefault();
            (0, _framesyncDefault.default).update(updatePoint);
        };
        var updateOnMove = listen(document, "mousemove").start(onMove);
        if (isMouseDevice) (0, _framesyncDefault.default).update(updatePoint);
        return {
            stop: function() {
                (0, _framesync.cancelSync).update(updatePoint);
                updateOnMove.stop();
            }
        };
    });
};
var getFirstTouch = function(_a) {
    var firstTouch = _a[0];
    return firstTouch;
};
var pointer = function(props) {
    if (props === void 0) props = {};
    return getIsTouchDevice() ? multitouch(props).pipe(function(_a) {
        var touches = _a.touches;
        return touches;
    }, getFirstTouch) : mouse(props);
};
var index$1 = function(_a) {
    if (_a === void 0) _a = {};
    var x = _a.x, y = _a.y, props = (0, _tslib.__rest)(_a, [
        "x",
        "y"
    ]);
    if (x !== undefined || y !== undefined) {
        var applyXOffset_1 = (0, _popcorn.applyOffset)(x || 0);
        var applyYOffset_1 = (0, _popcorn.applyOffset)(y || 0);
        var delta_1 = {
            x: 0,
            y: 0
        };
        return pointer(props).pipe(function(point2) {
            delta_1.x = applyXOffset_1(point2.x);
            delta_1.y = applyYOffset_1(point2.y);
            return delta_1;
        });
    } else return pointer(props);
};
var chain = function() {
    var actions = [];
    for(var _i = 0; _i < arguments.length; _i++)actions[_i] = arguments[_i];
    return action(function(_a) {
        var update = _a.update, complete = _a.complete;
        var i = 0;
        var current;
        var playCurrent = function() {
            current = actions[i].start({
                complete: function() {
                    i++;
                    i >= actions.length ? complete() : playCurrent();
                },
                update: update
            });
        };
        playCurrent();
        return {
            stop: function() {
                return current && current.stop();
            }
        };
    });
};
var crossfade = function(a, b) {
    return action(function(observer) {
        var balance = 0;
        var fadable = parallel$1(a, b).start((0, _tslib.__assign)((0, _tslib.__assign)({}, observer), {
            update: function(_a) {
                var va = _a[0], vb = _a[1];
                observer.update((0, _popcorn.mix)(va, vb, balance));
            }
        }));
        return {
            setBalance: function(v) {
                return balance = v;
            },
            stop: function() {
                return fadable.stop();
            }
        };
    });
};
var delay = function(timeToDelay) {
    return action(function(_a) {
        var complete = _a.complete;
        var timeout = setTimeout(complete, timeToDelay);
        return {
            stop: function() {
                return clearTimeout(timeout);
            }
        };
    });
};
var merge = function() {
    var actions = [];
    for(var _i = 0; _i < arguments.length; _i++)actions[_i] = arguments[_i];
    return action(function(observer) {
        var subs = actions.map(function(thisAction) {
            return thisAction.start(observer);
        });
        return {
            stop: function() {
                return subs.forEach(function(sub) {
                    return sub.stop();
                });
            }
        };
    });
};
var schedule = function(scheduler, schedulee) {
    return action(function(_a) {
        var update = _a.update, complete = _a.complete;
        var latest;
        var schedulerSub = scheduler.start({
            update: function() {
                return latest !== undefined && update(latest);
            },
            complete: complete
        });
        var scheduleeSub = schedulee.start({
            update: function(v) {
                return latest = v;
            },
            complete: complete
        });
        return {
            stop: function() {
                schedulerSub.stop();
                scheduleeSub.stop();
            }
        };
    });
};
var stagger = function(actions, interval) {
    var intervalIsNumber = typeof interval === "number";
    var actionsWithDelay = actions.map(function(a, i) {
        var timeToDelay = intervalIsNumber ? interval * i : interval(i);
        return chain(delay(timeToDelay), a);
    });
    return parallel$1.apply(void 0, actionsWithDelay);
};
var appendUnit = function(unit) {
    return function(v) {
        return "" + v + unit;
    };
};
var steps = function(st, min, max) {
    if (min === void 0) min = 0;
    if (max === void 0) max = 1;
    return function(v) {
        var current = (0, _popcorn.progress)(min, max, v);
        return (0, _popcorn.mix)(min, max, stepProgress(st, current));
    };
};
var transformMap = function(childTransformers) {
    return function(v) {
        var output = (0, _tslib.__assign)({}, v);
        for(var key in childTransformers)if (childTransformers.hasOwnProperty(key)) {
            var childTransformer = childTransformers[key];
            output[key] = childTransformer(v[key]);
        }
        return output;
    };
};
var transformers = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    applyOffset: (0, _popcorn.applyOffset),
    clamp: (0, _popcorn.clamp),
    conditional: (0, _popcorn.conditional),
    interpolate: (0, _popcorn.interpolate),
    blendArray: (0, _popcorn.mixArray),
    blendColor: (0, _popcorn.mixColor),
    pipe: (0, _popcorn.pipe),
    smooth: (0, _popcorn.smooth),
    snap: (0, _popcorn.snap),
    generateStaticSpring: (0, _popcorn.springForce),
    nonlinearSpring: (0, _popcorn.springForceExpo),
    linearSpring: (0, _popcorn.springForceLinear),
    wrap: (0, _popcorn.wrap),
    appendUnit: appendUnit,
    steps: steps,
    transformMap: transformMap
});
var css = function(element, props) {
    (0, _heyListen.warning)(false, "css() is deprecated, use styler instead");
    return (0, _stylefireDefault.default)(element, props);
};
var svg = function(element, props) {
    (0, _heyListen.warning)(false, "svg() is deprecated, use styler instead");
    return (0, _stylefireDefault.default)(element, props);
};

},{"tslib":"lRdW5","@popmotion/popcorn":"46Qpe","framesync":"fmg1O","style-value-types":"f8zMr","@popmotion/easing":"jPIK5","stylefire":"fNDvw","hey-listen":"8yK8Z","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lRdW5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "__extends", ()=>__extends);
parcelHelpers.export(exports, "__assign", ()=>__assign);
parcelHelpers.export(exports, "__rest", ()=>__rest);
parcelHelpers.export(exports, "__decorate", ()=>__decorate);
parcelHelpers.export(exports, "__param", ()=>__param);
parcelHelpers.export(exports, "__metadata", ()=>__metadata);
parcelHelpers.export(exports, "__awaiter", ()=>__awaiter);
parcelHelpers.export(exports, "__generator", ()=>__generator);
parcelHelpers.export(exports, "__createBinding", ()=>__createBinding);
parcelHelpers.export(exports, "__exportStar", ()=>__exportStar);
parcelHelpers.export(exports, "__values", ()=>__values);
parcelHelpers.export(exports, "__read", ()=>__read);
parcelHelpers.export(exports, "__spread", ()=>__spread);
parcelHelpers.export(exports, "__spreadArrays", ()=>__spreadArrays);
parcelHelpers.export(exports, "__await", ()=>__await);
parcelHelpers.export(exports, "__asyncGenerator", ()=>__asyncGenerator);
parcelHelpers.export(exports, "__asyncDelegator", ()=>__asyncDelegator);
parcelHelpers.export(exports, "__asyncValues", ()=>__asyncValues);
parcelHelpers.export(exports, "__makeTemplateObject", ()=>__makeTemplateObject);
parcelHelpers.export(exports, "__importStar", ()=>__importStar);
parcelHelpers.export(exports, "__importDefault", ()=>__importDefault);
parcelHelpers.export(exports, "__classPrivateFieldGet", ()=>__classPrivateFieldGet);
parcelHelpers.export(exports, "__classPrivateFieldSet", ()=>__classPrivateFieldSet);
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */ /* global Reflect, Promise */ var extendStatics = function(d1, b1) {
    extendStatics = Object.setPrototypeOf || ({
        __proto__: []
    }) instanceof Array && function(d, b) {
        d.__proto__ = b;
    } || function(d, b) {
        for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d1, b1);
};
function __extends(d, b) {
    extendStatics(d, b);
    function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
function __rest(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
}
function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
}
function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}
function __generator(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
function __createBinding(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}
function __exportStar(m, exports) {
    for(var p in m)if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
}
function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
}
function __spread() {
    for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat(__read(arguments[i]));
    return ar;
}
function __spreadArrays() {
    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;
    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];
    return r;
}
function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i;
    function verb(n) {
        if (g[n]) i[n] = function(v) {
            return new Promise(function(a, b) {
                q.push([
                    n,
                    v,
                    a,
                    b
                ]) > 1 || resume(n, v);
            });
        };
    }
    function resume(n, v) {
        try {
            step(g[n](v));
        } catch (e) {
            settle(q[0][3], e);
        }
    }
    function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    function fulfill(value) {
        resume("next", value);
    }
    function reject(value) {
        resume("throw", value);
    }
    function settle(f, v) {
        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
    }
}
function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function(e) {
        throw e;
    }), verb("return"), i[Symbol.iterator] = function() {
        return this;
    }, i;
    function verb(n, f) {
        i[n] = o[n] ? function(v) {
            return (p = !p) ? {
                value: __await(o[n](v)),
                done: n === "return"
            } : f ? f(v) : v;
        } : f;
    }
}
function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i);
    function verb(n) {
        i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
                v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
        };
    }
    function settle(resolve, reject, d, v1) {
        Promise.resolve(v1).then(function(v) {
            resolve({
                value: v,
                done: d
            });
        }, reject);
    }
}
function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) Object.defineProperty(cooked, "raw", {
        value: raw
    });
    else cooked.raw = raw;
    return cooked;
}
function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    }
    result.default = mod;
    return result;
}
function __importDefault(mod) {
    return mod && mod.__esModule ? mod : {
        default: mod
    };
}
function __classPrivateFieldGet(receiver, privateMap) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to get private field on non-instance");
    return privateMap.get(receiver);
}
function __classPrivateFieldSet(receiver, privateMap, value) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to set private field on non-instance");
    privateMap.set(receiver, value);
    return value;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"46Qpe":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createAnticipateEasing", ()=>(0, _easing.createAnticipateEasing));
parcelHelpers.export(exports, "createBackIn", ()=>(0, _easing.createBackIn));
parcelHelpers.export(exports, "createExpoIn", ()=>(0, _easing.createExpoIn));
parcelHelpers.export(exports, "cubicBezier", ()=>(0, _easing.cubicBezier));
parcelHelpers.export(exports, "linear", ()=>(0, _easing.linear));
parcelHelpers.export(exports, "easeIn", ()=>(0, _easing.easeIn));
parcelHelpers.export(exports, "easeOut", ()=>(0, _easing.easeOut));
parcelHelpers.export(exports, "easeInOut", ()=>(0, _easing.easeInOut));
parcelHelpers.export(exports, "circIn", ()=>(0, _easing.circIn));
parcelHelpers.export(exports, "circOut", ()=>(0, _easing.circOut));
parcelHelpers.export(exports, "circInOut", ()=>(0, _easing.circInOut));
parcelHelpers.export(exports, "backIn", ()=>(0, _easing.backIn));
parcelHelpers.export(exports, "backOut", ()=>(0, _easing.backOut));
parcelHelpers.export(exports, "backInOut", ()=>(0, _easing.backInOut));
parcelHelpers.export(exports, "anticipate", ()=>(0, _easing.anticipate));
parcelHelpers.export(exports, "reversed", ()=>(0, _easing.reversed));
parcelHelpers.export(exports, "mirrored", ()=>(0, _easing.mirrored));
parcelHelpers.export(exports, "angle", ()=>angle);
parcelHelpers.export(exports, "applyOffset", ()=>applyOffset);
parcelHelpers.export(exports, "clamp", ()=>clamp$1);
parcelHelpers.export(exports, "conditional", ()=>conditional);
parcelHelpers.export(exports, "degreesToRadians", ()=>degreesToRadians);
parcelHelpers.export(exports, "distance", ()=>distance);
parcelHelpers.export(exports, "interpolate", ()=>interpolate);
parcelHelpers.export(exports, "isPoint", ()=>isPoint);
parcelHelpers.export(exports, "isPoint3D", ()=>isPoint3D);
parcelHelpers.export(exports, "mix", ()=>mix);
parcelHelpers.export(exports, "mixArray", ()=>mixArray);
parcelHelpers.export(exports, "mixColor", ()=>mixColor);
parcelHelpers.export(exports, "mixComplex", ()=>mixComplex);
parcelHelpers.export(exports, "mixObject", ()=>mixObject);
parcelHelpers.export(exports, "pipe", ()=>pipe);
parcelHelpers.export(exports, "pointFromVector", ()=>pointFromVector);
parcelHelpers.export(exports, "progress", ()=>progress);
parcelHelpers.export(exports, "radiansToDegrees", ()=>radiansToDegrees);
parcelHelpers.export(exports, "smooth", ()=>smooth);
parcelHelpers.export(exports, "smoothFrame", ()=>smoothFrame);
parcelHelpers.export(exports, "snap", ()=>snap);
parcelHelpers.export(exports, "springForce", ()=>springForce);
parcelHelpers.export(exports, "springForceExpo", ()=>springForceExpo);
parcelHelpers.export(exports, "springForceLinear", ()=>springForceLinear);
parcelHelpers.export(exports, "steps", ()=>steps);
parcelHelpers.export(exports, "toDecimal", ()=>toDecimal);
parcelHelpers.export(exports, "velocityPerFrame", ()=>velocityPerFrame);
parcelHelpers.export(exports, "velocityPerSecond", ()=>velocityPerSecond);
parcelHelpers.export(exports, "wrap", ()=>wrap$1);
var _styleValueTypes = require("style-value-types");
var _heyListen = require("hey-listen");
var _framesync = require("framesync");
var _easing = require("@popmotion/easing");
var zeroPoint = {
    x: 0,
    y: 0,
    z: 0
};
var isNum = function(v) {
    return typeof v === "number";
};
var radiansToDegrees = function(radians) {
    return radians * 180 / Math.PI;
};
var angle = function(a, b) {
    if (b === void 0) b = zeroPoint;
    return radiansToDegrees(Math.atan2(b.y - a.y, b.x - a.x));
};
var applyOffset = function(from, to) {
    var hasReceivedFrom = true;
    if (to === undefined) {
        to = from;
        hasReceivedFrom = false;
    }
    return function(v) {
        if (hasReceivedFrom) return v - from + to;
        else {
            from = v;
            hasReceivedFrom = true;
            return to;
        }
    };
};
var curryRange = function(func) {
    return function(min, max, v) {
        return v !== undefined ? func(min, max, v) : function(cv) {
            return func(min, max, cv);
        };
    };
};
var clamp = function(min, max, v) {
    return Math.min(Math.max(v, min), max);
};
var clamp$1 = curryRange(clamp);
var conditional = function(check, apply) {
    return function(v) {
        return check(v) ? apply(v) : v;
    };
};
var degreesToRadians = function(degrees) {
    return degrees * Math.PI / 180;
};
var isPoint = function(point) {
    return point.hasOwnProperty("x") && point.hasOwnProperty("y");
};
var isPoint3D = function(point) {
    return isPoint(point) && point.hasOwnProperty("z");
};
var distance1D = function(a, b) {
    return Math.abs(a - b);
};
var distance = function(a, b) {
    if (b === void 0) b = zeroPoint;
    if (isNum(a) && isNum(b)) return distance1D(a, b);
    else if (isPoint(a) && isPoint(b)) {
        var xDelta = distance1D(a.x, b.x);
        var yDelta = distance1D(a.y, b.y);
        var zDelta = isPoint3D(a) && isPoint3D(b) ? distance1D(a.z, b.z) : 0;
        return Math.sqrt(Math.pow(xDelta, 2) + Math.pow(yDelta, 2) + Math.pow(zDelta, 2));
    }
    return 0;
};
var progress = function(from, to, value) {
    var toFromDifference = to - from;
    return toFromDifference === 0 ? 1 : (value - from) / toFromDifference;
};
var mix = function(from, to, progress1) {
    return -progress1 * from + progress1 * to + from;
};
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */ var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var mixLinearColor = function(from, to, v) {
    var fromExpo = from * from;
    var toExpo = to * to;
    return Math.sqrt(Math.max(0, v * (toExpo - fromExpo) + fromExpo));
};
var colorTypes = [
    (0, _styleValueTypes.hex),
    (0, _styleValueTypes.rgba),
    (0, _styleValueTypes.hsla)
];
var getColorType = function(v) {
    return colorTypes.find(function(type) {
        return type.test(v);
    });
};
var notAnimatable = function(color$$1) {
    return "'" + color$$1 + "' is not an animatable color. Use the equivalent color code instead.";
};
var mixColor = function(from, to) {
    var fromColorType = getColorType(from);
    var toColorType = getColorType(to);
    (0, _heyListen.invariant)(!!fromColorType, notAnimatable(from));
    (0, _heyListen.invariant)(!!toColorType, notAnimatable(to));
    (0, _heyListen.invariant)(fromColorType.transform === toColorType.transform, "Both colors must be hex/RGBA, OR both must be HSLA.");
    var fromColor = fromColorType.parse(from);
    var toColor = toColorType.parse(to);
    var blended = __assign({}, fromColor);
    var mixFunc = fromColorType === (0, _styleValueTypes.hsla) ? mix : mixLinearColor;
    return function(v) {
        for(var key in blended)if (key !== "alpha") blended[key] = mixFunc(fromColor[key], toColor[key], v);
        blended.alpha = mix(fromColor.alpha, toColor.alpha, v);
        return fromColorType.transform(blended);
    };
};
var combineFunctions = function(a, b) {
    return function(v) {
        return b(a(v));
    };
};
var pipe = function() {
    var transformers = [];
    for(var _i = 0; _i < arguments.length; _i++)transformers[_i] = arguments[_i];
    return transformers.reduce(combineFunctions);
};
function getMixer(origin, target) {
    if (isNum(origin)) return function(v) {
        return mix(origin, target, v);
    };
    else if ((0, _styleValueTypes.color).test(origin)) return mixColor(origin, target);
    else return mixComplex(origin, target);
}
var mixArray = function(from, to) {
    var output = from.slice();
    var numValues = output.length;
    var blendValue = from.map(function(fromThis, i) {
        return getMixer(fromThis, to[i]);
    });
    return function(v) {
        for(var i = 0; i < numValues; i++)output[i] = blendValue[i](v);
        return output;
    };
};
var mixObject = function(origin, target) {
    var output = __assign({}, origin, target);
    var blendValue = {};
    for(var key1 in output)if (origin[key1] !== undefined && target[key1] !== undefined) blendValue[key1] = getMixer(origin[key1], target[key1]);
    return function(v) {
        for(var key in blendValue)output[key] = blendValue[key](v);
        return output;
    };
};
function analyse(value) {
    var parsed = (0, _styleValueTypes.complex).parse(value);
    var numValues = parsed.length;
    var numNumbers = 0;
    var numRGB = 0;
    var numHSL = 0;
    for(var i = 0; i < numValues; i++){
        if (numNumbers || typeof parsed[i] === "number") numNumbers++;
        else if (parsed[i].hue !== undefined) numHSL++;
        else numRGB++;
    }
    return {
        parsed: parsed,
        numNumbers: numNumbers,
        numRGB: numRGB,
        numHSL: numHSL
    };
}
var mixComplex = function(origin, target) {
    var template = (0, _styleValueTypes.complex).createTransformer(target);
    var originStats = analyse(origin);
    var targetStats = analyse(target);
    (0, _heyListen.invariant)(originStats.numHSL === targetStats.numHSL && originStats.numRGB === targetStats.numRGB && originStats.numNumbers >= targetStats.numNumbers, "Complex values '" + origin + "' and '" + target + "' too different to mix. Ensure all colors are of the same type.");
    return pipe(mixArray(originStats.parsed, targetStats.parsed), template);
};
var mixNumber = function(from, to) {
    return function(p) {
        return mix(from, to, p);
    };
};
function detectMixerFactory(v) {
    if (typeof v === "number") return mixNumber;
    else if (typeof v === "string") {
        if ((0, _styleValueTypes.color).test(v)) return mixColor;
        else return mixComplex;
    } else if (Array.isArray(v)) return mixArray;
    else if (typeof v === "object") return mixObject;
}
function createMixers(output, ease, customMixer) {
    var mixers = [];
    var mixerFactory = customMixer || detectMixerFactory(output[0]);
    var numMixers = output.length - 1;
    for(var i = 0; i < numMixers; i++){
        var mixer = mixerFactory(output[i], output[i + 1]);
        if (ease) {
            var easingFunction = Array.isArray(ease) ? ease[i] : ease;
            mixer = pipe(easingFunction, mixer);
        }
        mixers.push(mixer);
    }
    return mixers;
}
function fastInterpolate(_a, _b) {
    var from = _a[0], to = _a[1];
    var mixer = _b[0];
    return function(v) {
        return mixer(progress(from, to, v));
    };
}
function slowInterpolate(input, mixers) {
    var inputLength = input.length;
    var lastInputIndex = inputLength - 1;
    return function(v) {
        var mixerIndex = 0;
        var foundMixerIndex = false;
        if (v <= input[0]) foundMixerIndex = true;
        else if (v >= input[lastInputIndex]) {
            mixerIndex = lastInputIndex - 1;
            foundMixerIndex = true;
        }
        if (!foundMixerIndex) {
            var i = 1;
            for(; i < inputLength; i++){
                if (input[i] > v || i === lastInputIndex) break;
            }
            mixerIndex = i - 1;
        }
        var progressInRange = progress(input[mixerIndex], input[mixerIndex + 1], v);
        return mixers[mixerIndex](progressInRange);
    };
}
function interpolate(input, output, _a) {
    var _b = _a === void 0 ? {} : _a, _c = _b.clamp, clamp1 = _c === void 0 ? true : _c, ease = _b.ease, mixer = _b.mixer;
    var inputLength = input.length;
    (0, _heyListen.invariant)(inputLength === output.length, "Both input and output ranges must be the same length");
    (0, _heyListen.invariant)(!ease || !Array.isArray(ease) || ease.length === inputLength - 1, "Array of easing functions must be of length `input.length - 1`, as it applies to the transitions **between** the defined values.");
    if (input[0] > input[inputLength - 1]) {
        input = [].concat(input);
        output = [].concat(output);
        input.reverse();
        output.reverse();
    }
    var mixers = createMixers(output, ease, mixer);
    var interpolator = inputLength === 2 ? fastInterpolate(input, mixers) : slowInterpolate(input, mixers);
    return clamp1 ? pipe(clamp$1(input[0], input[inputLength - 1]), interpolator) : interpolator;
}
var pointFromVector = function(origin, angle1, distance1) {
    angle1 = degreesToRadians(angle1);
    return {
        x: distance1 * Math.cos(angle1) + origin.x,
        y: distance1 * Math.sin(angle1) + origin.y
    };
};
var toDecimal = function(num, precision) {
    if (precision === void 0) precision = 2;
    precision = Math.pow(10, precision);
    return Math.round(num * precision) / precision;
};
var smoothFrame = function(prevValue, nextValue, duration, smoothing) {
    if (smoothing === void 0) smoothing = 0;
    return toDecimal(prevValue + duration * (nextValue - prevValue) / Math.max(smoothing, duration));
};
var smooth = function(strength) {
    if (strength === void 0) strength = 50;
    var previousValue = 0;
    var lastUpdated = 0;
    return function(v) {
        var currentFramestamp = (0, _framesync.getFrameData)().timestamp;
        var timeDelta = currentFramestamp !== lastUpdated ? currentFramestamp - lastUpdated : 0;
        var newValue = timeDelta ? smoothFrame(previousValue, v, timeDelta, strength) : previousValue;
        lastUpdated = currentFramestamp;
        previousValue = newValue;
        return newValue;
    };
};
var snap = function(points) {
    if (typeof points === "number") return function(v) {
        return Math.round(v / points) * points;
    };
    else {
        var i_1 = 0;
        var numPoints_1 = points.length;
        return function(v) {
            var lastDistance = Math.abs(points[0] - v);
            for(i_1 = 1; i_1 < numPoints_1; i_1++){
                var point = points[i_1];
                var distance2 = Math.abs(point - v);
                if (distance2 === 0) return point;
                if (distance2 > lastDistance) return points[i_1 - 1];
                if (i_1 === numPoints_1 - 1) return point;
                lastDistance = distance2;
            }
        };
    }
};
var identity = function(v) {
    return v;
};
var springForce = function(alterDisplacement) {
    if (alterDisplacement === void 0) alterDisplacement = identity;
    return curryRange(function(constant, origin, v) {
        var displacement = origin - v;
        var springModifiedDisplacement = -(0 - constant + 1) * (0 - alterDisplacement(Math.abs(displacement)));
        return displacement <= 0 ? origin + springModifiedDisplacement : origin - springModifiedDisplacement;
    });
};
var springForceLinear = springForce();
var springForceExpo = springForce(Math.sqrt);
var velocityPerFrame = function(xps, frameDuration) {
    return isNum(xps) ? xps / (1000 / frameDuration) : 0;
};
var velocityPerSecond = function(velocity, frameDuration) {
    return frameDuration ? velocity * (1000 / frameDuration) : 0;
};
var wrap = function(min, max, v) {
    var rangeSize = max - min;
    return ((v - min) % rangeSize + rangeSize) % rangeSize + min;
};
var wrap$1 = curryRange(wrap);
var clampProgress = clamp$1(0, 1);
var steps = function(steps1, direction) {
    if (direction === void 0) direction = "end";
    return function(progress2) {
        progress2 = direction === "end" ? Math.min(progress2, 0.999) : Math.max(progress2, 0.001);
        var expanded = progress2 * steps1;
        var rounded = direction === "end" ? Math.floor(expanded) : Math.ceil(expanded);
        return clampProgress(rounded / steps1);
    };
};

},{"style-value-types":"f8zMr","hey-listen":"8yK8Z","framesync":"fmg1O","@popmotion/easing":"jPIK5","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"f8zMr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "alpha", ()=>alpha);
parcelHelpers.export(exports, "color", ()=>color);
parcelHelpers.export(exports, "complex", ()=>complex);
parcelHelpers.export(exports, "degrees", ()=>degrees);
parcelHelpers.export(exports, "hex", ()=>hex);
parcelHelpers.export(exports, "hsla", ()=>hsla);
parcelHelpers.export(exports, "number", ()=>number);
parcelHelpers.export(exports, "percent", ()=>percent);
parcelHelpers.export(exports, "progressPercentage", ()=>progressPercentage);
parcelHelpers.export(exports, "px", ()=>px);
parcelHelpers.export(exports, "rgbUnit", ()=>rgbUnit);
parcelHelpers.export(exports, "rgba", ()=>rgba);
parcelHelpers.export(exports, "scale", ()=>scale);
parcelHelpers.export(exports, "vh", ()=>vh);
parcelHelpers.export(exports, "vw", ()=>vw);
var _tslib = require("tslib");
var clamp = function(min, max) {
    return function(v) {
        return Math.max(Math.min(v, max), min);
    };
};
var sanitize = function(v) {
    return v % 1 ? Number(v.toFixed(5)) : v;
};
var floatRegex = /(-)?(\d[\d\.]*)/g;
var colorRegex = /(#[0-9a-f]{6}|#[0-9a-f]{3}|#(?:[0-9a-f]{2}){2,4}|(rgb|hsl)a?\((-?[\d\.]+%?[,\s]+){2,3}\s*\/*\s*[\d\.]+%?\))/gi;
var singleColorRegex = /^(#[0-9a-f]{3}|#(?:[0-9a-f]{2}){2,4}|(rgb|hsl)a?\((-?[\d\.]+%?[,\s]+){2,3}\s*\/*\s*[\d\.]+%?\))$/i;
var number = {
    test: function(v) {
        return typeof v === "number";
    },
    parse: parseFloat,
    transform: function(v) {
        return v;
    }
};
var alpha = (0, _tslib.__assign)((0, _tslib.__assign)({}, number), {
    transform: clamp(0, 1)
});
var scale = (0, _tslib.__assign)((0, _tslib.__assign)({}, number), {
    default: 1
});
var createUnitType = function(unit) {
    return {
        test: function(v) {
            return typeof v === "string" && v.endsWith(unit) && v.split(" ").length === 1;
        },
        parse: parseFloat,
        transform: function(v) {
            return "" + v + unit;
        }
    };
};
var degrees = createUnitType("deg");
var percent = createUnitType("%");
var px = createUnitType("px");
var vh = createUnitType("vh");
var vw = createUnitType("vw");
var progressPercentage = (0, _tslib.__assign)((0, _tslib.__assign)({}, percent), {
    parse: function(v) {
        return percent.parse(v) / 100;
    },
    transform: function(v) {
        return percent.transform(v * 100);
    }
});
var getValueFromFunctionString = function(value) {
    return value.substring(value.indexOf("(") + 1, value.lastIndexOf(")"));
};
var clampRgbUnit = clamp(0, 255);
var isRgba = function(v) {
    return v.red !== undefined;
};
var isHsla = function(v) {
    return v.hue !== undefined;
};
function getValuesAsArray(value) {
    return getValueFromFunctionString(value).replace(/(,|\/)/g, " ").split(/ \s*/);
}
var splitColorValues = function(terms) {
    return function(v) {
        if (typeof v !== "string") return v;
        var values = {};
        var valuesArray = getValuesAsArray(v);
        for(var i = 0; i < 4; i++)values[terms[i]] = valuesArray[i] !== undefined ? parseFloat(valuesArray[i]) : 1;
        return values;
    };
};
var rgbaTemplate = function(_a) {
    var red = _a.red, green = _a.green, blue = _a.blue, _b = _a.alpha, alpha1 = _b === void 0 ? 1 : _b;
    return "rgba(" + red + ", " + green + ", " + blue + ", " + alpha1 + ")";
};
var hslaTemplate = function(_a) {
    var hue = _a.hue, saturation = _a.saturation, lightness = _a.lightness, _b = _a.alpha, alpha2 = _b === void 0 ? 1 : _b;
    return "hsla(" + hue + ", " + saturation + ", " + lightness + ", " + alpha2 + ")";
};
var rgbUnit = (0, _tslib.__assign)((0, _tslib.__assign)({}, number), {
    transform: function(v) {
        return Math.round(clampRgbUnit(v));
    }
});
function isColorString(color1, colorType) {
    return color1.startsWith(colorType) && singleColorRegex.test(color1);
}
var rgba = {
    test: function(v) {
        return typeof v === "string" ? isColorString(v, "rgb") : isRgba(v);
    },
    parse: splitColorValues([
        "red",
        "green",
        "blue",
        "alpha"
    ]),
    transform: function(_a) {
        var red = _a.red, green = _a.green, blue = _a.blue, _b = _a.alpha, alpha$1 = _b === void 0 ? 1 : _b;
        return rgbaTemplate({
            red: rgbUnit.transform(red),
            green: rgbUnit.transform(green),
            blue: rgbUnit.transform(blue),
            alpha: sanitize(alpha.transform(alpha$1))
        });
    }
};
var hsla = {
    test: function(v) {
        return typeof v === "string" ? isColorString(v, "hsl") : isHsla(v);
    },
    parse: splitColorValues([
        "hue",
        "saturation",
        "lightness",
        "alpha"
    ]),
    transform: function(_a) {
        var hue = _a.hue, saturation = _a.saturation, lightness = _a.lightness, _b = _a.alpha, alpha$1 = _b === void 0 ? 1 : _b;
        return hslaTemplate({
            hue: Math.round(hue),
            saturation: percent.transform(sanitize(saturation)),
            lightness: percent.transform(sanitize(lightness)),
            alpha: sanitize(alpha.transform(alpha$1))
        });
    }
};
var hex = (0, _tslib.__assign)((0, _tslib.__assign)({}, rgba), {
    test: function(v) {
        return typeof v === "string" && isColorString(v, "#");
    },
    parse: function(v) {
        var r = "";
        var g = "";
        var b = "";
        if (v.length > 4) {
            r = v.substr(1, 2);
            g = v.substr(3, 2);
            b = v.substr(5, 2);
        } else {
            r = v.substr(1, 1);
            g = v.substr(2, 1);
            b = v.substr(3, 1);
            r += r;
            g += g;
            b += b;
        }
        return {
            red: parseInt(r, 16),
            green: parseInt(g, 16),
            blue: parseInt(b, 16),
            alpha: 1
        };
    }
});
var color = {
    test: function(v) {
        return typeof v === "string" && singleColorRegex.test(v) || isRgba(v) || isHsla(v);
    },
    parse: function(v) {
        if (rgba.test(v)) return rgba.parse(v);
        else if (hsla.test(v)) return hsla.parse(v);
        else if (hex.test(v)) return hex.parse(v);
        return v;
    },
    transform: function(v) {
        if (isRgba(v)) return rgba.transform(v);
        else if (isHsla(v)) return hsla.transform(v);
        return v;
    }
};
var COLOR_TOKEN = "${c}";
var NUMBER_TOKEN = "${n}";
var convertNumbersToZero = function(v) {
    return typeof v === "number" ? 0 : v;
};
var complex = {
    test: function(v) {
        if (typeof v !== "string" || !isNaN(v)) return false;
        var numValues = 0;
        var foundNumbers = v.match(floatRegex);
        var foundColors = v.match(colorRegex);
        if (foundNumbers) numValues += foundNumbers.length;
        if (foundColors) numValues += foundColors.length;
        return numValues > 0;
    },
    parse: function(v) {
        var input = v;
        var parsed = [];
        var foundColors = input.match(colorRegex);
        if (foundColors) {
            input = input.replace(colorRegex, COLOR_TOKEN);
            parsed.push.apply(parsed, foundColors.map(color.parse));
        }
        var foundNumbers = input.match(floatRegex);
        if (foundNumbers) parsed.push.apply(parsed, foundNumbers.map(number.parse));
        return parsed;
    },
    createTransformer: function(prop) {
        var template = prop;
        var token = 0;
        var foundColors = prop.match(colorRegex);
        var numColors = foundColors ? foundColors.length : 0;
        if (foundColors) for(var i1 = 0; i1 < numColors; i1++){
            template = template.replace(foundColors[i1], COLOR_TOKEN);
            token++;
        }
        var foundNumbers = template.match(floatRegex);
        var numNumbers = foundNumbers ? foundNumbers.length : 0;
        if (foundNumbers) for(var i1 = 0; i1 < numNumbers; i1++){
            template = template.replace(foundNumbers[i1], NUMBER_TOKEN);
            token++;
        }
        return function(v) {
            var output = template;
            for(var i = 0; i < token; i++)output = output.replace(i < numColors ? COLOR_TOKEN : NUMBER_TOKEN, i < numColors ? color.transform(v[i]) : sanitize(v[i]));
            return output;
        };
    },
    getAnimatableNone: function(target) {
        var parsedTarget = complex.parse(target);
        var targetTransformer = complex.createTransformer(target);
        return targetTransformer(parsedTarget.map(convertNumbersToZero));
    }
};

},{"tslib":"lRdW5","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8yK8Z":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "invariant", ()=>invariant);
parcelHelpers.export(exports, "warning", ()=>warning);
var warning = function() {};
var invariant = function() {};
warning = function(check, message) {
    if (!check && typeof console !== "undefined") console.warn(message);
};
invariant = function(check, message) {
    if (!check) throw new Error(message);
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fmg1O":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "cancelSync", ()=>cancelSync);
parcelHelpers.export(exports, "getFrameData", ()=>getFrameData);
var _heyListen = require("hey-listen");
var prevTime = 0;
var onNextFrame = typeof window !== "undefined" && window.requestAnimationFrame !== undefined ? function(callback) {
    return window.requestAnimationFrame(callback);
} : function(callback) {
    var timestamp = Date.now();
    var timeToCall = Math.max(0, 16.7 - (timestamp - prevTime));
    prevTime = timestamp + timeToCall;
    setTimeout(function() {
        return callback(prevTime);
    }, timeToCall);
};
var createStep = function(setRunNextFrame) {
    var processToRun = [];
    var processToRunNextFrame = [];
    var numThisFrame = 0;
    var isProcessing1 = false;
    var i = 0;
    var cancelled = new WeakSet();
    var toKeepAlive = new WeakSet();
    var renderStep = {
        cancel: function(process) {
            var indexOfCallback = processToRunNextFrame.indexOf(process);
            cancelled.add(process);
            if (indexOfCallback !== -1) processToRunNextFrame.splice(indexOfCallback, 1);
        },
        process: function(frame1) {
            var _a;
            isProcessing1 = true;
            _a = [
                processToRunNextFrame,
                processToRun
            ], processToRun = _a[0], processToRunNextFrame = _a[1];
            processToRunNextFrame.length = 0;
            numThisFrame = processToRun.length;
            if (numThisFrame) {
                var process_1;
                for(i = 0; i < numThisFrame; i++){
                    process_1 = processToRun[i];
                    process_1(frame1);
                    if (toKeepAlive.has(process_1) === true && !cancelled.has(process_1)) {
                        renderStep.schedule(process_1);
                        setRunNextFrame(true);
                    }
                }
            }
            isProcessing1 = false;
        },
        schedule: function(process, keepAlive, immediate) {
            if (keepAlive === void 0) keepAlive = false;
            if (immediate === void 0) immediate = false;
            (0, _heyListen.invariant)(typeof process === "function", "Argument must be a function");
            var addToCurrentBuffer = immediate && isProcessing1;
            var buffer = addToCurrentBuffer ? processToRun : processToRunNextFrame;
            cancelled.delete(process);
            if (keepAlive) toKeepAlive.add(process);
            if (buffer.indexOf(process) === -1) {
                buffer.push(process);
                if (addToCurrentBuffer) numThisFrame = processToRun.length;
            }
        }
    };
    return renderStep;
};
var maxElapsed = 40;
var defaultElapsed = 1 / 60 * 1000;
var useDefaultElapsed = true;
var willRunNextFrame = false;
var isProcessing = false;
var frame = {
    delta: 0,
    timestamp: 0
};
var stepsOrder = [
    "read",
    "update",
    "preRender",
    "render",
    "postRender"
];
var setWillRunNextFrame = function(willRun) {
    return willRunNextFrame = willRun;
};
var steps = /*#__PURE__*/ stepsOrder.reduce(function(acc, key) {
    acc[key] = createStep(setWillRunNextFrame);
    return acc;
}, {});
var sync = /*#__PURE__*/ stepsOrder.reduce(function(acc, key) {
    var step = steps[key];
    acc[key] = function(process, keepAlive, immediate) {
        if (keepAlive === void 0) keepAlive = false;
        if (immediate === void 0) immediate = false;
        if (!willRunNextFrame) startLoop();
        step.schedule(process, keepAlive, immediate);
        return process;
    };
    return acc;
}, {});
var cancelSync = /*#__PURE__*/ stepsOrder.reduce(function(acc, key) {
    acc[key] = steps[key].cancel;
    return acc;
}, {});
var processStep = function(stepId) {
    return steps[stepId].process(frame);
};
var processFrame = function(timestamp) {
    willRunNextFrame = false;
    frame.delta = useDefaultElapsed ? defaultElapsed : Math.max(Math.min(timestamp - frame.timestamp, maxElapsed), 1);
    if (!useDefaultElapsed) defaultElapsed = frame.delta;
    frame.timestamp = timestamp;
    isProcessing = true;
    stepsOrder.forEach(processStep);
    isProcessing = false;
    if (willRunNextFrame) {
        useDefaultElapsed = false;
        onNextFrame(processFrame);
    }
};
var startLoop = function() {
    willRunNextFrame = true;
    useDefaultElapsed = true;
    if (!isProcessing) onNextFrame(processFrame);
};
var getFrameData = function() {
    return frame;
};
exports.default = sync;

},{"hey-listen":"8yK8Z","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jPIK5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "reversed", ()=>reversed);
parcelHelpers.export(exports, "mirrored", ()=>mirrored);
parcelHelpers.export(exports, "createReversedEasing", ()=>createReversedEasing);
parcelHelpers.export(exports, "createMirroredEasing", ()=>createMirroredEasing);
parcelHelpers.export(exports, "createExpoIn", ()=>createExpoIn);
parcelHelpers.export(exports, "createBackIn", ()=>createBackIn);
parcelHelpers.export(exports, "createAnticipateEasing", ()=>createAnticipateEasing);
parcelHelpers.export(exports, "linear", ()=>linear);
parcelHelpers.export(exports, "easeIn", ()=>easeIn);
parcelHelpers.export(exports, "easeOut", ()=>easeOut);
parcelHelpers.export(exports, "easeInOut", ()=>easeInOut);
parcelHelpers.export(exports, "circIn", ()=>circIn);
parcelHelpers.export(exports, "circOut", ()=>circOut);
parcelHelpers.export(exports, "circInOut", ()=>circInOut);
parcelHelpers.export(exports, "backIn", ()=>backIn);
parcelHelpers.export(exports, "backOut", ()=>backOut);
parcelHelpers.export(exports, "backInOut", ()=>backInOut);
parcelHelpers.export(exports, "anticipate", ()=>anticipate);
parcelHelpers.export(exports, "bounceOut", ()=>bounceOut);
parcelHelpers.export(exports, "bounceIn", ()=>bounceIn);
parcelHelpers.export(exports, "bounceInOut", ()=>bounceInOut);
parcelHelpers.export(exports, "cubicBezier", ()=>cubicBezier);
var DEFAULT_OVERSHOOT_STRENGTH = 1.525;
var reversed = function(easing) {
    return function(p) {
        return 1 - easing(1 - p);
    };
};
var mirrored = function(easing) {
    return function(p) {
        return p <= 0.5 ? easing(2 * p) / 2 : (2 - easing(2 * (1 - p))) / 2;
    };
};
var createReversedEasing = reversed;
var createMirroredEasing = mirrored;
var createExpoIn = function(power) {
    return function(p) {
        return Math.pow(p, power);
    };
};
var createBackIn = function(power) {
    return function(p) {
        return p * p * ((power + 1) * p - power);
    };
};
var createAnticipateEasing = function(power) {
    var backEasing = createBackIn(power);
    return function(p) {
        return (p *= 2) < 1 ? 0.5 * backEasing(p) : 0.5 * (2 - Math.pow(2, -10 * (p - 1)));
    };
};
var linear = function(p) {
    return p;
};
var easeIn = /*#__PURE__*/ createExpoIn(2);
var easeOut = /*#__PURE__*/ reversed(easeIn);
var easeInOut = /*#__PURE__*/ mirrored(easeIn);
var circIn = function(p) {
    return 1 - Math.sin(Math.acos(p));
};
var circOut = /*#__PURE__*/ reversed(circIn);
var circInOut = /*#__PURE__*/ mirrored(circOut);
var backIn = /*#__PURE__*/ createBackIn(DEFAULT_OVERSHOOT_STRENGTH);
var backOut = /*#__PURE__*/ reversed(backIn);
var backInOut = /*#__PURE__*/ mirrored(backIn);
var anticipate = /*#__PURE__*/ createAnticipateEasing(DEFAULT_OVERSHOOT_STRENGTH);
var BOUNCE_FIRST_THRESHOLD = 4.0 / 11.0;
var BOUNCE_SECOND_THRESHOLD = 8.0 / 11.0;
var BOUNCE_THIRD_THRESHOLD = 0.9;
var ca = 4356.0 / 361.0;
var cb = 35442.0 / 1805.0;
var cc = 16061.0 / 1805.0;
var bounceOut = function(p) {
    var p2 = p * p;
    return p < BOUNCE_FIRST_THRESHOLD ? 7.5625 * p2 : p < BOUNCE_SECOND_THRESHOLD ? 9.075 * p2 - 9.9 * p + 3.4 : p < BOUNCE_THIRD_THRESHOLD ? ca * p2 - cb * p + cc : 10.8 * p * p - 20.52 * p + 10.72;
};
var bounceIn = function(p) {
    return 1.0 - bounceOut(1.0 - p);
};
var bounceInOut = function(p) {
    return p < 0.5 ? 0.5 * (1.0 - bounceOut(1.0 - p * 2.0)) : 0.5 * bounceOut(p * 2.0 - 1.0) + 0.5;
};
var NEWTON_ITERATIONS = 8;
var NEWTON_MIN_SLOPE = 0.001;
var SUBDIVISION_PRECISION = 0.0000001;
var SUBDIVISION_MAX_ITERATIONS = 10;
var K_SPLINE_TABLE_SIZE = 11;
var K_SAMPLE_STEP_SIZE = 1.0 / (K_SPLINE_TABLE_SIZE - 1.0);
var FLOAT_32_SUPPORTED = typeof Float32Array !== "undefined";
var a = function(a1, a2) {
    return 1.0 - 3.0 * a2 + 3.0 * a1;
};
var b = function(a1, a2) {
    return 3.0 * a2 - 6.0 * a1;
};
var c = function(a1) {
    return 3.0 * a1;
};
var getSlope = function(t, a1, a2) {
    return 3.0 * a(a1, a2) * t * t + 2.0 * b(a1, a2) * t + c(a1);
};
var calcBezier = function(t, a1, a2) {
    return ((a(a1, a2) * t + b(a1, a2)) * t + c(a1)) * t;
};
function cubicBezier(mX1, mY1, mX2, mY2) {
    var sampleValues = FLOAT_32_SUPPORTED ? new Float32Array(K_SPLINE_TABLE_SIZE) : new Array(K_SPLINE_TABLE_SIZE);
    var binarySubdivide = function(aX, aA, aB) {
        var i = 0;
        var currentX;
        var currentT;
        do {
            currentT = aA + (aB - aA) / 2.0;
            currentX = calcBezier(currentT, mX1, mX2) - aX;
            if (currentX > 0.0) aB = currentT;
            else aA = currentT;
        }while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);
        return currentT;
    };
    var newtonRaphsonIterate = function(aX, aGuessT) {
        var i = 0;
        var currentSlope = 0;
        var currentX;
        for(; i < NEWTON_ITERATIONS; ++i){
            currentSlope = getSlope(aGuessT, mX1, mX2);
            if (currentSlope === 0.0) return aGuessT;
            currentX = calcBezier(aGuessT, mX1, mX2) - aX;
            aGuessT -= currentX / currentSlope;
        }
        return aGuessT;
    };
    var calcSampleValues = function() {
        for(var i = 0; i < K_SPLINE_TABLE_SIZE; ++i)sampleValues[i] = calcBezier(i * K_SAMPLE_STEP_SIZE, mX1, mX2);
    };
    var getTForX = function(aX) {
        var intervalStart = 0.0;
        var currentSample = 1;
        var lastSample = K_SPLINE_TABLE_SIZE - 1;
        var dist = 0.0;
        var guessForT = 0.0;
        var initialSlope = 0.0;
        for(; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample)intervalStart += K_SAMPLE_STEP_SIZE;
        --currentSample;
        dist = (aX - sampleValues[currentSample]) / (sampleValues[currentSample + 1] - sampleValues[currentSample]);
        guessForT = intervalStart + dist * K_SAMPLE_STEP_SIZE;
        initialSlope = getSlope(guessForT, mX1, mX2);
        if (initialSlope >= NEWTON_MIN_SLOPE) return newtonRaphsonIterate(aX, guessForT);
        else if (initialSlope === 0.0) return guessForT;
        else return binarySubdivide(aX, intervalStart, intervalStart + K_SAMPLE_STEP_SIZE);
    };
    calcSampleValues();
    var resolver = function(aX) {
        var returnValue;
        if (mX1 === mY1 && mX2 === mY2) returnValue = aX;
        else if (aX === 0) returnValue = 0;
        else if (aX === 1) returnValue = 1;
        else returnValue = calcBezier(getTForX(aX), mY1, mY2);
        return returnValue;
    };
    return resolver;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fNDvw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "buildSVGAttrs", ()=>buildSVGAttrs);
parcelHelpers.export(exports, "buildStyleProperty", ()=>buildStyleProperty);
parcelHelpers.export(exports, "createStylerFactory", ()=>createStyler);
parcelHelpers.export(exports, "isTransformProp", ()=>isTransformProp);
parcelHelpers.export(exports, "transformProps", ()=>transformProps);
var _tslib = require("tslib");
var _framesync = require("framesync");
var _framesyncDefault = parcelHelpers.interopDefault(_framesync);
var _styleValueTypes = require("style-value-types");
var _heyListen = require("hey-listen");
var createStyler = function(_a1) {
    var onRead1 = _a1.onRead, onRender1 = _a1.onRender, _b = _a1.uncachedValues, uncachedValues = _b === void 0 ? new Set() : _b, _c = _a1.useCache, useCache = _c === void 0 ? true : _c;
    return function(_a) {
        if (_a === void 0) _a = {};
        var props = (0, _tslib.__rest)(_a, []);
        var state = {};
        var changedValues = [];
        var hasChanged = false;
        function setValue(key, value) {
            if (key.startsWith("--")) props.hasCSSVariable = true;
            var currentValue = state[key];
            state[key] = value;
            if (state[key] === currentValue) return;
            if (changedValues.indexOf(key) === -1) changedValues.push(key);
            if (!hasChanged) {
                hasChanged = true;
                (0, _framesyncDefault.default).render(styler.render);
            }
        }
        var styler = {
            get: function(key, forceRead) {
                if (forceRead === void 0) forceRead = false;
                var useCached = !forceRead && useCache && !uncachedValues.has(key) && state[key] !== undefined;
                return useCached ? state[key] : onRead1(key, props);
            },
            set: function(values, value) {
                if (typeof values === "string") setValue(values, value);
                else for(var key in values)setValue(key, values[key]);
                return this;
            },
            render: function(forceRender) {
                if (forceRender === void 0) forceRender = false;
                if (hasChanged || forceRender === true) {
                    onRender1(state, props, changedValues);
                    hasChanged = false;
                    changedValues.length = 0;
                }
                return this;
            }
        };
        return styler;
    };
};
var CAMEL_CASE_PATTERN = /([a-z])([A-Z])/g;
var REPLACE_TEMPLATE = "$1-$2";
var camelToDash = function(str) {
    return str.replace(CAMEL_CASE_PATTERN, REPLACE_TEMPLATE).toLowerCase();
};
var camelCache = /*#__PURE__*/ new Map();
var dashCache = /*#__PURE__*/ new Map();
var prefixes = [
    "Webkit",
    "Moz",
    "O",
    "ms",
    ""
];
var numPrefixes = prefixes.length;
var isBrowser = typeof document !== "undefined";
var testElement;
var setDashPrefix = function(key, prefixed) {
    return dashCache.set(key, camelToDash(prefixed));
};
var testPrefix = function(key) {
    testElement = testElement || document.createElement("div");
    for(var i = 0; i < numPrefixes; i++){
        var prefix = prefixes[i];
        var noPrefix = prefix === "";
        var prefixedPropertyName = noPrefix ? key : prefix + key.charAt(0).toUpperCase() + key.slice(1);
        if (prefixedPropertyName in testElement.style || noPrefix) {
            if (noPrefix && key === "clipPath" && dashCache.has(key)) return;
            camelCache.set(key, prefixedPropertyName);
            setDashPrefix(key, "" + (noPrefix ? "" : "-") + camelToDash(prefixedPropertyName));
        }
    }
};
var setServerProperty = function(key) {
    return setDashPrefix(key, key);
};
var prefixer = function(key, asDashCase) {
    if (asDashCase === void 0) asDashCase = false;
    var cache1 = asDashCase ? dashCache : camelCache;
    if (!cache1.has(key)) isBrowser ? testPrefix(key) : setServerProperty(key);
    return cache1.get(key) || key;
};
var axes = [
    "",
    "X",
    "Y",
    "Z"
];
var order = [
    "translate",
    "scale",
    "rotate",
    "skew",
    "transformPerspective"
];
var transformProps = /*#__PURE__*/ order.reduce(function(acc, key) {
    return axes.reduce(function(axesAcc, axesKey) {
        axesAcc.push(key + axesKey);
        return axesAcc;
    }, acc);
}, [
    "x",
    "y",
    "z"
]);
var transformPropDictionary = /*#__PURE__*/ transformProps.reduce(function(dict, key) {
    dict[key] = true;
    return dict;
}, {});
function isTransformProp(key) {
    return transformPropDictionary[key] === true;
}
function sortTransformProps(a, b) {
    return transformProps.indexOf(a) - transformProps.indexOf(b);
}
var transformOriginProps = /*#__PURE__*/ new Set([
    "originX",
    "originY",
    "originZ"
]);
function isTransformOriginProp(key) {
    return transformOriginProps.has(key);
}
var int = /*#__PURE__*/ (0, _tslib.__assign)(/*#__PURE__*/ (0, _tslib.__assign)({}, (0, _styleValueTypes.number)), {
    transform: Math.round
});
var valueTypes = {
    color: (0, _styleValueTypes.color),
    backgroundColor: (0, _styleValueTypes.color),
    outlineColor: (0, _styleValueTypes.color),
    fill: (0, _styleValueTypes.color),
    stroke: (0, _styleValueTypes.color),
    borderColor: (0, _styleValueTypes.color),
    borderTopColor: (0, _styleValueTypes.color),
    borderRightColor: (0, _styleValueTypes.color),
    borderBottomColor: (0, _styleValueTypes.color),
    borderLeftColor: (0, _styleValueTypes.color),
    borderWidth: (0, _styleValueTypes.px),
    borderTopWidth: (0, _styleValueTypes.px),
    borderRightWidth: (0, _styleValueTypes.px),
    borderBottomWidth: (0, _styleValueTypes.px),
    borderLeftWidth: (0, _styleValueTypes.px),
    borderRadius: (0, _styleValueTypes.px),
    radius: (0, _styleValueTypes.px),
    borderTopLeftRadius: (0, _styleValueTypes.px),
    borderTopRightRadius: (0, _styleValueTypes.px),
    borderBottomRightRadius: (0, _styleValueTypes.px),
    borderBottomLeftRadius: (0, _styleValueTypes.px),
    width: (0, _styleValueTypes.px),
    maxWidth: (0, _styleValueTypes.px),
    height: (0, _styleValueTypes.px),
    maxHeight: (0, _styleValueTypes.px),
    size: (0, _styleValueTypes.px),
    top: (0, _styleValueTypes.px),
    right: (0, _styleValueTypes.px),
    bottom: (0, _styleValueTypes.px),
    left: (0, _styleValueTypes.px),
    padding: (0, _styleValueTypes.px),
    paddingTop: (0, _styleValueTypes.px),
    paddingRight: (0, _styleValueTypes.px),
    paddingBottom: (0, _styleValueTypes.px),
    paddingLeft: (0, _styleValueTypes.px),
    margin: (0, _styleValueTypes.px),
    marginTop: (0, _styleValueTypes.px),
    marginRight: (0, _styleValueTypes.px),
    marginBottom: (0, _styleValueTypes.px),
    marginLeft: (0, _styleValueTypes.px),
    rotate: (0, _styleValueTypes.degrees),
    rotateX: (0, _styleValueTypes.degrees),
    rotateY: (0, _styleValueTypes.degrees),
    rotateZ: (0, _styleValueTypes.degrees),
    scale: (0, _styleValueTypes.scale),
    scaleX: (0, _styleValueTypes.scale),
    scaleY: (0, _styleValueTypes.scale),
    scaleZ: (0, _styleValueTypes.scale),
    skew: (0, _styleValueTypes.degrees),
    skewX: (0, _styleValueTypes.degrees),
    skewY: (0, _styleValueTypes.degrees),
    distance: (0, _styleValueTypes.px),
    translateX: (0, _styleValueTypes.px),
    translateY: (0, _styleValueTypes.px),
    translateZ: (0, _styleValueTypes.px),
    x: (0, _styleValueTypes.px),
    y: (0, _styleValueTypes.px),
    z: (0, _styleValueTypes.px),
    perspective: (0, _styleValueTypes.px),
    opacity: (0, _styleValueTypes.alpha),
    originX: (0, _styleValueTypes.progressPercentage),
    originY: (0, _styleValueTypes.progressPercentage),
    originZ: (0, _styleValueTypes.px),
    zIndex: int,
    fillOpacity: (0, _styleValueTypes.alpha),
    strokeOpacity: (0, _styleValueTypes.alpha),
    numOctaves: int
};
var getValueType = function(key) {
    return valueTypes[key];
};
var getValueAsType = function(value, type) {
    return type && typeof value === "number" ? type.transform(value) : value;
};
var SCROLL_LEFT = "scrollLeft";
var SCROLL_TOP = "scrollTop";
var scrollKeys = /*#__PURE__*/ new Set([
    SCROLL_LEFT,
    SCROLL_TOP
]);
var blacklist = /*#__PURE__*/ new Set([
    SCROLL_LEFT,
    SCROLL_TOP,
    "transform"
]);
var translateAlias = {
    x: "translateX",
    y: "translateY",
    z: "translateZ"
};
function isCustomTemplate(v) {
    return typeof v === "function";
}
function buildTransform(state, transform, transformKeys, transformIsDefault, enableHardwareAcceleration, allowTransformNone) {
    if (allowTransformNone === void 0) allowTransformNone = true;
    var transformString = "";
    var transformHasZ = false;
    transformKeys.sort(sortTransformProps);
    var numTransformKeys = transformKeys.length;
    for(var i = 0; i < numTransformKeys; i++){
        var key = transformKeys[i];
        transformString += (translateAlias[key] || key) + "(" + transform[key] + ") ";
        transformHasZ = key === "z" ? true : transformHasZ;
    }
    if (!transformHasZ && enableHardwareAcceleration) transformString += "translateZ(0)";
    else transformString = transformString.trim();
    if (isCustomTemplate(state.transform)) transformString = state.transform(transform, transformIsDefault ? "" : transformString);
    else if (allowTransformNone && transformIsDefault) transformString = "none";
    return transformString;
}
function buildStyleProperty(state, enableHardwareAcceleration, styles, transform, transformOrigin, transformKeys, isDashCase, allowTransformNone) {
    if (enableHardwareAcceleration === void 0) enableHardwareAcceleration = true;
    if (styles === void 0) styles = {};
    if (transform === void 0) transform = {};
    if (transformOrigin === void 0) transformOrigin = {};
    if (transformKeys === void 0) transformKeys = [];
    if (isDashCase === void 0) isDashCase = false;
    if (allowTransformNone === void 0) allowTransformNone = true;
    var transformIsDefault = true;
    var hasTransform = false;
    var hasTransformOrigin = false;
    for(var key in state){
        var value = state[key];
        var valueType = getValueType(key);
        var valueAsType = getValueAsType(value, valueType);
        if (isTransformProp(key)) {
            hasTransform = true;
            transform[key] = valueAsType;
            transformKeys.push(key);
            if (transformIsDefault) {
                if (valueType.default && value !== valueType.default || !valueType.default && value !== 0) transformIsDefault = false;
            }
        } else if (isTransformOriginProp(key)) {
            transformOrigin[key] = valueAsType;
            hasTransformOrigin = true;
        } else if (!blacklist.has(key) || !isCustomTemplate(valueAsType)) styles[prefixer(key, isDashCase)] = valueAsType;
    }
    if (hasTransform || typeof state.transform === "function") styles.transform = buildTransform(state, transform, transformKeys, transformIsDefault, enableHardwareAcceleration, allowTransformNone);
    if (hasTransformOrigin) styles.transformOrigin = (transformOrigin.originX || "50%") + " " + (transformOrigin.originY || "50%") + " " + (transformOrigin.originZ || 0);
    return styles;
}
function createStyleBuilder(_a) {
    var _b = _a === void 0 ? {} : _a, _c = _b.enableHardwareAcceleration, enableHardwareAcceleration = _c === void 0 ? true : _c, _d = _b.isDashCase, isDashCase = _d === void 0 ? true : _d, _e = _b.allowTransformNone, allowTransformNone = _e === void 0 ? true : _e;
    var styles = {};
    var transform = {};
    var transformOrigin = {};
    var transformKeys = [];
    return function(state) {
        transformKeys.length = 0;
        buildStyleProperty(state, enableHardwareAcceleration, styles, transform, transformOrigin, transformKeys, isDashCase, allowTransformNone);
        return styles;
    };
}
function onRead(key, options) {
    var element = options.element, preparseOutput = options.preparseOutput;
    var defaultValueType = getValueType(key);
    if (isTransformProp(key)) return defaultValueType ? defaultValueType.default || 0 : 0;
    else if (scrollKeys.has(key)) return element[key];
    else {
        var domValue = window.getComputedStyle(element, null).getPropertyValue(prefixer(key, true)) || 0;
        return preparseOutput && defaultValueType && defaultValueType.test(domValue) && defaultValueType.parse ? defaultValueType.parse(domValue) : domValue;
    }
}
function onRender(state, _a, changedValues) {
    var element = _a.element, buildStyles = _a.buildStyles, hasCSSVariable = _a.hasCSSVariable;
    Object.assign(element.style, buildStyles(state));
    if (hasCSSVariable) {
        var numChangedValues = changedValues.length;
        for(var i = 0; i < numChangedValues; i++){
            var key = changedValues[i];
            if (key.startsWith("--")) element.style.setProperty(key, state[key]);
        }
    }
    if (changedValues.indexOf(SCROLL_LEFT) !== -1) element[SCROLL_LEFT] = state[SCROLL_LEFT];
    if (changedValues.indexOf(SCROLL_TOP) !== -1) element[SCROLL_TOP] = state[SCROLL_TOP];
}
var cssStyler = /*#__PURE__*/ createStyler({
    onRead: onRead,
    onRender: onRender,
    uncachedValues: scrollKeys
});
function createCssStyler(element, _a) {
    if (_a === void 0) _a = {};
    var enableHardwareAcceleration = _a.enableHardwareAcceleration, allowTransformNone = _a.allowTransformNone, props = (0, _tslib.__rest)(_a, [
        "enableHardwareAcceleration",
        "allowTransformNone"
    ]);
    return cssStyler((0, _tslib.__assign)({
        element: element,
        buildStyles: createStyleBuilder({
            enableHardwareAcceleration: enableHardwareAcceleration,
            allowTransformNone: allowTransformNone
        }),
        preparseOutput: true
    }, props));
}
var camelCaseAttributes = /*#__PURE__*/ new Set([
    "baseFrequency",
    "diffuseConstant",
    "kernelMatrix",
    "kernelUnitLength",
    "keySplines",
    "keyTimes",
    "limitingConeAngle",
    "markerHeight",
    "markerWidth",
    "numOctaves",
    "targetX",
    "targetY",
    "surfaceScale",
    "specularConstant",
    "specularExponent",
    "stdDeviation",
    "tableValues"
]);
var defaultOrigin = 0.5;
var svgAttrsTemplate = function() {
    return {
        style: {}
    };
};
var progressToPixels = function(progress, length) {
    return (0, _styleValueTypes.px).transform(progress * length);
};
var unmeasured = {
    x: 0,
    y: 0,
    width: 0,
    height: 0
};
function calcOrigin(origin, offset, size) {
    return typeof origin === "string" ? origin : (0, _styleValueTypes.px).transform(offset + size * origin);
}
function calculateSVGTransformOrigin(dimensions, originX, originY) {
    return calcOrigin(originX, dimensions.x, dimensions.width) + " " + calcOrigin(originY, dimensions.y, dimensions.height);
}
var svgStyleConfig = {
    enableHardwareAcceleration: false,
    isDashCase: false
};
function buildSVGAttrs(_a, dimensions, totalPathLength, cssBuilder, attrs, isDashCase) {
    if (dimensions === void 0) dimensions = unmeasured;
    if (cssBuilder === void 0) cssBuilder = createStyleBuilder(svgStyleConfig);
    if (attrs === void 0) attrs = svgAttrsTemplate();
    if (isDashCase === void 0) isDashCase = true;
    var attrX = _a.attrX, attrY = _a.attrY, originX = _a.originX, originY = _a.originY, pathLength = _a.pathLength, _b = _a.pathSpacing, pathSpacing = _b === void 0 ? 1 : _b, _c = _a.pathOffset, pathOffset = _c === void 0 ? 0 : _c, state = (0, _tslib.__rest)(_a, [
        "attrX",
        "attrY",
        "originX",
        "originY",
        "pathLength",
        "pathSpacing",
        "pathOffset"
    ]);
    var style = cssBuilder(state);
    for(var key in style)if (key === "transform") attrs.style.transform = style[key];
    else {
        var attrKey = isDashCase && !camelCaseAttributes.has(key) ? camelToDash(key) : key;
        attrs[attrKey] = style[key];
    }
    if (originX !== undefined || originY !== undefined || style.transform) attrs.style.transformOrigin = calculateSVGTransformOrigin(dimensions, originX !== undefined ? originX : defaultOrigin, originY !== undefined ? originY : defaultOrigin);
    if (attrX !== undefined) attrs.x = attrX;
    if (attrY !== undefined) attrs.y = attrY;
    if (totalPathLength !== undefined && pathLength !== undefined) {
        attrs[isDashCase ? "stroke-dashoffset" : "strokeDashoffset"] = progressToPixels(-pathOffset, totalPathLength);
        attrs[isDashCase ? "stroke-dasharray" : "strokeDasharray"] = progressToPixels(pathLength, totalPathLength) + " " + progressToPixels(pathSpacing, totalPathLength);
    }
    return attrs;
}
function createAttrBuilder(dimensions, totalPathLength, isDashCase) {
    if (isDashCase === void 0) isDashCase = true;
    var attrs = svgAttrsTemplate();
    var cssBuilder = createStyleBuilder(svgStyleConfig);
    return function(state) {
        return buildSVGAttrs(state, dimensions, totalPathLength, cssBuilder, attrs, isDashCase);
    };
}
var getDimensions = function(element) {
    return typeof element.getBBox === "function" ? element.getBBox() : element.getBoundingClientRect();
};
var getSVGElementDimensions = function(element) {
    try {
        return getDimensions(element);
    } catch (e) {
        return {
            x: 0,
            y: 0,
            width: 0,
            height: 0
        };
    }
};
var isPath = function(element) {
    return element.tagName === "path";
};
var svgStyler = /*#__PURE__*/ createStyler({
    onRead: function(key, _a) {
        var element = _a.element;
        key = !camelCaseAttributes.has(key) ? camelToDash(key) : key;
        if (!isTransformProp(key)) return element.getAttribute(key);
        else {
            var valueType = getValueType(key);
            return valueType ? valueType.default || 0 : 0;
        }
    },
    onRender: function(state, _a) {
        var element = _a.element, buildAttrs = _a.buildAttrs;
        var attrs = buildAttrs(state);
        for(var key in attrs)if (key === "style") Object.assign(element.style, attrs.style);
        else element.setAttribute(key, attrs[key]);
    }
});
var svg = function(element) {
    var dimensions = getSVGElementDimensions(element);
    var pathLength = isPath(element) && element.getTotalLength ? element.getTotalLength() : undefined;
    return svgStyler({
        element: element,
        buildAttrs: createAttrBuilder(dimensions, pathLength)
    });
};
var viewport = /*#__PURE__*/ createStyler({
    useCache: false,
    onRead: function(key) {
        return key === "scrollTop" ? window.pageYOffset : window.pageXOffset;
    },
    onRender: function(_a) {
        var _b = _a.scrollTop, scrollTop = _b === void 0 ? 0 : _b, _c = _a.scrollLeft, scrollLeft = _c === void 0 ? 0 : _c;
        return window.scrollTo(scrollLeft, scrollTop);
    }
});
var cache = /*#__PURE__*/ new WeakMap();
var isHTMLElement = function(node) {
    return node instanceof HTMLElement || typeof node.click === "function";
};
var isSVGElement = function(node) {
    return node instanceof SVGElement || "ownerSVGElement" in node;
};
var createDOMStyler = function(node, props) {
    var styler;
    if (node === window) styler = viewport(node);
    else if (isHTMLElement(node)) styler = createCssStyler(node, props);
    else if (isSVGElement(node)) styler = svg(node);
    (0, _heyListen.invariant)(styler !== undefined, "No valid node provided. Node must be HTMLElement, SVGElement or window.");
    cache.set(node, styler);
    return styler;
};
var getStyler = function(node, props) {
    return cache.has(node) ? cache.get(node) : createDOMStyler(node, props);
};
function index(nodeOrSelector, props) {
    var node = typeof nodeOrSelector === "string" ? document.querySelector(nodeOrSelector) : nodeOrSelector;
    return getStyler(node, props);
}
exports.default = index;

},{"tslib":"lRdW5","framesync":"fmg1O","style-value-types":"f8zMr","hey-listen":"8yK8Z","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hKjQK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "render", ()=>render);
var _vue = require("vue");
function render(_ctx, _cache, $props, $setup, $data, $options) {
    return (0, _vue.openBlock)(), (0, _vue.createElementBlock)("div", {
        ref: "container",
        class: (0, _vue.normalizeClass)([
            "read-more",
            {
                expand: _ctx.expanded
            }
        ]),
        style: (0, _vue.normalizeStyle)({
            height: _ctx.containerHeight + "px"
        })
    }, [
        (0, _vue.renderSlot)(_ctx.$slots, "default"),
        _ctx.readMoreRequired ? ((0, _vue.openBlock)(), (0, _vue.createElementBlock)("a", {
            key: 0,
            href: "#",
            onClick: _cache[0] || (_cache[0] = (0, _vue.withModifiers)((...args)=>_ctx.toggle && _ctx.toggle(...args), [
                "prevent"
            ])),
            class: "read-more-link"
        }, [
            _ctx.expanded ? ((0, _vue.openBlock)(), (0, _vue.createElementBlock)((0, _vue.Fragment), {
                key: 0
            }, [
                (0, _vue.createTextVNode)((0, _vue.toDisplayString)(_ctx.$t("Read less")), 1 /* TEXT */ )
            ], 2112 /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */ )) : ((0, _vue.openBlock)(), (0, _vue.createElementBlock)((0, _vue.Fragment), {
                key: 1
            }, [
                (0, _vue.createTextVNode)((0, _vue.toDisplayString)(_ctx.$t("Read more")) + "\u2026", 1 /* TEXT */ )
            ], 2112 /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */ ))
        ])) : (0, _vue.createCommentVNode)("v-if", true)
    ], 6 /* CLASS, STYLE */ );
}
if (module.hot) module.hot.accept(()=>{
    __VUE_HMR_RUNTIME__.rerender("336432-hmr", render);
});

},{"vue":"hRjhg","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"71jjO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
let NOOP = ()=>{};
exports.default = (script)=>{};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"350VF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
let script;
let initialize = ()=>{
    script = require("script:./request-membership.vue");
    if (script.__esModule) script = script.default;
    script.render = require("template:./request-membership.vue").render;
    require("custom:./request-membership.vue").default(script);
    script.__scopeId = "data-v-2c3a0b";
    script.__file = "/home/babel/Documents/workspace/udata_workspace/udata-front/theme/js/components/organization/request-membership.vue";
};
initialize();
if (module.hot) {
    script.__hmrId = "2c3a0b-hmr";
    module.hot.accept(()=>{
        setTimeout(()=>{
            initialize();
            if (!__VUE_HMR_RUNTIME__.createRecord("2c3a0b-hmr", script)) __VUE_HMR_RUNTIME__.reload("2c3a0b-hmr", script);
        }, 0);
    });
}
exports.default = script;

},{"script:./request-membership.vue":"kbzfo","template:./request-membership.vue":"8HBYi","custom:./request-membership.vue":"23NLh","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kbzfo":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _vue = require("vue");
exports.default = (0, _vue.defineComponent)({
    props: {
        orga: String
    },
    data () {
        return {
            comment: ""
        };
    },
    methods: {
        JoinOrga: function() {
            this.$auth();
            this.comment = prompt(this.$t("You can add some details here for your membership request"));
            this.$api.post("organizations/" + this.orga + "/membership/", {
                comment: this.comment
            }).then((data)=>{
                alert(this.$t("A request has been sent to the administrators"));
                window.location.reload();
            }).catch((error)=>{
                alert(this.$t("Error while requesting membership"));
                console.error(error);
            });
        }
    }
});

},{"vue":"hRjhg","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8HBYi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "render", ()=>render);
var _vue = require("vue");
const _hoisted_1 = {
    class: "text-decoration-underline"
};
function render(_ctx, _cache, $props, $setup, $data, $options) {
    return (0, _vue.openBlock)(), (0, _vue.createElementBlock)("button", {
        onClick: _cache[0] || (_cache[0] = (0, _vue.withModifiers)((...args)=>_ctx.JoinOrga && _ctx.JoinOrga(...args), [
            "prevent"
        ])),
        class: "nav-link nav-link--no-icon text-decoration-none fr-link fr-link--icon-left fr-icon-arrow-right-s-line"
    }, [
        (0, _vue.createElementVNode)("span", _hoisted_1, (0, _vue.toDisplayString)(_ctx.$t("Ask to join the organization as a producer")), 1 /* TEXT */ )
    ]);
}
if (module.hot) module.hot.accept(()=>{
    __VUE_HMR_RUNTIME__.rerender("2c3a0b-hmr", render);
});

},{"vue":"hRjhg","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"23NLh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
let NOOP = ()=>{};
exports.default = (script)=>{};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dyYSn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
let script;
let initialize = ()=>{
    script = require("script:./resources.vue");
    if (script.__esModule) script = script.default;
    script.render = require("template:./resources.vue").render;
    require("custom:./resources.vue").default(script);
    script.__scopeId = "data-v-1e16fa";
    script.__file = "/home/babel/Documents/workspace/udata_workspace/udata-front/theme/js/components/dataset/resource/resources.vue";
};
initialize();
if (module.hot) {
    script.__hmrId = "1e16fa-hmr";
    module.hot.accept(()=>{
        setTimeout(()=>{
            initialize();
            if (!__VUE_HMR_RUNTIME__.createRecord("1e16fa-hmr", script)) __VUE_HMR_RUNTIME__.reload("1e16fa-hmr", script);
        }, 0);
    });
}
exports.default = script;

},{"script:./resources.vue":"e2Ohq","template:./resources.vue":"1dNpQ","custom:./resources.vue":"9P7SG","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"e2Ohq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _vueI18N = require("vue-i18n");
var _vue = require("vue");
var _loaderVue = require("../loader.vue");
var _loaderVueDefault = parcelHelpers.interopDefault(_loaderVue);
var _paginationVue = require("../../pagination/pagination.vue");
var _paginationVueDefault = parcelHelpers.interopDefault(_paginationVue);
var _resourceVue = require("./resource.vue");
var _resourceVueDefault = parcelHelpers.interopDefault(_resourceVue);
var _config = require("../../../config");
var _configDefault = parcelHelpers.interopDefault(_config);
var _useToast = require("../../../composables/useToast");
var _resources = require("../../../api/resources");
var _eventbus = require("../../../plugins/eventbus");
exports.default = (0, _vue.defineComponent)({
    name: "resources",
    components: {
        Loader: (0, _loaderVueDefault.default),
        Pagination: (0, _paginationVueDefault.default),
        Resource: (0, _resourceVueDefault.default)
    },
    props: {
        canEdit: {
            type: Boolean,
            default: false
        },
        canEditResources: {
            type: Object,
            default: ()=>({})
        },
        datasetId: {
            type: String,
            required: true
        },
        showTitle: {
            type: Boolean,
            default: true
        },
        showTotal: {
            type: Boolean,
            default: true
        },
        type: {
            type: String,
            required: true
        },
        typeLabel: {
            type: String,
            required: true
        }
    },
    setup (props) {
        const { t  } = (0, _vueI18N.useI18n)();
        const toast = (0, _useToast.useToast)();
        const currentPage = (0, _vue.ref)(1);
        const resources = (0, _vue.ref)([]);
        const pageSize = (0, _configDefault.default).resources_default_page_size;
        const totalResults = (0, _vue.ref)(0);
        const loading = (0, _vue.ref)(true);
        const top = (0, _vue.ref)(null);
        const search = (0, _vue.ref)("");
        const isCommunityResources = (0, _vue.ref)(props.type === "community");
        const DONT_SCROLL = false;
        // We can pass the second function parameter "scroll" to true if we want to scroll to the top of the resources section
        // This is useful for pagination buttons
        const loadPage = (page = 1, scroll = false)=>{
            loading.value = true;
            if (scroll && top.value) top.value.scrollIntoView({
                behavior: "smooth"
            });
            let fetchData;
            if (isCommunityResources.value) fetchData = (0, _resources.fetchDatasetCommunityResources)(props.datasetId, page, pageSize);
            else fetchData = (0, _resources.fetchDatasetResources)(props.datasetId, props.type, page, pageSize, search.value);
            return fetchData.then((data)=>{
                if (data.data) {
                    resources.value = data.data;
                    totalResults.value = data.total;
                }
            }).catch(()=>{
                toast.error(t("An error occurred while fetching resources"));
                resources.value = [];
            }).finally(()=>{
                loading.value = false;
            });
        };
        const changePage = (index, scroll = true)=>{
            currentPage.value = index;
            loadPage(index, scroll);
        };
        const getCanEdit = (resource)=>{
            if (props.canEdit) return props.canEdit;
            return props.canEditResources[resource.id];
        };
        (0, _vue.onMounted)(()=>loadPage(currentPage.value));
        if (!isCommunityResources.value) {
            (0, _eventbus.bus).on((0, _eventbus.RESOURCES_SEARCH), (value)=>{
                search.value = value;
                changePage(1, DONT_SCROLL);
            });
            (0, _vue.watch)(totalResults, (count)=>(0, _eventbus.bus).emit((0, _eventbus.RESOURCES_SEARCH_RESULTS_UPDATED), {
                    type: props.type,
                    count
                }));
            (0, _eventbus.bus).on((0, _eventbus.RESOURCES_SEARCH_RESULTS_TOTAL), (total)=>{
                const els = document.querySelectorAll(".resources-count");
                if (els) els.forEach((el)=>el.innerHTML = total);
            });
        }
        return {
            currentPage,
            loading,
            changePage,
            pageSize,
            resources,
            totalResults,
            getCanEdit,
            isCommunityResources,
            top
        };
    }
});

},{"vue-i18n":"92JeB","vue":"hRjhg","../loader.vue":"jXP52","../../pagination/pagination.vue":"1QLN3","./resource.vue":"hJNP6","../../../config":"G7A2j","../../../composables/useToast":"g8lph","../../../api/resources":"7q4Au","../../../plugins/eventbus":"6CYPj","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hJNP6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
let script;
let initialize = ()=>{
    script = require("script:./resource.vue");
    if (script.__esModule) script = script.default;
    script.render = require("template:./resource.vue").render;
    require("custom:./resource.vue").default(script);
    script.__scopeId = "data-v-20b613";
    script.__file = "/home/babel/Documents/workspace/udata_workspace/udata-front/theme/js/components/dataset/resource/resource.vue";
};
initialize();
if (module.hot) {
    script.__hmrId = "20b613-hmr";
    module.hot.accept(()=>{
        setTimeout(()=>{
            initialize();
            if (!__VUE_HMR_RUNTIME__.createRecord("20b613-hmr", script)) __VUE_HMR_RUNTIME__.reload("20b613-hmr", script);
        }, 0);
    });
}
exports.default = script;

},{"script:./resource.vue":"l1s72","template:./resource.vue":"iyqpr","custom:./resource.vue":"kYM44","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"l1s72":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _vue = require("vue");
var _schemaButtonVue = require("./schema-button.vue");
var _schemaButtonVueDefault = parcelHelpers.interopDefault(_schemaButtonVue);
var _useOwnerName = require("../../../composables/useOwnerName");
var _useOwnerNameDefault = parcelHelpers.interopDefault(_useOwnerName);
var _useResourceImage = require("../../../composables/useResourceImage");
var _useResourceImageDefault = parcelHelpers.interopDefault(_useResourceImage);
var _editButtonVue = require("./edit-button.vue");
var _editButtonVueDefault = parcelHelpers.interopDefault(_editButtonVue);
var _previewSvg = require("bundle-text:svg/preview.svg");
var _previewSvgDefault = parcelHelpers.interopDefault(_previewSvg);
exports.default = (0, _vue.defineComponent)({
    components: {
        EditButton: (0, _editButtonVueDefault.default),
        SchemaButton: (0, _schemaButtonVueDefault.default)
    },
    inheritAttrs: false,
    props: {
        datasetId: {
            type: String,
            required: true
        },
        isCommunityResource: {
            type: Boolean,
            default: false
        },
        resource: {
            type: Object,
            required: true
        },
        canEdit: {
            type: Boolean,
            default: false
        },
        typeLabel: {
            type: String,
            required: true
        }
    },
    setup (props) {
        const owner = (0, _useOwnerNameDefault.default)(props.resource);
        const resourceImage = (0, _useResourceImageDefault.default)(props.resource);
        const filters = (0, _vue.inject)("$filters");
        const showModal = (0, _vue.inject)("$showModal");
        const expanded = (0, _vue.ref)(false);
        const expand = ()=>expanded.value = !expanded.value;
        const availabilityChecked = (0, _vue.computed)(()=>props.resource.extras && props.resource.extras["check:status"]);
        const lastUpdate = (0, _vue.computed)(()=>props.resource.published > props.resource.last_modified ? props.resource.published : props.resource.last_modified);
        const unavailable = (0, _vue.computed)(()=>availabilityChecked.value && availabilityChecked.value >= 400);
        const showSchemaButton = (0, _vue.computed)(()=>props.resource.schema && props.resource.schema.name);
        return {
            owner,
            resourceImage,
            filters,
            showModal,
            expanded,
            expand,
            availabilityChecked,
            lastUpdate,
            unavailable,
            showSchemaButton,
            preview: (0, _previewSvgDefault.default)
        };
    }
});

},{"vue":"hRjhg","./schema-button.vue":"9mnNX","../../../composables/useOwnerName":"lARlQ","../../../composables/useResourceImage":"iUqXI","./edit-button.vue":"iUgOK","bundle-text:svg/preview.svg":"lNrM6","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9mnNX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
let script;
let initialize = ()=>{
    script = require("script:./schema-button.vue");
    if (script.__esModule) script = script.default;
    script.render = require("template:./schema-button.vue").render;
    require("custom:./schema-button.vue").default(script);
    script.__scopeId = "data-v-92ac9b";
    script.__file = "/home/babel/Documents/workspace/udata_workspace/udata-front/theme/js/components/dataset/resource/schema-button.vue";
};
initialize();
if (module.hot) {
    script.__hmrId = "92ac9b-hmr";
    module.hot.accept(()=>{
        setTimeout(()=>{
            initialize();
            if (!__VUE_HMR_RUNTIME__.createRecord("92ac9b-hmr", script)) __VUE_HMR_RUNTIME__.reload("92ac9b-hmr", script);
        }, 0);
    });
}
exports.default = script;

},{"script:./schema-button.vue":"1HmQe","template:./schema-button.vue":"2G4o3","custom:./schema-button.vue":"hHbXZ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1HmQe":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _vue = require("vue");
var _useSchema = require("../../../composables/useSchema");
var _useSchemaDefault = parcelHelpers.interopDefault(_useSchema);
var _triangleSvg = require("bundle-text:svg/triangle.svg");
var _triangleSvgDefault = parcelHelpers.interopDefault(_triangleSvg);
exports.default = (0, _vue.defineComponent)({
    props: {
        resource: {
            type: Object,
            required: true
        }
    },
    setup (props) {
        const { authorizeValidation , documentationUrl , loading , validationUrl  } = (0, _useSchemaDefault.default)(props.resource);
        const showModal = (0, _vue.inject)("$showModal");
        const showSchemaModal = ()=>showModal("schema", {
                resourceSchema: props.resource.schema,
                documentationUrl: documentationUrl.value,
                validationUrl: validationUrl.value,
                authorizeValidation: authorizeValidation.value
            });
        return {
            loading,
            authorizeValidation,
            documentationUrl,
            validationUrl,
            showSchemaModal,
            triangle: (0, _triangleSvgDefault.default)
        };
    }
});

},{"vue":"hRjhg","../../../composables/useSchema":"8GKWQ","bundle-text:svg/triangle.svg":"8V3sS","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8GKWQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _vueI18N = require("vue-i18n");
var _vue = require("vue");
var _schemas = require("../api/schemas");
var _schemasDefault = parcelHelpers.interopDefault(_schemas);
var _config = require("../config");
var _configDefault = parcelHelpers.interopDefault(_config);
var _useToast = require("./useToast");
function useSchema(resource) {
    const { t  } = (0, _vueI18N.useI18n)();
    const toast = (0, _useToast.useToast)();
    /** @type {Ref<boolean>} */ const loading = (0, _vue.ref)(true);
    /** @type {Ref<Array<import("../api/schemas").Schema>>} */ const schemas = (0, _vue.ref)([]);
    (0, _schemasDefault.default)().then((catalog)=>schemas.value = catalog).catch(()=>{
        toast.error(t("An error occurred while fetching schemas"));
    }).finally(()=>loading.value = false);
    /** @type {ComputedRef<import("../api/schemas").Schema | undefined>} */ const schema1 = (0, _vue.computed)(()=>schemas.value.find((schema)=>schema.name === resource.schema.name));
    const authorizeValidation = (0, _vue.computed)(()=>!!schema1.value && schema1.value.schema_type === "tableschema");
    const documentationUrl = (0, _vue.computed)(()=>`https://schema.data.gouv.fr/${resource.schema.name}/latest.html`);
    const validationUrl = (0, _vue.computed)(()=>{
        if (!authorizeValidation) return null;
        /** @type {object} */ let schemaPath = {
            "schema_name": `schema-datagouvpt.${resource.schema.name}`
        };
        if (resource.schema.version) {
            const versionUrl = schema1.value?.versions.find((version)=>version.version_name === resource.schema.version)?.schema_url;
            schemaPath = {
                "schema_url": versionUrl
            };
        }
        const query = new URLSearchParams({
            "input": "url",
            "url": resource.url,
            ...schemaPath
        }).toString();
        return `${(0, _configDefault.default).schema_validata_url}/table-schema?${query}`;
    });
    return {
        authorizeValidation,
        documentationUrl,
        loading,
        validationUrl
    };
}
exports.default = useSchema;

},{"vue-i18n":"92JeB","vue":"hRjhg","../api/schemas":"4Vtbf","../config":"G7A2j","./useToast":"g8lph","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8V3sS":[function(require,module,exports) {
module.exports = "<svg aria-hidden=\"true\" width=\"11\" height=\"10\" viewBox=\"0 0 11 10\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M10.2966 8.84766L1.66382 0.214844C1.5271 0.078125 1.35132 0 1.19507 0C0.843506 0 0.511475 0.292969 0.511475 0.703125V9.31641C0.511475 9.70703 0.804443 10 1.19507 10H9.80835C10.4333 10 10.7263 9.27734 10.2966 8.84766ZM1.44897 9.0625V1.30859L9.20288 9.0625H1.44897ZM3.01147 7.4C3.01147 7.45523 3.05625 7.5 3.11147 7.5H5.19193C5.28102 7.5 5.32564 7.39229 5.26264 7.32929L3.18219 5.24884C3.11919 5.18584 3.01147 5.23046 3.01147 5.31955V7.4Z\" fill=\"#f39200\"></path>\n</svg>\n";

},{}],"2G4o3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "render", ()=>render);
var _vue = require("vue");
const _hoisted_1 = [
    "disabled"
];
const _hoisted_2 = [
    "innerHTML"
];
function render(_ctx, _cache, $props, $setup, $data, $options) {
    return (0, _vue.openBlock)(), (0, _vue.createElementBlock)("button", {
        class: "fr-btn fr-btn--secondary fr-icon-svg fr-icon--sm fr-btn--icon-left fr-btn--sm",
        disabled: _ctx.loading,
        onClick: _cache[0] || (_cache[0] = (0, _vue.withModifiers)((...args)=>_ctx.showSchemaModal && _ctx.showSchemaModal(...args), [
            "prevent"
        ]))
    }, [
        (0, _vue.createElementVNode)("span", {
            class: "fr-grid-row fr-mr-1v",
            innerHTML: _ctx.triangle
        }, null, 8 /* PROPS */ , _hoisted_2),
        (0, _vue.createTextVNode)(" " + (0, _vue.toDisplayString)(_ctx.$t("See schema")), 1 /* TEXT */ )
    ], 8 /* PROPS */ , _hoisted_1);
}
if (module.hot) module.hot.accept(()=>{
    __VUE_HMR_RUNTIME__.rerender("92ac9b-hmr", render);
});

},{"vue":"hRjhg","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hHbXZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
let NOOP = ()=>{};
exports.default = (script)=>{};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iUqXI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _codeSvg = require("bundle-text:svg/resources/code.svg");
var _codeSvgDefault = parcelHelpers.interopDefault(_codeSvg);
var _archiveSvg = require("bundle-text:svg/resources/archive.svg");
var _archiveSvgDefault = parcelHelpers.interopDefault(_archiveSvg);
var _documentationSvg = require("bundle-text:svg/resources/documentation.svg");
var _documentationSvgDefault = parcelHelpers.interopDefault(_documentationSvg);
var _fileSvg = require("bundle-text:svg/resources/file.svg");
var _fileSvgDefault = parcelHelpers.interopDefault(_fileSvg);
var _linkSvg = require("bundle-text:svg/resources/link.svg");
var _linkSvgDefault = parcelHelpers.interopDefault(_linkSvg);
var _tableSvg = require("bundle-text:svg/resources/table.svg");
var _tableSvgDefault = parcelHelpers.interopDefault(_tableSvg);
function useResourceImage(resource) {
    switch(resource.format?.trim()?.toLowerCase()){
        case "txt":
        case "pdf":
        case "rtf":
        case "odt":
        case "doc":
        case "docx":
        case "epub":
            return 0, _documentationSvgDefault.default;
        case "json":
        case "sql":
        case "xml":
        case "xsd":
        case "shp":
        case "kml":
        case "kmz":
        case "gpx":
        case "shx":
        case "ovr":
        case "geojson":
        case "gpkg":
        case "grib2":
        case "dbf":
        case "prj":
        case "sqlite":
        case "db":
        case "sbn":
        case "sbx":
        case "cpg":
        case "lyr":
        case "owl":
        case "dxf":
        case "ics":
        case "rdf":
        case "ttl":
        case "n3":
            return 0, _codeSvgDefault.default;
        case "tar":
        case "gz":
        case "tgz":
        case "rar":
        case "zip":
        case "7z":
        case "xz":
        case "bz2":
            return 0, _archiveSvgDefault.default;
        case "url":
            return 0, _linkSvgDefault.default;
        case "csv":
        case "ods":
        case "xls":
        case "xlsx":
            return 0, _tableSvgDefault.default;
        default:
            return 0, _fileSvgDefault.default;
    }
}
exports.default = useResourceImage;

},{"bundle-text:svg/resources/code.svg":"9C8mC","bundle-text:svg/resources/archive.svg":"depqk","bundle-text:svg/resources/documentation.svg":"i65wB","bundle-text:svg/resources/file.svg":"jgt4Y","bundle-text:svg/resources/link.svg":"8QdA8","bundle-text:svg/resources/table.svg":"3GIHJ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9C8mC":[function(require,module,exports) {
module.exports = "<svg width=\"100%\" height=\"100%\" viewBox=\"0 0 11 14\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xml:space=\"preserve\" style=\"fill-rule: evenodd; clip-rule: evenodd; stroke-linejoin: round; stroke-miterlimit: 2\"><rect x=\"0\" y=\"0\" width=\"10.5\" height=\"14\" style=\"fill: none\"></rect><path d=\"M4.074,9.57l0,-0.027l-0.902,-0.793l0.902,-0.766c0.11,-0.109 0.11,-0.246 0.028,-0.355l-0.493,-0.52c-0.082,-0.082 -0.246,-0.082 -0.328,0l-1.586,1.477c-0.082,0.109 -0.082,0.246 0,0.355l1.586,1.477c0.055,0.027 0.11,0.055 0.164,0.055c0.055,-0 0.137,-0.028 0.164,-0.055l0.493,-0.52c0.082,-0.109 0.082,-0.246 -0.028,-0.328Zm6.016,-6.89l-2.27,-2.297c-0.246,-0.246 -0.601,-0.383 -0.929,-0.383l-5.579,-0c-0.738,-0 -1.312,0.602 -1.312,1.312l-0,11.375c-0,0.739 0.574,1.313 1.312,1.313l7.876,-0c0.71,-0 1.312,-0.574 1.312,-1.313l0,-9.078c0,-0.328 -0.164,-0.683 -0.41,-0.929Zm-3.09,-1.258l2.078,2.078l-2.078,-0l0,-2.078Zm2.188,11.265l-7.876,0l0,-11.375l4.376,0l-0.001,2.844c0,0.383 0.274,0.656 0.657,0.656l2.843,0l0,7.875Zm-3.472,-6.835c-0.137,-0.028 -0.246,0.054 -0.301,0.164l-1.477,5.168c-0.054,0.109 0.028,0.246 0.165,0.273l0.656,0.219c0.136,0.027 0.273,-0.055 0.301,-0.164l1.503,-5.168c0.028,-0.11 -0.054,-0.246 -0.164,-0.301l-0.683,-0.191Zm0.683,2.105l0,0.027l0.903,0.766l-0.903,0.793c-0.109,0.109 -0.109,0.246 -0.027,0.355l0.492,0.52c0.082,0.082 0.246,0.082 0.328,-0l1.586,-1.477c0.082,-0.109 0.082,-0.273 0,-0.355l-1.586,-1.477c-0.082,-0.082 -0.246,-0.082 -0.328,0l-0.492,0.52c-0.082,0.082 -0.082,0.246 0.027,0.328Z\" style=\"fill: #3a3a3a; fill-rule: nonzero\"></path></svg>";

},{}],"depqk":[function(require,module,exports) {
module.exports = "<svg width=\"100%\" height=\"100%\" viewBox=\"0 0 14 13\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xml:space=\"preserve\" style=\"fill-rule: evenodd; clip-rule: evenodd; stroke-linejoin: round; stroke-miterlimit: 2\"><rect x=\"0\" y=\"0\" width=\"14\" height=\"12.25\" style=\"fill: none\"></rect><path d=\"M12.688,0l-11.376,0c-0.738,0 -1.312,0.602 -1.312,1.313l-0,2.187c-0,0.246 0.191,0.438 0.437,0.438l0.438,-0.001l-0,7.438c-0,0.492 0.383,0.875 0.875,0.875l10.5,0c0.465,0 0.875,-0.383 0.875,-0.875l-0,-7.438l0.437,0c0.219,0 0.438,-0.191 0.438,-0.437l-0,-2.188c-0,-0.71 -0.602,-1.312 -1.313,-1.312Zm-0.875,10.938l-9.625,-0.001l0,-7l9.625,0l0,7Zm0.875,-8.312l-11.375,-0l0,-1.313l11.375,0l0,1.313Zm-7.109,3.937l2.844,0c0.164,0 0.328,-0.136 0.328,-0.328l0,-0.656c0,-0.164 -0.164,-0.328 -0.328,-0.328l-2.844,-0c-0.191,-0 -0.328,0.164 -0.328,0.328l-0,0.656c-0,0.192 0.137,0.328 0.328,0.328Z\" style=\"fill: #3a3a3a; fill-rule: nonzero\"></path></svg>";

},{}],"i65wB":[function(require,module,exports) {
module.exports = "<svg width=\"100%\" height=\"100%\" viewBox=\"0 0 13 14\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xml:space=\"preserve\" style=\"fill-rule: evenodd; clip-rule: evenodd; stroke-linejoin: round; stroke-miterlimit: 2\"><rect x=\"0\" y=\"0\" width=\"12.25\" height=\"14\" style=\"fill: none\"></rect><path d=\"M3.5,4.156c0,0.137 0.082,0.219 0.219,0.219l5.687,0c0.11,0 0.219,-0.082 0.219,-0.219l0,-0.875c0,-0.109 -0.109,-0.218 -0.219,-0.218l-5.687,-0c-0.137,-0 -0.219,0.109 -0.219,0.218l-0,0.875Zm0.219,2.407l5.687,-0c0.11,-0 0.219,-0.083 0.219,-0.219l0,-0.875c0,-0.11 -0.109,-0.219 -0.219,-0.219l-5.687,0c-0.137,0 -0.219,0.109 -0.219,0.219l-0,0.875c-0,0.136 0.082,0.219 0.219,0.219Zm8.175,4.375c0.192,-0.028 0.356,-0.219 0.356,-0.438l-0,-10.062c-0,-0.219 -0.219,-0.438 -0.438,-0.438l-9.625,0c-1.23,0 -2.187,0.984 -2.187,2.188l-0,9.625c-0,1.23 0.957,2.187 2.187,2.187l9.625,0c0.219,0 0.438,-0.191 0.438,-0.437l-0,-0.438c-0,-0.191 -0.164,-0.383 -0.356,-0.41c-0.136,-0.356 -0.136,-1.422 0,-1.777Zm-1.121,-0c-0.082,0.492 -0.082,1.285 0,1.75l-8.586,-0c-0.492,-0 -0.875,-0.383 -0.875,-0.875c0,-0.465 0.383,-0.875 0.875,-0.875l8.586,-0Zm0.164,-9.625l0,8.312l-8.75,0c-0.328,0 -0.628,0.082 -0.875,0.191l0,-7.628c0,-0.465 0.383,-0.875 0.875,-0.875l8.75,-0Z\" style=\"fill: #3a3a3a; fill-rule: nonzero\"></path></svg>";

},{}],"jgt4Y":[function(require,module,exports) {
module.exports = "<svg width=\"100%\" height=\"100%\" viewBox=\"0 0 11 14\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xml:space=\"preserve\" style=\"fill-rule: evenodd; clip-rule: evenodd; stroke-linejoin: round; stroke-miterlimit: 2\"><rect x=\"0\" y=\"0\" width=\"10.5\" height=\"14\" style=\"fill: none\"></rect><path d=\"M10.09,2.68l-2.27,-2.297c-0.246,-0.246 -0.601,-0.383 -0.929,-0.383l-5.579,0c-0.738,0 -1.312,0.602 -1.312,1.313l-0,11.375c-0,0.738 0.574,1.312 1.312,1.312l7.876,0c0.71,0 1.312,-0.574 1.312,-1.313l0,-9.078c0,-0.328 -0.164,-0.683 -0.41,-0.929Zm-1.012,0.82l-2.078,0l0,-2.078l2.078,2.078Zm-7.765,9.188l-0,-11.376l4.375,0l-0,2.844c-0,0.383 0.273,0.656 0.656,0.656l2.844,0l-0,7.876l-7.875,-0.001Z\" style=\"fill: #3a3a3a; fill-rule: nonzero\"></path></svg>";

},{}],"8QdA8":[function(require,module,exports) {
module.exports = "<svg width=\"100%\" height=\"100%\" viewBox=\"0 0 14 14\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xml:space=\"preserve\" style=\"fill-rule: evenodd; clip-rule: evenodd; stroke-linejoin: round; stroke-miterlimit: 2\"><rect x=\"0\" y=\"0\" width=\"13.986\" height=\"13.986\" style=\"fill: none\"></rect><path d=\"M8.593,5.394c-0.301,-0.301 -0.629,-0.52 -0.985,-0.711c-0.136,-0.055 -0.273,-0.028 -0.382,0.082l-0.11,0.109c-0.246,0.219 -0.383,0.52 -0.41,0.82c-0.027,0.137 0.055,0.274 0.164,0.356c0.192,0.082 0.492,0.273 0.629,0.437c0.902,0.903 0.902,2.352 0,3.254l-2.051,2.051c-0.902,0.902 -2.351,0.902 -3.254,0c-0.902,-0.902 -0.902,-2.352 0,-3.254l1.258,-1.258c0.082,-0.082 0.11,-0.191 0.082,-0.3c-0.054,-0.274 -0.109,-0.739 -0.137,-1.04c0,-0.273 -0.355,-0.41 -0.546,-0.218c-0.329,0.328 -0.848,0.847 -1.723,1.722c-1.504,1.504 -1.504,3.938 -0,5.414c1.477,1.504 3.91,1.504 5.414,0c2.242,-2.242 2.133,-2.132 2.297,-2.351c1.23,-1.477 1.148,-3.719 -0.246,-5.113Zm4.265,-4.266c-1.476,-1.504 -3.91,-1.504 -5.414,-0c-2.242,2.242 -2.132,2.133 -2.297,2.352c-1.23,1.476 -1.148,3.718 0.247,5.113c0.3,0.301 0.628,0.519 0.984,0.711c0.137,0.054 0.273,0.027 0.383,-0.082l0.109,-0.11c0.246,-0.218 0.383,-0.519 0.41,-0.82c0.028,-0.137 -0.054,-0.273 -0.164,-0.355c-0.191,-0.082 -0.492,-0.274 -0.629,-0.438c-0.902,-0.902 -0.902,-2.351 0,-3.254l2.051,-2.051c0.902,-0.902 2.352,-0.902 3.254,0c0.902,0.903 0.902,2.352 0,3.254l-1.258,1.258c-0.082,0.082 -0.109,0.192 -0.082,0.301c0.055,0.273 0.11,0.738 0.137,1.039c-0,0.273 0.355,0.41 0.547,0.219c0.328,-0.328 0.847,-0.848 1.722,-1.723c1.504,-1.504 1.504,-3.937 0,-5.414Z\" style=\"fill: #3a3a3a; fill-rule: nonzero\"></path></svg>";

},{}],"3GIHJ":[function(require,module,exports) {
module.exports = "<svg width=\"100%\" height=\"100%\" viewBox=\"0 0 14 13\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xml:space=\"preserve\" style=\"fill-rule: evenodd; clip-rule: evenodd; stroke-linejoin: round; stroke-miterlimit: 2\"><rect x=\"0\" y=\"0\" width=\"14\" height=\"12.25\" style=\"fill: none\"></rect><path d=\"M12.688,0l-11.376,0c-0.738,0 -1.312,0.602 -1.312,1.313l-0,9.625c-0,0.738 0.574,1.312 1.312,1.312l11.375,0c0.711,0 1.313,-0.574 1.313,-1.313l-0,-9.625c-0,-0.71 -0.602,-1.312 -1.313,-1.312Zm-6.343,10.938l-4.867,-0.001c-0.11,0 -0.165,-0.054 -0.165,-0.164l0,-3.554l5.032,-0l-0,3.718Zm-0,-5.031l-5.032,0l0,-3.719l5.032,0l-0,3.719Zm6.179,5.031l-4.867,0l0,-3.718l5.031,-0l0,3.554c0,0.11 -0.082,0.164 -0.164,0.164Zm0.164,-5.031l-5.031,0l0,-3.719l5.031,0l0,3.719Z\" style=\"fill: #3a3a3a; fill-rule: nonzero\"></path></svg>";

},{}],"iUgOK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
let script;
let initialize = ()=>{
    script = require("script:./edit-button.vue");
    if (script.__esModule) script = script.default;
    script.render = require("template:./edit-button.vue").render;
    require("custom:./edit-button.vue").default(script);
    script.__scopeId = "data-v-5503ce";
    script.__file = "/home/babel/Documents/workspace/udata_workspace/udata-front/theme/js/components/dataset/resource/edit-button.vue";
};
initialize();
if (module.hot) {
    script.__hmrId = "5503ce-hmr";
    module.hot.accept(()=>{
        setTimeout(()=>{
            initialize();
            if (!__VUE_HMR_RUNTIME__.createRecord("5503ce-hmr", script)) __VUE_HMR_RUNTIME__.reload("5503ce-hmr", script);
        }, 0);
    });
}
exports.default = script;

},{"script:./edit-button.vue":"1yoPd","template:./edit-button.vue":"50S91","custom:./edit-button.vue":"ayn9Q","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1yoPd":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _editSvg = require("bundle-text:svg/edit.svg");
var _editSvgDefault = parcelHelpers.interopDefault(_editSvg);
var _config = require("../../../config");
var _configDefault = parcelHelpers.interopDefault(_config);
exports.default = {
    name: "edit-button",
    props: {
        datasetId: {
            type: String,
            required: true
        },
        isCommunityResource: {
            type: Boolean,
            default: false
        },
        resourceId: {
            type: String,
            required: true
        }
    },
    setup (props) {
        const resourceType = props.isCommunityResource ? "community-resource" : "resource";
        const adminUrl = `${(0, _configDefault.default).admin_root}dataset/${props.datasetId}/${resourceType}/${props.resourceId}`;
        return {
            adminUrl,
            edit: (0, _editSvgDefault.default)
        };
    }
};

},{"bundle-text:svg/edit.svg":"7U5ay","../../../config":"G7A2j","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7U5ay":[function(require,module,exports) {
module.exports = "<svg aria-hidden=\"true\" width=\"15\" height=\"15\" viewBox=\"0 0 15 15\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M13.9258 2.77344L12.4492 1.29688C11.7383 0.585938 10.5625 0.585938 9.85156 1.29688L1.15625 9.9375L0.5 14.0117C0.417969 14.4492 0.800781 14.832 1.23828 14.75L5.3125 14.0938L13.9531 5.39844C14.6641 4.6875 14.6641 3.51172 13.9258 2.77344ZM3.78125 9.00781L8.42969 4.38672L10.8633 6.82031L6.24219 11.4688V10.3203H4.92969V9.00781H3.78125ZM2.74219 13.3008L1.94922 12.5078L2.30469 10.5117L2.79688 9.99219H3.94531V11.3047H5.25781V12.4531L4.73828 12.9453L2.74219 13.3008ZM13.1055 4.55078L11.7656 5.89062L9.35938 3.48438L10.6992 2.14453C10.9453 1.89844 11.3555 1.89844 11.6016 2.14453L13.0781 3.62109C13.3516 3.89453 13.3516 4.30469 13.1055 4.55078Z\" fill=\"#3A3A3A\"></path>\n</svg>\n";

},{}],"50S91":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "render", ()=>render);
var _vue = require("vue");
const _hoisted_1 = [
    "href",
    "title",
    "innerHTML"
];
function render(_ctx, _cache, $props, $setup, $data, $options) {
    return (0, _vue.openBlock)(), (0, _vue.createElementBlock)("a", {
        href: $setup.adminUrl,
        title: _ctx.$t("Edit resource"),
        class: "fr-btn fr-btn--secondary fr-btn--secondary-grey-500 fr-btn--sm fr-icon-svg",
        innerHTML: $setup.edit
    }, null, 8 /* PROPS */ , _hoisted_1);
}
if (module.hot) module.hot.accept(()=>{
    __VUE_HMR_RUNTIME__.rerender("5503ce-hmr", render);
});

},{"vue":"hRjhg","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ayn9Q":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
let NOOP = ()=>{};
exports.default = (script)=>{};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lNrM6":[function(require,module,exports) {
module.exports = "<svg aria-hidden=\"true\" width=\"19\" height=\"12\" viewBox=\"0 0 19 12\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M9.5 7C10.5938 7 11.5 6.125 11.5 5C11.5 3.90625 10.5938 3 9.5 3C9.46875 3 9.4375 3.03125 9.40625 3.03125C9.4375 3.15625 9.5 3.375 9.5 3.53125C9.5 4.34375 8.8125 5.03125 8 5.03125C7.84375 5.03125 7.625 4.96875 7.5 4.9375C7.5 4.96875 7.5 5 7.5 5C7.5 6.125 8.375 7 9.5 7ZM18.375 5.5625C16.6875 2.25 13.3125 0 9.5 0C5.65625 0 2.28125 2.25 0.59375 5.5625C0.53125 5.6875 0.5 5.875 0.5 6.03125C0.5 6.15625 0.53125 6.34375 0.59375 6.46875C2.28125 9.78125 5.65625 12 9.5 12C13.3125 12 16.6875 9.78125 18.375 6.46875C18.4375 6.34375 18.4688 6.15625 18.4688 6C18.4688 5.875 18.4375 5.6875 18.375 5.5625ZM9.5 1C11.6875 1 13.5 2.8125 13.5 5C13.5 7.21875 11.6875 9 9.5 9C7.28125 9 5.5 7.21875 5.5 5C5.5 2.8125 7.28125 1.03125 9.5 1ZM9.5 11C6.125 11 3.0625 9.09375 1.5 6C2.25 4.53125 4.0625 2.71875 5.53125 1.96875C4.875 2.8125 4.5 3.875 4.5 5C4.5 7.78125 6.71875 10 9.5 10C12.25 10 14.5 7.78125 14.5 5C14.5 3.875 14.0938 2.8125 13.4375 1.96875C14.9062 2.71875 16.7188 4.53125 17.5 6C15.9062 9.09375 12.8438 11 9.5 11Z\" fill=\"#161616\"></path>\n</svg>\n";

},{}],"iyqpr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "render", ()=>render);
var _vue = require("vue");
const _hoisted_1 = {
    class: "border-bottom"
};
const _hoisted_2 = [
    "id"
];
const _hoisted_3 = {
    class: "fr-col-auto fr-grid-row fr-grid-row--top no-wrap"
};
const _hoisted_4 = [
    "innerHTML"
];
const _hoisted_5 = {
    class: "fr-col-auto"
};
const _hoisted_6 = [
    "id"
];
const _hoisted_7 = {
    class: "fr-text--sm fr-mb-0 text-grey-380"
};
const _hoisted_8 = [
    "href"
];
const _hoisted_9 = /*#__PURE__*/ (0, _vue.createTextVNode)(" \u2014 ");
const _hoisted_10 = /*#__PURE__*/ (0, _vue.createTextVNode)(" \u2014 ");
const _hoisted_11 = {
    class: "fr-col-auto fr-ml-6w fr-ml-md-0"
};
const _hoisted_12 = {
    class: "fr-grid-row fr-grid-row--middle no-wrap wrap-md"
};
const _hoisted_13 = {
    key: 0,
    class: "text-default-error fr-mr-5w"
};
const _hoisted_14 = {
    key: 1,
    class: "fr-col-auto fr-mr-5w"
};
const _hoisted_15 = {
    key: 2,
    class: "fr-col-auto fr-mr-3v"
};
const _hoisted_16 = {
    key: 3,
    class: "fr-col-auto fr-mr-3v"
};
const _hoisted_17 = [
    "title",
    "innerHTML"
];
const _hoisted_18 = {
    key: 4,
    class: "fr-col-auto"
};
const _hoisted_19 = [
    "href",
    "title"
];
const _hoisted_20 = {
    key: 5,
    class: "fr-col-auto"
};
const _hoisted_21 = [
    "href",
    "title"
];
const _hoisted_22 = {
    class: "fr-col-auto fr-ml-7v"
};
const _hoisted_23 = [
    "aria-expanded",
    "title",
    "aria-controls"
];
const _hoisted_24 = [
    "aria-labelledby",
    "hidden",
    "id"
];
const _hoisted_25 = [
    "innerHTML"
];
const _hoisted_26 = {
    class: "fr-grid-row fr-grid-row--gutters fr-mb-2w"
};
const _hoisted_27 = {
    class: "fr-col-4 fr-col-md-3 fr-col-lg-2"
};
const _hoisted_28 = {
    class: "fr-ml-0 fr-col-8 fr-col-md-9 fr-col-lg-10 text-overflow-ellipsis"
};
const _hoisted_29 = [
    "href"
];
const _hoisted_30 = {
    class: "fr-grid-row fr-grid-row--gutters fr-mb-2w"
};
const _hoisted_31 = {
    class: "fr-col-4 fr-col-md-3 fr-col-lg-2"
};
const _hoisted_32 = {
    class: "fr-ml-0 fr-col-8 fr-col-md-9 fr-col-lg-10 text-overflow-ellipsis"
};
const _hoisted_33 = [
    "href"
];
const _hoisted_34 = {
    class: "fr-grid-row fr-grid-row--gutters fr-mb-2w"
};
const _hoisted_35 = {
    class: "fr-col-4 fr-col-md-3 fr-col-lg-2"
};
const _hoisted_36 = {
    class: "fr-ml-0 fr-col-8 fr-col-md-9 fr-col-lg-10"
};
const _hoisted_37 = {
    class: "fr-grid-row fr-grid-row--gutters fr-mb-2w"
};
const _hoisted_38 = {
    class: "fr-col-4 fr-col-md-3 fr-col-lg-2"
};
const _hoisted_39 = {
    class: "fr-ml-0 fr-col-8 fr-col-md-9 fr-col-lg-10"
};
const _hoisted_40 = {
    key: 0,
    class: "fr-grid-row fr-grid-row--gutters fr-mb-2w"
};
const _hoisted_41 = {
    class: "fr-col-4 fr-col-md-3 fr-col-lg-2"
};
const _hoisted_42 = {
    class: "fr-ml-0 fr-col-8 fr-col-md-9 fr-col-lg-10"
};
const _hoisted_43 = {
    class: "fr-grid-row fr-grid-row--gutters fr-mb-2w"
};
const _hoisted_44 = {
    class: "fr-col-4 fr-col-md-3 fr-col-lg-2"
};
const _hoisted_45 = {
    class: "fr-ml-0 fr-col-8 fr-col-md-9 fr-col-lg-10"
};
const _hoisted_46 = {
    class: "fr-grid-row fr-grid-row--gutters fr-mb-2w"
};
const _hoisted_47 = {
    class: "fr-col-4 fr-col-md-3 fr-col-lg-2"
};
const _hoisted_48 = {
    class: "fr-ml-0 fr-col-8 fr-col-md-9 fr-col-lg-10"
};
const _hoisted_49 = {
    class: "fr-grid-row fr-grid-row--gutters"
};
const _hoisted_50 = {
    class: "fr-col-4 fr-col-md-3 fr-col-lg-2"
};
const _hoisted_51 = {
    class: "fr-ml-0 fr-col-8 fr-col-md-9 fr-col-lg-10"
};
function render(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_schema_button = (0, _vue.resolveComponent)("schema-button");
    const _component_EditButton = (0, _vue.resolveComponent)("EditButton");
    return (0, _vue.openBlock)(), (0, _vue.createElementBlock)("article", _hoisted_1, [
        (0, _vue.createElementVNode)("header", {
            class: "fr-py-2w fr-grid-row fr-grid-row--gutters fr-grid-row--middle no-wrap wrap-md justify-between",
            id: "resource-" + _ctx.resource.id + "-header"
        }, [
            (0, _vue.createElementVNode)("div", _hoisted_3, [
                (0, _vue.createElementVNode)("div", {
                    class: "fr-col-auto fr-mx-2w fr-icon-svg fr-icon--sm",
                    innerHTML: _ctx.resourceImage
                }, null, 8 /* PROPS */ , _hoisted_4),
                (0, _vue.createElementVNode)("div", _hoisted_5, [
                    (0, _vue.createElementVNode)("h4", {
                        class: "fr-mb-1v",
                        id: "resource-" + _ctx.resource.id + "-title"
                    }, (0, _vue.toDisplayString)(_ctx.resource.title || _ctx.$t("Nameless resource")), 9 /* TEXT, PROPS */ , _hoisted_6),
                    (0, _vue.createElementVNode)("div", _hoisted_7, [
                        _ctx.resource.owner ? ((0, _vue.openBlock)(), (0, _vue.createElementBlock)((0, _vue.Fragment), {
                            key: 0
                        }, [
                            (0, _vue.createTextVNode)((0, _vue.toDisplayString)(_ctx.$t("From")) + " " + (0, _vue.toDisplayString)(_ctx.owner) + " \u2014 ", 1 /* TEXT */ )
                        ], 2112 /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */ )) : _ctx.resource.organization ? ((0, _vue.openBlock)(), (0, _vue.createElementBlock)((0, _vue.Fragment), {
                            key: 1
                        }, [
                            (0, _vue.createTextVNode)((0, _vue.toDisplayString)(_ctx.$t("From")) + " ", 1 /* TEXT */ ),
                            (0, _vue.createElementVNode)("a", {
                                href: _ctx.resource.organization.page
                            }, (0, _vue.toDisplayString)(_ctx.owner), 9 /* TEXT, PROPS */ , _hoisted_8),
                            _hoisted_9
                        ], 64 /* STABLE_FRAGMENT */ )) : (0, _vue.createCommentVNode)("v-if", true),
                        (0, _vue.createTextVNode)(" " + (0, _vue.toDisplayString)(_ctx.$t("Updated on X", {
                            date: _ctx.filters.formatDate(_ctx.lastUpdate)
                        })) + " \u2014 ", 1 /* TEXT */ ),
                        _ctx.resource.format ? ((0, _vue.openBlock)(), (0, _vue.createElementBlock)((0, _vue.Fragment), {
                            key: 2
                        }, [
                            (0, _vue.createTextVNode)((0, _vue.toDisplayString)(_ctx.resource.format?.trim()?.toLowerCase()) + " ", 1 /* TEXT */ ),
                            _ctx.resource.filesize ? ((0, _vue.openBlock)(), (0, _vue.createElementBlock)((0, _vue.Fragment), {
                                key: 0
                            }, [
                                (0, _vue.createTextVNode)("(" + (0, _vue.toDisplayString)(_ctx.filters.filesize(_ctx.resource.filesize)) + ")", 1 /* TEXT */ )
                            ], 2112 /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */ )) : (0, _vue.createCommentVNode)("v-if", true),
                            _hoisted_10
                        ], 64 /* STABLE_FRAGMENT */ )) : (0, _vue.createCommentVNode)("v-if", true),
                        (0, _vue.createTextVNode)(" " + (0, _vue.toDisplayString)(_ctx.$t("X downloads", _ctx.resource.metrics.views || 0)), 1 /* TEXT */ )
                    ])
                ])
            ]),
            (0, _vue.createElementVNode)("div", _hoisted_11, [
                (0, _vue.createElementVNode)("ul", _hoisted_12, [
                    _ctx.unavailable ? ((0, _vue.openBlock)(), (0, _vue.createElementBlock)("li", _hoisted_13, (0, _vue.toDisplayString)(_ctx.$t("Unavailable")), 1 /* TEXT */ )) : (0, _vue.createCommentVNode)("v-if", true),
                    _ctx.showSchemaButton ? ((0, _vue.openBlock)(), (0, _vue.createElementBlock)("li", _hoisted_14, [
                        (0, _vue.createVNode)(_component_schema_button, {
                            resource: _ctx.resource
                        }, null, 8 /* PROPS */ , [
                            "resource"
                        ])
                    ])) : (0, _vue.createCommentVNode)("v-if", true),
                    _ctx.canEdit ? ((0, _vue.openBlock)(), (0, _vue.createElementBlock)("li", _hoisted_15, [
                        (0, _vue.createVNode)(_component_EditButton, {
                            "dataset-id": _ctx.datasetId,
                            "resource-id": _ctx.resource.id,
                            "is-community-resource": _ctx.isCommunityResource
                        }, null, 8 /* PROPS */ , [
                            "dataset-id",
                            "resource-id",
                            "is-community-resource"
                        ])
                    ])) : (0, _vue.createCommentVNode)("v-if", true),
                    _ctx.resource.preview_url ? ((0, _vue.openBlock)(), (0, _vue.createElementBlock)("li", _hoisted_16, [
                        (0, _vue.createElementVNode)("button", {
                            title: _ctx.$t("Preview"),
                            onClick: _cache[0] || (_cache[0] = (0, _vue.withModifiers)(($event)=>_ctx.showModal("preview", {
                                    url: _ctx.resource.preview_url,
                                    title: _ctx.resource.title
                                }, true), [
                                "prevent"
                            ])),
                            class: "fr-btn fr-btn--secondary fr-btn--secondary-grey-500 fr-btn--sm fr-icon-svg",
                            innerHTML: _ctx.preview
                        }, null, 8 /* PROPS */ , _hoisted_17)
                    ])) : (0, _vue.createCommentVNode)("v-if", true),
                    _ctx.resource.format === "url" ? ((0, _vue.openBlock)(), (0, _vue.createElementBlock)("li", _hoisted_18, [
                        (0, _vue.createElementVNode)("a", {
                            href: _ctx.resource.latest,
                            title: _ctx.$t("Resource link"),
                            rel: "nofollow",
                            target: "_blank",
                            class: "fr-btn fr-btn--sm fr-icon-external-link-line"
                        }, null, 8 /* PROPS */ , _hoisted_19)
                    ])) : ((0, _vue.openBlock)(), (0, _vue.createElementBlock)("li", _hoisted_20, [
                        (0, _vue.createElementVNode)("a", {
                            href: _ctx.resource.latest,
                            title: _ctx.$t("Download resource"),
                            download: "",
                            class: "fr-btn fr-btn--sm fr-icon-download-line"
                        }, null, 8 /* PROPS */ , _hoisted_21)
                    ])),
                    (0, _vue.createElementVNode)("li", _hoisted_22, [
                        (0, _vue.createElementVNode)("button", {
                            onClick: _cache[1] || (_cache[1] = (0, _vue.withModifiers)((...args)=>_ctx.expand && _ctx.expand(...args), [
                                "prevent"
                            ])),
                            role: "button",
                            "aria-expanded": _ctx.expanded,
                            title: _ctx.$t("See more details"),
                            "aria-controls": "resource-" + _ctx.resource.id,
                            class: "accordion-button rounded-circle fr-icon-arrow-right-s-line fr-p-1w"
                        }, null, 8 /* PROPS */ , _hoisted_23)
                    ])
                ])
            ])
        ], 8 /* PROPS */ , _hoisted_2),
        (0, _vue.createElementVNode)("section", {
            class: (0, _vue.normalizeClass)([
                "accordion-content fr-pt-5v fr-pb-4w fr-pl-6w",
                {
                    active: _ctx.expanded
                }
            ]),
            style: (0, _vue.normalizeStyle)({
                height: _ctx.expanded ? "auto" : 0
            }),
            "aria-labelledby": "resource-" + _ctx.resource.id + "-title",
            hidden: !_ctx.expanded,
            id: "resource-" + _ctx.resource.id
        }, [
            _ctx.resource.description ? ((0, _vue.openBlock)(), (0, _vue.createElementBlock)("div", {
                key: 0,
                class: "fr-mt-0 markdown",
                innerHTML: _ctx.filters.markdown(_ctx.resource.description)
            }, null, 8 /* PROPS */ , _hoisted_25)) : (0, _vue.createCommentVNode)("v-if", true),
            (0, _vue.createElementVNode)("dl", null, [
                (0, _vue.createElementVNode)("div", _hoisted_26, [
                    (0, _vue.createElementVNode)("dt", _hoisted_27, (0, _vue.toDisplayString)(_ctx.$t("URL")), 1 /* TEXT */ ),
                    (0, _vue.createElementVNode)("dd", _hoisted_28, [
                        (0, _vue.createElementVNode)("a", {
                            href: _ctx.resource.url
                        }, (0, _vue.toDisplayString)(_ctx.resource.url), 9 /* TEXT, PROPS */ , _hoisted_29)
                    ])
                ]),
                (0, _vue.createElementVNode)("div", _hoisted_30, [
                    (0, _vue.createElementVNode)("dt", _hoisted_31, (0, _vue.toDisplayString)(_ctx.$t("Permalink")), 1 /* TEXT */ ),
                    (0, _vue.createElementVNode)("dd", _hoisted_32, [
                        (0, _vue.createElementVNode)("a", {
                            href: _ctx.resource.latest
                        }, (0, _vue.toDisplayString)(_ctx.resource.latest), 9 /* TEXT, PROPS */ , _hoisted_33)
                    ])
                ]),
                (0, _vue.createElementVNode)("div", _hoisted_34, [
                    (0, _vue.createElementVNode)("dt", _hoisted_35, (0, _vue.toDisplayString)(_ctx.$t("Type")), 1 /* TEXT */ ),
                    (0, _vue.createElementVNode)("dd", _hoisted_36, (0, _vue.toDisplayString)(_ctx.typeLabel), 1 /* TEXT */ )
                ]),
                (0, _vue.createElementVNode)("div", _hoisted_37, [
                    (0, _vue.createElementVNode)("dt", _hoisted_38, (0, _vue.toDisplayString)(_ctx.$t("MIME Type")), 1 /* TEXT */ ),
                    (0, _vue.createElementVNode)("dd", _hoisted_39, (0, _vue.toDisplayString)(_ctx.resource.mime), 1 /* TEXT */ )
                ]),
                _ctx.resource.checksum ? ((0, _vue.openBlock)(), (0, _vue.createElementBlock)("div", _hoisted_40, [
                    (0, _vue.createElementVNode)("dt", _hoisted_41, (0, _vue.toDisplayString)(_ctx.resource.checksum.type), 1 /* TEXT */ ),
                    (0, _vue.createElementVNode)("dd", _hoisted_42, (0, _vue.toDisplayString)(_ctx.resource.checksum.value), 1 /* TEXT */ )
                ])) : (0, _vue.createCommentVNode)("v-if", true),
                (0, _vue.createElementVNode)("div", _hoisted_43, [
                    (0, _vue.createElementVNode)("dt", _hoisted_44, (0, _vue.toDisplayString)(_ctx.$t("Created on")), 1 /* TEXT */ ),
                    (0, _vue.createElementVNode)("dd", _hoisted_45, (0, _vue.toDisplayString)(_ctx.filters.formatDate(_ctx.resource.created_at)), 1 /* TEXT */ )
                ]),
                (0, _vue.createElementVNode)("div", _hoisted_46, [
                    (0, _vue.createElementVNode)("dt", _hoisted_47, (0, _vue.toDisplayString)(_ctx.$t("Modified on")), 1 /* TEXT */ ),
                    (0, _vue.createElementVNode)("dd", _hoisted_48, (0, _vue.toDisplayString)(_ctx.filters.formatDate(_ctx.resource.last_modified)), 1 /* TEXT */ )
                ]),
                (0, _vue.createElementVNode)("div", _hoisted_49, [
                    (0, _vue.createElementVNode)("dt", _hoisted_50, (0, _vue.toDisplayString)(_ctx.$t("Published on")), 1 /* TEXT */ ),
                    (0, _vue.createElementVNode)("dd", _hoisted_51, (0, _vue.toDisplayString)(_ctx.filters.formatDate(_ctx.resource.published)), 1 /* TEXT */ )
                ])
            ])
        ], 14 /* CLASS, STYLE, PROPS */ , _hoisted_24)
    ]);
}
if (module.hot) module.hot.accept(()=>{
    __VUE_HMR_RUNTIME__.rerender("20b613-hmr", render);
});

},{"vue":"hRjhg","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kYM44":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
let NOOP = ()=>{};
exports.default = (script)=>{};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7q4Au":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "fetchDatasetResources", ()=>fetchDatasetResources);
parcelHelpers.export(exports, "fetchDatasetCommunityResources", ()=>fetchDatasetCommunityResources);
var _api = require("../plugins/api");
const fetchDatasetResources = (datasetId, type, page, pageSize, search)=>{
    return (0, _api.apiv2).get("/datasets/" + datasetId + "/resources/", {
        params: {
            page,
            type: type,
            page_size: pageSize,
            q: search
        }
    }).then((resp)=>resp.data);
};
const fetchDatasetCommunityResources = (datasetId, page, pageSize)=>{
    return (0, _api.api).get("datasets/community_resources/", {
        params: {
            page,
            dataset: datasetId,
            page_size: pageSize
        }
    }).then((resp)=>resp.data);
};

},{"../plugins/api":"8P8eo","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1dNpQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "render", ()=>render);
var _vue = require("vue");
const _hoisted_1 = {
    key: 0,
    class: "fr-mt-4w fr-mb-1w fr-text--sm fr-text--bold text-transform-uppercase",
    ref: "top"
};
const _hoisted_2 = {
    key: 0
};
const _hoisted_3 = {
    class: "resources-wrapper",
    key: "top"
};
const _hoisted_4 = {
    key: "loader"
};
const _hoisted_5 = {
    key: 1
};
const _hoisted_6 = {
    key: 0
};
function render(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_Loader = (0, _vue.resolveComponent)("Loader");
    const _component_Resource = (0, _vue.resolveComponent)("Resource");
    const _component_Pagination = (0, _vue.resolveComponent)("Pagination");
    return (0, _vue.openBlock)(), (0, _vue.createElementBlock)((0, _vue.Fragment), null, [
        _ctx.showTitle ? ((0, _vue.openBlock)(), (0, _vue.createElementBlock)("h3", _hoisted_1, [
            (0, _vue.createTextVNode)((0, _vue.toDisplayString)(_ctx.typeLabel) + " ", 1 /* TEXT */ ),
            _ctx.showTotal ? ((0, _vue.openBlock)(), (0, _vue.createElementBlock)("sup", _hoisted_2, (0, _vue.toDisplayString)(_ctx.totalResults), 1 /* TEXT */ )) : (0, _vue.createCommentVNode)("v-if", true)
        ], 512 /* NEED_PATCH */ )) : (0, _vue.createCommentVNode)("v-if", true),
        (0, _vue.createElementVNode)("section", _hoisted_3, [
            (0, _vue.createVNode)((0, _vue.Transition), {
                mode: "out-in"
            }, {
                default: (0, _vue.withCtx)(()=>[
                        _ctx.loading ? ((0, _vue.openBlock)(), (0, _vue.createElementBlock)("div", _hoisted_4, [
                            (0, _vue.createVNode)(_component_Loader, {
                                class: "fr-mt-2w"
                            })
                        ])) : ((0, _vue.openBlock)(), (0, _vue.createElementBlock)("div", _hoisted_5, [
                            ((0, _vue.openBlock)(true), (0, _vue.createElementBlock)((0, _vue.Fragment), null, (0, _vue.renderList)(_ctx.resources, (resource)=>{
                                return (0, _vue.openBlock)(), (0, _vue.createBlock)(_component_Resource, {
                                    id: "resource-" + resource.id,
                                    datasetId: _ctx.datasetId,
                                    isCommunityResource: _ctx.isCommunityResources,
                                    resource: resource,
                                    canEdit: _ctx.getCanEdit(resource),
                                    typeLabel: _ctx.typeLabel
                                }, null, 8 /* PROPS */ , [
                                    "id",
                                    "datasetId",
                                    "isCommunityResource",
                                    "resource",
                                    "canEdit",
                                    "typeLabel"
                                ]);
                            }), 256 /* UNKEYED_FRAGMENT */ )),
                            !_ctx.totalResults ? ((0, _vue.openBlock)(), (0, _vue.createElementBlock)("p", _hoisted_6, (0, _vue.toDisplayString)(_ctx.$t("No resources match your search.")), 1 /* TEXT */ )) : _ctx.totalResults > _ctx.pageSize ? ((0, _vue.openBlock)(), (0, _vue.createBlock)(_component_Pagination, {
                                key: 1,
                                class: "fr-mt-3w",
                                page: _ctx.currentPage,
                                "page-size": _ctx.pageSize,
                                "total-results": _ctx.totalResults,
                                "change-page": _ctx.changePage
                            }, null, 8 /* PROPS */ , [
                                "page",
                                "page-size",
                                "total-results",
                                "change-page"
                            ])) : (0, _vue.createCommentVNode)("v-if", true)
                        ]))
                    ]),
                _: 1 /* STABLE */ 
            })
        ])
    ], 64 /* STABLE_FRAGMENT */ );
}
if (module.hot) module.hot.accept(()=>{
    __VUE_HMR_RUNTIME__.rerender("1e16fa-hmr", render);
});

},{"vue":"hRjhg","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9P7SG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
let NOOP = ()=>{};
exports.default = (script)=>{};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jyOE4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
let script;
let initialize = ()=>{
    script = require("script:./search-bar.vue");
    if (script.__esModule) script = script.default;
    script.render = require("template:./search-bar.vue").render;
    require("custom:./search-bar.vue").default(script);
    script.__scopeId = "data-v-acf305";
    script.__file = "/home/babel/Documents/workspace/udata_workspace/udata-front/theme/js/components/utils/search-bar.vue";
};
initialize();
if (module.hot) {
    script.__hmrId = "acf305-hmr";
    module.hot.accept(()=>{
        setTimeout(()=>{
            initialize();
            if (!__VUE_HMR_RUNTIME__.createRecord("acf305-hmr", script)) __VUE_HMR_RUNTIME__.reload("acf305-hmr", script);
        }, 0);
    });
}
exports.default = script;

},{"script:./search-bar.vue":"fntr6","template:./search-bar.vue":"68hbl","custom:./search-bar.vue":"a5mQR","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fntr6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _vue = require("vue");
var _eventbus = require("../../plugins/eventbus");
var _useDebouncedRef = require("../../composables/useDebouncedRef");
var _useDebouncedRefDefault = parcelHelpers.interopDefault(_useDebouncedRef);
var _config = require("../../config");
exports.default = (0, _vue.defineComponent)({
    props: {
        eventName: {
            type: String,
            default: "search"
        }
    },
    setup (props) {
        const searchValue = (0, _useDebouncedRefDefault.default)("", (0, _config.search_autocomplete_debounce));
        const totalResults = (0, _vue.reactive)(new Map());
        const search = ()=>(0, _eventbus.bus).emit(props.eventName, searchValue.value);
        if (0, _config.search_autocomplete_enabled) (0, _vue.watch)(searchValue, search);
        let timeoutId;
        const searchWithoutAutocomplete = ()=>{
            timeoutId = setTimeout(()=>{
                search();
            }, (0, _config.search_autocomplete_debounce));
        };
        (0, _vue.onUnmounted)(()=>clearTimeout(timeoutId));
        (0, _eventbus.bus).on(props.eventName + ".results.updated", ({ type , count  })=>{
            totalResults.set(type, count);
        });
        (0, _vue.watch)(totalResults, (results)=>{
            const total1 = Array.from(results.values()).reduce((total, resultPerType)=>total + resultPerType, 0);
            (0, _eventbus.bus).emit(props.eventName + ".results.total", total1);
        });
        return {
            search,
            searchWithoutAutocomplete,
            searchValue
        };
    }
});

},{"vue":"hRjhg","../../plugins/eventbus":"6CYPj","../../composables/useDebouncedRef":"a6pE2","../../config":"G7A2j","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"68hbl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "render", ()=>render);
var _vue = require("vue");
const _hoisted_1 = [
    "aria-label"
];
const _hoisted_2 = [
    "for"
];
const _hoisted_3 = [
    "id"
];
const _hoisted_4 = {
    class: "fr-btn",
    type: "submit"
};
function render(_ctx, _cache, $props, $setup, $data, $options) {
    return (0, _vue.openBlock)(), (0, _vue.createElementBlock)("form", {
        onSubmit: _cache[1] || (_cache[1] = (0, _vue.withModifiers)((...args)=>_ctx.searchWithoutAutocomplete && _ctx.searchWithoutAutocomplete(...args), [
            "prevent"
        ]))
    }, [
        (0, _vue.createElementVNode)("div", {
            class: "fr-search-bar",
            role: "search",
            "aria-label": _ctx.$t("Search resources")
        }, [
            (0, _vue.createElementVNode)("label", {
                class: "fr-label",
                for: _ctx.eventName
            }, (0, _vue.toDisplayString)(_ctx.$t("Search resources")), 9 /* TEXT, PROPS */ , _hoisted_2),
            (0, _vue.withDirectives)((0, _vue.createElementVNode)("input", {
                class: "fr-input",
                placeholder: "Rechercher",
                type: "search",
                id: _ctx.eventName,
                "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event)=>_ctx.searchValue = $event)
            }, null, 8 /* PROPS */ , _hoisted_3), [
                [
                    (0, _vue.vModelText),
                    _ctx.searchValue
                ]
            ]),
            (0, _vue.createElementVNode)("button", _hoisted_4, (0, _vue.toDisplayString)(_ctx.$t("Search")), 1 /* TEXT */ )
        ], 8 /* PROPS */ , _hoisted_1)
    ], 32 /* HYDRATE_EVENTS */ );
}
if (module.hot) module.hot.accept(()=>{
    __VUE_HMR_RUNTIME__.rerender("acf305-hmr", render);
});

},{"vue":"hRjhg","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"a5mQR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
let NOOP = ()=>{};
exports.default = (script)=>{};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kn2tU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
let script;
let initialize = ()=>{
    script = require("script:./captcha.vue");
    if (script.__esModule) script = script.default;
    script.render = require("template:./captcha.vue").render;
    require("custom:./captcha.vue").default(script);
    script.__scopeId = "data-v-4fd88c";
    script.__file = "/home/babel/Documents/workspace/udata_workspace/udata-front/theme/js/components/utils/captcha.vue";
};
initialize();
if (module.hot) {
    script.__hmrId = "4fd88c-hmr";
    module.hot.accept(()=>{
        setTimeout(()=>{
            initialize();
            if (!__VUE_HMR_RUNTIME__.createRecord("4fd88c-hmr", script)) __VUE_HMR_RUNTIME__.reload("4fd88c-hmr", script);
        }, 0);
    });
}
exports.default = script;

},{"script:./captcha.vue":"7NrJ4","template:./captcha.vue":"5tGjO","custom:./captcha.vue":"liSLa","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7NrJ4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _vue = require("vue");
var _captcha = require("../../api/captcha");
/**
 * @typedef captchaInstance
 * @property {string} captchaId
 * @property {string} captchaStyleName
 */ exports.default = (0, _vue.defineComponent)({
    props: {
        captchaStyleName: {
            type: String,
            required: true
        }
    },
    setup (props) {
        const captchaHtml = (0, _vue.ref)(null);
        /** @type {import("vue").Ref<undefined | string>} */ const id = (0, _vue.ref)();
        /** @type {import("vue").Ref<undefined | HTMLInputElement>} */ const input1 = (0, _vue.ref)();
        const displayHtml = ()=>{
            (0, _captcha.fetchHtml)(props.captchaStyleName).then((html)=>captchaHtml.value = html).then(()=>{
                const input = document.querySelector("#BDC_VCID_" + props.captchaStyleName);
                if (input instanceof HTMLInputElement) (0, _captcha.fetchScript)(props.captchaStyleName, input.value).then(()=>id.value = captchaId.value);
            });
        };
        /** @type {import("vue").ComputedRef<undefined | captchaInstance>} */ const instance = (0, _vue.computed)(()=>{
            return window.botdetect?.getInstanceByStyleName(props.captchaStyleName);
        });
        /** @type {import("vue").ComputedRef<undefined | string>} */ const captchaId = (0, _vue.computed)(()=>{
            return instance.value?.captchaId;
        });
        displayHtml();
        (0, _vue.onMounted)(()=>{
            if (input1.value instanceof HTMLInputElement) {
                let button = input1.value.form?.querySelector('[type="submit"]');
                if (button instanceof HTMLButtonElement) button.disabled = false;
            }
        });
        return {
            captchaHtml,
            id,
            input: input1
        };
    }
});

},{"vue":"hRjhg","../../api/captcha":"6b0Yv","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6b0Yv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @param {CaptchaStyle} style
 */ parcelHelpers.export(exports, "fetchHtml", ()=>fetchHtml);
/**
 * @param {CaptchaStyle} style
 * @param {string} id
 */ parcelHelpers.export(exports, "fetchScript", ()=>fetchScript);
var _api = require("../plugins/api");
const captchEtatUrl = "captchetat/";
/**
 * @typedef {'captchaFR' | 'captchaEN' | 'numerique6_7CaptchaFR' | 'numerique6_7CaptchaEN' | 
 *              'alphabetique6_7CaptchaFR' | 'alphabetique6_7CaptchaEN' | 'alphanumerique12CaptchaFR' |
 *              'alphanumerique12CaptchaEN' | 'alphabetique12CaptchaFR' | 'alphabetique12CaptchaEN' | 
 *              'numerique12CaptchaFR' | 'numerique12CaptchaEN' | 'alphanumerique6to9LightCaptchaEN' | 
 *              'alphanumerique6to9LightCaptchaFR' | 'alphanumerique4to6LightCaptchaEN' |
 *              'alphanumerique4to6LightCaptchaFR'} CaptchaStyle
 */ /**
 * @param {{ get: 'html' | 'layout-stylesheet' | 'script-include' | 'image' | 
 *              'reload-icon' | 'sound-icon' | 'reload-disabled-icon' | 'sound-disabled-icon' | 'sound' | 'p';
 *          c: 'captchaFR' | 'captchaEN' | 'numerique6_7CaptchaFR' | 'numerique6_7CaptchaEN' | 
 *              'alphabetique6_7CaptchaFR' | 'alphabetique6_7CaptchaEN' | 'alphanumerique12CaptchaFR' |
 *              'alphanumerique12CaptchaEN' | 'alphabetique12CaptchaFR' | 'alphabetique12CaptchaEN' | 
 *              'numerique12CaptchaFR' | 'numerique12CaptchaEN' | 'alphanumerique6to9LightCaptchaEN' | 
 *              'alphanumerique6to9LightCaptchaFR' | 'alphanumerique4to6LightCaptchaEN' |
 *              'alphanumerique4to6LightCaptchaFR';
 *          t?: string;
 *          cs?: string }} params
 */ function fetch(params) {
    return (0, _api.apiv2).get(captchEtatUrl, {
        params
    }).then((resp)=>resp.data);
}
function fetchHtml(style) {
    return fetch({
        get: "html",
        c: style
    }).then((html)=>html.replaceAll("/api/simple-captcha-endpoint", (0, _api.apiv2).defaults.baseURL + captchEtatUrl));
}
function fetchScript(style, id) {
    return fetch({
        get: "script-include",
        c: style,
        t: id
    }).then((script)=>{
        const f = new Function(script);
        return f();
    });
}

},{"../plugins/api":"8P8eo","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5tGjO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "render", ()=>render);
var _vue = require("vue");
const _hoisted_1 = [
    "innerHTML"
];
function render(_ctx, _cache, $props, $setup, $data, $options) {
    return (0, _vue.openBlock)(), (0, _vue.createElementBlock)((0, _vue.Fragment), null, [
        (0, _vue.createElementVNode)("div", {
            id: "BDC_CaptchaComponent",
            innerHTML: _ctx.captchaHtml
        }, null, 8 /* PROPS */ , _hoisted_1),
        (0, _vue.withDirectives)((0, _vue.createElementVNode)("input", {
            type: "hidden",
            name: "captcha_id",
            "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event)=>_ctx.id = $event),
            ref: "input"
        }, null, 512 /* NEED_PATCH */ ), [
            [
                (0, _vue.vModelText),
                _ctx.id
            ]
        ])
    ], 64 /* STABLE_FRAGMENT */ );
}
if (module.hot) module.hot.accept(()=>{
    __VUE_HMR_RUNTIME__.rerender("4fd88c-hmr", render);
});

},{"vue":"hRjhg","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"liSLa":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
let NOOP = ()=>{};
exports.default = (script)=>{};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"c21na":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/*
---
name: Tabs JS
category: 5 - Interactions
---

# Interaction
Tabs are a two parts system : tabs, with a tag shape (or any style you'd like) buttons, and tabpanel, that the buttons will show.
Only one tabpanel can be shown at a time, and toggling a new tabpanel will make the previous active tabpanel no longer visible.
You only need to specify an `id` in the `aria-controls` attribute of the button, then add this `id` to the tabpanel.

Tip : don't forget to add both `aria-pressed="true"` and `aria-selected="true"`attributes to the default-active tab and `fr-unhidden` to the tabpanel.
Tip : if the `aria-controls` is invalid (no div with specified `id`), the tabs will kinda crash. Don't do that.

```tabs-interactive.html
<nav data-tabs>
    <button class="fr-tag" aria-controls="tab-content-1" role="tab" aria-pressed="true" aria-selected="true">Jeux de données</button>
    <button class="fr-tag" aria-controls="tab-content-2" role="tab">Réutilisations</button>
</nav>
<ul>
  <li class="fr-hidden fr-unhidden" role="tabpanel"id="tab-content-1">Tab content 1 (jeux de données)</li>
  <li class="fr-hidden" id="tab-content-2">Tab content 2 (reuse)</li>
</ul>
```
*/ exports.default = (()=>{
    document.addEventListener("DOMContentLoaded", ()=>{
        const tabs = document.querySelectorAll("[data-tabs]");
        tabs.forEach((tab1)=>{
            const tabsButtons = tab1.querySelectorAll("[role=tab]");
            tabsButtons.forEach((tabButton)=>{
                tabButton.addEventListener("click", (el)=>{
                    el.preventDefault();
                    const previouslyActive = Array.from(tabsButtons).find((tab)=>tab.getAttribute("aria-selected") === "true");
                    if (previouslyActive) {
                        previouslyActive.setAttribute("aria-selected", "false");
                        document.getElementById(previouslyActive.getAttribute("aria-controls")).classList.remove("fr-unhidden");
                    }
                    el.target.setAttribute("aria-selected", "true");
                    document.getElementById(el.target.getAttribute("aria-controls")).classList.add("fr-unhidden");
                });
            });
        });
    });
})();

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5mTLF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/*
---
name: Accordion
category: 5 - Interactions
---

# Interaction
Because accordion are not only seen in the subway, you can use this tidbit to create collapsible ARIA-compatible accordions.

The button needs to have :
- `.accordion-button` class
- `aria-controls` and `href` set to a valid `#id` on the page
- `aria-label` to explain what the button does if there's not enough text in the button itself (like an icon)
- `aria-expanded` set to either `true` (if the accordion is visible by default) or `false`
-  An optional `.trigger-once` class that will make the button disappear once the content it controls is expanded

The accordion panel needs to have :

- `.accordion-content` class
- `.active` class if the accordion is visible by default
- `aria-labelledby` set to the button's `#id`
- A valid `#id` corresponding to the button's `href`


```accordion.html
<a class="accordion-button" aria-controls="toggle-me" aria-expanded="true" href="#toggle-me">Toggle the thingies</a>
<section class="accordion-content active" aria-labelledby="resource-header" id="toggle-me">Nice collapsible section (visible by default, click the button to hide)</h1>
```
*/ var _popmotion = require("popmotion");
exports.default = (()=>{
    document.addEventListener("DOMContentLoaded", ()=>{
        const togglers = document.querySelectorAll(".accordion-button");
        //For each toggler button
        togglers.forEach((toggler)=>{
            toggler.addEventListener("click", (ev)=>{
                ev.preventDefault();
                //Toggling the aria-expanded attribute on the button
                if (ev.target.getAttribute("aria-expanded") === "true") ev.target.setAttribute("aria-expanded", "false");
                else ev.target.setAttribute("aria-expanded", "true");
                const target = document.querySelector(ev.target.getAttribute("href"));
                const divStyler = (0, _popmotion.styler)(target);
                if (target) {
                    target.classList.toggle("active");
                    if (target.classList.contains("active")) (0, _popmotion.tween)({
                        from: {
                            height: 0
                        },
                        to: {
                            height: target.scrollHeight
                        },
                        duration: 300,
                        ease: (0, _popmotion.easing).anticipate
                    }).start({
                        update: divStyler.set,
                        complete: ()=>divStyler.set({
                                height: "auto"
                            })
                    });
                    else (0, _popmotion.tween)({
                        from: {
                            height: target.scrollHeight
                        },
                        to: {
                            height: 0
                        },
                        duration: 300,
                        ease: (0, _popmotion.easing).anticipate
                    }).start(divStyler.set);
                }
            });
        });
    });
})();

},{"popmotion":"gniPK","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6aPmi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/*
---
name: Clipboard
category: 5 - Interactions
---

# Interaction
Copy to clipboard thanks to clipboardjs.com
Just have an element with an `id` ending with `-copy` and use clipboardJS API for endless possibilities !

```clipboard.html
<input id="something-copy" value="Some value" />
<button class="btn" data-clipboard-target="#something-copy">
    Copy !
</button>
```
*/ var _clipboard = require("clipboard");
var _clipboardDefault = parcelHelpers.interopDefault(_clipboard);
exports.default = (()=>{
    document.addEventListener("DOMContentLoaded", ()=>{
        new (0, _clipboardDefault.default)('[id$="-copy"]');
    });
})();

},{"clipboard":"37N5R","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"37N5R":[function(require,module,exports) {
/*!
 * clipboard.js v2.0.8
 * https://clipboardjs.com/
 *
 * Licensed MIT © Zeno Rocha
 */ (function webpackUniversalModuleDefinition(root, factory) {
    module.exports = factory();
})(this, function() {
    return /******/ function() {
        /******/ var __webpack_modules__ = {
            /***/ 134: /***/ function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
                "use strict";
                // EXPORTS
                __webpack_require__.d(__webpack_exports__, {
                    "default": function() {
                        return /* binding */ clipboard;
                    }
                });
                // EXTERNAL MODULE: ./node_modules/tiny-emitter/index.js
                var tiny_emitter = __webpack_require__(279);
                var tiny_emitter_default = /*#__PURE__*/ __webpack_require__.n(tiny_emitter);
                // EXTERNAL MODULE: ./node_modules/good-listener/src/listen.js
                var listen = __webpack_require__(370);
                var listen_default = /*#__PURE__*/ __webpack_require__.n(listen);
                // EXTERNAL MODULE: ./node_modules/select/src/select.js
                var src_select = __webpack_require__(817);
                var select_default = /*#__PURE__*/ __webpack_require__.n(src_select);
                function _typeof(obj1) {
                    "@babel/helpers - typeof";
                    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") _typeof = function _typeof(obj) {
                        return typeof obj;
                    };
                    else _typeof = function _typeof(obj) {
                        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
                    };
                    return _typeof(obj1);
                }
                function _classCallCheck(instance, Constructor) {
                    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
                }
                function _defineProperties(target, props) {
                    for(var i = 0; i < props.length; i++){
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }
                function _createClass(Constructor, protoProps, staticProps) {
                    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) _defineProperties(Constructor, staticProps);
                    return Constructor;
                }
                /**
 * Inner class which performs selection from either `text` or `target`
 * properties and then executes copy or cut operations.
 */ var ClipboardAction1 = /*#__PURE__*/ function() {
                    /**
   * @param {Object} options
   */ function ClipboardAction(options) {
                        _classCallCheck(this, ClipboardAction);
                        this.resolveOptions(options);
                        this.initSelection();
                    }
                    /**
   * Defines base properties passed from constructor.
   * @param {Object} options
   */ _createClass(ClipboardAction, [
                        {
                            key: "resolveOptions",
                            value: function resolveOptions() {
                                var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
                                this.action = options.action;
                                this.container = options.container;
                                this.emitter = options.emitter;
                                this.target = options.target;
                                this.text = options.text;
                                this.trigger = options.trigger;
                                this.selectedText = "";
                            }
                        },
                        {
                            key: "initSelection",
                            value: function initSelection() {
                                if (this.text) this.selectFake();
                                else if (this.target) this.selectTarget();
                            }
                        },
                        {
                            key: "createFakeElement",
                            value: function createFakeElement() {
                                var isRTL = document.documentElement.getAttribute("dir") === "rtl";
                                this.fakeElem = document.createElement("textarea"); // Prevent zooming on iOS
                                this.fakeElem.style.fontSize = "12pt"; // Reset box model
                                this.fakeElem.style.border = "0";
                                this.fakeElem.style.padding = "0";
                                this.fakeElem.style.margin = "0"; // Move element out of screen horizontally
                                this.fakeElem.style.position = "absolute";
                                this.fakeElem.style[isRTL ? "right" : "left"] = "-9999px"; // Move element to the same position vertically
                                var yPosition = window.pageYOffset || document.documentElement.scrollTop;
                                this.fakeElem.style.top = "".concat(yPosition, "px");
                                this.fakeElem.setAttribute("readonly", "");
                                this.fakeElem.value = this.text;
                                return this.fakeElem;
                            }
                        },
                        {
                            key: "selectFake",
                            value: function selectFake() {
                                var _this = this;
                                var fakeElem = this.createFakeElement();
                                this.fakeHandlerCallback = function() {
                                    return _this.removeFake();
                                };
                                this.fakeHandler = this.container.addEventListener("click", this.fakeHandlerCallback) || true;
                                this.container.appendChild(fakeElem);
                                this.selectedText = select_default()(fakeElem);
                                this.copyText();
                                this.removeFake();
                            }
                        },
                        {
                            key: "removeFake",
                            value: function removeFake() {
                                if (this.fakeHandler) {
                                    this.container.removeEventListener("click", this.fakeHandlerCallback);
                                    this.fakeHandler = null;
                                    this.fakeHandlerCallback = null;
                                }
                                if (this.fakeElem) {
                                    this.container.removeChild(this.fakeElem);
                                    this.fakeElem = null;
                                }
                            }
                        },
                        {
                            key: "selectTarget",
                            value: function selectTarget() {
                                this.selectedText = select_default()(this.target);
                                this.copyText();
                            }
                        },
                        {
                            key: "copyText",
                            value: function copyText() {
                                var succeeded;
                                try {
                                    succeeded = document.execCommand(this.action);
                                } catch (err) {
                                    succeeded = false;
                                }
                                this.handleResult(succeeded);
                            }
                        },
                        {
                            key: "handleResult",
                            value: function handleResult(succeeded) {
                                this.emitter.emit(succeeded ? "success" : "error", {
                                    action: this.action,
                                    text: this.selectedText,
                                    trigger: this.trigger,
                                    clearSelection: this.clearSelection.bind(this)
                                });
                            }
                        },
                        {
                            key: "clearSelection",
                            value: function clearSelection() {
                                if (this.trigger) this.trigger.focus();
                                document.activeElement.blur();
                                window.getSelection().removeAllRanges();
                            }
                        },
                        {
                            key: "destroy",
                            /**
     * Destroy lifecycle.
     */ value: function destroy() {
                                this.removeFake();
                            }
                        },
                        {
                            key: "action",
                            set: function set() {
                                var action = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "copy";
                                this._action = action;
                                if (this._action !== "copy" && this._action !== "cut") throw new Error('Invalid "action" value, use either "copy" or "cut"');
                            },
                            get: function get() {
                                return this._action;
                            }
                        },
                        {
                            key: "target",
                            set: function set(target) {
                                if (target !== undefined) {
                                    if (target && _typeof(target) === "object" && target.nodeType === 1) {
                                        if (this.action === "copy" && target.hasAttribute("disabled")) throw new Error('Invalid "target" attribute. Please use "readonly" instead of "disabled" attribute');
                                        if (this.action === "cut" && (target.hasAttribute("readonly") || target.hasAttribute("disabled"))) throw new Error('Invalid "target" attribute. You can\'t cut text from elements with "readonly" or "disabled" attributes');
                                        this._target = target;
                                    } else throw new Error('Invalid "target" value, use a valid Element');
                                }
                            },
                            get: function get() {
                                return this._target;
                            }
                        }
                    ]);
                    return ClipboardAction;
                }();
                /* harmony default export */ var clipboard_action = ClipboardAction1;
                function clipboard_typeof(obj2) {
                    "@babel/helpers - typeof";
                    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") clipboard_typeof = function _typeof(obj) {
                        return typeof obj;
                    };
                    else clipboard_typeof = function _typeof(obj) {
                        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
                    };
                    return clipboard_typeof(obj2);
                }
                function clipboard_classCallCheck(instance, Constructor) {
                    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
                }
                function clipboard_defineProperties(target, props) {
                    for(var i = 0; i < props.length; i++){
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }
                function clipboard_createClass(Constructor, protoProps, staticProps) {
                    if (protoProps) clipboard_defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) clipboard_defineProperties(Constructor, staticProps);
                    return Constructor;
                }
                function _inherits(subClass, superClass) {
                    if (typeof superClass !== "function" && superClass !== null) throw new TypeError("Super expression must either be null or a function");
                    subClass.prototype = Object.create(superClass && superClass.prototype, {
                        constructor: {
                            value: subClass,
                            writable: true,
                            configurable: true
                        }
                    });
                    if (superClass) _setPrototypeOf(subClass, superClass);
                }
                function _setPrototypeOf(o1, p1) {
                    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
                        o.__proto__ = p;
                        return o;
                    };
                    return _setPrototypeOf(o1, p1);
                }
                function _createSuper(Derived) {
                    var hasNativeReflectConstruct = _isNativeReflectConstruct();
                    return function _createSuperInternal() {
                        var Super = _getPrototypeOf(Derived), result;
                        if (hasNativeReflectConstruct) {
                            var NewTarget = _getPrototypeOf(this).constructor;
                            result = Reflect.construct(Super, arguments, NewTarget);
                        } else result = Super.apply(this, arguments);
                        return _possibleConstructorReturn(this, result);
                    };
                }
                function _possibleConstructorReturn(self, call) {
                    if (call && (clipboard_typeof(call) === "object" || typeof call === "function")) return call;
                    return _assertThisInitialized(self);
                }
                function _assertThisInitialized(self) {
                    if (self === void 0) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    return self;
                }
                function _isNativeReflectConstruct() {
                    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
                    if (Reflect.construct.sham) return false;
                    if (typeof Proxy === "function") return true;
                    try {
                        Date.prototype.toString.call(Reflect.construct(Date, [], function() {}));
                        return true;
                    } catch (e) {
                        return false;
                    }
                }
                function _getPrototypeOf(o2) {
                    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
                        return o.__proto__ || Object.getPrototypeOf(o);
                    };
                    return _getPrototypeOf(o2);
                }
                /**
 * Helper function to retrieve attribute value.
 * @param {String} suffix
 * @param {Element} element
 */ function getAttributeValue(suffix, element) {
                    var attribute = "data-clipboard-".concat(suffix);
                    if (!element.hasAttribute(attribute)) return;
                    return element.getAttribute(attribute);
                }
                /**
 * Base class which takes one or more elements, adds event listeners to them,
 * and instantiates a new `ClipboardAction` on each click.
 */ var Clipboard1 = /*#__PURE__*/ function(_Emitter) {
                    _inherits(Clipboard, _Emitter);
                    var _super = _createSuper(Clipboard);
                    /**
   * @param {String|HTMLElement|HTMLCollection|NodeList} trigger
   * @param {Object} options
   */ function Clipboard(trigger, options) {
                        var _this;
                        clipboard_classCallCheck(this, Clipboard);
                        _this = _super.call(this);
                        _this.resolveOptions(options);
                        _this.listenClick(trigger);
                        return _this;
                    }
                    /**
   * Defines if attributes would be resolved using internal setter functions
   * or custom functions that were passed in the constructor.
   * @param {Object} options
   */ clipboard_createClass(Clipboard, [
                        {
                            key: "resolveOptions",
                            value: function resolveOptions() {
                                var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
                                this.action = typeof options.action === "function" ? options.action : this.defaultAction;
                                this.target = typeof options.target === "function" ? options.target : this.defaultTarget;
                                this.text = typeof options.text === "function" ? options.text : this.defaultText;
                                this.container = clipboard_typeof(options.container) === "object" ? options.container : document.body;
                            }
                        },
                        {
                            key: "listenClick",
                            value: function listenClick(trigger) {
                                var _this2 = this;
                                this.listener = listen_default()(trigger, "click", function(e) {
                                    return _this2.onClick(e);
                                });
                            }
                        },
                        {
                            key: "onClick",
                            value: function onClick(e) {
                                var trigger = e.delegateTarget || e.currentTarget;
                                if (this.clipboardAction) this.clipboardAction = null;
                                this.clipboardAction = new clipboard_action({
                                    action: this.action(trigger),
                                    target: this.target(trigger),
                                    text: this.text(trigger),
                                    container: this.container,
                                    trigger: trigger,
                                    emitter: this
                                });
                            }
                        },
                        {
                            key: "defaultAction",
                            value: function defaultAction(trigger) {
                                return getAttributeValue("action", trigger);
                            }
                        },
                        {
                            key: "defaultTarget",
                            value: function defaultTarget(trigger) {
                                var selector = getAttributeValue("target", trigger);
                                if (selector) return document.querySelector(selector);
                            }
                        },
                        {
                            key: "defaultText",
                            /**
     * Default `text` lookup function.
     * @param {Element} trigger
     */ value: function defaultText(trigger) {
                                return getAttributeValue("text", trigger);
                            }
                        },
                        {
                            key: "destroy",
                            value: function destroy() {
                                this.listener.destroy();
                                if (this.clipboardAction) {
                                    this.clipboardAction.destroy();
                                    this.clipboardAction = null;
                                }
                            }
                        }
                    ], [
                        {
                            key: "isSupported",
                            value: function isSupported() {
                                var action1 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [
                                    "copy",
                                    "cut"
                                ];
                                var actions = typeof action1 === "string" ? [
                                    action1
                                ] : action1;
                                var support = !!document.queryCommandSupported;
                                actions.forEach(function(action) {
                                    support = support && !!document.queryCommandSupported(action);
                                });
                                return support;
                            }
                        }
                    ]);
                    return Clipboard;
                }(tiny_emitter_default());
                /* harmony default export */ var clipboard = Clipboard1;
            /***/ },
            /***/ 828: /***/ function(module) {
                var DOCUMENT_NODE_TYPE = 9;
                /**
 * A polyfill for Element.matches()
 */ if (typeof Element !== "undefined" && !Element.prototype.matches) {
                    var proto = Element.prototype;
                    proto.matches = proto.matchesSelector || proto.mozMatchesSelector || proto.msMatchesSelector || proto.oMatchesSelector || proto.webkitMatchesSelector;
                }
                /**
 * Finds the closest parent that matches a selector.
 *
 * @param {Element} element
 * @param {String} selector
 * @return {Function}
 */ function closest(element, selector) {
                    while(element && element.nodeType !== DOCUMENT_NODE_TYPE){
                        if (typeof element.matches === "function" && element.matches(selector)) return element;
                        element = element.parentNode;
                    }
                }
                module.exports = closest;
            /***/ },
            /***/ 438: /***/ function(module, __unused_webpack_exports, __webpack_require__) {
                var closest = __webpack_require__(828);
                /**
 * Delegates event to a selector.
 *
 * @param {Element} element
 * @param {String} selector
 * @param {String} type
 * @param {Function} callback
 * @param {Boolean} useCapture
 * @return {Object}
 */ function _delegate(element, selector, type, callback, useCapture) {
                    var listenerFn = listener.apply(this, arguments);
                    element.addEventListener(type, listenerFn, useCapture);
                    return {
                        destroy: function() {
                            element.removeEventListener(type, listenerFn, useCapture);
                        }
                    };
                }
                /**
 * Delegates event to a selector.
 *
 * @param {Element|String|Array} [elements]
 * @param {String} selector
 * @param {String} type
 * @param {Function} callback
 * @param {Boolean} useCapture
 * @return {Object}
 */ function delegate(elements, selector, type, callback, useCapture) {
                    // Handle the regular Element usage
                    if (typeof elements.addEventListener === "function") return _delegate.apply(null, arguments);
                    // Handle Element-less usage, it defaults to global delegation
                    if (typeof type === "function") // Use `document` as the first parameter, then apply arguments
                    // This is a short way to .unshift `arguments` without running into deoptimizations
                    return _delegate.bind(null, document).apply(null, arguments);
                    // Handle Selector-based usage
                    if (typeof elements === "string") elements = document.querySelectorAll(elements);
                    // Handle Array-like based usage
                    return Array.prototype.map.call(elements, function(element) {
                        return _delegate(element, selector, type, callback, useCapture);
                    });
                }
                /**
 * Finds closest match and invokes callback.
 *
 * @param {Element} element
 * @param {String} selector
 * @param {String} type
 * @param {Function} callback
 * @return {Function}
 */ function listener(element, selector, type, callback) {
                    return function(e) {
                        e.delegateTarget = closest(e.target, selector);
                        if (e.delegateTarget) callback.call(element, e);
                    };
                }
                module.exports = delegate;
            /***/ },
            /***/ 879: /***/ function(__unused_webpack_module, exports) {
                /**
 * Check if argument is a HTML element.
 *
 * @param {Object} value
 * @return {Boolean}
 */ exports.node = function(value) {
                    return value !== undefined && value instanceof HTMLElement && value.nodeType === 1;
                };
                /**
 * Check if argument is a list of HTML elements.
 *
 * @param {Object} value
 * @return {Boolean}
 */ exports.nodeList = function(value) {
                    var type = Object.prototype.toString.call(value);
                    return value !== undefined && (type === "[object NodeList]" || type === "[object HTMLCollection]") && "length" in value && (value.length === 0 || exports.node(value[0]));
                };
                /**
 * Check if argument is a string.
 *
 * @param {Object} value
 * @return {Boolean}
 */ exports.string = function(value) {
                    return typeof value === "string" || value instanceof String;
                };
                /**
 * Check if argument is a function.
 *
 * @param {Object} value
 * @return {Boolean}
 */ exports.fn = function(value) {
                    var type = Object.prototype.toString.call(value);
                    return type === "[object Function]";
                };
            /***/ },
            /***/ 370: /***/ function(module, __unused_webpack_exports, __webpack_require__) {
                var is = __webpack_require__(879);
                var delegate = __webpack_require__(438);
                /**
 * Validates all params and calls the right
 * listener function based on its target type.
 *
 * @param {String|HTMLElement|HTMLCollection|NodeList} target
 * @param {String} type
 * @param {Function} callback
 * @return {Object}
 */ function listen(target, type, callback) {
                    if (!target && !type && !callback) throw new Error("Missing required arguments");
                    if (!is.string(type)) throw new TypeError("Second argument must be a String");
                    if (!is.fn(callback)) throw new TypeError("Third argument must be a Function");
                    if (is.node(target)) return listenNode(target, type, callback);
                    else if (is.nodeList(target)) return listenNodeList(target, type, callback);
                    else if (is.string(target)) return listenSelector(target, type, callback);
                    else throw new TypeError("First argument must be a String, HTMLElement, HTMLCollection, or NodeList");
                }
                /**
 * Adds an event listener to a HTML element
 * and returns a remove listener function.
 *
 * @param {HTMLElement} node
 * @param {String} type
 * @param {Function} callback
 * @return {Object}
 */ function listenNode(node, type, callback) {
                    node.addEventListener(type, callback);
                    return {
                        destroy: function() {
                            node.removeEventListener(type, callback);
                        }
                    };
                }
                /**
 * Add an event listener to a list of HTML elements
 * and returns a remove listener function.
 *
 * @param {NodeList|HTMLCollection} nodeList
 * @param {String} type
 * @param {Function} callback
 * @return {Object}
 */ function listenNodeList(nodeList, type, callback) {
                    Array.prototype.forEach.call(nodeList, function(node) {
                        node.addEventListener(type, callback);
                    });
                    return {
                        destroy: function() {
                            Array.prototype.forEach.call(nodeList, function(node) {
                                node.removeEventListener(type, callback);
                            });
                        }
                    };
                }
                /**
 * Add an event listener to a selector
 * and returns a remove listener function.
 *
 * @param {String} selector
 * @param {String} type
 * @param {Function} callback
 * @return {Object}
 */ function listenSelector(selector, type, callback) {
                    return delegate(document.body, selector, type, callback);
                }
                module.exports = listen;
            /***/ },
            /***/ 817: /***/ function(module) {
                function select(element) {
                    var selectedText;
                    if (element.nodeName === "SELECT") {
                        element.focus();
                        selectedText = element.value;
                    } else if (element.nodeName === "INPUT" || element.nodeName === "TEXTAREA") {
                        var isReadOnly = element.hasAttribute("readonly");
                        if (!isReadOnly) element.setAttribute("readonly", "");
                        element.select();
                        element.setSelectionRange(0, element.value.length);
                        if (!isReadOnly) element.removeAttribute("readonly");
                        selectedText = element.value;
                    } else {
                        if (element.hasAttribute("contenteditable")) element.focus();
                        var selection = window.getSelection();
                        var range = document.createRange();
                        range.selectNodeContents(element);
                        selection.removeAllRanges();
                        selection.addRange(range);
                        selectedText = selection.toString();
                    }
                    return selectedText;
                }
                module.exports = select;
            /***/ },
            /***/ 279: /***/ function(module) {
                function E() {
                // Keep this empty so it's easier to inherit from
                // (via https://github.com/lipsmack from https://github.com/scottcorgan/tiny-emitter/issues/3)
                }
                E.prototype = {
                    on: function(name, callback, ctx) {
                        var e = this.e || (this.e = {});
                        (e[name] || (e[name] = [])).push({
                            fn: callback,
                            ctx: ctx
                        });
                        return this;
                    },
                    once: function(name, callback, ctx) {
                        var self = this;
                        function listener() {
                            self.off(name, listener);
                            callback.apply(ctx, arguments);
                        }
                        listener._ = callback;
                        return this.on(name, listener, ctx);
                    },
                    emit: function(name) {
                        var data = [].slice.call(arguments, 1);
                        var evtArr = ((this.e || (this.e = {}))[name] || []).slice();
                        var i = 0;
                        var len = evtArr.length;
                        for(i; i < len; i++)evtArr[i].fn.apply(evtArr[i].ctx, data);
                        return this;
                    },
                    off: function(name, callback) {
                        var e = this.e || (this.e = {});
                        var evts = e[name];
                        var liveEvents = [];
                        if (evts && callback) {
                            for(var i = 0, len = evts.length; i < len; i++)if (evts[i].fn !== callback && evts[i].fn._ !== callback) liveEvents.push(evts[i]);
                        }
                        // Remove event from queue to prevent memory leak
                        // Suggested by https://github.com/lazd
                        // Ref: https://github.com/scottcorgan/tiny-emitter/commit/c6ebfaa9bc973b33d110a84a307742b7cf94c953#commitcomment-5024910
                        liveEvents.length ? e[name] = liveEvents : delete e[name];
                        return this;
                    }
                };
                module.exports = E;
                module.exports.TinyEmitter = E;
            /***/ }
        };
        /************************************************************************/ /******/ // The module cache
        /******/ var __webpack_module_cache__ = {};
        /******/ /******/ // The require function
        /******/ function __webpack_require__1(moduleId) {
            /******/ // Check if module is in cache
            /******/ if (__webpack_module_cache__[moduleId]) /******/ return __webpack_module_cache__[moduleId].exports;
            /******/ // Create a new module (and put it into the cache)
            /******/ var module = __webpack_module_cache__[moduleId] = {
                /******/ // no module.id needed
                /******/ // no module.loaded needed
                /******/ exports: {}
            };
            /******/ /******/ // Execute the module function
            /******/ __webpack_modules__[moduleId](module, module.exports, __webpack_require__1);
            /******/ /******/ // Return the exports of the module
            /******/ return module.exports;
        /******/ }
        /******/ /************************************************************************/ /******/ /* webpack/runtime/compat get default export */ /******/ !function() {
            /******/ // getDefaultExport function for compatibility with non-harmony modules
            /******/ __webpack_require__1.n = function(module) {
                /******/ var getter = module && module.__esModule ? /******/ function() {
                    return module["default"];
                } : /******/ function() {
                    return module;
                };
                /******/ __webpack_require__1.d(getter, {
                    a: getter
                });
                /******/ return getter;
            /******/ };
        /******/ }();
        /******/ /******/ /* webpack/runtime/define property getters */ /******/ !function() {
            /******/ // define getter functions for harmony exports
            /******/ __webpack_require__1.d = function(exports, definition) {
                /******/ for(var key in definition)/******/ if (__webpack_require__1.o(definition, key) && !__webpack_require__1.o(exports, key)) /******/ Object.defineProperty(exports, key, {
                    enumerable: true,
                    get: definition[key]
                });
            /******/ };
        /******/ }();
        /******/ /******/ /* webpack/runtime/hasOwnProperty shorthand */ /******/ !function() {
            /******/ __webpack_require__1.o = function(obj, prop) {
                return Object.prototype.hasOwnProperty.call(obj, prop);
            };
        /******/ }();
        /******/ /************************************************************************/ /******/ // module exports must be returned from runtime so entry inlining is disabled
        /******/ // startup
        /******/ // Load entry module and return exports
        /******/ return __webpack_require__1(134);
    /******/ }().default;
});

},{}],"35vmY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = (()=>{
    document.addEventListener("DOMContentLoaded", ()=>{
        /**
         * @type {NodeListOf<HTMLSelectElement>}
         */ const selects = document.querySelectorAll("[data-select-sort]");
        selects.forEach((select)=>{
            const options = select.querySelectorAll("option");
            options.forEach((option)=>{
                option.disabled = false;
            });
            if (select.form) {
                select.addEventListener("change", (e)=>{
                    select.form?.dispatchEvent(new Event("submit"));
                });
                select.form.addEventListener("submit", (e)=>{
                    e.preventDefault();
                    if (!select.value) select.disabled = true;
                    select.form?.submit();
                });
            }
        });
    });
})();

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9ehTl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "$vfm", ()=>ze);
parcelHelpers.export(exports, "ModalsContainer", ()=>Te);
parcelHelpers.export(exports, "VueFinalModal", ()=>Me);
parcelHelpers.export(exports, "default", ()=>Ae);
parcelHelpers.export(exports, "defineVfm", ()=>Se);
parcelHelpers.export(exports, "vfmPlugin", ()=>Ae);
var _vue = require("vue");
function L(e, t1) {
    var n = Object.keys(e);
    if (Object.getOwnPropertySymbols) {
        var o = Object.getOwnPropertySymbols(e);
        t1 && (o = o.filter(function(t) {
            return Object.getOwnPropertyDescriptor(e, t).enumerable;
        })), n.push.apply(n, o);
    }
    return n;
}
function B(e) {
    for(var t2 = 1; t2 < arguments.length; t2++){
        var n = null != arguments[t2] ? arguments[t2] : {};
        t2 % 2 ? L(Object(n), !0).forEach(function(t) {
            I(e, t, n[t]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(n)) : L(Object(n)).forEach(function(t) {
            Object.defineProperty(e, t, Object.getOwnPropertyDescriptor(n, t));
        });
    }
    return e;
}
function _(e1) {
    return (_ = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e) {
        return typeof e;
    } : function(e) {
        return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
    })(e1);
}
function j(e, t, n, o, r, i, a) {
    try {
        var l = e[i](a), u = l.value;
    } catch (e2) {
        return void n(e2);
    }
    l.done ? t(u) : Promise.resolve(u).then(o, r);
}
function P(e, t) {
    for(var n = 0; n < t.length; n++){
        var o = t[n];
        o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, o.key, o);
    }
}
function I(e, t, n) {
    return t in e ? Object.defineProperty(e, t, {
        value: n,
        enumerable: !0,
        configurable: !0,
        writable: !0
    }) : e[t] = n, e;
}
function V(e3) {
    return function(e) {
        if (Array.isArray(e)) return D(e);
    }(e3) || function(e) {
        if ("undefined" != typeof Symbol && null != e[Symbol.iterator] || null != e["@@iterator"]) return Array.from(e);
    }(e3) || function(e, t) {
        if (!e) return;
        if ("string" == typeof e) return D(e, t);
        var n = Object.prototype.toString.call(e).slice(8, -1);
        "Object" === n && e.constructor && (n = e.constructor.name);
        if ("Map" === n || "Set" === n) return Array.from(e);
        if ("Arguments" === n || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return D(e, t);
    }(e3) || function() {
        throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }();
}
function D(e, t) {
    (null == t || t > e.length) && (t = e.length);
    for(var n = 0, o = new Array(t); n < t; n++)o[n] = e[n];
    return o;
}
var N = function(e4) {
    return function(e, t) {
        return V(e.querySelectorAll(t) || []);
    }(e4, 'button:not([disabled]), select:not([disabled]), a[href]:not([disabled]), area[href]:not([disabled]), [contentEditable=""]:not([disabled]), [contentEditable="true"]:not([disabled]), [contentEditable="TRUE"]:not([disabled]), textarea:not([disabled]), iframe:not([disabled]), input:not([disabled]), summary:not([disabled]), [tabindex]:not([tabindex="-1"])');
}, R = function(e) {
    return e == document.activeElement;
}, $ = function() {
    function e5() {
        !function(e, t) {
            if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
        }(this, e5), this.root = null, this.elements = [], this.onKeyDown = this.onKeyDown.bind(this), this.enable = this.enable.bind(this), this.disable = this.disable.bind(this), this.firstElement = this.firstElement.bind(this), this.lastElement = this.lastElement.bind(this);
    }
    var t3, n, o;
    return t3 = e5, n = [
        {
            key: "lastElement",
            value: function() {
                return this.elements[this.elements.length - 1] || null;
            }
        },
        {
            key: "firstElement",
            value: function() {
                return this.elements[0] || null;
            }
        },
        {
            key: "onKeyDown",
            value: function(e6) {
                if (function(e) {
                    return "Tab" === e.key || 9 === e.keyCode;
                }(e6)) {
                    if (!e6.shiftKey) return !document.activeElement || R(this.lastElement()) ? (this.firstElement().focus(), void e6.preventDefault()) : void 0;
                    R(this.firstElement()) && (this.lastElement().focus(), e6.preventDefault());
                }
            }
        },
        {
            key: "enabled",
            value: function() {
                return !!this.root;
            }
        },
        {
            key: "enable",
            value: function(e) {
                e && (this.root = e, this.elements = N(this.root), this.root.addEventListener("keydown", this.onKeyDown));
            }
        },
        {
            key: "disable",
            value: function() {
                this.root.removeEventListener("keydown", this.onKeyDown), this.root = null;
            }
        }
    ], P(t3.prototype, n), o && P(t3, o), e5;
}(), H = function(e) {
    var t = e.targetTouches ? e.targetTouches[0] : e;
    return {
        x: t.clientX,
        y: t.clientY
    };
}, K = function(e, t, n) {
    return "number" != typeof e && (e = Math.min(t, n) || t), "number" != typeof n && (n = Math.max(t, e)), Math.min(Math.max(t, e), n);
}, U = function(e) {
    return e && Number(e.replace(/px$/, "")) || 0;
}, F = {
    down: {
        pc: "mousedown",
        m: "touchstart"
    },
    move: {
        pc: "mousemove",
        m: "touchmove"
    },
    up: {
        pc: "mouseup",
        m: "touchend"
    }
}, W = function(e, t, n) {
    t && t.addEventListener(F[e].pc, n), t && t.addEventListener(F[e].m, n, {
        passive: !1
    });
}, Y = function(e, t, n) {
    t && t.removeEventListener(F[e].pc, n), t && t.removeEventListener(F[e].m, n);
}, q = !1;
if ("undefined" != typeof window) {
    var G = {
        get passive () {
            q = !0;
        }
    };
    window.addEventListener("testPassive", null, G), window.removeEventListener("testPassive", null, G);
}
var X, Z, J = "undefined" != typeof window && window.navigator && window.navigator.platform && (/iP(ad|hone|od)/.test(window.navigator.platform) || "MacIntel" === window.navigator.platform && window.navigator.maxTouchPoints > 1), Q = [], ee = !1, te = 0, ne = -1, oe = function(e7, t4) {
    var n = !1;
    return (function(e) {
        for(var t = []; e;){
            if (t.push(e), e.classList.contains("vfm")) return t;
            e = e.parentElement;
        }
        return t;
    })(e7).forEach(function(e8) {
        (function(e) {
            if (!e || e.nodeType !== Node.ELEMENT_NODE) return !1;
            var t = window.getComputedStyle(e);
            return [
                "auto",
                "scroll"
            ].includes(t.overflowY) && e.scrollHeight > e.clientHeight;
        })(e8) && function(e, t) {
            return !(0 === e.scrollTop && t < 0 || e.scrollTop + e.clientHeight + t >= e.scrollHeight && t > 0);
        }(e8, t4) && (n = !0);
    }), n;
}, re = function(e) {
    return Q.some(function() {
        return oe(e, -te);
    });
}, ie = function(e) {
    var t = e || window.event;
    return !!re(t.target) || t.touches.length > 1 || (t.preventDefault && t.preventDefault(), !1);
}, ae = function(e9, t5) {
    if (e9) {
        if (!Q.some(function(t) {
            return t.targetElement === e9;
        })) {
            var n1 = {
                targetElement: e9,
                options: t5 || {}
            };
            Q = [].concat(V(Q), [
                n1
            ]), J ? (e9.ontouchstart = function(e) {
                1 === e.targetTouches.length && (ne = e.targetTouches[0].clientY);
            }, e9.ontouchmove = function(t6) {
                1 === t6.targetTouches.length && function(e10, t) {
                    te = e10.targetTouches[0].clientY - ne, !re(e10.target) && (t && 0 === t.scrollTop && te > 0 || function(e) {
                        return !!e && e.scrollHeight - e.scrollTop <= e.clientHeight;
                    }(t) && te < 0 ? ie(e10) : e10.stopPropagation());
                }(t6, e9);
            }, ee || (document.addEventListener("touchmove", ie, q ? {
                passive: !1
            } : void 0), ee = !0)) : function(e) {
                if (void 0 === Z) {
                    var t = !!e && !0 === e.reserveScrollBarGap, n = window.innerWidth - document.documentElement.clientWidth;
                    if (t && n > 0) {
                        var o = parseInt(getComputedStyle(document.body).getPropertyValue("padding-right"), 10);
                        Z = document.body.style.paddingRight, document.body.style.paddingRight = "".concat(o + n, "px");
                    }
                }
                void 0 === X && (X = document.body.style.overflow, document.body.style.overflow = "hidden");
            }(t5);
        }
    } else console.error("disableBodyScroll unsuccessful - targetElement must be provided when calling disableBodyScroll on IOS devices.");
}, le = function(e) {
    e ? (Q = Q.filter(function(t) {
        return t.targetElement !== e;
    }), J ? (e.ontouchstart = null, e.ontouchmove = null, ee && 0 === Q.length && (document.removeEventListener("touchmove", ie, q ? {
        passive: !1
    } : void 0), ee = !1)) : Q.length || (void 0 !== Z && (document.body.style.paddingRight = Z, Z = void 0), void 0 !== X && (document.body.style.overflow = X, X = void 0))) : console.error("enableBodyScroll unsuccessful - targetElement must be provided when calling enableBodyScroll on IOS devices.");
}, ue = function() {}, se = "enter", fe = "entering", de = "leave", ce = "leavng", ve = {
    t: "ns-resize",
    tr: "nesw-resize",
    r: "ew-resize",
    br: "nwse-resize",
    b: "ns-resize",
    bl: "nesw-resize",
    l: "ew-resize",
    tl: "nwse-resize"
}, pe = {
    props: {
        name: {
            type: String,
            default: null
        },
        modelValue: {
            type: Boolean,
            default: !1
        },
        ssr: {
            type: Boolean,
            default: !0
        },
        classes: {
            type: [
                String,
                Object,
                Array
            ],
            default: ""
        },
        overlayClass: {
            type: [
                String,
                Object,
                Array
            ],
            default: ""
        },
        contentClass: {
            type: [
                String,
                Object,
                Array
            ],
            default: ""
        },
        styles: {
            type: [
                Object,
                Array
            ],
            default: function() {
                return {};
            }
        },
        overlayStyle: {
            type: [
                Object,
                Array
            ],
            default: function() {
                return {};
            }
        },
        contentStyle: {
            type: [
                Object,
                Array
            ],
            default: function() {
                return {};
            }
        },
        lockScroll: {
            type: Boolean,
            default: !0
        },
        hideOverlay: {
            type: Boolean,
            default: !1
        },
        clickToClose: {
            type: Boolean,
            default: !0
        },
        escToClose: {
            type: Boolean,
            default: !1
        },
        preventClick: {
            type: Boolean,
            default: !1
        },
        attach: {
            type: null,
            default: !1,
            validator: function(e) {
                var t = _(e);
                return "boolean" === t || "string" === t || e.nodeType === Node.ELEMENT_NODE;
            }
        },
        transition: {
            type: [
                String,
                Object
            ],
            default: "vfm"
        },
        overlayTransition: {
            type: [
                String,
                Object
            ],
            default: "vfm"
        },
        zIndexAuto: {
            type: Boolean,
            default: !0
        },
        zIndexBase: {
            type: [
                String,
                Number
            ],
            default: 1e3
        },
        zIndex: {
            type: [
                Boolean,
                String,
                Number
            ],
            default: !1
        },
        focusRetain: {
            type: Boolean,
            default: !0
        },
        focusTrap: {
            type: Boolean,
            default: !1
        },
        fitParent: {
            type: Boolean,
            default: !0
        },
        drag: {
            type: Boolean,
            default: !1
        },
        dragSelector: {
            type: String,
            default: ""
        },
        keepChangedStyle: {
            type: Boolean,
            default: !1
        },
        resize: {
            type: Boolean,
            default: !1
        },
        resizeDirections: {
            type: Array,
            default: function() {
                return [
                    "t",
                    "tr",
                    "r",
                    "br",
                    "b",
                    "bl",
                    "l",
                    "tl"
                ];
            },
            validator: function(e) {
                return [
                    "t",
                    "tr",
                    "r",
                    "br",
                    "b",
                    "bl",
                    "l",
                    "tl"
                ].filter(function(t) {
                    return -1 !== e.indexOf(t);
                }).length === e.length;
            }
        },
        minWidth: {
            type: Number,
            default: 0
        },
        minHeight: {
            type: Number,
            default: 0
        },
        maxWidth: {
            type: Number,
            default: 1 / 0
        },
        maxHeight: {
            type: Number,
            default: 1 / 0
        }
    },
    emits: [
        "update:modelValue",
        "click-outside",
        "before-open",
        "opened",
        "before-close",
        "closed",
        "_before-open",
        "_opened",
        "_closed",
        "drag:start",
        "drag:move",
        "drag:end",
        "resize:start",
        "resize:move",
        "resize:end"
    ],
    setup: function(l, u1) {
        var s1 = u1.emit, f1 = Symbol("vfm"), d1 = (0, _vue.ref)(null), c1 = (0, _vue.ref)(null), v = (0, _vue.ref)(null), p1 = (0, _vue.ref)(null), m1 = (0, _vue.ref)(null), y1 = (0, _vue.ref)(null), h1 = (0, _vue.ref)(null), b1 = new $, g1 = (0, _vue.ref)(!1), w1 = (0, _vue.reactive)({
            modal: !1,
            overlay: !1,
            resize: !1
        }), x = (0, _vue.ref)(null), E = (0, _vue.ref)(null), S = (0, _vue.ref)(!1), O = (0, _vue.ref)({}), z = (0, _vue.ref)({}), M = (0, _vue.ref)(null), T = (0, _vue.ref)(null), C = ue, A = ue, k = (0, _vue.computed)(function() {
            return "string" == typeof l.overlayTransition ? {
                name: l.overlayTransition
            } : B({}, l.overlayTransition);
        }), L1 = (0, _vue.computed)(function() {
            return "string" == typeof l.transition ? {
                name: l.transition
            } : B({}, l.transition);
        }), _1 = (0, _vue.computed)(function() {
            return (l.hideOverlay || x.value === de) && E.value === de;
        }), j1 = (0, _vue.computed)(function() {
            return !1 === l.zIndex ? !!l.zIndexAuto && +l.zIndexBase + 2 * (h1.value || 0) : l.zIndex;
        }), P1 = (0, _vue.computed)(function() {
            return B({}, !1 !== j1.value && {
                zIndex: j1.value
            });
        }), D1 = (0, _vue.computed)(function() {
            var e = [
                z.value
            ];
            return Array.isArray(l.contentStyle) ? e.push.apply(e, V(l.contentStyle)) : e.push(l.contentStyle), e;
        });
        function N1() {
            return {
                uid: f1,
                props: l,
                emit: s1,
                vfmContainer: c1,
                vfmContent: v,
                vfmResize: p1,
                vfmOverlayTransition: m1,
                vfmTransition: y1,
                getAttachElement: G,
                modalStackIndex: h1,
                visibility: w1,
                handleLockScroll: q1,
                $focusTrap: b1,
                toggle: Q1,
                params: O
            };
        }
        function R1() {
            if (l.modelValue) {
                if (s1("_before-open", X1({
                    type: "_before-open"
                })), Z1("before-open", !1)) return void A("show");
                var e11 = G();
                if (e11 || !1 === l.attach) {
                    !1 !== l.attach && e11.appendChild(d1.value);
                    var t7 = l.api.openedModals.findIndex(function(e) {
                        return e.uid === f1;
                    });
                    -1 !== t7 && l.api.openedModals.splice(t7, 1), l.api.openedModals.push(N1()), h1.value = l.api.openedModals.length - 1, q1(), l.api.openedModals.filter(function(e) {
                        return e.uid !== f1;
                    }).forEach(function(t, n) {
                        t.getAttachElement() === e11 && (t.modalStackIndex.value = n, t.visibility.overlay = !1);
                    }), g1.value = !0, w1.overlay = !0, w1.modal = !0;
                } else !1 !== e11 && console.warn("Unable to locate target ".concat(l.attach));
            }
        }
        function F1() {
            var e13 = l.api.openedModals.findIndex(function(e) {
                return e.uid === f1;
            });
            if (-1 !== e13 && l.api.openedModals.splice(e13, 1), l.api.openedModals.length > 0) {
                var t = l.api.openedModals[l.api.openedModals.length - 1];
                t.props.focusTrap && t.$focusTrap.firstElement().focus(), (t.props.focusRetain || t.props.focusTrap) && t.vfmContainer.value.focus(), !t.props.hideOverlay && (t.visibility.overlay = !0);
            }
            l.drag && ne1(), l.resize && re1(), M.value = null, w1.overlay = !1, w1.modal = !1;
        }
        function q1() {
            l.modelValue && (0, _vue.nextTick)(function() {
                l.lockScroll ? ae(c1.value, {
                    reserveScrollBarGap: !0
                }) : le(c1.value);
            });
        }
        function G() {
            return !1 !== l.attach && ("string" == typeof l.attach ? !!window && window.document.querySelector(l.attach) : l.attach);
        }
        function X1() {
            var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
            return B({
                ref: N1()
            }, e);
        }
        function Z1(e, t) {
            var n = !1, o = X1({
                type: e,
                stop: function() {
                    n = !0;
                }
            });
            return s1(e, o), !!n && (S.value = !0, (0, _vue.nextTick)(function() {
                s1("update:modelValue", t);
            }), !0);
        }
        function J1(e, t, n) {
            M.value = "".concat(t, ":").concat(n), s1(M.value, e);
        }
        function Q1(e14, t) {
            var n = arguments;
            return new Promise(function(o, r) {
                C = function(e) {
                    o(e), C = ue;
                }, A = function(e) {
                    r(e), A = ue;
                };
                var i = "boolean" == typeof e14 ? e14 : !l.modelValue;
                i && 2 === n.length && (O.value = t), s1("update:modelValue", i);
            });
        }
        function ee1(e15) {
            e15.stopPropagation();
            var t10, n3 = "resize", o1 = "drag", r1 = e15.target.getAttribute("direction");
            if (r1) t10 = n3;
            else {
                if (!function(e, t, n) {
                    return "" === n || V(t.querySelectorAll(n)).includes(e.target);
                }(e15, v.value, l.dragSelector)) return;
                t10 = o1;
            }
            J1(e15, t10, "start");
            var i1, a1, u2, s2, f2 = H(e15), d = c1.value.getBoundingClientRect(), p = v.value.getBoundingClientRect(), m = "absolute" === window.getComputedStyle(v.value).position, y = U(z.value.top), h = U(z.value.left), b = function() {
                if (l.fitParent) {
                    var e = {
                        absolute: function() {
                            return {
                                minTop: 0,
                                minLeft: 0,
                                maxTop: d.height - p.height,
                                maxLeft: d.width - p.width
                            };
                        },
                        relative: function() {
                            return {
                                minTop: y + d.top - p.top,
                                minLeft: h + d.left - p.left,
                                maxTop: y + d.bottom - p.bottom,
                                maxLeft: h + d.right - p.right
                            };
                        }
                    };
                    return m ? e.absolute() : e.relative();
                }
                return {};
            }(), g = t10 === n3 && (i1 = document.body, a1 = "cursor", u2 = ve[r1], s2 = i1.style[a1], i1.style[a1] = u2, function() {
                i1.style[a1] = s2;
            }), w = function(e16) {
                e16.stopPropagation(), J1(e16, t10, "move");
                var i2, a2, u3 = H(e16), s3 = {
                    x: u3.x - f2.x,
                    y: u3.y - f2.y
                };
                t10 === n3 && (s3 = function(e17, t11, n4, o2, r2) {
                    var i3 = function(e) {
                        var n, o = t11[e.axis];
                        o = l.fitParent ? K(e.min, o, e.max) : o;
                        var i = K(e.minEdge, e.getEdge(o), e.maxEdge);
                        return o = e.getOffsetAxis(i, r2), I(n = {}, e.edgeName, i), I(n, e.axis, o), n;
                    }, a3 = function(e18, t, r3, i) {
                        var a, u = o2[t], s = n4[e18] - o2[e18], f = (a = t).charAt(0).toUpperCase() + a.slice(1);
                        return {
                            axis: r3,
                            edgeName: t,
                            min: i ? s : -u,
                            max: i ? u : s,
                            minEdge: l["min".concat(f)],
                            maxEdge: l["max".concat(f)],
                            getEdge: function(e) {
                                return o2[t] - e * (i ? 1 : -1);
                            },
                            getOffsetAxis: function(e, n) {
                                var r = o2[t] - e;
                                return n ? i ? r : 0 : (i ? 1 : -1) * r / 2;
                            }
                        };
                    }, u4 = {
                        t: [
                            "top",
                            "height",
                            "y",
                            !0
                        ],
                        b: [
                            "bottom",
                            "height",
                            "y",
                            !1
                        ],
                        l: [
                            "left",
                            "width",
                            "x",
                            !0
                        ],
                        r: [
                            "right",
                            "width",
                            "x",
                            !1
                        ]
                    }, s4 = {
                        x: 0,
                        y: 0
                    };
                    return e17.split("").forEach(function(e) {
                        var t = a3.apply(void 0, V(u4[e]));
                        s4 = B(B({}, s4), i3(t));
                    }), s4;
                }(r1, s3, d, p, m)), m ? (i2 = p.top - d.top + s3.y, a2 = p.left - d.left + s3.x) : (i2 = y + s3.y, a2 = h + s3.x), t10 === o1 && l.fitParent && (i2 = K(b.minTop, i2, b.maxTop), a2 = K(b.minLeft, a2, b.maxLeft));
                var c = B(B(B({
                    position: "relative",
                    top: i2 + "px",
                    left: a2 + "px",
                    margin: "unset",
                    touchAction: "none"
                }, m && {
                    position: "absolute",
                    transform: "unset",
                    width: p.width + "px",
                    height: p.height + "px"
                }), s3.width && {
                    width: s3.width + "px"
                }), s3.height && {
                    height: s3.height + "px"
                });
                z.value = B(B({}, z.value), c);
            };
            W("move", document, w), W("up", document, function e(o) {
                o.stopPropagation(), t10 === n3 && g && g(), setTimeout(function() {
                    J1(o, t10, "end");
                }), Y("move", document, w), Y("up", document, e);
            });
        }
        function te1() {
            W("down", v.value, ee1), z.value.touchAction = "none";
        }
        function ne1() {
            Y("down", v.value, ee1);
        }
        function oe1() {
            w1.resize = !0, (0, _vue.nextTick)(function() {
                W("down", p1.value, ee1);
            });
        }
        function re1() {
            Y("down", p1.value, ee1), w1.resize = !1;
        }
        return (0, _vue.watch)(function() {
            return l.modelValue;
        }, function(e) {
            if (S.value) S.value = !1;
            else if (R1(), !e) {
                if (Z1("before-close", !0)) return void A("hide");
                F1();
            }
        }), (0, _vue.watch)(function() {
            return l.lockScroll;
        }, q1), (0, _vue.watch)(function() {
            return l.hideOverlay;
        }, function(e) {
            l.modelValue && !e && (w1.overlay = !0);
        }), (0, _vue.watch)(function() {
            return l.attach;
        }, R1), (0, _vue.watch)(_1, function(e) {
            e && (g1.value = !1, c1.value.style.display = "none");
        }, {
            flush: "post"
        }), (0, _vue.watch)(function() {
            return l.drag;
        }, function(e) {
            g1.value && (e ? te1() : ne1());
        }), (0, _vue.watch)(function() {
            return l.resize;
        }, function(e) {
            g1.value && (e ? oe1() : re1());
        }), (0, _vue.watch)(function() {
            return l.keepChangedStyle;
        }, function(e) {
            e || (z.value = {});
        }), l.api.modals.push(N1()), (0, _vue.onMounted)(function() {
            R1();
        }), (0, _vue.onBeforeUnmount)(function() {
            var e19;
            F1(), l.lockScroll && c1.value && le(c1.value), null == d1 || null === (e19 = d1.value) || void 0 === e19 || e19.remove();
            var t = l.api.modals.findIndex(function(e) {
                return e.uid === f1;
            });
            l.api.modals.splice(t, 1);
        }), {
            root: d1,
            vfmContainer: c1,
            vfmContent: v,
            vfmResize: p1,
            vfmOverlayTransition: m1,
            vfmTransition: y1,
            computedOverlayTransition: k,
            computedTransition: L1,
            visible: g1,
            visibility: w1,
            params: O,
            calculateZIndex: j1,
            bindStyle: P1,
            bindContentStyle: D1,
            beforeOverlayEnter: function() {
                x.value = fe;
            },
            afterOverlayEnter: function() {
                x.value = se;
            },
            beforeOverlayLeave: function() {
                x.value = ce;
            },
            afterOverlayLeave: function() {
                x.value = de;
            },
            beforeModalEnter: function() {
                E.value = fe;
            },
            afterModalEnter: function() {
                E.value = se, (l.focusRetain || l.focusTrap) && c1.value.focus(), l.focusTrap && b1.enable(c1.value), l.drag && te1(), l.resize && oe1(), s1("_opened"), s1("opened", X1({
                    type: "opened"
                })), C("show");
            },
            beforeModalLeave: function() {
                E.value = ce, b1.enabled() && b1.disable();
            },
            afterModalLeave: function() {
                E.value = de, h1.value = null, l.lockScroll && le(c1.value), l.keepChangedStyle || (z.value = {});
                var e = !1, t = X1({
                    type: "closed",
                    stop: function() {
                        e = !0;
                    }
                });
                s1("_closed"), s1("closed", t), C("hide"), e || (O.value = {});
            },
            onMousedown: function(e) {
                T.value = null == e ? void 0 : e.target;
            },
            onMouseupContainer: function() {
                T.value === c1.value && "resize:move" !== M.value && (s1("click-outside", X1({
                    type: "click-outside"
                })), l.clickToClose && s1("update:modelValue", !1));
            },
            onEsc: function() {
                g1.value && l.escToClose && s1("update:modelValue", !1);
            }
        };
    }
};
(0, _vue.pushScopeId)("data-v-2836fdb5");
var me = [
    "aria-expanded"
], ye = {
    key: 0,
    ref: "vfmResize",
    class: "vfm__resize vfm--absolute vfm--inset vfm--prevent-none vfm--select-none vfm--touch-none"
}, he = [
    "direction"
];
(0, _vue.popScopeId)();
!function(e, t) {
    void 0 === t && (t = {});
    var n = t.insertAt;
    if (e && "undefined" != typeof document) {
        var o = document.head || document.getElementsByTagName("head")[0], r = document.createElement("style");
        r.type = "text/css", "top" === n && o.firstChild ? o.insertBefore(r, o.firstChild) : o.appendChild(r), r.styleSheet ? r.styleSheet.cssText = e : r.appendChild(document.createTextNode(e));
    }
}("\n.vfm--fixed[data-v-2836fdb5] {\n  position: fixed;\n}\n.vfm--absolute[data-v-2836fdb5] {\n  position: absolute;\n}\n.vfm--inset[data-v-2836fdb5] {\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n}\n.vfm--overlay[data-v-2836fdb5] {\n  background-color: rgba(0, 0, 0, 0.5);\n}\n.vfm--prevent-none[data-v-2836fdb5] {\n  pointer-events: none;\n}\n.vfm--prevent-auto[data-v-2836fdb5] {\n  pointer-events: auto;\n}\n.vfm--outline-none[data-v-2836fdb5]:focus {\n  outline: none;\n}\n.vfm-enter-active[data-v-2836fdb5],\n.vfm-leave-active[data-v-2836fdb5] {\n  transition: opacity 0.2s;\n}\n.vfm-enter-from[data-v-2836fdb5],\n.vfm-leave-to[data-v-2836fdb5] {\n  opacity: 0;\n}\n.vfm--touch-none[data-v-2836fdb5] {\n  touch-action: none;\n}\n.vfm--select-none[data-v-2836fdb5] {\n  -webkit-user-select: none;\n     -moz-user-select: none;\n      -ms-user-select: none;\n          user-select: none;\n}\n.vfm--resize-tr[data-v-2836fdb5],\n.vfm--resize-br[data-v-2836fdb5],\n.vfm--resize-bl[data-v-2836fdb5],\n.vfm--resize-tl[data-v-2836fdb5] {\n  width: 12px;\n  height: 12px;\n  z-index: 10;\n}\n.vfm--resize-t[data-v-2836fdb5] {\n  top: -6px;\n  left: 0;\n  width: 100%;\n  height: 12px;\n  cursor: ns-resize;\n}\n.vfm--resize-tr[data-v-2836fdb5] {\n  top: -6px;\n  right: -6px;\n  cursor: nesw-resize;\n}\n.vfm--resize-r[data-v-2836fdb5] {\n  top: 0;\n  right: -6px;\n  width: 12px;\n  height: 100%;\n  cursor: ew-resize;\n}\n.vfm--resize-br[data-v-2836fdb5] {\n  bottom: -6px;\n  right: -6px;\n  cursor: nwse-resize;\n}\n.vfm--resize-b[data-v-2836fdb5] {\n  bottom: -6px;\n  left: 0;\n  width: 100%;\n  height: 12px;\n  cursor: ns-resize;\n}\n.vfm--resize-bl[data-v-2836fdb5] {\n  bottom: -6px;\n  left: -6px;\n  cursor: nesw-resize;\n}\n.vfm--resize-l[data-v-2836fdb5] {\n  top: 0;\n  left: -6px;\n  width: 12px;\n  height: 100%;\n  cursor: ew-resize;\n}\n.vfm--resize-tl[data-v-2836fdb5] {\n  top: -6px;\n  left: -6px;\n  cursor: nwse-resize;\n}\n"), pe.render = function(e20, t, n, o, r, i) {
    return n.ssr || o.visible ? (0, _vue.withDirectives)(((0, _vue.openBlock)(), (0, _vue.createElementBlock)("div", {
        key: 0,
        ref: "root",
        style: (0, _vue.normalizeStyle)(o.bindStyle),
        class: (0, _vue.normalizeClass)([
            "vfm vfm--inset",
            [
                !1 === n.attach ? "vfm--fixed" : "vfm--absolute",
                {
                    "vfm--prevent-none": n.preventClick
                }
            ]
        ]),
        onKeydown: t[3] || (t[3] = (0, _vue.withKeys)(function() {
            return o.onEsc && o.onEsc.apply(o, arguments);
        }, [
            "esc"
        ]))
    }, [
        (0, _vue.createVNode)((0, _vue.Transition), (0, _vue.mergeProps)(o.computedOverlayTransition, {
            onBeforeEnter: o.beforeOverlayEnter,
            onAfterEnter: o.afterOverlayEnter,
            onBeforeLeave: o.beforeOverlayLeave,
            onAfterLeave: o.afterOverlayLeave
        }), {
            default: (0, _vue.withCtx)(function() {
                return [
                    !n.hideOverlay && o.visibility.overlay ? ((0, _vue.openBlock)(), (0, _vue.createElementBlock)("div", {
                        key: 0,
                        class: (0, _vue.normalizeClass)([
                            "vfm__overlay vfm--overlay vfm--absolute vfm--inset",
                            n.overlayClass
                        ]),
                        style: (0, _vue.normalizeStyle)(n.overlayStyle)
                    }, null, 6)) : (0, _vue.createCommentVNode)("v-if", !0)
                ];
            }),
            _: 1
        }, 16, [
            "onBeforeEnter",
            "onAfterEnter",
            "onBeforeLeave",
            "onAfterLeave"
        ]),
        (0, _vue.createVNode)((0, _vue.Transition), (0, _vue.mergeProps)(o.computedTransition, {
            onBeforeEnter: o.beforeModalEnter,
            onAfterEnter: o.afterModalEnter,
            onBeforeLeave: o.beforeModalLeave,
            onAfterLeave: o.afterModalLeave
        }), {
            default: (0, _vue.withCtx)(function() {
                return [
                    (0, _vue.withDirectives)((0, _vue.createElementVNode)("div", {
                        ref: "vfmContainer",
                        class: (0, _vue.normalizeClass)([
                            "vfm__container vfm--absolute vfm--inset vfm--outline-none",
                            n.classes
                        ]),
                        style: (0, _vue.normalizeStyle)(n.styles),
                        "aria-expanded": o.visibility.modal.toString(),
                        role: "dialog",
                        "aria-modal": "true",
                        tabindex: "-1",
                        onMouseup: t[1] || (t[1] = (0, _vue.withModifiers)(function() {
                            return o.onMouseupContainer && o.onMouseupContainer.apply(o, arguments);
                        }, [
                            "self"
                        ])),
                        onMousedown: t[2] || (t[2] = (0, _vue.withModifiers)(function() {
                            return o.onMousedown && o.onMousedown.apply(o, arguments);
                        }, [
                            "self"
                        ]))
                    }, [
                        (0, _vue.createElementVNode)("div", {
                            ref: "vfmContent",
                            class: (0, _vue.normalizeClass)([
                                "vfm__content",
                                [
                                    n.contentClass,
                                    {
                                        "vfm--prevent-auto": n.preventClick
                                    }
                                ]
                            ]),
                            style: (0, _vue.normalizeStyle)(o.bindContentStyle),
                            onMousedown: t[0] || (t[0] = function(e) {
                                return o.onMousedown(null);
                            })
                        }, [
                            (0, _vue.renderSlot)(e20.$slots, "default", {
                                params: o.params,
                                close: function() {
                                    return e20.$emit("update:modelValue", !1);
                                }
                            }),
                            o.visibility.resize && o.visibility.modal ? ((0, _vue.openBlock)(), (0, _vue.createElementBlock)("div", ye, [
                                ((0, _vue.openBlock)(!0), (0, _vue.createElementBlock)((0, _vue.Fragment), null, (0, _vue.renderList)(n.resizeDirections, function(e) {
                                    return (0, _vue.openBlock)(), (0, _vue.createElementBlock)("div", {
                                        key: e,
                                        direction: e,
                                        class: (0, _vue.normalizeClass)([
                                            "vfm--resize-".concat(e),
                                            "vfm--absolute vfm--prevent-auto"
                                        ])
                                    }, null, 10, he);
                                }), 128))
                            ], 512)) : (0, _vue.createCommentVNode)("v-if", !0)
                        ], 38)
                    ], 46, me), [
                        [
                            (0, _vue.vShow),
                            o.visibility.modal
                        ]
                    ])
                ];
            }),
            _: 3
        }, 16, [
            "onBeforeEnter",
            "onAfterEnter",
            "onBeforeLeave",
            "onAfterLeave"
        ])
    ], 38)), [
        [
            (0, _vue.vShow),
            !n.ssr || o.visible
        ]
    ]) : (0, _vue.createCommentVNode)("v-if", !0);
}, pe.__scopeId = "data-v-2836fdb5", pe.__file = "lib/VueFinalModal.vue";
var be = {
    props: {},
    methods: {
        slice: function(e) {
            this.api.dynamicModals.splice(e, 1);
        },
        beforeOpen: function(e21, t12, n5) {
            var o, r4 = this;
            return (o = function*() {
                e21.ref.params.value = t12.params, yield r4.$nextTick(), yield r4.$nextTick(), t12.value || (r4.slice(n5), t12.reject("show"));
            }, function() {
                var e22 = this, t = arguments;
                return new Promise(function(n, r) {
                    var i = o.apply(e22, t);
                    function a(e) {
                        j(i, n, r, a, l, "next", e);
                    }
                    function l(e) {
                        j(i, n, r, a, l, "throw", e);
                    }
                    a(void 0);
                });
            })();
        },
        isString: function(e) {
            return "string" == typeof e;
        }
    }
}, ge = {
    class: "modals-container"
}, we = [
    "innerHTML"
];
function xe(e, t) {
    var n = B(B({}, e), {}, {
        props: B({}, e.props)
    });
    return Object.assign(n.props, {
        api: {
            type: Object,
            default: function() {
                return t;
            }
        }
    }), n;
}
be.render = function(e23, t13, n, o, r, i) {
    return (0, _vue.openBlock)(), (0, _vue.createElementBlock)("div", ge, [
        ((0, _vue.openBlock)(!0), (0, _vue.createElementBlock)((0, _vue.Fragment), null, (0, _vue.renderList)(e23.api.dynamicModals, function(e24, t14) {
            return (0, _vue.openBlock)(), (0, _vue.createBlock)((0, _vue.resolveDynamicComponent)(e24.component), (0, _vue.mergeProps)({
                key: e24.id
            }, e24.bind, {
                modelValue: e24.value,
                "onUpdate:modelValue": function(t) {
                    return e24.value = t;
                }
            }, (0, _vue.toHandlers)(e24.on), {
                on_closed: function(e) {
                    return i.slice(t14);
                },
                on_beforeOpen: function(t) {
                    return i.beforeOpen(t, e24);
                },
                on_opened: e24.opened
            }), (0, _vue.createSlots)({
                _: 2
            }, [
                (0, _vue.renderList)(e24.slots, function(e, t) {
                    return {
                        name: t,
                        fn: (0, _vue.withCtx)(function() {
                            return [
                                (0, _vue.createCommentVNode)(" eslint-disable vue/no-v-html "),
                                i.isString(e) ? ((0, _vue.openBlock)(), (0, _vue.createElementBlock)("div", {
                                    key: 0,
                                    innerHTML: e
                                }, null, 8, we)) : ((0, _vue.openBlock)(), (0, _vue.createBlock)((0, _vue.resolveDynamicComponent)(e.component), (0, _vue.mergeProps)({
                                    key: 1
                                }, e.bind, (0, _vue.toHandlers)(e.on || {})), null, 16))
                            ];
                        })
                    };
                })
            ]), 1040, [
                "modelValue",
                "onUpdate:modelValue",
                "on_closed",
                "on_beforeOpen",
                "on_opened"
            ]);
        }), 128))
    ]);
}, be.__file = "lib/ModalsContainer.vue";
var Ee = 0, Se = function() {
    var e25, t15, n6 = (t15 = null, {
        show: function(e) {
            for(var n = this, o3 = arguments.length, r = new Array(o3 > 1 ? o3 - 1 : 0), i4 = 1; i4 < o3; i4++)r[i4 - 1] = arguments[i4];
            switch(_(e)){
                case "string":
                    return this.toggle.apply(this, [
                        e,
                        !0
                    ].concat(r));
                case "object":
                    return Promise.allSettled([
                        new Promise(function(o, i) {
                            var a = {
                                value: !0,
                                id: Symbol("dynamicModal"),
                                component: t15,
                                bind: {},
                                slots: {},
                                on: {},
                                params: r[0],
                                reject: i,
                                opened: function() {
                                    o("show");
                                }
                            };
                            n.dynamicModals.push((0, _vue.shallowReactive)(Object.assign(a, e)));
                        })
                    ]);
            }
        },
        hide: function() {
            for(var e = arguments.length, t = new Array(e), n = 0; n < e; n++)t[n] = arguments[n];
            return this.toggle(t, !1);
        },
        hideAll: function() {
            return this.hide.apply(this, V(this.openedModals.map(function(e) {
                return e.props.name;
            })));
        },
        toggle: function(e26) {
            for(var t = arguments.length, n = new Array(t > 1 ? t - 1 : 0), o = 1; o < t; o++)n[o - 1] = arguments[o];
            var r = Array.isArray(e26) ? this.get.apply(this, V(e26)) : this.get(e26);
            return Promise.allSettled(r.map(function(e) {
                return e.toggle.apply(e, n);
            }));
        },
        get: function() {
            for(var e27 = arguments.length, t = new Array(e27), n = 0; n < e27; n++)t[n] = arguments[n];
            return this.modals.filter(function(e) {
                return t.includes(e.props.name);
            });
        },
        dynamicModals: (0, _vue.shallowReactive)([]),
        openedModals: [],
        modals: [],
        _setDefaultModal: function(e) {
            t15 = e;
        }
    });
    return I(e25 = {}, "$vfm", n6), I(e25, "VueFinalModal", function(e) {
        var t = xe(pe, e);
        return e._setDefaultModal(t), t;
    }(n6)), I(e25, "ModalsContainer", function(e) {
        return xe(be, e);
    }(n6)), e25;
}, Oe = Se(), ze = Oe.$vfm, Me = Oe.VueFinalModal, Te = Oe.ModalsContainer, Ce = function(e) {
    var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, n = 0 === Ee ? Oe : Se(), o = n.$vfm, r = n.VueFinalModal, i = n.ModalsContainer;
    Ee += 1;
    var a = t.key || "$vfm", l = t.componentName || "VueFinalModal", u = t.dynamicContainerName || "ModalsContainer";
    Object.defineProperty(e.config.globalProperties, a, {
        get: function() {
            return o;
        }
    }), e.provide(a, o), e.component(l, r), e.component(u, i);
}, Ae = function(e) {
    return {
        install: function(t, n) {
            var o = Object.assign({}, e, n);
            Ce(t, o);
        }
    };
};
Ae.install = Ce;

},{"vue":"hRjhg","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ls5zD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Toaster", ()=>(0, _toasterVueDefault.default));
parcelHelpers.export(exports, "Positions", ()=>(0, _positionsJsDefault.default));
parcelHelpers.export(exports, "createToaster", ()=>(0, _apiJsDefault.default));
var _toasterVue = require("./Toaster.vue");
var _toasterVueDefault = parcelHelpers.interopDefault(_toasterVue);
var _apiJs = require("./api.js");
var _apiJsDefault = parcelHelpers.interopDefault(_apiJs);
var _positionsJs = require("./defaults/positions.js");
var _positionsJsDefault = parcelHelpers.interopDefault(_positionsJs);
const Plugin = (app, options = {})=>{
    let methods = (0, _apiJsDefault.default)(options);
    app.$toast = methods;
    app.config.globalProperties.$toast = methods;
};
(0, _toasterVueDefault.default).install = Plugin;
exports.default = (0, _toasterVueDefault.default);

},{"./Toaster.vue":"98sxs","./api.js":"9lzw9","./defaults/positions.js":"5f3D5","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"98sxs":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
let script;
let initialize = ()=>{
    script = require("script:./Toaster.vue");
    if (script.__esModule) script = script.default;
    script.render = require("template:./Toaster.vue").render;
    require("custom:./Toaster.vue").default(script);
    script.__scopeId = "data-v-688a02";
    script.__file = "/home/babel/Documents/workspace/udata_workspace/udata-front/node_modules/@meforma/vue-toaster/src/Toaster.vue";
};
initialize();
if (module.hot) {
    script.__hmrId = "688a02-hmr";
    module.hot.accept(()=>{
        setTimeout(()=>{
            initialize();
            if (!__VUE_HMR_RUNTIME__.createRecord("688a02-hmr", script)) __VUE_HMR_RUNTIME__.reload("688a02-hmr", script);
        }, 0);
    });
}
exports.default = script;

},{"script:./Toaster.vue":"5ykqi","template:./Toaster.vue":"6mMJ2","custom:./Toaster.vue":"5XqLT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5ykqi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _removeElement = require("./helpers/remove-element");
var _timer = require("./helpers/timer");
var _timerDefault = parcelHelpers.interopDefault(_timer);
var _positions = require("./defaults/positions");
var _positionsDefault = parcelHelpers.interopDefault(_positions);
var _eventBus = require("./helpers/event-bus");
var _eventBusDefault = parcelHelpers.interopDefault(_eventBus);
exports.default = {
    name: "toast",
    props: {
        message: {
            type: String,
            required: true
        },
        type: {
            type: String,
            default: "default"
        },
        position: {
            type: String,
            default: (0, _positionsDefault.default).BOTTOM_RIGHT,
            validator (value) {
                return Object.values((0, _positionsDefault.default)).includes(value);
            }
        },
        maxToasts: {
            type: [
                Number,
                Boolean
            ],
            default: false
        },
        duration: {
            type: [
                Number,
                Boolean
            ],
            default: 4000
        },
        dismissible: {
            type: Boolean,
            default: true
        },
        queue: {
            type: Boolean,
            default: false
        },
        pauseOnHover: {
            type: Boolean,
            default: true
        },
        useDefaultCss: {
            type: Boolean,
            default: true
        },
        onClose: {
            type: Function,
            default: ()=>{}
        },
        onClick: {
            type: Function,
            default: ()=>{}
        }
    },
    data () {
        return {
            isActive: false,
            parentTop: null,
            parentBottom: null,
            isHovered: false,
            timer: null,
            tag: this.dismissible ? "button" : "div"
        };
    },
    beforeMount () {
        this.createParents();
        this.setDefaultCss();
        this.setupContainer();
    },
    mounted () {
        this.showNotice();
        (0, _eventBusDefault.default).$on("toast-clear", this.close);
    },
    methods: {
        createParents () {
            this.parentTop = document.querySelector(".c-toast-container--top");
            this.parentBottom = document.querySelector(".c-toast-container--bottom");
            if (this.parentTop && this.parentBottom) return;
            if (!this.parentTop) {
                this.parentTop = document.createElement("div");
                this.parentTop.className = "c-toast-container c-toast-container--top";
            }
            if (!this.parentBottom) {
                this.parentBottom = document.createElement("div");
                this.parentBottom.className = "c-toast-container c-toast-container--bottom";
            }
        },
        setDefaultCss () {
            const type = this.useDefaultCss ? "add" : "remove";
            this.parentTop.classList[type]("v--default-css");
            this.parentBottom.classList[type]("v--default-css");
        },
        setupContainer () {
            const container = document.body;
            container.appendChild(this.parentTop);
            container.appendChild(this.parentBottom);
        },
        shouldQueue () {
            if (!this.queue && this.maxToasts === false) return false;
            if (this.maxToasts !== false) return this.maxToasts <= this.parentTop.childElementCount + this.parentBottom.childElementCount;
            return this.parentTop.childElementCount > 0 || this.parentBottom.childElementCount > 0;
        },
        showNotice () {
            if (this.shouldQueue()) {
                this.queueTimer = setTimeout(this.showNotice, 250);
                return;
            }
            this.correctParent.insertAdjacentElement("afterbegin", this.$refs.toast);
            this.isActive = true;
            this.timer = this.duration !== false ? new (0, _timerDefault.default)(this.close, this.duration) : null;
        },
        click () {
            this.onClick.apply(null, arguments);
            if (this.dismissible) this.close();
        },
        toggleTimer (newVal) {
            if (this.timer && this.pauseOnHover) newVal ? this.timer.pause() : this.timer.resume();
        },
        stopTimer () {
            this.timer && this.timer.stop();
            clearTimeout(this.queueTimer);
        },
        close () {
            this.stopTimer();
            this.isActive = false;
            setTimeout(()=>{
                this.onClose.apply(null, arguments);
                (0, _removeElement.removeElement)(this.$el);
            }, 150);
        }
    },
    computed: {
        correctParent () {
            return (0, _positions.definePosition)(this.position, this.parentTop, this.parentBottom);
        },
        transition () {
            return (0, _positions.definePosition)(this.position, {
                enter: "fadeInDown",
                leave: "fadeOut"
            }, {
                enter: "fadeInUp",
                leave: "fadeOut"
            });
        }
    },
    beforeUnmount () {
        (0, _eventBusDefault.default).$off("toast-clear", this.close);
    }
};

},{"./helpers/remove-element":"jzTQc","./helpers/timer":"dUdWX","./defaults/positions":"5f3D5","./helpers/event-bus":"kMIMS","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jzTQc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "removeElement", ()=>removeElement);
const removeElement = (el)=>{
    if (typeof el.remove !== "undefined") el.remove();
    else el.parentNode.removeChild(el);
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dUdWX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
class Timer {
    constructor(callback, delay){
        this.startedAt = Date.now();
        this.callback = callback;
        this.delay = delay;
        this.timer = setTimeout(callback, delay);
    }
    pause() {
        this.stop();
        this.delay -= Date.now() - this.startedAt;
    }
    resume() {
        this.stop();
        this.startedAt = Date.now();
        this.timer = setTimeout(this.callback, this.delay);
    }
    stop() {
        clearTimeout(this.timer);
    }
}
exports.default = Timer;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5f3D5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "definePosition", ()=>definePosition);
const POSITIONS = {
    TOP_RIGHT: "top-right",
    TOP: "top",
    TOP_LEFT: "top-left",
    BOTTOM_RIGHT: "bottom-right",
    BOTTOM: "bottom",
    BOTTOM_LEFT: "bottom-left"
};
exports.default = Object.freeze(POSITIONS);
function definePosition(position, top, bottom) {
    let result = null;
    switch(position){
        case POSITIONS.TOP:
        case POSITIONS.TOP_RIGHT:
        case POSITIONS.TOP_LEFT:
            result = top;
            break;
        case POSITIONS.BOTTOM:
        case POSITIONS.BOTTOM_RIGHT:
        case POSITIONS.BOTTOM_LEFT:
            result = bottom;
            break;
    }
    return result;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kMIMS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
class Event {
    constructor(){
        this.queue = {};
    }
    $on(name, callback) {
        this.queue[name] = this.queue[name] || [];
        this.queue[name].push(callback);
    }
    $off(name, callback) {
        if (this.queue[name]) {
            for(var i = 0; i < this.queue[name].length; i++)if (this.queue[name][i] === callback) {
                this.queue[name].splice(i, 1);
                break;
            }
        }
    }
    $emit(name, data) {
        if (this.queue[name]) this.queue[name].forEach(function(callback) {
            callback(data);
        });
    }
}
exports.default = new Event();

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6mMJ2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "render", ()=>render);
var _vue = require("vue");
function render(_ctx, _cache, $props, $setup, $data, $options) {
    return (0, _vue.openBlock)(), (0, _vue.createBlock)((0, _vue.Transition), {
        "enter-active-class": $options.transition.enter,
        "leave-active-class": $options.transition.leave
    }, {
        default: (0, _vue.withCtx)(()=>[
                (0, _vue.withDirectives)(((0, _vue.openBlock)(), (0, _vue.createBlock)((0, _vue.resolveDynamicComponent)($data.tag), {
                    class: (0, _vue.normalizeClass)([
                        "c-toast",
                        `c-toast--${$props.type}`,
                        `c-toast--${$props.position}`
                    ]),
                    onMouseover: _cache[0] || (_cache[0] = ($event)=>$options.toggleTimer(true)),
                    onMouseleave: _cache[1] || (_cache[1] = ($event)=>$options.toggleTimer(false)),
                    onClick: $options.click,
                    role: "alert",
                    ref: "toast"
                }, {
                    default: (0, _vue.withCtx)(()=>[
                            (0, _vue.createTextVNode)((0, _vue.toDisplayString)($props.message), 1 /* TEXT */ )
                        ]),
                    _: 1 /* STABLE */ 
                }, 8 /* PROPS */ , [
                    "class",
                    "onClick"
                ])), [
                    [
                        (0, _vue.vShow),
                        $data.isActive
                    ]
                ])
            ]),
        _: 1 /* STABLE */ 
    }, 8 /* PROPS */ , [
        "enter-active-class",
        "leave-active-class"
    ]);
}
if (module.hot) module.hot.accept(()=>{
    __VUE_HMR_RUNTIME__.rerender("688a02-hmr", render);
});

},{"vue":"hRjhg","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5XqLT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
let NOOP = ()=>{};
exports.default = (script)=>{};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9lzw9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _toasterVue = require("./Toaster.vue");
var _toasterVueDefault = parcelHelpers.interopDefault(_toasterVue);
var _eventBusJs = require("./helpers/event-bus.js");
var _eventBusJsDefault = parcelHelpers.interopDefault(_eventBusJs);
var _mountComponent = require("./helpers/mount-component");
var _mountComponentDefault = parcelHelpers.interopDefault(_mountComponent);
const Api = (globalOptions = {})=>{
    return {
        show (message, options = {}) {
            let localOptions = {
                message,
                ...options
            };
            const c = (0, _mountComponentDefault.default)((0, _toasterVueDefault.default), {
                props: {
                    ...globalOptions,
                    ...localOptions
                }
            });
            return c;
        },
        clear () {
            (0, _eventBusJsDefault.default).$emit("toast-clear");
        },
        success (message, options = {}) {
            options.type = "success";
            return this.show(message, options);
        },
        error (message, options = {}) {
            options.type = "error";
            return this.show(message, options);
        },
        info (message, options = {}) {
            options.type = "info";
            return this.show(message, options);
        },
        warning (message, options = {}) {
            options.type = "warning";
            return this.show(message, options);
        }
    };
};
exports.default = Api;

},{"./Toaster.vue":"98sxs","./helpers/event-bus.js":"kMIMS","./helpers/mount-component":"jjEJl","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jjEJl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _vue = require("vue");
const createElement = ()=>typeof document !== "undefined" && document.createElement("div");
const mount = (component, { props , children , element , app  } = {})=>{
    let el = element ? element : createElement();
    let vNode = (0, _vue.h)(component, props, children);
    if (app && app._context) vNode.appContext = app._context;
    (0, _vue.render)(vNode, el);
    const destroy = ()=>{
        if (el) (0, _vue.render)(null, el);
        el = null;
        vNode = null;
    };
    return {
        vNode,
        destroy,
        el
    };
};
exports.default = mount;

},{"vue":"hRjhg","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bChCL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Build the authentication URL given the current page.
 */ parcelHelpers.export(exports, "get_auth_url", ()=>get_auth_url);
/*
 * Handle authentication and permissions
 */ var _config = require("../config");
var _configDefault = parcelHelpers.interopDefault(_config);
function get_auth_url() {
    const params = {
        login_required: true,
        next: window.location.href
    };
    return (0, _configDefault.default).auth_url + "?" + Object.keys(params).map((key)=>`${encodeURIComponent(key)}=${encodeURIComponent(params[key])}`).join("&");
}
function install(app) {
    /**
   * Expose the current user
   */ app.config.globalProperties.$user = (0, _configDefault.default).user;
    /**
   * Checks if the current user is authenticated
   * and triggers a login if it's not the case.
   *
   * The current function execution is stopped by
   * raising a AuthenticationRequired error.
   *
   * @throws  {Error} When the user is not authenticated
   */ app.config.globalProperties.$auth = function() {
        if (!this.$user) {
            window.location = get_auth_url();
            throw new Error("Auth required"); // This avoid calling function to continue its execution
        }
    };
}
exports.default = install;

},{"../config":"G7A2j","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jKRaI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/*
---
name: Modals
category: 5 - Interactions
---

# Modals
Because sometimes the whole page isn't enough to show all the data you want to show to the world.

You can define modal templates in the form of VueJS templates and call them anywhere within the site.

1. Defining a modal
Modals are defined in the `theme/js/components/**` folder. You'll find an example below.
Note that you can define variables in the `props` part of the Vue template definition and pass them to the modal later on.

```modals-definition.vue
<template>
  <div class="modal-wrapper">
    <div class="modal-body">
      <iframe :src="url" width="100%" height="600" frameborder="0"></iframe>
    </div>

    <footer class="modal-footer">
      <button class="fr-btn fr-icon-close-line" @click.prevent="$emit('close')"> {{$t('Close')}} </button>
    </footer>
  </div>
</template>

<script>
export default {
  name: "Preview",
  props: {
      url: String
  }
};
</script>
```

2. Modal registration
Once you defined your modal, you need to import it inside the js package in the `theme/js/components/vue/modals.js` component.
The `modals` object lists all the available modal. The key you'll give in this object will be the modal's name, required when you'll want to open it.

```modal-registration.js
import MyModal from "./myModal";

const modals = { preview: Preview, mymodal: MyModal };
```


## Opening a modal
To open a modal, simply call the global `showModal` method with your modal name as seen above.
The first argument is the modal name, the second one is an object containing the params passed to the modal.
The third argument to the `showModal` method is an override for the `scrollable` property. Defaults to false, but when set to true, the modal is scrollable.

You should also add a `<modals-container></modals-container>` element that will host the modal DOM inside the same VueJS app.

```modal-opening.html
<span class="vuejs">
  <modals-container></modals-container>
  <a @click.prevent="$showModal('mymodal', {myparam: '{{ django.injected_param }}'}, true)">Click me !</a>
</span>
```
*/ var _previewVue = require("../components/dataset/preview.vue");
var _previewVueDefault = parcelHelpers.interopDefault(_previewVue);
var _schemaModalVue = require("../components/dataset/schema-modal.vue");
var _schemaModalVueDefault = parcelHelpers.interopDefault(_schemaModalVue);
const modals = {
    preview: (0, _previewVueDefault.default),
    schema: (0, _schemaModalVueDefault.default)
};
const _showModal = (app)=>(name, params)=>{
        const Vue = app.config.globalProperties;
        Vue.$vfm.show({
            component: modals[name],
            bind: {
                name,
                escToClose: true,
                lockScroll: true,
                ...params,
                close: ()=>Vue.$vfm.hide(name)
            }
        });
    };
function install(app) {
    app.config.globalProperties.$showModal = _showModal(app);
    app.provide("$showModal", app.config.globalProperties.$showModal);
}
exports.default = install;

},{"../components/dataset/preview.vue":"jKFBV","../components/dataset/schema-modal.vue":"i62vr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jKFBV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
let script;
let initialize = ()=>{
    script = require("script:./preview.vue");
    if (script.__esModule) script = script.default;
    script.render = require("template:./preview.vue").render;
    require("custom:./preview.vue").default(script);
    script.__scopeId = "data-v-4dabad";
    script.__file = "/home/babel/Documents/workspace/udata_workspace/udata-front/theme/js/components/dataset/preview.vue";
};
initialize();
if (module.hot) {
    script.__hmrId = "4dabad-hmr";
    module.hot.accept(()=>{
        setTimeout(()=>{
            initialize();
            if (!__VUE_HMR_RUNTIME__.createRecord("4dabad-hmr", script)) __VUE_HMR_RUNTIME__.reload("4dabad-hmr", script);
        }, 0);
    });
}
exports.default = script;

},{"script:./preview.vue":"8Nuln","template:./preview.vue":"hKt0Q","custom:./preview.vue":"lVp1Z","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8Nuln":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _vue = require("vue");
exports.default = (0, _vue.defineComponent)({
    name: "Preview",
    props: {
        url: String,
        close: Function,
        title: String
    }
});

},{"vue":"hRjhg","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hKt0Q":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "render", ()=>render);
var _vue = require("vue");
const _hoisted_1 = {
    class: "modal-body"
};
const _hoisted_2 = [
    "src",
    "title"
];
const _hoisted_3 = {
    class: "modal-footer"
};
const _hoisted_4 = [
    "title"
];
function render(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_vue_final_modal = (0, _vue.resolveComponent)("vue-final-modal");
    return (0, _vue.openBlock)(), (0, _vue.createBlock)(_component_vue_final_modal, {
        class: "modal-wrapper"
    }, {
        default: (0, _vue.withCtx)(()=>[
                (0, _vue.createElementVNode)("div", _hoisted_1, [
                    (0, _vue.createElementVNode)("iframe", {
                        src: _ctx.url,
                        width: "100%",
                        height: "600",
                        frameborder: "0",
                        title: _ctx.$t("Preview of resource X", {
                            title: _ctx.title
                        })
                    }, null, 8 /* PROPS */ , _hoisted_2)
                ]),
                (0, _vue.createElementVNode)("footer", _hoisted_3, [
                    (0, _vue.createElementVNode)("button", {
                        class: "fr-btn fr-icon-close-line",
                        onClick: _cache[0] || (_cache[0] = (0, _vue.withModifiers)(($event)=>_ctx.close(), [
                            "prevent"
                        ])),
                        title: _ctx.$t("Close")
                    }, (0, _vue.toDisplayString)(_ctx.$t("Close")), 9 /* TEXT, PROPS */ , _hoisted_4)
                ])
            ]),
        _: 1 /* STABLE */ 
    });
}
if (module.hot) module.hot.accept(()=>{
    __VUE_HMR_RUNTIME__.rerender("4dabad-hmr", render);
});

},{"vue":"hRjhg","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lVp1Z":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
let NOOP = ()=>{};
exports.default = (script)=>{};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"i62vr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
let script;
let initialize = ()=>{
    script = require("script:./schema-modal.vue");
    if (script.__esModule) script = script.default;
    script.render = require("template:./schema-modal.vue").render;
    require("custom:./schema-modal.vue").default(script);
    script.__scopeId = "data-v-dbfb90";
    script.__file = "/home/babel/Documents/workspace/udata_workspace/udata-front/theme/js/components/dataset/schema-modal.vue";
};
initialize();
if (module.hot) {
    script.__hmrId = "dbfb90-hmr";
    module.hot.accept(()=>{
        setTimeout(()=>{
            initialize();
            if (!__VUE_HMR_RUNTIME__.createRecord("dbfb90-hmr", script)) __VUE_HMR_RUNTIME__.reload("dbfb90-hmr", script);
        }, 0);
    });
}
exports.default = script;

},{"script:./schema-modal.vue":"grs4h","template:./schema-modal.vue":"3vU72","custom:./schema-modal.vue":"4EyX7","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"grs4h":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _config = require("../../config");
var _configDefault = parcelHelpers.interopDefault(_config);
var _vue = require("vue");
exports.default = (0, _vue.defineComponent)({
    name: "Schema",
    props: {
        resourceSchema: Object,
        documentationUrl: String,
        validationUrl: String,
        authorizeValidation: Boolean,
        close: Function
    },
    computed: {
        datasetSchemaUrl () {
            return `${(0, _configDefault.default).values.datasetUrl}?schema=${this.resourceSchema.name}`;
        }
    }
});

},{"../../config":"G7A2j","vue":"hRjhg","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3vU72":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "render", ()=>render);
var _vue = require("vue");
const _hoisted_1 = {
    class: "modal-body markdown fr-p-5v fr-mb-11v text-grey-500"
};
const _hoisted_2 = {
    key: 0
};
const _hoisted_3 = [
    "href"
];
const _hoisted_4 = {
    key: 0
};
const _hoisted_5 = [
    "href"
];
const _hoisted_6 = [
    "href"
];
const _hoisted_7 = /*#__PURE__*/ (0, _vue.createElementVNode)("hr", {
    class: "fr-mt-3w"
}, null, -1 /* HOISTED */ );
const _hoisted_8 = /*#__PURE__*/ (0, _vue.createElementVNode)("a", {
    href: "https://schema.data.gouv.fr",
    rel: "noopener noreferrer",
    target: "_blank"
}, "schema.data.gouv.fr", -1 /* HOISTED */ );
const _hoisted_9 = /*#__PURE__*/ (0, _vue.createTextVNode)(". ");
const _hoisted_10 = {
    class: "modal-footer"
};
const _hoisted_11 = [
    "title"
];
function render(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_vue_final_modal = (0, _vue.resolveComponent)("vue-final-modal");
    return (0, _vue.openBlock)(), (0, _vue.createBlock)(_component_vue_final_modal, {
        class: "modal-wrapper"
    }, {
        default: (0, _vue.withCtx)(()=>[
                (0, _vue.createElementVNode)("div", _hoisted_1, [
                    (0, _vue.createElementVNode)("h2", null, (0, _vue.toDisplayString)(_ctx.$t("Associated schema")), 1 /* TEXT */ ),
                    (0, _vue.createElementVNode)("p", null, [
                        (0, _vue.createElementVNode)("span", null, [
                            (0, _vue.createTextVNode)((0, _vue.toDisplayString)(_ctx.$t("This resource is associated to the schema ")), 1 /* TEXT */ ),
                            (0, _vue.createElementVNode)("b", null, (0, _vue.toDisplayString)(_ctx.resourceSchema.name), 1 /* TEXT */ )
                        ]),
                        _ctx.resourceSchema.version ? ((0, _vue.openBlock)(), (0, _vue.createElementBlock)("span", _hoisted_2, ", version " + (0, _vue.toDisplayString)(_ctx.resourceSchema.version) + ",", 1 /* TEXT */ )) : (0, _vue.createCommentVNode)("v-if", true),
                        (0, _vue.createElementVNode)("span", null, (0, _vue.toDisplayString)(_ctx.$t(" this means that the producer reports that it adheres to the specification.")), 1 /* TEXT */ )
                    ]),
                    (0, _vue.createElementVNode)("h3", null, (0, _vue.toDisplayString)(_ctx.$t("Documentation")), 1 /* TEXT */ ),
                    (0, _vue.createElementVNode)("p", null, (0, _vue.toDisplayString)(_ctx.$t("You can view the schema documentation, discover some context and recommendations for data producers.")), 1 /* TEXT */ ),
                    (0, _vue.createElementVNode)("div", null, [
                        (0, _vue.createElementVNode)("a", {
                            href: _ctx.documentationUrl,
                            rel: "noopener noreferrer",
                            target: "_blank",
                            class: "fr-btn fr-btn--sm fr-icon-information-line fr-btn--icon-left"
                        }, (0, _vue.toDisplayString)(_ctx.$t("Read documentation")), 9 /* TEXT, PROPS */ , _hoisted_3)
                    ]),
                    _ctx.authorizeValidation ? ((0, _vue.openBlock)(), (0, _vue.createElementBlock)("div", _hoisted_4, [
                        (0, _vue.createElementVNode)("h3", null, (0, _vue.toDisplayString)(_ctx.$t("Validation")), 1 /* TEXT */ ),
                        (0, _vue.createElementVNode)("blockquote", null, (0, _vue.toDisplayString)(_ctx.$t("Resource validation based on a schema is a way to verify that the resource complies to the schema it is supposed to abide by. In case of errors, a validation report shows the errors found: wrongly named columns, non conform values, etc.")), 1 /* TEXT */ ),
                        (0, _vue.createElementVNode)("p", null, (0, _vue.toDisplayString)(_ctx.$t("data.gouv.fr allows you to validate your files based on a schema and correct the possible errors.")), 1 /* TEXT */ ),
                        (0, _vue.createElementVNode)("div", null, [
                            (0, _vue.createElementVNode)("a", {
                                href: _ctx.validationUrl,
                                rel: "noopener noreferrer",
                                target: "_blank",
                                class: "fr-btn fr-btn--sm fr-icon-checkbox-circle-line fr-btn--icon-left"
                            }, (0, _vue.toDisplayString)(_ctx.$t("Validate resource")), 9 /* TEXT, PROPS */ , _hoisted_5)
                        ])
                    ])) : (0, _vue.createCommentVNode)("v-if", true),
                    (0, _vue.createElementVNode)("h3", null, (0, _vue.toDisplayString)(_ctx.$t("Others resources")), 1 /* TEXT */ ),
                    (0, _vue.createElementVNode)("p", null, (0, _vue.toDisplayString)(_ctx.$t("You can specify that a resource complies to a schema on your producer dashboard. Other resources complying with the schema are available on the platform.")), 1 /* TEXT */ ),
                    (0, _vue.createElementVNode)("div", null, [
                        (0, _vue.createElementVNode)("a", {
                            href: _ctx.datasetSchemaUrl,
                            rel: "noopener noreferrer",
                            target: "_blank",
                            class: "fr-btn fr-btn--sm fr-icon-file-line fr-btn--icon-left"
                        }, (0, _vue.toDisplayString)(_ctx.$t("See dataset linked to this schema")), 9 /* TEXT, PROPS */ , _hoisted_6)
                    ]),
                    _hoisted_7,
                    (0, _vue.createElementVNode)("h3", null, (0, _vue.toDisplayString)(_ctx.$t("About schemas")), 1 /* TEXT */ ),
                    (0, _vue.createElementVNode)("p", null, [
                        (0, _vue.createTextVNode)((0, _vue.toDisplayString)(_ctx.$t("Data schemas allow to describe data models : what are the fields, how is data represented, what are the possible values. Discover how schemas improve data quality and use cases on ")) + " ", 1 /* TEXT */ ),
                        _hoisted_8,
                        _hoisted_9
                    ])
                ]),
                (0, _vue.createElementVNode)("footer", _hoisted_10, [
                    (0, _vue.createElementVNode)("button", {
                        class: "fr-btn fr-icon-close-line",
                        onClick: _cache[0] || (_cache[0] = (0, _vue.withModifiers)(($event)=>_ctx.close(), [
                            "prevent"
                        ])),
                        title: _ctx.$t("Close")
                    }, (0, _vue.toDisplayString)(_ctx.$t("Close")), 9 /* TEXT, PROPS */ , _hoisted_11)
                ])
            ]),
        _: 1 /* STABLE */ 
    });
}
if (module.hot) module.hot.accept(()=>{
    __VUE_HMR_RUNTIME__.rerender("dbfb90-hmr", render);
});

},{"vue":"hRjhg","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4EyX7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
let NOOP = ()=>{};
exports.default = (script)=>{};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7HFro":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function install(app) {
    app.config.globalProperties.addBodyClass = (className)=>document.body.classList.add(className);
    app.config.globalProperties.removeBodyClass = (className)=>document.body.classList.remove(className);
}
exports.default = install;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eqjCo":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "filters", ()=>filters);
var _removeMarkdown = require("remove-markdown");
var _removeMarkdownDefault = parcelHelpers.interopDefault(_removeMarkdown);
var _config = require("../config");
var _configDefault = parcelHelpers.interopDefault(_config);
var _dayjs = require("dayjs");
var _dayjsDefault = parcelHelpers.interopDefault(_dayjs);
var _markdown = require("../markdown");
var _markdownDefault = parcelHelpers.interopDefault(_markdown);
var _fr = require("dayjs/locale/fr");
var _en = require("dayjs/locale/en");
var _es = require("dayjs/locale/es");
var _localizedFormat = require("dayjs/plugin/localizedFormat");
var _localizedFormatDefault = parcelHelpers.interopDefault(_localizedFormat);
(0, _dayjsDefault.default).extend((0, _localizedFormatDefault.default));
(0, _dayjsDefault.default).locale((0, _configDefault.default).lang);
const truncate = (val, length = 300)=>{
    if (typeof val !== "string") return;
    return val.length > length ? val.slice(0, length) + "\u2026" : val; //TODO, maybe® : properly truncate words
};
const excerpt = (val, length = 300)=>{
    if (typeof val !== "string") return;
    return truncate((0, _removeMarkdownDefault.default)(val), length);
};
const filesize = (val)=>{
    const suffix = "o";
    const units = [
        "",
        "K",
        "M",
        "G",
        "T",
        "P",
        "E",
        "Z"
    ];
    for (let unit of units){
        if (Math.abs(val) < 1024.0) return `${val.toFixed(1)}${unit}${suffix}`;
        val /= 1024.0;
    }
    return `${val.toFixed(1)}Y${suffix}`;
};
const formatDate = (date, format = "LL")=>{
    return (0, _dayjsDefault.default)(date).format(format);
};
const filters = {
    truncate,
    excerpt,
    filesize,
    formatDate,
    markdown: (0, _markdownDefault.default)
};
function install(app) {
    app.config.globalProperties.$filters = filters;
    app.provide("$filters", app.config.globalProperties.$filters);
}
exports.default = install;

},{"remove-markdown":"6WFWa","../config":"G7A2j","dayjs":"NJZFB","../markdown":"9mXc0","dayjs/locale/fr":"5z8o8","dayjs/locale/en":"jjEh4","dayjs/locale/es":"anAVg","dayjs/plugin/localizedFormat":"kXF87","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6WFWa":[function(require,module,exports) {
module.exports = function(md, options) {
    options = options || {};
    options.listUnicodeChar = options.hasOwnProperty("listUnicodeChar") ? options.listUnicodeChar : false;
    options.stripListLeaders = options.hasOwnProperty("stripListLeaders") ? options.stripListLeaders : true;
    options.gfm = options.hasOwnProperty("gfm") ? options.gfm : true;
    options.useImgAltText = options.hasOwnProperty("useImgAltText") ? options.useImgAltText : true;
    var output = md || "";
    // Remove horizontal rules (stripListHeaders conflict with this rule, which is why it has been moved to the top)
    output = output.replace(/^(-\s*?|\*\s*?|_\s*?){3,}\s*$/gm, "");
    try {
        if (options.stripListLeaders) {
            if (options.listUnicodeChar) output = output.replace(/^([\s\t]*)([\*\-\+]|\d+\.)\s+/gm, options.listUnicodeChar + " $1");
            else output = output.replace(/^([\s\t]*)([\*\-\+]|\d+\.)\s+/gm, "$1");
        }
        if (options.gfm) output = output// Header
        .replace(/\n={2,}/g, "\n")// Fenced codeblocks
        .replace(/~{3}.*\n/g, "")// Strikethrough
        .replace(/~~/g, "")// Fenced codeblocks
        .replace(/`{3}.*\n/g, "");
        output = output// Remove HTML tags
        .replace(/<[^>]*>/g, "")// Remove setext-style headers
        .replace(/^[=\-]{2,}\s*$/g, "")// Remove footnotes?
        .replace(/\[\^.+?\](\: .*?$)?/g, "").replace(/\s{0,2}\[.*?\]: .*?$/g, "")// Remove images
        .replace(/\!\[(.*?)\][\[\(].*?[\]\)]/g, options.useImgAltText ? "$1" : "")// Remove inline links
        .replace(/\[(.*?)\][\[\(].*?[\]\)]/g, "$1")// Remove blockquotes
        .replace(/^\s{0,3}>\s?/g, "")// Remove reference-style links?
        .replace(/^\s{1,2}\[(.*?)\]: (\S+)( ".*?")?\s*$/g, "")// Remove atx-style headers
        .replace(/^(\n)?\s{0,}#{1,6}\s+| {0,}(\n)?\s{0,}#{0,} {0,}(\n)?\s{0,}$/gm, "$1$2$3")// Remove emphasis (repeat the line to remove double emphasis)
        .replace(/([\*_]{1,3})(\S.*?\S{0,1})\1/g, "$2").replace(/([\*_]{1,3})(\S.*?\S{0,1})\1/g, "$2")// Remove code blocks
        .replace(/(`{3,})(.*?)\1/gm, "$2")// Remove inline code
        .replace(/`(.+?)`/g, "$1")// Replace two or more newlines with exactly two? Not entirely sure this belongs here...
        .replace(/\n{2,}/g, "\n\n");
    } catch (e) {
        console.error(e);
        return md;
    }
    return output;
};

},{}],"NJZFB":[function(require,module,exports) {
!function(t, e) {
    module.exports = e();
}(this, function() {
    "use strict";
    var t1 = "millisecond", e1 = "second", n1 = "minute", r1 = "hour", i1 = "day", s1 = "week", u1 = "month", a1 = "quarter", o1 = "year", f1 = "date", h1 = /^(\d{4})[-/]?(\d{1,2})?[-/]?(\d{0,2})[^0-9]*(\d{1,2})?:?(\d{1,2})?:?(\d{1,2})?[.:]?(\d+)?$/, c1 = /\[([^\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g, d1 = {
        name: "en",
        weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),
        months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_")
    }, $1 = function(t, e, n) {
        var r = String(t);
        return !r || r.length >= e ? t : "" + Array(e + 1 - r.length).join(n) + t;
    }, l1 = {
        s: $1,
        z: function(t) {
            var e = -t.utcOffset(), n = Math.abs(e), r = Math.floor(n / 60), i = n % 60;
            return (e <= 0 ? "+" : "-") + $1(r, 2, "0") + ":" + $1(i, 2, "0");
        },
        m: function t(e, n) {
            if (e.date() < n.date()) return -t(n, e);
            var r = 12 * (n.year() - e.year()) + (n.month() - e.month()), i = e.clone().add(r, u1), s = n - i < 0, a = e.clone().add(r + (s ? -1 : 1), u1);
            return +(-(r + (n - i) / (s ? i - a : a - i)) || 0);
        },
        a: function(t) {
            return t < 0 ? Math.ceil(t) || 0 : Math.floor(t);
        },
        p: function(h) {
            return ({
                M: u1,
                y: o1,
                w: s1,
                d: i1,
                D: f1,
                h: r1,
                m: n1,
                s: e1,
                ms: t1,
                Q: a1
            })[h] || String(h || "").toLowerCase().replace(/s$/, "");
        },
        u: function(t) {
            return void 0 === t;
        }
    }, y1 = "en", M1 = {};
    M1[y1] = d1;
    var m1 = function(t) {
        return t instanceof S1;
    }, D1 = function(t, e, n) {
        var r;
        if (!t) return y1;
        if ("string" == typeof t) M1[t] && (r = t), e && (M1[t] = e, r = t);
        else {
            var i = t.name;
            M1[i] = t, r = i;
        }
        return !n && r && (y1 = r), r || !n && y1;
    }, v1 = function(t, e) {
        if (m1(t)) return t.clone();
        var n = "object" == typeof e ? e : {};
        return n.date = t, n.args = arguments, new S1(n);
    }, g = l1;
    g.l = D1, g.i = m1, g.w = function(t, e) {
        return v1(t, {
            locale: e.$L,
            utc: e.$u,
            x: e.$x,
            $offset: e.$offset
        });
    };
    var S1 = function() {
        function d2(t) {
            this.$L = D1(t.locale, null, !0), this.parse(t);
        }
        var $2 = d2.prototype;
        return $2.parse = function(t2) {
            this.$d = function(t) {
                var e = t.date, n = t.utc;
                if (null === e) return new Date(NaN);
                if (g.u(e)) return new Date;
                if (e instanceof Date) return new Date(e);
                if ("string" == typeof e && !/Z$/i.test(e)) {
                    var r = e.match(h1);
                    if (r) {
                        var i = r[2] - 1 || 0, s = (r[7] || "0").substring(0, 3);
                        return n ? new Date(Date.UTC(r[1], i, r[3] || 1, r[4] || 0, r[5] || 0, r[6] || 0, s)) : new Date(r[1], i, r[3] || 1, r[4] || 0, r[5] || 0, r[6] || 0, s);
                    }
                }
                return new Date(e);
            }(t2), this.$x = t2.x || {}, this.init();
        }, $2.init = function() {
            var t = this.$d;
            this.$y = t.getFullYear(), this.$M = t.getMonth(), this.$D = t.getDate(), this.$W = t.getDay(), this.$H = t.getHours(), this.$m = t.getMinutes(), this.$s = t.getSeconds(), this.$ms = t.getMilliseconds();
        }, $2.$utils = function() {
            return g;
        }, $2.isValid = function() {
            return !("Invalid Date" === this.$d.toString());
        }, $2.isSame = function(t, e) {
            var n = v1(t);
            return this.startOf(e) <= n && n <= this.endOf(e);
        }, $2.isAfter = function(t, e) {
            return v1(t) < this.startOf(e);
        }, $2.isBefore = function(t, e) {
            return this.endOf(e) < v1(t);
        }, $2.$g = function(t, e, n) {
            return g.u(t) ? this[e] : this.set(n, t);
        }, $2.unix = function() {
            return Math.floor(this.valueOf() / 1e3);
        }, $2.valueOf = function() {
            return this.$d.getTime();
        }, $2.startOf = function(t3, a) {
            var h = this, c = !!g.u(a) || a, d = g.p(t3), $ = function(t, e) {
                var n = g.w(h.$u ? Date.UTC(h.$y, e, t) : new Date(h.$y, e, t), h);
                return c ? n : n.endOf(i1);
            }, l = function(t, e) {
                return g.w(h.toDate()[t].apply(h.toDate("s"), (c ? [
                    0,
                    0,
                    0,
                    0
                ] : [
                    23,
                    59,
                    59,
                    999
                ]).slice(e)), h);
            }, y = this.$W, M = this.$M, m = this.$D, D = "set" + (this.$u ? "UTC" : "");
            switch(d){
                case o1:
                    return c ? $(1, 0) : $(31, 11);
                case u1:
                    return c ? $(1, M) : $(0, M + 1);
                case s1:
                    var v = this.$locale().weekStart || 0, S = (y < v ? y + 7 : y) - v;
                    return $(c ? m - S : m + (6 - S), M);
                case i1:
                case f1:
                    return l(D + "Hours", 0);
                case r1:
                    return l(D + "Minutes", 1);
                case n1:
                    return l(D + "Seconds", 2);
                case e1:
                    return l(D + "Milliseconds", 3);
                default:
                    return this.clone();
            }
        }, $2.endOf = function(t) {
            return this.startOf(t, !1);
        }, $2.$set = function(s, a) {
            var h, c = g.p(s), d = "set" + (this.$u ? "UTC" : ""), $ = (h = {}, h[i1] = d + "Date", h[f1] = d + "Date", h[u1] = d + "Month", h[o1] = d + "FullYear", h[r1] = d + "Hours", h[n1] = d + "Minutes", h[e1] = d + "Seconds", h[t1] = d + "Milliseconds", h)[c], l = c === i1 ? this.$D + (a - this.$W) : a;
            if (c === u1 || c === o1) {
                var y = this.clone().set(f1, 1);
                y.$d[$](l), y.init(), this.$d = y.set(f1, Math.min(this.$D, y.daysInMonth())).$d;
            } else $ && this.$d[$](l);
            return this.init(), this;
        }, $2.set = function(t, e) {
            return this.clone().$set(t, e);
        }, $2.get = function(t) {
            return this[g.p(t)]();
        }, $2.add = function(t, a) {
            var f, h = this;
            t = Number(t);
            var c = g.p(a), d = function(e) {
                var n = v1(h);
                return g.w(n.date(n.date() + Math.round(e * t)), h);
            };
            if (c === u1) return this.set(u1, this.$M + t);
            if (c === o1) return this.set(o1, this.$y + t);
            if (c === i1) return d(1);
            if (c === s1) return d(7);
            var $ = (f = {}, f[n1] = 6e4, f[r1] = 36e5, f[e1] = 1e3, f)[c] || 1, l = this.$d.getTime() + t * $;
            return g.w(l, this);
        }, $2.subtract = function(t, e) {
            return this.add(-1 * t, e);
        }, $2.format = function(t4) {
            var e2 = this;
            if (!this.isValid()) return "Invalid Date";
            var n2 = t4 || "YYYY-MM-DDTHH:mm:ssZ", r2 = g.z(this), i2 = this.$locale(), s2 = this.$H, u = this.$m, a = this.$M, o = i2.weekdays, f = i2.months, h = function(t, r, i, s) {
                return t && (t[r] || t(e2, n2)) || i[r].substr(0, s);
            }, d = function(t) {
                return g.s(s2 % 12 || 12, t, "0");
            }, $ = i2.meridiem || function(t, e, n) {
                var r = t < 12 ? "AM" : "PM";
                return n ? r.toLowerCase() : r;
            }, l = {
                YY: String(this.$y).slice(-2),
                YYYY: this.$y,
                M: a + 1,
                MM: g.s(a + 1, 2, "0"),
                MMM: h(i2.monthsShort, a, f, 3),
                MMMM: h(f, a),
                D: this.$D,
                DD: g.s(this.$D, 2, "0"),
                d: String(this.$W),
                dd: h(i2.weekdaysMin, this.$W, o, 2),
                ddd: h(i2.weekdaysShort, this.$W, o, 3),
                dddd: o[this.$W],
                H: String(s2),
                HH: g.s(s2, 2, "0"),
                h: d(1),
                hh: d(2),
                a: $(s2, u, !0),
                A: $(s2, u, !1),
                m: String(u),
                mm: g.s(u, 2, "0"),
                s: String(this.$s),
                ss: g.s(this.$s, 2, "0"),
                SSS: g.s(this.$ms, 3, "0"),
                Z: r2
            };
            return n2.replace(c1, function(t, e) {
                return e || l[t] || r2.replace(":", "");
            });
        }, $2.utcOffset = function() {
            return 15 * -Math.round(this.$d.getTimezoneOffset() / 15);
        }, $2.diff = function(t, f, h) {
            var c, d = g.p(f), $ = v1(t), l = 6e4 * ($.utcOffset() - this.utcOffset()), y = this - $, M = g.m(this, $);
            return M = (c = {}, c[o1] = M / 12, c[u1] = M, c[a1] = M / 3, c[s1] = (y - l) / 6048e5, c[i1] = (y - l) / 864e5, c[r1] = y / 36e5, c[n1] = y / 6e4, c[e1] = y / 1e3, c)[d] || y, h ? M : g.a(M);
        }, $2.daysInMonth = function() {
            return this.endOf(u1).$D;
        }, $2.$locale = function() {
            return M1[this.$L];
        }, $2.locale = function(t, e) {
            if (!t) return this.$L;
            var n = this.clone(), r = D1(t, e, !0);
            return r && (n.$L = r), n;
        }, $2.clone = function() {
            return g.w(this.$d, this);
        }, $2.toDate = function() {
            return new Date(this.valueOf());
        }, $2.toJSON = function() {
            return this.isValid() ? this.toISOString() : null;
        }, $2.toISOString = function() {
            return this.$d.toISOString();
        }, $2.toString = function() {
            return this.$d.toUTCString();
        }, d2;
    }(), p = S1.prototype;
    return v1.prototype = p, [
        [
            "$ms",
            t1
        ],
        [
            "$s",
            e1
        ],
        [
            "$m",
            n1
        ],
        [
            "$H",
            r1
        ],
        [
            "$W",
            i1
        ],
        [
            "$M",
            u1
        ],
        [
            "$y",
            o1
        ],
        [
            "$D",
            f1
        ]
    ].forEach(function(t) {
        p[t[1]] = function(e) {
            return this.$g(e, t[0], t[1]);
        };
    }), v1.extend = function(t, e) {
        return t.$i || (t(e, S1, v1), t.$i = !0), v1;
    }, v1.locale = D1, v1.isDayjs = m1, v1.unix = function(t) {
        return v1(1e3 * t);
    }, v1.en = M1[y1], v1.Ls = M1, v1.p = {}, v1;
});

},{}],"9mXc0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _markdownIt = require("markdown-it");
var _markdownItDefault = parcelHelpers.interopDefault(_markdownIt);
const markdown = (0, _markdownItDefault.default)({
    html: false,
    linkify: true,
    typographer: true,
    breaks: true
});
// Disable mail linkification
markdown.linkify.add("mailto:", null);
markdown.use(function(md) {
    md.renderer.rules.link_open = function(tokens, idx, options, env, self) {
        const link_open = tokens[idx];
        link_open.attrs.push([
            "rel",
            "nofollow"
        ]);
        return self.renderToken(tokens, idx, options);
    };
    // Render ~~<text>~~ as del tag
    md.renderer.rules.s_open = function(tokens, idx, options, env, self) {
        const s_open = tokens[idx];
        s_open.type = "del_open";
        s_open.tag = "del";
        return self.renderToken(tokens, idx, options);
    };
    md.renderer.rules.s_close = function(tokens, idx, options, env, self) {
        const s_close = tokens[idx];
        s_close.type = "del_close";
        s_close.tag = "del";
        return self.renderToken(tokens, idx, options);
    };
});
exports.default = function(text) {
    return markdown.render(text).trim();
};

},{"markdown-it":"3Dvb8","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3Dvb8":[function(require,module,exports) {
"use strict";
module.exports = require("./lib/");

},{"./lib/":"a27GK"}],"a27GK":[function(require,module,exports) {
// Main parser class
"use strict";
var utils = require("./common/utils");
var helpers = require("./helpers");
var Renderer = require("./renderer");
var ParserCore = require("./parser_core");
var ParserBlock = require("./parser_block");
var ParserInline = require("./parser_inline");
var LinkifyIt = require("linkify-it");
var mdurl = require("mdurl");
var punycode = require("punycode");
var config = {
    default: require("./presets/default"),
    zero: require("./presets/zero"),
    commonmark: require("./presets/commonmark")
};
////////////////////////////////////////////////////////////////////////////////
//
// This validator can prohibit more than really needed to prevent XSS. It's a
// tradeoff to keep code simple and to be secure by default.
//
// If you need different setup - override validator method as you wish. Or
// replace it with dummy function and use external sanitizer.
//
var BAD_PROTO_RE = /^(vbscript|javascript|file|data):/;
var GOOD_DATA_RE = /^data:image\/(gif|png|jpeg|webp);/;
function validateLink(url) {
    // url should be normalized at this point, and existing entities are decoded
    var str = url.trim().toLowerCase();
    return BAD_PROTO_RE.test(str) ? GOOD_DATA_RE.test(str) ? true : false : true;
}
////////////////////////////////////////////////////////////////////////////////
var RECODE_HOSTNAME_FOR = [
    "http:",
    "https:",
    "mailto:"
];
function normalizeLink(url) {
    var parsed = mdurl.parse(url, true);
    if (parsed.hostname) {
        // Encode hostnames in urls like:
        // `http://host/`, `https://host/`, `mailto:user@host`, `//host/`
        //
        // We don't encode unknown schemas, because it's likely that we encode
        // something we shouldn't (e.g. `skype:name` treated as `skype:host`)
        //
        if (!parsed.protocol || RECODE_HOSTNAME_FOR.indexOf(parsed.protocol) >= 0) try {
            parsed.hostname = punycode.toASCII(parsed.hostname);
        } catch (er) {}
    }
    return mdurl.encode(mdurl.format(parsed));
}
function normalizeLinkText(url) {
    var parsed = mdurl.parse(url, true);
    if (parsed.hostname) {
        // Encode hostnames in urls like:
        // `http://host/`, `https://host/`, `mailto:user@host`, `//host/`
        //
        // We don't encode unknown schemas, because it's likely that we encode
        // something we shouldn't (e.g. `skype:name` treated as `skype:host`)
        //
        if (!parsed.protocol || RECODE_HOSTNAME_FOR.indexOf(parsed.protocol) >= 0) try {
            parsed.hostname = punycode.toUnicode(parsed.hostname);
        } catch (er) {}
    }
    // add '%' to exclude list because of https://github.com/markdown-it/markdown-it/issues/720
    return mdurl.decode(mdurl.format(parsed), mdurl.decode.defaultChars + "%");
}
/**
 * class MarkdownIt
 *
 * Main parser/renderer class.
 *
 * ##### Usage
 *
 * ```javascript
 * // node.js, "classic" way:
 * var MarkdownIt = require('markdown-it'),
 *     md = new MarkdownIt();
 * var result = md.render('# markdown-it rulezz!');
 *
 * // node.js, the same, but with sugar:
 * var md = require('markdown-it')();
 * var result = md.render('# markdown-it rulezz!');
 *
 * // browser without AMD, added to "window" on script load
 * // Note, there are no dash.
 * var md = window.markdownit();
 * var result = md.render('# markdown-it rulezz!');
 * ```
 *
 * Single line rendering, without paragraph wrap:
 *
 * ```javascript
 * var md = require('markdown-it')();
 * var result = md.renderInline('__markdown-it__ rulezz!');
 * ```
 **/ /**
 * new MarkdownIt([presetName, options])
 * - presetName (String): optional, `commonmark` / `zero`
 * - options (Object)
 *
 * Creates parser instanse with given config. Can be called without `new`.
 *
 * ##### presetName
 *
 * MarkdownIt provides named presets as a convenience to quickly
 * enable/disable active syntax rules and options for common use cases.
 *
 * - ["commonmark"](https://github.com/markdown-it/markdown-it/blob/master/lib/presets/commonmark.js) -
 *   configures parser to strict [CommonMark](http://commonmark.org/) mode.
 * - [default](https://github.com/markdown-it/markdown-it/blob/master/lib/presets/default.js) -
 *   similar to GFM, used when no preset name given. Enables all available rules,
 *   but still without html, typographer & autolinker.
 * - ["zero"](https://github.com/markdown-it/markdown-it/blob/master/lib/presets/zero.js) -
 *   all rules disabled. Useful to quickly setup your config via `.enable()`.
 *   For example, when you need only `bold` and `italic` markup and nothing else.
 *
 * ##### options:
 *
 * - __html__ - `false`. Set `true` to enable HTML tags in source. Be careful!
 *   That's not safe! You may need external sanitizer to protect output from XSS.
 *   It's better to extend features via plugins, instead of enabling HTML.
 * - __xhtmlOut__ - `false`. Set `true` to add '/' when closing single tags
 *   (`<br />`). This is needed only for full CommonMark compatibility. In real
 *   world you will need HTML output.
 * - __breaks__ - `false`. Set `true` to convert `\n` in paragraphs into `<br>`.
 * - __langPrefix__ - `language-`. CSS language class prefix for fenced blocks.
 *   Can be useful for external highlighters.
 * - __linkify__ - `false`. Set `true` to autoconvert URL-like text to links.
 * - __typographer__  - `false`. Set `true` to enable [some language-neutral
 *   replacement](https://github.com/markdown-it/markdown-it/blob/master/lib/rules_core/replacements.js) +
 *   quotes beautification (smartquotes).
 * - __quotes__ - `“”‘’`, String or Array. Double + single quotes replacement
 *   pairs, when typographer enabled and smartquotes on. For example, you can
 *   use `'«»„“'` for Russian, `'„“‚‘'` for German, and
 *   `['«\xA0', '\xA0»', '‹\xA0', '\xA0›']` for French (including nbsp).
 * - __highlight__ - `null`. Highlighter function for fenced code blocks.
 *   Highlighter `function (str, lang)` should return escaped HTML. It can also
 *   return empty string if the source was not changed and should be escaped
 *   externaly. If result starts with <pre... internal wrapper is skipped.
 *
 * ##### Example
 *
 * ```javascript
 * // commonmark mode
 * var md = require('markdown-it')('commonmark');
 *
 * // default mode
 * var md = require('markdown-it')();
 *
 * // enable everything
 * var md = require('markdown-it')({
 *   html: true,
 *   linkify: true,
 *   typographer: true
 * });
 * ```
 *
 * ##### Syntax highlighting
 *
 * ```js
 * var hljs = require('highlight.js') // https://highlightjs.org/
 *
 * var md = require('markdown-it')({
 *   highlight: function (str, lang) {
 *     if (lang && hljs.getLanguage(lang)) {
 *       try {
 *         return hljs.highlight(str, { language: lang, ignoreIllegals: true }).value;
 *       } catch (__) {}
 *     }
 *
 *     return ''; // use external default escaping
 *   }
 * });
 * ```
 *
 * Or with full wrapper override (if you need assign class to `<pre>`):
 *
 * ```javascript
 * var hljs = require('highlight.js') // https://highlightjs.org/
 *
 * // Actual default values
 * var md = require('markdown-it')({
 *   highlight: function (str, lang) {
 *     if (lang && hljs.getLanguage(lang)) {
 *       try {
 *         return '<pre class="hljs"><code>' +
 *                hljs.highlight(str, { language: lang, ignoreIllegals: true }).value +
 *                '</code></pre>';
 *       } catch (__) {}
 *     }
 *
 *     return '<pre class="hljs"><code>' + md.utils.escapeHtml(str) + '</code></pre>';
 *   }
 * });
 * ```
 *
 **/ function MarkdownIt(presetName, options) {
    if (!(this instanceof MarkdownIt)) return new MarkdownIt(presetName, options);
    if (!options) {
        if (!utils.isString(presetName)) {
            options = presetName || {};
            presetName = "default";
        }
    }
    /**
   * MarkdownIt#inline -> ParserInline
   *
   * Instance of [[ParserInline]]. You may need it to add new rules when
   * writing plugins. For simple rules control use [[MarkdownIt.disable]] and
   * [[MarkdownIt.enable]].
   **/ this.inline = new ParserInline();
    /**
   * MarkdownIt#block -> ParserBlock
   *
   * Instance of [[ParserBlock]]. You may need it to add new rules when
   * writing plugins. For simple rules control use [[MarkdownIt.disable]] and
   * [[MarkdownIt.enable]].
   **/ this.block = new ParserBlock();
    /**
   * MarkdownIt#core -> Core
   *
   * Instance of [[Core]] chain executor. You may need it to add new rules when
   * writing plugins. For simple rules control use [[MarkdownIt.disable]] and
   * [[MarkdownIt.enable]].
   **/ this.core = new ParserCore();
    /**
   * MarkdownIt#renderer -> Renderer
   *
   * Instance of [[Renderer]]. Use it to modify output look. Or to add rendering
   * rules for new token types, generated by plugins.
   *
   * ##### Example
   *
   * ```javascript
   * var md = require('markdown-it')();
   *
   * function myToken(tokens, idx, options, env, self) {
   *   //...
   *   return result;
   * };
   *
   * md.renderer.rules['my_token'] = myToken
   * ```
   *
   * See [[Renderer]] docs and [source code](https://github.com/markdown-it/markdown-it/blob/master/lib/renderer.js).
   **/ this.renderer = new Renderer();
    /**
   * MarkdownIt#linkify -> LinkifyIt
   *
   * [linkify-it](https://github.com/markdown-it/linkify-it) instance.
   * Used by [linkify](https://github.com/markdown-it/markdown-it/blob/master/lib/rules_core/linkify.js)
   * rule.
   **/ this.linkify = new LinkifyIt();
    /**
   * MarkdownIt#validateLink(url) -> Boolean
   *
   * Link validation function. CommonMark allows too much in links. By default
   * we disable `javascript:`, `vbscript:`, `file:` schemas, and almost all `data:...` schemas
   * except some embedded image types.
   *
   * You can change this behaviour:
   *
   * ```javascript
   * var md = require('markdown-it')();
   * // enable everything
   * md.validateLink = function () { return true; }
   * ```
   **/ this.validateLink = validateLink;
    /**
   * MarkdownIt#normalizeLink(url) -> String
   *
   * Function used to encode link url to a machine-readable format,
   * which includes url-encoding, punycode, etc.
   **/ this.normalizeLink = normalizeLink;
    /**
   * MarkdownIt#normalizeLinkText(url) -> String
   *
   * Function used to decode link url to a human-readable format`
   **/ this.normalizeLinkText = normalizeLinkText;
    // Expose utils & helpers for easy acces from plugins
    /**
   * MarkdownIt#utils -> utils
   *
   * Assorted utility functions, useful to write plugins. See details
   * [here](https://github.com/markdown-it/markdown-it/blob/master/lib/common/utils.js).
   **/ this.utils = utils;
    /**
   * MarkdownIt#helpers -> helpers
   *
   * Link components parser functions, useful to write plugins. See details
   * [here](https://github.com/markdown-it/markdown-it/blob/master/lib/helpers).
   **/ this.helpers = utils.assign({}, helpers);
    this.options = {};
    this.configure(presetName);
    if (options) this.set(options);
}
/** chainable
 * MarkdownIt.set(options)
 *
 * Set parser options (in the same format as in constructor). Probably, you
 * will never need it, but you can change options after constructor call.
 *
 * ##### Example
 *
 * ```javascript
 * var md = require('markdown-it')()
 *             .set({ html: true, breaks: true })
 *             .set({ typographer, true });
 * ```
 *
 * __Note:__ To achieve the best possible performance, don't modify a
 * `markdown-it` instance options on the fly. If you need multiple configurations
 * it's best to create multiple instances and initialize each with separate
 * config.
 **/ MarkdownIt.prototype.set = function(options) {
    utils.assign(this.options, options);
    return this;
};
/** chainable, internal
 * MarkdownIt.configure(presets)
 *
 * Batch load of all options and compenent settings. This is internal method,
 * and you probably will not need it. But if you will - see available presets
 * and data structure [here](https://github.com/markdown-it/markdown-it/tree/master/lib/presets)
 *
 * We strongly recommend to use presets instead of direct config loads. That
 * will give better compatibility with next versions.
 **/ MarkdownIt.prototype.configure = function(presets) {
    var self = this, presetName;
    if (utils.isString(presets)) {
        presetName = presets;
        presets = config[presetName];
        if (!presets) throw new Error('Wrong `markdown-it` preset "' + presetName + '", check name');
    }
    if (!presets) throw new Error("Wrong `markdown-it` preset, can't be empty");
    if (presets.options) self.set(presets.options);
    if (presets.components) Object.keys(presets.components).forEach(function(name) {
        if (presets.components[name].rules) self[name].ruler.enableOnly(presets.components[name].rules);
        if (presets.components[name].rules2) self[name].ruler2.enableOnly(presets.components[name].rules2);
    });
    return this;
};
/** chainable
 * MarkdownIt.enable(list, ignoreInvalid)
 * - list (String|Array): rule name or list of rule names to enable
 * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.
 *
 * Enable list or rules. It will automatically find appropriate components,
 * containing rules with given names. If rule not found, and `ignoreInvalid`
 * not set - throws exception.
 *
 * ##### Example
 *
 * ```javascript
 * var md = require('markdown-it')()
 *             .enable(['sub', 'sup'])
 *             .disable('smartquotes');
 * ```
 **/ MarkdownIt.prototype.enable = function(list, ignoreInvalid) {
    var result = [];
    if (!Array.isArray(list)) list = [
        list
    ];
    [
        "core",
        "block",
        "inline"
    ].forEach(function(chain) {
        result = result.concat(this[chain].ruler.enable(list, true));
    }, this);
    result = result.concat(this.inline.ruler2.enable(list, true));
    var missed = list.filter(function(name) {
        return result.indexOf(name) < 0;
    });
    if (missed.length && !ignoreInvalid) throw new Error("MarkdownIt. Failed to enable unknown rule(s): " + missed);
    return this;
};
/** chainable
 * MarkdownIt.disable(list, ignoreInvalid)
 * - list (String|Array): rule name or list of rule names to disable.
 * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.
 *
 * The same as [[MarkdownIt.enable]], but turn specified rules off.
 **/ MarkdownIt.prototype.disable = function(list, ignoreInvalid) {
    var result = [];
    if (!Array.isArray(list)) list = [
        list
    ];
    [
        "core",
        "block",
        "inline"
    ].forEach(function(chain) {
        result = result.concat(this[chain].ruler.disable(list, true));
    }, this);
    result = result.concat(this.inline.ruler2.disable(list, true));
    var missed = list.filter(function(name) {
        return result.indexOf(name) < 0;
    });
    if (missed.length && !ignoreInvalid) throw new Error("MarkdownIt. Failed to disable unknown rule(s): " + missed);
    return this;
};
/** chainable
 * MarkdownIt.use(plugin, params)
 *
 * Load specified plugin with given params into current parser instance.
 * It's just a sugar to call `plugin(md, params)` with curring.
 *
 * ##### Example
 *
 * ```javascript
 * var iterator = require('markdown-it-for-inline');
 * var md = require('markdown-it')()
 *             .use(iterator, 'foo_replace', 'text', function (tokens, idx) {
 *               tokens[idx].content = tokens[idx].content.replace(/foo/g, 'bar');
 *             });
 * ```
 **/ MarkdownIt.prototype.use = function(plugin /*, params, ... */ ) {
    var args = [
        this
    ].concat(Array.prototype.slice.call(arguments, 1));
    plugin.apply(plugin, args);
    return this;
};
/** internal
 * MarkdownIt.parse(src, env) -> Array
 * - src (String): source string
 * - env (Object): environment sandbox
 *
 * Parse input string and return list of block tokens (special token type
 * "inline" will contain list of inline tokens). You should not call this
 * method directly, until you write custom renderer (for example, to produce
 * AST).
 *
 * `env` is used to pass data between "distributed" rules and return additional
 * metadata like reference info, needed for the renderer. It also can be used to
 * inject data in specific cases. Usually, you will be ok to pass `{}`,
 * and then pass updated object to renderer.
 **/ MarkdownIt.prototype.parse = function(src, env) {
    if (typeof src !== "string") throw new Error("Input data should be a String");
    var state = new this.core.State(src, this, env);
    this.core.process(state);
    return state.tokens;
};
/**
 * MarkdownIt.render(src [, env]) -> String
 * - src (String): source string
 * - env (Object): environment sandbox
 *
 * Render markdown string into html. It does all magic for you :).
 *
 * `env` can be used to inject additional metadata (`{}` by default).
 * But you will not need it with high probability. See also comment
 * in [[MarkdownIt.parse]].
 **/ MarkdownIt.prototype.render = function(src, env) {
    env = env || {};
    return this.renderer.render(this.parse(src, env), this.options, env);
};
/** internal
 * MarkdownIt.parseInline(src, env) -> Array
 * - src (String): source string
 * - env (Object): environment sandbox
 *
 * The same as [[MarkdownIt.parse]] but skip all block rules. It returns the
 * block tokens list with the single `inline` element, containing parsed inline
 * tokens in `children` property. Also updates `env` object.
 **/ MarkdownIt.prototype.parseInline = function(src, env) {
    var state = new this.core.State(src, this, env);
    state.inlineMode = true;
    this.core.process(state);
    return state.tokens;
};
/**
 * MarkdownIt.renderInline(src [, env]) -> String
 * - src (String): source string
 * - env (Object): environment sandbox
 *
 * Similar to [[MarkdownIt.render]] but for single paragraph content. Result
 * will NOT be wrapped into `<p>` tags.
 **/ MarkdownIt.prototype.renderInline = function(src, env) {
    env = env || {};
    return this.renderer.render(this.parseInline(src, env), this.options, env);
};
module.exports = MarkdownIt;

},{"./common/utils":"fp3Yu","./helpers":"gdwjd","./renderer":"h6Aaq","./parser_core":"jOauP","./parser_block":"45OVj","./parser_inline":"2gKTK","linkify-it":"94rsK","mdurl":"cfVrT","punycode":"6nhNf","./presets/default":"biCzc","./presets/zero":"7sPz2","./presets/commonmark":"1nTfr"}],"fp3Yu":[function(require,module,exports) {
// Utilities
//
"use strict";
function _class(obj) {
    return Object.prototype.toString.call(obj);
}
function isString(obj) {
    return _class(obj) === "[object String]";
}
var _hasOwnProperty = Object.prototype.hasOwnProperty;
function has(object, key) {
    return _hasOwnProperty.call(object, key);
}
// Merge objects
//
function assign(obj /*from1, from2, from3, ...*/ ) {
    var sources = Array.prototype.slice.call(arguments, 1);
    sources.forEach(function(source) {
        if (!source) return;
        if (typeof source !== "object") throw new TypeError(source + "must be object");
        Object.keys(source).forEach(function(key) {
            obj[key] = source[key];
        });
    });
    return obj;
}
// Remove element from array and put another array at those position.
// Useful for some operations with tokens
function arrayReplaceAt(src, pos, newElements) {
    return [].concat(src.slice(0, pos), newElements, src.slice(pos + 1));
}
////////////////////////////////////////////////////////////////////////////////
function isValidEntityCode(c) {
    /*eslint no-bitwise:0*/ // broken sequence
    if (c >= 0xD800 && c <= 0xDFFF) return false;
    // never used
    if (c >= 0xFDD0 && c <= 0xFDEF) return false;
    if ((c & 0xFFFF) === 0xFFFF || (c & 0xFFFF) === 0xFFFE) return false;
    // control codes
    if (c >= 0x00 && c <= 0x08) return false;
    if (c === 0x0B) return false;
    if (c >= 0x0E && c <= 0x1F) return false;
    if (c >= 0x7F && c <= 0x9F) return false;
    // out of range
    if (c > 0x10FFFF) return false;
    return true;
}
function fromCodePoint(c) {
    /*eslint no-bitwise:0*/ if (c > 0xffff) {
        c -= 0x10000;
        var surrogate1 = 0xd800 + (c >> 10), surrogate2 = 0xdc00 + (c & 0x3ff);
        return String.fromCharCode(surrogate1, surrogate2);
    }
    return String.fromCharCode(c);
}
var UNESCAPE_MD_RE = /\\([!"#$%&'()*+,\-.\/:;<=>?@[\\\]^_`{|}~])/g;
var ENTITY_RE = /&([a-z#][a-z0-9]{1,31});/gi;
var UNESCAPE_ALL_RE = new RegExp(UNESCAPE_MD_RE.source + "|" + ENTITY_RE.source, "gi");
var DIGITAL_ENTITY_TEST_RE = /^#((?:x[a-f0-9]{1,8}|[0-9]{1,8}))/i;
var entities = require("./entities");
function replaceEntityPattern(match, name) {
    var code = 0;
    if (has(entities, name)) return entities[name];
    if (name.charCodeAt(0) === 0x23 /* # */  && DIGITAL_ENTITY_TEST_RE.test(name)) {
        code = name[1].toLowerCase() === "x" ? parseInt(name.slice(2), 16) : parseInt(name.slice(1), 10);
        if (isValidEntityCode(code)) return fromCodePoint(code);
    }
    return match;
}
/*function replaceEntities(str) {
  if (str.indexOf('&') < 0) { return str; }

  return str.replace(ENTITY_RE, replaceEntityPattern);
}*/ function unescapeMd(str) {
    if (str.indexOf("\\") < 0) return str;
    return str.replace(UNESCAPE_MD_RE, "$1");
}
function unescapeAll(str) {
    if (str.indexOf("\\") < 0 && str.indexOf("&") < 0) return str;
    return str.replace(UNESCAPE_ALL_RE, function(match, escaped, entity) {
        if (escaped) return escaped;
        return replaceEntityPattern(match, entity);
    });
}
////////////////////////////////////////////////////////////////////////////////
var HTML_ESCAPE_TEST_RE = /[&<>"]/;
var HTML_ESCAPE_REPLACE_RE = /[&<>"]/g;
var HTML_REPLACEMENTS = {
    "&": "&amp;",
    "<": "&lt;",
    ">": "&gt;",
    '"': "&quot;"
};
function replaceUnsafeChar(ch) {
    return HTML_REPLACEMENTS[ch];
}
function escapeHtml(str) {
    if (HTML_ESCAPE_TEST_RE.test(str)) return str.replace(HTML_ESCAPE_REPLACE_RE, replaceUnsafeChar);
    return str;
}
////////////////////////////////////////////////////////////////////////////////
var REGEXP_ESCAPE_RE = /[.?*+^$[\]\\(){}|-]/g;
function escapeRE(str) {
    return str.replace(REGEXP_ESCAPE_RE, "\\$&");
}
////////////////////////////////////////////////////////////////////////////////
function isSpace(code) {
    switch(code){
        case 0x09:
        case 0x20:
            return true;
    }
    return false;
}
// Zs (unicode class) || [\t\f\v\r\n]
function isWhiteSpace(code) {
    if (code >= 0x2000 && code <= 0x200A) return true;
    switch(code){
        case 0x09:
        case 0x0A:
        case 0x0B:
        case 0x0C:
        case 0x0D:
        case 0x20:
        case 0xA0:
        case 0x1680:
        case 0x202F:
        case 0x205F:
        case 0x3000:
            return true;
    }
    return false;
}
////////////////////////////////////////////////////////////////////////////////
/*eslint-disable max-len*/ var UNICODE_PUNCT_RE = require("uc.micro/categories/P/regex");
// Currently without astral characters support.
function isPunctChar(ch) {
    return UNICODE_PUNCT_RE.test(ch);
}
// Markdown ASCII punctuation characters.
//
// !, ", #, $, %, &, ', (, ), *, +, ,, -, ., /, :, ;, <, =, >, ?, @, [, \, ], ^, _, `, {, |, }, or ~
// http://spec.commonmark.org/0.15/#ascii-punctuation-character
//
// Don't confuse with unicode punctuation !!! It lacks some chars in ascii range.
//
function isMdAsciiPunct(ch) {
    switch(ch){
        case 0x21 /* ! */ :
        case 0x22 /* " */ :
        case 0x23 /* # */ :
        case 0x24 /* $ */ :
        case 0x25 /* % */ :
        case 0x26 /* & */ :
        case 0x27 /* ' */ :
        case 0x28 /* ( */ :
        case 0x29 /* ) */ :
        case 0x2A /* * */ :
        case 0x2B /* + */ :
        case 0x2C /* , */ :
        case 0x2D /* - */ :
        case 0x2E /* . */ :
        case 0x2F /* / */ :
        case 0x3A /* : */ :
        case 0x3B /* ; */ :
        case 0x3C /* < */ :
        case 0x3D /* = */ :
        case 0x3E /* > */ :
        case 0x3F /* ? */ :
        case 0x40 /* @ */ :
        case 0x5B /* [ */ :
        case 0x5C /* \ */ :
        case 0x5D /* ] */ :
        case 0x5E /* ^ */ :
        case 0x5F /* _ */ :
        case 0x60 /* ` */ :
        case 0x7B /* { */ :
        case 0x7C /* | */ :
        case 0x7D /* } */ :
        case 0x7E /* ~ */ :
            return true;
        default:
            return false;
    }
}
// Hepler to unify [reference labels].
//
function normalizeReference(str) {
    // Trim and collapse whitespace
    //
    str = str.trim().replace(/\s+/g, " ");
    // In node v10 'ẞ'.toLowerCase() === 'Ṿ', which is presumed to be a bug
    // fixed in v12 (couldn't find any details).
    //
    // So treat this one as a special case
    // (remove this when node v10 is no longer supported).
    //
    if ("\u1E9E".toLowerCase() === "\u1E7E") str = str.replace(/ẞ/g, "\xdf");
    // .toLowerCase().toUpperCase() should get rid of all differences
    // between letter variants.
    //
    // Simple .toLowerCase() doesn't normalize 125 code points correctly,
    // and .toUpperCase doesn't normalize 6 of them (list of exceptions:
    // İ, ϴ, ẞ, Ω, K, Å - those are already uppercased, but have differently
    // uppercased versions).
    //
    // Here's an example showing how it happens. Lets take greek letter omega:
    // uppercase U+0398 (Θ), U+03f4 (ϴ) and lowercase U+03b8 (θ), U+03d1 (ϑ)
    //
    // Unicode entries:
    // 0398;GREEK CAPITAL LETTER THETA;Lu;0;L;;;;;N;;;;03B8;
    // 03B8;GREEK SMALL LETTER THETA;Ll;0;L;;;;;N;;;0398;;0398
    // 03D1;GREEK THETA SYMBOL;Ll;0;L;<compat> 03B8;;;;N;GREEK SMALL LETTER SCRIPT THETA;;0398;;0398
    // 03F4;GREEK CAPITAL THETA SYMBOL;Lu;0;L;<compat> 0398;;;;N;;;;03B8;
    //
    // Case-insensitive comparison should treat all of them as equivalent.
    //
    // But .toLowerCase() doesn't change ϑ (it's already lowercase),
    // and .toUpperCase() doesn't change ϴ (already uppercase).
    //
    // Applying first lower then upper case normalizes any character:
    // '\u0398\u03f4\u03b8\u03d1'.toLowerCase().toUpperCase() === '\u0398\u0398\u0398\u0398'
    //
    // Note: this is equivalent to unicode case folding; unicode normalization
    // is a different step that is not required here.
    //
    // Final result should be uppercased, because it's later stored in an object
    // (this avoid a conflict with Object.prototype members,
    // most notably, `__proto__`)
    //
    return str.toLowerCase().toUpperCase();
}
////////////////////////////////////////////////////////////////////////////////
// Re-export libraries commonly used in both markdown-it and its plugins,
// so plugins won't have to depend on them explicitly, which reduces their
// bundled size (e.g. a browser build).
//
exports.lib = {};
exports.lib.mdurl = require("mdurl");
exports.lib.ucmicro = require("uc.micro");
exports.assign = assign;
exports.isString = isString;
exports.has = has;
exports.unescapeMd = unescapeMd;
exports.unescapeAll = unescapeAll;
exports.isValidEntityCode = isValidEntityCode;
exports.fromCodePoint = fromCodePoint;
// exports.replaceEntities     = replaceEntities;
exports.escapeHtml = escapeHtml;
exports.arrayReplaceAt = arrayReplaceAt;
exports.isSpace = isSpace;
exports.isWhiteSpace = isWhiteSpace;
exports.isMdAsciiPunct = isMdAsciiPunct;
exports.isPunctChar = isPunctChar;
exports.escapeRE = escapeRE;
exports.normalizeReference = normalizeReference;

},{"./entities":"aZc5c","uc.micro/categories/P/regex":"h8JTc","mdurl":"cfVrT","uc.micro":"lyqSr"}],"aZc5c":[function(require,module,exports) {
// HTML5 entities map: { name -> utf16string }
//
"use strict";
/*eslint quotes:0*/ module.exports = require("entities/lib/maps/entities.json");

},{"entities/lib/maps/entities.json":"ebWCh"}],"ebWCh":[function(require,module,exports) {
module.exports = JSON.parse('{"Aacute":"\xc1","aacute":"\xe1","Abreve":"\u0102","abreve":"\u0103","ac":"\u223E","acd":"\u223F","acE":"\u223E\u0333","Acirc":"\xc2","acirc":"\xe2","acute":"\xb4","Acy":"\u0410","acy":"\u0430","AElig":"\xc6","aelig":"\xe6","af":"\u2061","Afr":"\uD835\uDD04","afr":"\uD835\uDD1E","Agrave":"\xc0","agrave":"\xe0","alefsym":"\u2135","aleph":"\u2135","Alpha":"\u0391","alpha":"\u03B1","Amacr":"\u0100","amacr":"\u0101","amalg":"\u2A3F","amp":"&","AMP":"&","andand":"\u2A55","And":"\u2A53","and":"\u2227","andd":"\u2A5C","andslope":"\u2A58","andv":"\u2A5A","ang":"\u2220","ange":"\u29A4","angle":"\u2220","angmsdaa":"\u29A8","angmsdab":"\u29A9","angmsdac":"\u29AA","angmsdad":"\u29AB","angmsdae":"\u29AC","angmsdaf":"\u29AD","angmsdag":"\u29AE","angmsdah":"\u29AF","angmsd":"\u2221","angrt":"\u221F","angrtvb":"\u22BE","angrtvbd":"\u299D","angsph":"\u2222","angst":"\xc5","angzarr":"\u237C","Aogon":"\u0104","aogon":"\u0105","Aopf":"\uD835\uDD38","aopf":"\uD835\uDD52","apacir":"\u2A6F","ap":"\u2248","apE":"\u2A70","ape":"\u224A","apid":"\u224B","apos":"\'","ApplyFunction":"\u2061","approx":"\u2248","approxeq":"\u224A","Aring":"\xc5","aring":"\xe5","Ascr":"\uD835\uDC9C","ascr":"\uD835\uDCB6","Assign":"\u2254","ast":"*","asymp":"\u2248","asympeq":"\u224D","Atilde":"\xc3","atilde":"\xe3","Auml":"\xc4","auml":"\xe4","awconint":"\u2233","awint":"\u2A11","backcong":"\u224C","backepsilon":"\u03F6","backprime":"\u2035","backsim":"\u223D","backsimeq":"\u22CD","Backslash":"\u2216","Barv":"\u2AE7","barvee":"\u22BD","barwed":"\u2305","Barwed":"\u2306","barwedge":"\u2305","bbrk":"\u23B5","bbrktbrk":"\u23B6","bcong":"\u224C","Bcy":"\u0411","bcy":"\u0431","bdquo":"\u201E","becaus":"\u2235","because":"\u2235","Because":"\u2235","bemptyv":"\u29B0","bepsi":"\u03F6","bernou":"\u212C","Bernoullis":"\u212C","Beta":"\u0392","beta":"\u03B2","beth":"\u2136","between":"\u226C","Bfr":"\uD835\uDD05","bfr":"\uD835\uDD1F","bigcap":"\u22C2","bigcirc":"\u25EF","bigcup":"\u22C3","bigodot":"\u2A00","bigoplus":"\u2A01","bigotimes":"\u2A02","bigsqcup":"\u2A06","bigstar":"\u2605","bigtriangledown":"\u25BD","bigtriangleup":"\u25B3","biguplus":"\u2A04","bigvee":"\u22C1","bigwedge":"\u22C0","bkarow":"\u290D","blacklozenge":"\u29EB","blacksquare":"\u25AA","blacktriangle":"\u25B4","blacktriangledown":"\u25BE","blacktriangleleft":"\u25C2","blacktriangleright":"\u25B8","blank":"\u2423","blk12":"\u2592","blk14":"\u2591","blk34":"\u2593","block":"\u2588","bne":"=\u20E5","bnequiv":"\u2261\u20E5","bNot":"\u2AED","bnot":"\u2310","Bopf":"\uD835\uDD39","bopf":"\uD835\uDD53","bot":"\u22A5","bottom":"\u22A5","bowtie":"\u22C8","boxbox":"\u29C9","boxdl":"\u2510","boxdL":"\u2555","boxDl":"\u2556","boxDL":"\u2557","boxdr":"\u250C","boxdR":"\u2552","boxDr":"\u2553","boxDR":"\u2554","boxh":"\u2500","boxH":"\u2550","boxhd":"\u252C","boxHd":"\u2564","boxhD":"\u2565","boxHD":"\u2566","boxhu":"\u2534","boxHu":"\u2567","boxhU":"\u2568","boxHU":"\u2569","boxminus":"\u229F","boxplus":"\u229E","boxtimes":"\u22A0","boxul":"\u2518","boxuL":"\u255B","boxUl":"\u255C","boxUL":"\u255D","boxur":"\u2514","boxuR":"\u2558","boxUr":"\u2559","boxUR":"\u255A","boxv":"\u2502","boxV":"\u2551","boxvh":"\u253C","boxvH":"\u256A","boxVh":"\u256B","boxVH":"\u256C","boxvl":"\u2524","boxvL":"\u2561","boxVl":"\u2562","boxVL":"\u2563","boxvr":"\u251C","boxvR":"\u255E","boxVr":"\u255F","boxVR":"\u2560","bprime":"\u2035","breve":"\u02D8","Breve":"\u02D8","brvbar":"\xa6","bscr":"\uD835\uDCB7","Bscr":"\u212C","bsemi":"\u204F","bsim":"\u223D","bsime":"\u22CD","bsolb":"\u29C5","bsol":"\\\\","bsolhsub":"\u27C8","bull":"\u2022","bullet":"\u2022","bump":"\u224E","bumpE":"\u2AAE","bumpe":"\u224F","Bumpeq":"\u224E","bumpeq":"\u224F","Cacute":"\u0106","cacute":"\u0107","capand":"\u2A44","capbrcup":"\u2A49","capcap":"\u2A4B","cap":"\u2229","Cap":"\u22D2","capcup":"\u2A47","capdot":"\u2A40","CapitalDifferentialD":"\u2145","caps":"\u2229\uFE00","caret":"\u2041","caron":"\u02C7","Cayleys":"\u212D","ccaps":"\u2A4D","Ccaron":"\u010C","ccaron":"\u010D","Ccedil":"\xc7","ccedil":"\xe7","Ccirc":"\u0108","ccirc":"\u0109","Cconint":"\u2230","ccups":"\u2A4C","ccupssm":"\u2A50","Cdot":"\u010A","cdot":"\u010B","cedil":"\xb8","Cedilla":"\xb8","cemptyv":"\u29B2","cent":"\xa2","centerdot":"\xb7","CenterDot":"\xb7","cfr":"\uD835\uDD20","Cfr":"\u212D","CHcy":"\u0427","chcy":"\u0447","check":"\u2713","checkmark":"\u2713","Chi":"\u03A7","chi":"\u03C7","circ":"\u02C6","circeq":"\u2257","circlearrowleft":"\u21BA","circlearrowright":"\u21BB","circledast":"\u229B","circledcirc":"\u229A","circleddash":"\u229D","CircleDot":"\u2299","circledR":"\xae","circledS":"\u24C8","CircleMinus":"\u2296","CirclePlus":"\u2295","CircleTimes":"\u2297","cir":"\u25CB","cirE":"\u29C3","cire":"\u2257","cirfnint":"\u2A10","cirmid":"\u2AEF","cirscir":"\u29C2","ClockwiseContourIntegral":"\u2232","CloseCurlyDoubleQuote":"\u201D","CloseCurlyQuote":"\u2019","clubs":"\u2663","clubsuit":"\u2663","colon":":","Colon":"\u2237","Colone":"\u2A74","colone":"\u2254","coloneq":"\u2254","comma":",","commat":"@","comp":"\u2201","compfn":"\u2218","complement":"\u2201","complexes":"\u2102","cong":"\u2245","congdot":"\u2A6D","Congruent":"\u2261","conint":"\u222E","Conint":"\u222F","ContourIntegral":"\u222E","copf":"\uD835\uDD54","Copf":"\u2102","coprod":"\u2210","Coproduct":"\u2210","copy":"\xa9","COPY":"\xa9","copysr":"\u2117","CounterClockwiseContourIntegral":"\u2233","crarr":"\u21B5","cross":"\u2717","Cross":"\u2A2F","Cscr":"\uD835\uDC9E","cscr":"\uD835\uDCB8","csub":"\u2ACF","csube":"\u2AD1","csup":"\u2AD0","csupe":"\u2AD2","ctdot":"\u22EF","cudarrl":"\u2938","cudarrr":"\u2935","cuepr":"\u22DE","cuesc":"\u22DF","cularr":"\u21B6","cularrp":"\u293D","cupbrcap":"\u2A48","cupcap":"\u2A46","CupCap":"\u224D","cup":"\u222A","Cup":"\u22D3","cupcup":"\u2A4A","cupdot":"\u228D","cupor":"\u2A45","cups":"\u222A\uFE00","curarr":"\u21B7","curarrm":"\u293C","curlyeqprec":"\u22DE","curlyeqsucc":"\u22DF","curlyvee":"\u22CE","curlywedge":"\u22CF","curren":"\xa4","curvearrowleft":"\u21B6","curvearrowright":"\u21B7","cuvee":"\u22CE","cuwed":"\u22CF","cwconint":"\u2232","cwint":"\u2231","cylcty":"\u232D","dagger":"\u2020","Dagger":"\u2021","daleth":"\u2138","darr":"\u2193","Darr":"\u21A1","dArr":"\u21D3","dash":"\u2010","Dashv":"\u2AE4","dashv":"\u22A3","dbkarow":"\u290F","dblac":"\u02DD","Dcaron":"\u010E","dcaron":"\u010F","Dcy":"\u0414","dcy":"\u0434","ddagger":"\u2021","ddarr":"\u21CA","DD":"\u2145","dd":"\u2146","DDotrahd":"\u2911","ddotseq":"\u2A77","deg":"\xb0","Del":"\u2207","Delta":"\u0394","delta":"\u03B4","demptyv":"\u29B1","dfisht":"\u297F","Dfr":"\uD835\uDD07","dfr":"\uD835\uDD21","dHar":"\u2965","dharl":"\u21C3","dharr":"\u21C2","DiacriticalAcute":"\xb4","DiacriticalDot":"\u02D9","DiacriticalDoubleAcute":"\u02DD","DiacriticalGrave":"`","DiacriticalTilde":"\u02DC","diam":"\u22C4","diamond":"\u22C4","Diamond":"\u22C4","diamondsuit":"\u2666","diams":"\u2666","die":"\xa8","DifferentialD":"\u2146","digamma":"\u03DD","disin":"\u22F2","div":"\xf7","divide":"\xf7","divideontimes":"\u22C7","divonx":"\u22C7","DJcy":"\u0402","djcy":"\u0452","dlcorn":"\u231E","dlcrop":"\u230D","dollar":"$","Dopf":"\uD835\uDD3B","dopf":"\uD835\uDD55","Dot":"\xa8","dot":"\u02D9","DotDot":"\u20DC","doteq":"\u2250","doteqdot":"\u2251","DotEqual":"\u2250","dotminus":"\u2238","dotplus":"\u2214","dotsquare":"\u22A1","doublebarwedge":"\u2306","DoubleContourIntegral":"\u222F","DoubleDot":"\xa8","DoubleDownArrow":"\u21D3","DoubleLeftArrow":"\u21D0","DoubleLeftRightArrow":"\u21D4","DoubleLeftTee":"\u2AE4","DoubleLongLeftArrow":"\u27F8","DoubleLongLeftRightArrow":"\u27FA","DoubleLongRightArrow":"\u27F9","DoubleRightArrow":"\u21D2","DoubleRightTee":"\u22A8","DoubleUpArrow":"\u21D1","DoubleUpDownArrow":"\u21D5","DoubleVerticalBar":"\u2225","DownArrowBar":"\u2913","downarrow":"\u2193","DownArrow":"\u2193","Downarrow":"\u21D3","DownArrowUpArrow":"\u21F5","DownBreve":"\u0311","downdownarrows":"\u21CA","downharpoonleft":"\u21C3","downharpoonright":"\u21C2","DownLeftRightVector":"\u2950","DownLeftTeeVector":"\u295E","DownLeftVectorBar":"\u2956","DownLeftVector":"\u21BD","DownRightTeeVector":"\u295F","DownRightVectorBar":"\u2957","DownRightVector":"\u21C1","DownTeeArrow":"\u21A7","DownTee":"\u22A4","drbkarow":"\u2910","drcorn":"\u231F","drcrop":"\u230C","Dscr":"\uD835\uDC9F","dscr":"\uD835\uDCB9","DScy":"\u0405","dscy":"\u0455","dsol":"\u29F6","Dstrok":"\u0110","dstrok":"\u0111","dtdot":"\u22F1","dtri":"\u25BF","dtrif":"\u25BE","duarr":"\u21F5","duhar":"\u296F","dwangle":"\u29A6","DZcy":"\u040F","dzcy":"\u045F","dzigrarr":"\u27FF","Eacute":"\xc9","eacute":"\xe9","easter":"\u2A6E","Ecaron":"\u011A","ecaron":"\u011B","Ecirc":"\xca","ecirc":"\xea","ecir":"\u2256","ecolon":"\u2255","Ecy":"\u042D","ecy":"\u044D","eDDot":"\u2A77","Edot":"\u0116","edot":"\u0117","eDot":"\u2251","ee":"\u2147","efDot":"\u2252","Efr":"\uD835\uDD08","efr":"\uD835\uDD22","eg":"\u2A9A","Egrave":"\xc8","egrave":"\xe8","egs":"\u2A96","egsdot":"\u2A98","el":"\u2A99","Element":"\u2208","elinters":"\u23E7","ell":"\u2113","els":"\u2A95","elsdot":"\u2A97","Emacr":"\u0112","emacr":"\u0113","empty":"\u2205","emptyset":"\u2205","EmptySmallSquare":"\u25FB","emptyv":"\u2205","EmptyVerySmallSquare":"\u25AB","emsp13":"\u2004","emsp14":"\u2005","emsp":"\u2003","ENG":"\u014A","eng":"\u014B","ensp":"\u2002","Eogon":"\u0118","eogon":"\u0119","Eopf":"\uD835\uDD3C","eopf":"\uD835\uDD56","epar":"\u22D5","eparsl":"\u29E3","eplus":"\u2A71","epsi":"\u03B5","Epsilon":"\u0395","epsilon":"\u03B5","epsiv":"\u03F5","eqcirc":"\u2256","eqcolon":"\u2255","eqsim":"\u2242","eqslantgtr":"\u2A96","eqslantless":"\u2A95","Equal":"\u2A75","equals":"=","EqualTilde":"\u2242","equest":"\u225F","Equilibrium":"\u21CC","equiv":"\u2261","equivDD":"\u2A78","eqvparsl":"\u29E5","erarr":"\u2971","erDot":"\u2253","escr":"\u212F","Escr":"\u2130","esdot":"\u2250","Esim":"\u2A73","esim":"\u2242","Eta":"\u0397","eta":"\u03B7","ETH":"\xd0","eth":"\xf0","Euml":"\xcb","euml":"\xeb","euro":"\u20AC","excl":"!","exist":"\u2203","Exists":"\u2203","expectation":"\u2130","exponentiale":"\u2147","ExponentialE":"\u2147","fallingdotseq":"\u2252","Fcy":"\u0424","fcy":"\u0444","female":"\u2640","ffilig":"\uFB03","fflig":"\uFB00","ffllig":"\uFB04","Ffr":"\uD835\uDD09","ffr":"\uD835\uDD23","filig":"\uFB01","FilledSmallSquare":"\u25FC","FilledVerySmallSquare":"\u25AA","fjlig":"fj","flat":"\u266D","fllig":"\uFB02","fltns":"\u25B1","fnof":"\u0192","Fopf":"\uD835\uDD3D","fopf":"\uD835\uDD57","forall":"\u2200","ForAll":"\u2200","fork":"\u22D4","forkv":"\u2AD9","Fouriertrf":"\u2131","fpartint":"\u2A0D","frac12":"\xbd","frac13":"\u2153","frac14":"\xbc","frac15":"\u2155","frac16":"\u2159","frac18":"\u215B","frac23":"\u2154","frac25":"\u2156","frac34":"\xbe","frac35":"\u2157","frac38":"\u215C","frac45":"\u2158","frac56":"\u215A","frac58":"\u215D","frac78":"\u215E","frasl":"\u2044","frown":"\u2322","fscr":"\uD835\uDCBB","Fscr":"\u2131","gacute":"\u01F5","Gamma":"\u0393","gamma":"\u03B3","Gammad":"\u03DC","gammad":"\u03DD","gap":"\u2A86","Gbreve":"\u011E","gbreve":"\u011F","Gcedil":"\u0122","Gcirc":"\u011C","gcirc":"\u011D","Gcy":"\u0413","gcy":"\u0433","Gdot":"\u0120","gdot":"\u0121","ge":"\u2265","gE":"\u2267","gEl":"\u2A8C","gel":"\u22DB","geq":"\u2265","geqq":"\u2267","geqslant":"\u2A7E","gescc":"\u2AA9","ges":"\u2A7E","gesdot":"\u2A80","gesdoto":"\u2A82","gesdotol":"\u2A84","gesl":"\u22DB\uFE00","gesles":"\u2A94","Gfr":"\uD835\uDD0A","gfr":"\uD835\uDD24","gg":"\u226B","Gg":"\u22D9","ggg":"\u22D9","gimel":"\u2137","GJcy":"\u0403","gjcy":"\u0453","gla":"\u2AA5","gl":"\u2277","glE":"\u2A92","glj":"\u2AA4","gnap":"\u2A8A","gnapprox":"\u2A8A","gne":"\u2A88","gnE":"\u2269","gneq":"\u2A88","gneqq":"\u2269","gnsim":"\u22E7","Gopf":"\uD835\uDD3E","gopf":"\uD835\uDD58","grave":"`","GreaterEqual":"\u2265","GreaterEqualLess":"\u22DB","GreaterFullEqual":"\u2267","GreaterGreater":"\u2AA2","GreaterLess":"\u2277","GreaterSlantEqual":"\u2A7E","GreaterTilde":"\u2273","Gscr":"\uD835\uDCA2","gscr":"\u210A","gsim":"\u2273","gsime":"\u2A8E","gsiml":"\u2A90","gtcc":"\u2AA7","gtcir":"\u2A7A","gt":">","GT":">","Gt":"\u226B","gtdot":"\u22D7","gtlPar":"\u2995","gtquest":"\u2A7C","gtrapprox":"\u2A86","gtrarr":"\u2978","gtrdot":"\u22D7","gtreqless":"\u22DB","gtreqqless":"\u2A8C","gtrless":"\u2277","gtrsim":"\u2273","gvertneqq":"\u2269\uFE00","gvnE":"\u2269\uFE00","Hacek":"\u02C7","hairsp":"\u200A","half":"\xbd","hamilt":"\u210B","HARDcy":"\u042A","hardcy":"\u044A","harrcir":"\u2948","harr":"\u2194","hArr":"\u21D4","harrw":"\u21AD","Hat":"^","hbar":"\u210F","Hcirc":"\u0124","hcirc":"\u0125","hearts":"\u2665","heartsuit":"\u2665","hellip":"\u2026","hercon":"\u22B9","hfr":"\uD835\uDD25","Hfr":"\u210C","HilbertSpace":"\u210B","hksearow":"\u2925","hkswarow":"\u2926","hoarr":"\u21FF","homtht":"\u223B","hookleftarrow":"\u21A9","hookrightarrow":"\u21AA","hopf":"\uD835\uDD59","Hopf":"\u210D","horbar":"\u2015","HorizontalLine":"\u2500","hscr":"\uD835\uDCBD","Hscr":"\u210B","hslash":"\u210F","Hstrok":"\u0126","hstrok":"\u0127","HumpDownHump":"\u224E","HumpEqual":"\u224F","hybull":"\u2043","hyphen":"\u2010","Iacute":"\xcd","iacute":"\xed","ic":"\u2063","Icirc":"\xce","icirc":"\xee","Icy":"\u0418","icy":"\u0438","Idot":"\u0130","IEcy":"\u0415","iecy":"\u0435","iexcl":"\xa1","iff":"\u21D4","ifr":"\uD835\uDD26","Ifr":"\u2111","Igrave":"\xcc","igrave":"\xec","ii":"\u2148","iiiint":"\u2A0C","iiint":"\u222D","iinfin":"\u29DC","iiota":"\u2129","IJlig":"\u0132","ijlig":"\u0133","Imacr":"\u012A","imacr":"\u012B","image":"\u2111","ImaginaryI":"\u2148","imagline":"\u2110","imagpart":"\u2111","imath":"\u0131","Im":"\u2111","imof":"\u22B7","imped":"\u01B5","Implies":"\u21D2","incare":"\u2105","in":"\u2208","infin":"\u221E","infintie":"\u29DD","inodot":"\u0131","intcal":"\u22BA","int":"\u222B","Int":"\u222C","integers":"\u2124","Integral":"\u222B","intercal":"\u22BA","Intersection":"\u22C2","intlarhk":"\u2A17","intprod":"\u2A3C","InvisibleComma":"\u2063","InvisibleTimes":"\u2062","IOcy":"\u0401","iocy":"\u0451","Iogon":"\u012E","iogon":"\u012F","Iopf":"\uD835\uDD40","iopf":"\uD835\uDD5A","Iota":"\u0399","iota":"\u03B9","iprod":"\u2A3C","iquest":"\xbf","iscr":"\uD835\uDCBE","Iscr":"\u2110","isin":"\u2208","isindot":"\u22F5","isinE":"\u22F9","isins":"\u22F4","isinsv":"\u22F3","isinv":"\u2208","it":"\u2062","Itilde":"\u0128","itilde":"\u0129","Iukcy":"\u0406","iukcy":"\u0456","Iuml":"\xcf","iuml":"\xef","Jcirc":"\u0134","jcirc":"\u0135","Jcy":"\u0419","jcy":"\u0439","Jfr":"\uD835\uDD0D","jfr":"\uD835\uDD27","jmath":"\u0237","Jopf":"\uD835\uDD41","jopf":"\uD835\uDD5B","Jscr":"\uD835\uDCA5","jscr":"\uD835\uDCBF","Jsercy":"\u0408","jsercy":"\u0458","Jukcy":"\u0404","jukcy":"\u0454","Kappa":"\u039A","kappa":"\u03BA","kappav":"\u03F0","Kcedil":"\u0136","kcedil":"\u0137","Kcy":"\u041A","kcy":"\u043A","Kfr":"\uD835\uDD0E","kfr":"\uD835\uDD28","kgreen":"\u0138","KHcy":"\u0425","khcy":"\u0445","KJcy":"\u040C","kjcy":"\u045C","Kopf":"\uD835\uDD42","kopf":"\uD835\uDD5C","Kscr":"\uD835\uDCA6","kscr":"\uD835\uDCC0","lAarr":"\u21DA","Lacute":"\u0139","lacute":"\u013A","laemptyv":"\u29B4","lagran":"\u2112","Lambda":"\u039B","lambda":"\u03BB","lang":"\u27E8","Lang":"\u27EA","langd":"\u2991","langle":"\u27E8","lap":"\u2A85","Laplacetrf":"\u2112","laquo":"\xab","larrb":"\u21E4","larrbfs":"\u291F","larr":"\u2190","Larr":"\u219E","lArr":"\u21D0","larrfs":"\u291D","larrhk":"\u21A9","larrlp":"\u21AB","larrpl":"\u2939","larrsim":"\u2973","larrtl":"\u21A2","latail":"\u2919","lAtail":"\u291B","lat":"\u2AAB","late":"\u2AAD","lates":"\u2AAD\uFE00","lbarr":"\u290C","lBarr":"\u290E","lbbrk":"\u2772","lbrace":"{","lbrack":"[","lbrke":"\u298B","lbrksld":"\u298F","lbrkslu":"\u298D","Lcaron":"\u013D","lcaron":"\u013E","Lcedil":"\u013B","lcedil":"\u013C","lceil":"\u2308","lcub":"{","Lcy":"\u041B","lcy":"\u043B","ldca":"\u2936","ldquo":"\u201C","ldquor":"\u201E","ldrdhar":"\u2967","ldrushar":"\u294B","ldsh":"\u21B2","le":"\u2264","lE":"\u2266","LeftAngleBracket":"\u27E8","LeftArrowBar":"\u21E4","leftarrow":"\u2190","LeftArrow":"\u2190","Leftarrow":"\u21D0","LeftArrowRightArrow":"\u21C6","leftarrowtail":"\u21A2","LeftCeiling":"\u2308","LeftDoubleBracket":"\u27E6","LeftDownTeeVector":"\u2961","LeftDownVectorBar":"\u2959","LeftDownVector":"\u21C3","LeftFloor":"\u230A","leftharpoondown":"\u21BD","leftharpoonup":"\u21BC","leftleftarrows":"\u21C7","leftrightarrow":"\u2194","LeftRightArrow":"\u2194","Leftrightarrow":"\u21D4","leftrightarrows":"\u21C6","leftrightharpoons":"\u21CB","leftrightsquigarrow":"\u21AD","LeftRightVector":"\u294E","LeftTeeArrow":"\u21A4","LeftTee":"\u22A3","LeftTeeVector":"\u295A","leftthreetimes":"\u22CB","LeftTriangleBar":"\u29CF","LeftTriangle":"\u22B2","LeftTriangleEqual":"\u22B4","LeftUpDownVector":"\u2951","LeftUpTeeVector":"\u2960","LeftUpVectorBar":"\u2958","LeftUpVector":"\u21BF","LeftVectorBar":"\u2952","LeftVector":"\u21BC","lEg":"\u2A8B","leg":"\u22DA","leq":"\u2264","leqq":"\u2266","leqslant":"\u2A7D","lescc":"\u2AA8","les":"\u2A7D","lesdot":"\u2A7F","lesdoto":"\u2A81","lesdotor":"\u2A83","lesg":"\u22DA\uFE00","lesges":"\u2A93","lessapprox":"\u2A85","lessdot":"\u22D6","lesseqgtr":"\u22DA","lesseqqgtr":"\u2A8B","LessEqualGreater":"\u22DA","LessFullEqual":"\u2266","LessGreater":"\u2276","lessgtr":"\u2276","LessLess":"\u2AA1","lesssim":"\u2272","LessSlantEqual":"\u2A7D","LessTilde":"\u2272","lfisht":"\u297C","lfloor":"\u230A","Lfr":"\uD835\uDD0F","lfr":"\uD835\uDD29","lg":"\u2276","lgE":"\u2A91","lHar":"\u2962","lhard":"\u21BD","lharu":"\u21BC","lharul":"\u296A","lhblk":"\u2584","LJcy":"\u0409","ljcy":"\u0459","llarr":"\u21C7","ll":"\u226A","Ll":"\u22D8","llcorner":"\u231E","Lleftarrow":"\u21DA","llhard":"\u296B","lltri":"\u25FA","Lmidot":"\u013F","lmidot":"\u0140","lmoustache":"\u23B0","lmoust":"\u23B0","lnap":"\u2A89","lnapprox":"\u2A89","lne":"\u2A87","lnE":"\u2268","lneq":"\u2A87","lneqq":"\u2268","lnsim":"\u22E6","loang":"\u27EC","loarr":"\u21FD","lobrk":"\u27E6","longleftarrow":"\u27F5","LongLeftArrow":"\u27F5","Longleftarrow":"\u27F8","longleftrightarrow":"\u27F7","LongLeftRightArrow":"\u27F7","Longleftrightarrow":"\u27FA","longmapsto":"\u27FC","longrightarrow":"\u27F6","LongRightArrow":"\u27F6","Longrightarrow":"\u27F9","looparrowleft":"\u21AB","looparrowright":"\u21AC","lopar":"\u2985","Lopf":"\uD835\uDD43","lopf":"\uD835\uDD5D","loplus":"\u2A2D","lotimes":"\u2A34","lowast":"\u2217","lowbar":"_","LowerLeftArrow":"\u2199","LowerRightArrow":"\u2198","loz":"\u25CA","lozenge":"\u25CA","lozf":"\u29EB","lpar":"(","lparlt":"\u2993","lrarr":"\u21C6","lrcorner":"\u231F","lrhar":"\u21CB","lrhard":"\u296D","lrm":"\u200E","lrtri":"\u22BF","lsaquo":"\u2039","lscr":"\uD835\uDCC1","Lscr":"\u2112","lsh":"\u21B0","Lsh":"\u21B0","lsim":"\u2272","lsime":"\u2A8D","lsimg":"\u2A8F","lsqb":"[","lsquo":"\u2018","lsquor":"\u201A","Lstrok":"\u0141","lstrok":"\u0142","ltcc":"\u2AA6","ltcir":"\u2A79","lt":"<","LT":"<","Lt":"\u226A","ltdot":"\u22D6","lthree":"\u22CB","ltimes":"\u22C9","ltlarr":"\u2976","ltquest":"\u2A7B","ltri":"\u25C3","ltrie":"\u22B4","ltrif":"\u25C2","ltrPar":"\u2996","lurdshar":"\u294A","luruhar":"\u2966","lvertneqq":"\u2268\uFE00","lvnE":"\u2268\uFE00","macr":"\xaf","male":"\u2642","malt":"\u2720","maltese":"\u2720","Map":"\u2905","map":"\u21A6","mapsto":"\u21A6","mapstodown":"\u21A7","mapstoleft":"\u21A4","mapstoup":"\u21A5","marker":"\u25AE","mcomma":"\u2A29","Mcy":"\u041C","mcy":"\u043C","mdash":"\u2014","mDDot":"\u223A","measuredangle":"\u2221","MediumSpace":"\u205F","Mellintrf":"\u2133","Mfr":"\uD835\uDD10","mfr":"\uD835\uDD2A","mho":"\u2127","micro":"\xb5","midast":"*","midcir":"\u2AF0","mid":"\u2223","middot":"\xb7","minusb":"\u229F","minus":"\u2212","minusd":"\u2238","minusdu":"\u2A2A","MinusPlus":"\u2213","mlcp":"\u2ADB","mldr":"\u2026","mnplus":"\u2213","models":"\u22A7","Mopf":"\uD835\uDD44","mopf":"\uD835\uDD5E","mp":"\u2213","mscr":"\uD835\uDCC2","Mscr":"\u2133","mstpos":"\u223E","Mu":"\u039C","mu":"\u03BC","multimap":"\u22B8","mumap":"\u22B8","nabla":"\u2207","Nacute":"\u0143","nacute":"\u0144","nang":"\u2220\u20D2","nap":"\u2249","napE":"\u2A70\u0338","napid":"\u224B\u0338","napos":"\u0149","napprox":"\u2249","natural":"\u266E","naturals":"\u2115","natur":"\u266E","nbsp":"\xa0","nbump":"\u224E\u0338","nbumpe":"\u224F\u0338","ncap":"\u2A43","Ncaron":"\u0147","ncaron":"\u0148","Ncedil":"\u0145","ncedil":"\u0146","ncong":"\u2247","ncongdot":"\u2A6D\u0338","ncup":"\u2A42","Ncy":"\u041D","ncy":"\u043D","ndash":"\u2013","nearhk":"\u2924","nearr":"\u2197","neArr":"\u21D7","nearrow":"\u2197","ne":"\u2260","nedot":"\u2250\u0338","NegativeMediumSpace":"\u200B","NegativeThickSpace":"\u200B","NegativeThinSpace":"\u200B","NegativeVeryThinSpace":"\u200B","nequiv":"\u2262","nesear":"\u2928","nesim":"\u2242\u0338","NestedGreaterGreater":"\u226B","NestedLessLess":"\u226A","NewLine":"\\n","nexist":"\u2204","nexists":"\u2204","Nfr":"\uD835\uDD11","nfr":"\uD835\uDD2B","ngE":"\u2267\u0338","nge":"\u2271","ngeq":"\u2271","ngeqq":"\u2267\u0338","ngeqslant":"\u2A7E\u0338","nges":"\u2A7E\u0338","nGg":"\u22D9\u0338","ngsim":"\u2275","nGt":"\u226B\u20D2","ngt":"\u226F","ngtr":"\u226F","nGtv":"\u226B\u0338","nharr":"\u21AE","nhArr":"\u21CE","nhpar":"\u2AF2","ni":"\u220B","nis":"\u22FC","nisd":"\u22FA","niv":"\u220B","NJcy":"\u040A","njcy":"\u045A","nlarr":"\u219A","nlArr":"\u21CD","nldr":"\u2025","nlE":"\u2266\u0338","nle":"\u2270","nleftarrow":"\u219A","nLeftarrow":"\u21CD","nleftrightarrow":"\u21AE","nLeftrightarrow":"\u21CE","nleq":"\u2270","nleqq":"\u2266\u0338","nleqslant":"\u2A7D\u0338","nles":"\u2A7D\u0338","nless":"\u226E","nLl":"\u22D8\u0338","nlsim":"\u2274","nLt":"\u226A\u20D2","nlt":"\u226E","nltri":"\u22EA","nltrie":"\u22EC","nLtv":"\u226A\u0338","nmid":"\u2224","NoBreak":"\u2060","NonBreakingSpace":"\xa0","nopf":"\uD835\uDD5F","Nopf":"\u2115","Not":"\u2AEC","not":"\xac","NotCongruent":"\u2262","NotCupCap":"\u226D","NotDoubleVerticalBar":"\u2226","NotElement":"\u2209","NotEqual":"\u2260","NotEqualTilde":"\u2242\u0338","NotExists":"\u2204","NotGreater":"\u226F","NotGreaterEqual":"\u2271","NotGreaterFullEqual":"\u2267\u0338","NotGreaterGreater":"\u226B\u0338","NotGreaterLess":"\u2279","NotGreaterSlantEqual":"\u2A7E\u0338","NotGreaterTilde":"\u2275","NotHumpDownHump":"\u224E\u0338","NotHumpEqual":"\u224F\u0338","notin":"\u2209","notindot":"\u22F5\u0338","notinE":"\u22F9\u0338","notinva":"\u2209","notinvb":"\u22F7","notinvc":"\u22F6","NotLeftTriangleBar":"\u29CF\u0338","NotLeftTriangle":"\u22EA","NotLeftTriangleEqual":"\u22EC","NotLess":"\u226E","NotLessEqual":"\u2270","NotLessGreater":"\u2278","NotLessLess":"\u226A\u0338","NotLessSlantEqual":"\u2A7D\u0338","NotLessTilde":"\u2274","NotNestedGreaterGreater":"\u2AA2\u0338","NotNestedLessLess":"\u2AA1\u0338","notni":"\u220C","notniva":"\u220C","notnivb":"\u22FE","notnivc":"\u22FD","NotPrecedes":"\u2280","NotPrecedesEqual":"\u2AAF\u0338","NotPrecedesSlantEqual":"\u22E0","NotReverseElement":"\u220C","NotRightTriangleBar":"\u29D0\u0338","NotRightTriangle":"\u22EB","NotRightTriangleEqual":"\u22ED","NotSquareSubset":"\u228F\u0338","NotSquareSubsetEqual":"\u22E2","NotSquareSuperset":"\u2290\u0338","NotSquareSupersetEqual":"\u22E3","NotSubset":"\u2282\u20D2","NotSubsetEqual":"\u2288","NotSucceeds":"\u2281","NotSucceedsEqual":"\u2AB0\u0338","NotSucceedsSlantEqual":"\u22E1","NotSucceedsTilde":"\u227F\u0338","NotSuperset":"\u2283\u20D2","NotSupersetEqual":"\u2289","NotTilde":"\u2241","NotTildeEqual":"\u2244","NotTildeFullEqual":"\u2247","NotTildeTilde":"\u2249","NotVerticalBar":"\u2224","nparallel":"\u2226","npar":"\u2226","nparsl":"\u2AFD\u20E5","npart":"\u2202\u0338","npolint":"\u2A14","npr":"\u2280","nprcue":"\u22E0","nprec":"\u2280","npreceq":"\u2AAF\u0338","npre":"\u2AAF\u0338","nrarrc":"\u2933\u0338","nrarr":"\u219B","nrArr":"\u21CF","nrarrw":"\u219D\u0338","nrightarrow":"\u219B","nRightarrow":"\u21CF","nrtri":"\u22EB","nrtrie":"\u22ED","nsc":"\u2281","nsccue":"\u22E1","nsce":"\u2AB0\u0338","Nscr":"\uD835\uDCA9","nscr":"\uD835\uDCC3","nshortmid":"\u2224","nshortparallel":"\u2226","nsim":"\u2241","nsime":"\u2244","nsimeq":"\u2244","nsmid":"\u2224","nspar":"\u2226","nsqsube":"\u22E2","nsqsupe":"\u22E3","nsub":"\u2284","nsubE":"\u2AC5\u0338","nsube":"\u2288","nsubset":"\u2282\u20D2","nsubseteq":"\u2288","nsubseteqq":"\u2AC5\u0338","nsucc":"\u2281","nsucceq":"\u2AB0\u0338","nsup":"\u2285","nsupE":"\u2AC6\u0338","nsupe":"\u2289","nsupset":"\u2283\u20D2","nsupseteq":"\u2289","nsupseteqq":"\u2AC6\u0338","ntgl":"\u2279","Ntilde":"\xd1","ntilde":"\xf1","ntlg":"\u2278","ntriangleleft":"\u22EA","ntrianglelefteq":"\u22EC","ntriangleright":"\u22EB","ntrianglerighteq":"\u22ED","Nu":"\u039D","nu":"\u03BD","num":"#","numero":"\u2116","numsp":"\u2007","nvap":"\u224D\u20D2","nvdash":"\u22AC","nvDash":"\u22AD","nVdash":"\u22AE","nVDash":"\u22AF","nvge":"\u2265\u20D2","nvgt":">\u20D2","nvHarr":"\u2904","nvinfin":"\u29DE","nvlArr":"\u2902","nvle":"\u2264\u20D2","nvlt":"<\u20D2","nvltrie":"\u22B4\u20D2","nvrArr":"\u2903","nvrtrie":"\u22B5\u20D2","nvsim":"\u223C\u20D2","nwarhk":"\u2923","nwarr":"\u2196","nwArr":"\u21D6","nwarrow":"\u2196","nwnear":"\u2927","Oacute":"\xd3","oacute":"\xf3","oast":"\u229B","Ocirc":"\xd4","ocirc":"\xf4","ocir":"\u229A","Ocy":"\u041E","ocy":"\u043E","odash":"\u229D","Odblac":"\u0150","odblac":"\u0151","odiv":"\u2A38","odot":"\u2299","odsold":"\u29BC","OElig":"\u0152","oelig":"\u0153","ofcir":"\u29BF","Ofr":"\uD835\uDD12","ofr":"\uD835\uDD2C","ogon":"\u02DB","Ograve":"\xd2","ograve":"\xf2","ogt":"\u29C1","ohbar":"\u29B5","ohm":"\u03A9","oint":"\u222E","olarr":"\u21BA","olcir":"\u29BE","olcross":"\u29BB","oline":"\u203E","olt":"\u29C0","Omacr":"\u014C","omacr":"\u014D","Omega":"\u03A9","omega":"\u03C9","Omicron":"\u039F","omicron":"\u03BF","omid":"\u29B6","ominus":"\u2296","Oopf":"\uD835\uDD46","oopf":"\uD835\uDD60","opar":"\u29B7","OpenCurlyDoubleQuote":"\u201C","OpenCurlyQuote":"\u2018","operp":"\u29B9","oplus":"\u2295","orarr":"\u21BB","Or":"\u2A54","or":"\u2228","ord":"\u2A5D","order":"\u2134","orderof":"\u2134","ordf":"\xaa","ordm":"\xba","origof":"\u22B6","oror":"\u2A56","orslope":"\u2A57","orv":"\u2A5B","oS":"\u24C8","Oscr":"\uD835\uDCAA","oscr":"\u2134","Oslash":"\xd8","oslash":"\xf8","osol":"\u2298","Otilde":"\xd5","otilde":"\xf5","otimesas":"\u2A36","Otimes":"\u2A37","otimes":"\u2297","Ouml":"\xd6","ouml":"\xf6","ovbar":"\u233D","OverBar":"\u203E","OverBrace":"\u23DE","OverBracket":"\u23B4","OverParenthesis":"\u23DC","para":"\xb6","parallel":"\u2225","par":"\u2225","parsim":"\u2AF3","parsl":"\u2AFD","part":"\u2202","PartialD":"\u2202","Pcy":"\u041F","pcy":"\u043F","percnt":"%","period":".","permil":"\u2030","perp":"\u22A5","pertenk":"\u2031","Pfr":"\uD835\uDD13","pfr":"\uD835\uDD2D","Phi":"\u03A6","phi":"\u03C6","phiv":"\u03D5","phmmat":"\u2133","phone":"\u260E","Pi":"\u03A0","pi":"\u03C0","pitchfork":"\u22D4","piv":"\u03D6","planck":"\u210F","planckh":"\u210E","plankv":"\u210F","plusacir":"\u2A23","plusb":"\u229E","pluscir":"\u2A22","plus":"+","plusdo":"\u2214","plusdu":"\u2A25","pluse":"\u2A72","PlusMinus":"\xb1","plusmn":"\xb1","plussim":"\u2A26","plustwo":"\u2A27","pm":"\xb1","Poincareplane":"\u210C","pointint":"\u2A15","popf":"\uD835\uDD61","Popf":"\u2119","pound":"\xa3","prap":"\u2AB7","Pr":"\u2ABB","pr":"\u227A","prcue":"\u227C","precapprox":"\u2AB7","prec":"\u227A","preccurlyeq":"\u227C","Precedes":"\u227A","PrecedesEqual":"\u2AAF","PrecedesSlantEqual":"\u227C","PrecedesTilde":"\u227E","preceq":"\u2AAF","precnapprox":"\u2AB9","precneqq":"\u2AB5","precnsim":"\u22E8","pre":"\u2AAF","prE":"\u2AB3","precsim":"\u227E","prime":"\u2032","Prime":"\u2033","primes":"\u2119","prnap":"\u2AB9","prnE":"\u2AB5","prnsim":"\u22E8","prod":"\u220F","Product":"\u220F","profalar":"\u232E","profline":"\u2312","profsurf":"\u2313","prop":"\u221D","Proportional":"\u221D","Proportion":"\u2237","propto":"\u221D","prsim":"\u227E","prurel":"\u22B0","Pscr":"\uD835\uDCAB","pscr":"\uD835\uDCC5","Psi":"\u03A8","psi":"\u03C8","puncsp":"\u2008","Qfr":"\uD835\uDD14","qfr":"\uD835\uDD2E","qint":"\u2A0C","qopf":"\uD835\uDD62","Qopf":"\u211A","qprime":"\u2057","Qscr":"\uD835\uDCAC","qscr":"\uD835\uDCC6","quaternions":"\u210D","quatint":"\u2A16","quest":"?","questeq":"\u225F","quot":"\\"","QUOT":"\\"","rAarr":"\u21DB","race":"\u223D\u0331","Racute":"\u0154","racute":"\u0155","radic":"\u221A","raemptyv":"\u29B3","rang":"\u27E9","Rang":"\u27EB","rangd":"\u2992","range":"\u29A5","rangle":"\u27E9","raquo":"\xbb","rarrap":"\u2975","rarrb":"\u21E5","rarrbfs":"\u2920","rarrc":"\u2933","rarr":"\u2192","Rarr":"\u21A0","rArr":"\u21D2","rarrfs":"\u291E","rarrhk":"\u21AA","rarrlp":"\u21AC","rarrpl":"\u2945","rarrsim":"\u2974","Rarrtl":"\u2916","rarrtl":"\u21A3","rarrw":"\u219D","ratail":"\u291A","rAtail":"\u291C","ratio":"\u2236","rationals":"\u211A","rbarr":"\u290D","rBarr":"\u290F","RBarr":"\u2910","rbbrk":"\u2773","rbrace":"}","rbrack":"]","rbrke":"\u298C","rbrksld":"\u298E","rbrkslu":"\u2990","Rcaron":"\u0158","rcaron":"\u0159","Rcedil":"\u0156","rcedil":"\u0157","rceil":"\u2309","rcub":"}","Rcy":"\u0420","rcy":"\u0440","rdca":"\u2937","rdldhar":"\u2969","rdquo":"\u201D","rdquor":"\u201D","rdsh":"\u21B3","real":"\u211C","realine":"\u211B","realpart":"\u211C","reals":"\u211D","Re":"\u211C","rect":"\u25AD","reg":"\xae","REG":"\xae","ReverseElement":"\u220B","ReverseEquilibrium":"\u21CB","ReverseUpEquilibrium":"\u296F","rfisht":"\u297D","rfloor":"\u230B","rfr":"\uD835\uDD2F","Rfr":"\u211C","rHar":"\u2964","rhard":"\u21C1","rharu":"\u21C0","rharul":"\u296C","Rho":"\u03A1","rho":"\u03C1","rhov":"\u03F1","RightAngleBracket":"\u27E9","RightArrowBar":"\u21E5","rightarrow":"\u2192","RightArrow":"\u2192","Rightarrow":"\u21D2","RightArrowLeftArrow":"\u21C4","rightarrowtail":"\u21A3","RightCeiling":"\u2309","RightDoubleBracket":"\u27E7","RightDownTeeVector":"\u295D","RightDownVectorBar":"\u2955","RightDownVector":"\u21C2","RightFloor":"\u230B","rightharpoondown":"\u21C1","rightharpoonup":"\u21C0","rightleftarrows":"\u21C4","rightleftharpoons":"\u21CC","rightrightarrows":"\u21C9","rightsquigarrow":"\u219D","RightTeeArrow":"\u21A6","RightTee":"\u22A2","RightTeeVector":"\u295B","rightthreetimes":"\u22CC","RightTriangleBar":"\u29D0","RightTriangle":"\u22B3","RightTriangleEqual":"\u22B5","RightUpDownVector":"\u294F","RightUpTeeVector":"\u295C","RightUpVectorBar":"\u2954","RightUpVector":"\u21BE","RightVectorBar":"\u2953","RightVector":"\u21C0","ring":"\u02DA","risingdotseq":"\u2253","rlarr":"\u21C4","rlhar":"\u21CC","rlm":"\u200F","rmoustache":"\u23B1","rmoust":"\u23B1","rnmid":"\u2AEE","roang":"\u27ED","roarr":"\u21FE","robrk":"\u27E7","ropar":"\u2986","ropf":"\uD835\uDD63","Ropf":"\u211D","roplus":"\u2A2E","rotimes":"\u2A35","RoundImplies":"\u2970","rpar":")","rpargt":"\u2994","rppolint":"\u2A12","rrarr":"\u21C9","Rrightarrow":"\u21DB","rsaquo":"\u203A","rscr":"\uD835\uDCC7","Rscr":"\u211B","rsh":"\u21B1","Rsh":"\u21B1","rsqb":"]","rsquo":"\u2019","rsquor":"\u2019","rthree":"\u22CC","rtimes":"\u22CA","rtri":"\u25B9","rtrie":"\u22B5","rtrif":"\u25B8","rtriltri":"\u29CE","RuleDelayed":"\u29F4","ruluhar":"\u2968","rx":"\u211E","Sacute":"\u015A","sacute":"\u015B","sbquo":"\u201A","scap":"\u2AB8","Scaron":"\u0160","scaron":"\u0161","Sc":"\u2ABC","sc":"\u227B","sccue":"\u227D","sce":"\u2AB0","scE":"\u2AB4","Scedil":"\u015E","scedil":"\u015F","Scirc":"\u015C","scirc":"\u015D","scnap":"\u2ABA","scnE":"\u2AB6","scnsim":"\u22E9","scpolint":"\u2A13","scsim":"\u227F","Scy":"\u0421","scy":"\u0441","sdotb":"\u22A1","sdot":"\u22C5","sdote":"\u2A66","searhk":"\u2925","searr":"\u2198","seArr":"\u21D8","searrow":"\u2198","sect":"\xa7","semi":";","seswar":"\u2929","setminus":"\u2216","setmn":"\u2216","sext":"\u2736","Sfr":"\uD835\uDD16","sfr":"\uD835\uDD30","sfrown":"\u2322","sharp":"\u266F","SHCHcy":"\u0429","shchcy":"\u0449","SHcy":"\u0428","shcy":"\u0448","ShortDownArrow":"\u2193","ShortLeftArrow":"\u2190","shortmid":"\u2223","shortparallel":"\u2225","ShortRightArrow":"\u2192","ShortUpArrow":"\u2191","shy":"\xad","Sigma":"\u03A3","sigma":"\u03C3","sigmaf":"\u03C2","sigmav":"\u03C2","sim":"\u223C","simdot":"\u2A6A","sime":"\u2243","simeq":"\u2243","simg":"\u2A9E","simgE":"\u2AA0","siml":"\u2A9D","simlE":"\u2A9F","simne":"\u2246","simplus":"\u2A24","simrarr":"\u2972","slarr":"\u2190","SmallCircle":"\u2218","smallsetminus":"\u2216","smashp":"\u2A33","smeparsl":"\u29E4","smid":"\u2223","smile":"\u2323","smt":"\u2AAA","smte":"\u2AAC","smtes":"\u2AAC\uFE00","SOFTcy":"\u042C","softcy":"\u044C","solbar":"\u233F","solb":"\u29C4","sol":"/","Sopf":"\uD835\uDD4A","sopf":"\uD835\uDD64","spades":"\u2660","spadesuit":"\u2660","spar":"\u2225","sqcap":"\u2293","sqcaps":"\u2293\uFE00","sqcup":"\u2294","sqcups":"\u2294\uFE00","Sqrt":"\u221A","sqsub":"\u228F","sqsube":"\u2291","sqsubset":"\u228F","sqsubseteq":"\u2291","sqsup":"\u2290","sqsupe":"\u2292","sqsupset":"\u2290","sqsupseteq":"\u2292","square":"\u25A1","Square":"\u25A1","SquareIntersection":"\u2293","SquareSubset":"\u228F","SquareSubsetEqual":"\u2291","SquareSuperset":"\u2290","SquareSupersetEqual":"\u2292","SquareUnion":"\u2294","squarf":"\u25AA","squ":"\u25A1","squf":"\u25AA","srarr":"\u2192","Sscr":"\uD835\uDCAE","sscr":"\uD835\uDCC8","ssetmn":"\u2216","ssmile":"\u2323","sstarf":"\u22C6","Star":"\u22C6","star":"\u2606","starf":"\u2605","straightepsilon":"\u03F5","straightphi":"\u03D5","strns":"\xaf","sub":"\u2282","Sub":"\u22D0","subdot":"\u2ABD","subE":"\u2AC5","sube":"\u2286","subedot":"\u2AC3","submult":"\u2AC1","subnE":"\u2ACB","subne":"\u228A","subplus":"\u2ABF","subrarr":"\u2979","subset":"\u2282","Subset":"\u22D0","subseteq":"\u2286","subseteqq":"\u2AC5","SubsetEqual":"\u2286","subsetneq":"\u228A","subsetneqq":"\u2ACB","subsim":"\u2AC7","subsub":"\u2AD5","subsup":"\u2AD3","succapprox":"\u2AB8","succ":"\u227B","succcurlyeq":"\u227D","Succeeds":"\u227B","SucceedsEqual":"\u2AB0","SucceedsSlantEqual":"\u227D","SucceedsTilde":"\u227F","succeq":"\u2AB0","succnapprox":"\u2ABA","succneqq":"\u2AB6","succnsim":"\u22E9","succsim":"\u227F","SuchThat":"\u220B","sum":"\u2211","Sum":"\u2211","sung":"\u266A","sup1":"\xb9","sup2":"\xb2","sup3":"\xb3","sup":"\u2283","Sup":"\u22D1","supdot":"\u2ABE","supdsub":"\u2AD8","supE":"\u2AC6","supe":"\u2287","supedot":"\u2AC4","Superset":"\u2283","SupersetEqual":"\u2287","suphsol":"\u27C9","suphsub":"\u2AD7","suplarr":"\u297B","supmult":"\u2AC2","supnE":"\u2ACC","supne":"\u228B","supplus":"\u2AC0","supset":"\u2283","Supset":"\u22D1","supseteq":"\u2287","supseteqq":"\u2AC6","supsetneq":"\u228B","supsetneqq":"\u2ACC","supsim":"\u2AC8","supsub":"\u2AD4","supsup":"\u2AD6","swarhk":"\u2926","swarr":"\u2199","swArr":"\u21D9","swarrow":"\u2199","swnwar":"\u292A","szlig":"\xdf","Tab":"\\t","target":"\u2316","Tau":"\u03A4","tau":"\u03C4","tbrk":"\u23B4","Tcaron":"\u0164","tcaron":"\u0165","Tcedil":"\u0162","tcedil":"\u0163","Tcy":"\u0422","tcy":"\u0442","tdot":"\u20DB","telrec":"\u2315","Tfr":"\uD835\uDD17","tfr":"\uD835\uDD31","there4":"\u2234","therefore":"\u2234","Therefore":"\u2234","Theta":"\u0398","theta":"\u03B8","thetasym":"\u03D1","thetav":"\u03D1","thickapprox":"\u2248","thicksim":"\u223C","ThickSpace":"\u205F\u200A","ThinSpace":"\u2009","thinsp":"\u2009","thkap":"\u2248","thksim":"\u223C","THORN":"\xde","thorn":"\xfe","tilde":"\u02DC","Tilde":"\u223C","TildeEqual":"\u2243","TildeFullEqual":"\u2245","TildeTilde":"\u2248","timesbar":"\u2A31","timesb":"\u22A0","times":"\xd7","timesd":"\u2A30","tint":"\u222D","toea":"\u2928","topbot":"\u2336","topcir":"\u2AF1","top":"\u22A4","Topf":"\uD835\uDD4B","topf":"\uD835\uDD65","topfork":"\u2ADA","tosa":"\u2929","tprime":"\u2034","trade":"\u2122","TRADE":"\u2122","triangle":"\u25B5","triangledown":"\u25BF","triangleleft":"\u25C3","trianglelefteq":"\u22B4","triangleq":"\u225C","triangleright":"\u25B9","trianglerighteq":"\u22B5","tridot":"\u25EC","trie":"\u225C","triminus":"\u2A3A","TripleDot":"\u20DB","triplus":"\u2A39","trisb":"\u29CD","tritime":"\u2A3B","trpezium":"\u23E2","Tscr":"\uD835\uDCAF","tscr":"\uD835\uDCC9","TScy":"\u0426","tscy":"\u0446","TSHcy":"\u040B","tshcy":"\u045B","Tstrok":"\u0166","tstrok":"\u0167","twixt":"\u226C","twoheadleftarrow":"\u219E","twoheadrightarrow":"\u21A0","Uacute":"\xda","uacute":"\xfa","uarr":"\u2191","Uarr":"\u219F","uArr":"\u21D1","Uarrocir":"\u2949","Ubrcy":"\u040E","ubrcy":"\u045E","Ubreve":"\u016C","ubreve":"\u016D","Ucirc":"\xdb","ucirc":"\xfb","Ucy":"\u0423","ucy":"\u0443","udarr":"\u21C5","Udblac":"\u0170","udblac":"\u0171","udhar":"\u296E","ufisht":"\u297E","Ufr":"\uD835\uDD18","ufr":"\uD835\uDD32","Ugrave":"\xd9","ugrave":"\xf9","uHar":"\u2963","uharl":"\u21BF","uharr":"\u21BE","uhblk":"\u2580","ulcorn":"\u231C","ulcorner":"\u231C","ulcrop":"\u230F","ultri":"\u25F8","Umacr":"\u016A","umacr":"\u016B","uml":"\xa8","UnderBar":"_","UnderBrace":"\u23DF","UnderBracket":"\u23B5","UnderParenthesis":"\u23DD","Union":"\u22C3","UnionPlus":"\u228E","Uogon":"\u0172","uogon":"\u0173","Uopf":"\uD835\uDD4C","uopf":"\uD835\uDD66","UpArrowBar":"\u2912","uparrow":"\u2191","UpArrow":"\u2191","Uparrow":"\u21D1","UpArrowDownArrow":"\u21C5","updownarrow":"\u2195","UpDownArrow":"\u2195","Updownarrow":"\u21D5","UpEquilibrium":"\u296E","upharpoonleft":"\u21BF","upharpoonright":"\u21BE","uplus":"\u228E","UpperLeftArrow":"\u2196","UpperRightArrow":"\u2197","upsi":"\u03C5","Upsi":"\u03D2","upsih":"\u03D2","Upsilon":"\u03A5","upsilon":"\u03C5","UpTeeArrow":"\u21A5","UpTee":"\u22A5","upuparrows":"\u21C8","urcorn":"\u231D","urcorner":"\u231D","urcrop":"\u230E","Uring":"\u016E","uring":"\u016F","urtri":"\u25F9","Uscr":"\uD835\uDCB0","uscr":"\uD835\uDCCA","utdot":"\u22F0","Utilde":"\u0168","utilde":"\u0169","utri":"\u25B5","utrif":"\u25B4","uuarr":"\u21C8","Uuml":"\xdc","uuml":"\xfc","uwangle":"\u29A7","vangrt":"\u299C","varepsilon":"\u03F5","varkappa":"\u03F0","varnothing":"\u2205","varphi":"\u03D5","varpi":"\u03D6","varpropto":"\u221D","varr":"\u2195","vArr":"\u21D5","varrho":"\u03F1","varsigma":"\u03C2","varsubsetneq":"\u228A\uFE00","varsubsetneqq":"\u2ACB\uFE00","varsupsetneq":"\u228B\uFE00","varsupsetneqq":"\u2ACC\uFE00","vartheta":"\u03D1","vartriangleleft":"\u22B2","vartriangleright":"\u22B3","vBar":"\u2AE8","Vbar":"\u2AEB","vBarv":"\u2AE9","Vcy":"\u0412","vcy":"\u0432","vdash":"\u22A2","vDash":"\u22A8","Vdash":"\u22A9","VDash":"\u22AB","Vdashl":"\u2AE6","veebar":"\u22BB","vee":"\u2228","Vee":"\u22C1","veeeq":"\u225A","vellip":"\u22EE","verbar":"|","Verbar":"\u2016","vert":"|","Vert":"\u2016","VerticalBar":"\u2223","VerticalLine":"|","VerticalSeparator":"\u2758","VerticalTilde":"\u2240","VeryThinSpace":"\u200A","Vfr":"\uD835\uDD19","vfr":"\uD835\uDD33","vltri":"\u22B2","vnsub":"\u2282\u20D2","vnsup":"\u2283\u20D2","Vopf":"\uD835\uDD4D","vopf":"\uD835\uDD67","vprop":"\u221D","vrtri":"\u22B3","Vscr":"\uD835\uDCB1","vscr":"\uD835\uDCCB","vsubnE":"\u2ACB\uFE00","vsubne":"\u228A\uFE00","vsupnE":"\u2ACC\uFE00","vsupne":"\u228B\uFE00","Vvdash":"\u22AA","vzigzag":"\u299A","Wcirc":"\u0174","wcirc":"\u0175","wedbar":"\u2A5F","wedge":"\u2227","Wedge":"\u22C0","wedgeq":"\u2259","weierp":"\u2118","Wfr":"\uD835\uDD1A","wfr":"\uD835\uDD34","Wopf":"\uD835\uDD4E","wopf":"\uD835\uDD68","wp":"\u2118","wr":"\u2240","wreath":"\u2240","Wscr":"\uD835\uDCB2","wscr":"\uD835\uDCCC","xcap":"\u22C2","xcirc":"\u25EF","xcup":"\u22C3","xdtri":"\u25BD","Xfr":"\uD835\uDD1B","xfr":"\uD835\uDD35","xharr":"\u27F7","xhArr":"\u27FA","Xi":"\u039E","xi":"\u03BE","xlarr":"\u27F5","xlArr":"\u27F8","xmap":"\u27FC","xnis":"\u22FB","xodot":"\u2A00","Xopf":"\uD835\uDD4F","xopf":"\uD835\uDD69","xoplus":"\u2A01","xotime":"\u2A02","xrarr":"\u27F6","xrArr":"\u27F9","Xscr":"\uD835\uDCB3","xscr":"\uD835\uDCCD","xsqcup":"\u2A06","xuplus":"\u2A04","xutri":"\u25B3","xvee":"\u22C1","xwedge":"\u22C0","Yacute":"\xdd","yacute":"\xfd","YAcy":"\u042F","yacy":"\u044F","Ycirc":"\u0176","ycirc":"\u0177","Ycy":"\u042B","ycy":"\u044B","yen":"\xa5","Yfr":"\uD835\uDD1C","yfr":"\uD835\uDD36","YIcy":"\u0407","yicy":"\u0457","Yopf":"\uD835\uDD50","yopf":"\uD835\uDD6A","Yscr":"\uD835\uDCB4","yscr":"\uD835\uDCCE","YUcy":"\u042E","yucy":"\u044E","yuml":"\xff","Yuml":"\u0178","Zacute":"\u0179","zacute":"\u017A","Zcaron":"\u017D","zcaron":"\u017E","Zcy":"\u0417","zcy":"\u0437","Zdot":"\u017B","zdot":"\u017C","zeetrf":"\u2128","ZeroWidthSpace":"\u200B","Zeta":"\u0396","zeta":"\u03B6","zfr":"\uD835\uDD37","Zfr":"\u2128","ZHcy":"\u0416","zhcy":"\u0436","zigrarr":"\u21DD","zopf":"\uD835\uDD6B","Zopf":"\u2124","Zscr":"\uD835\uDCB5","zscr":"\uD835\uDCCF","zwj":"\u200D","zwnj":"\u200C"}');

},{}],"h8JTc":[function(require,module,exports) {
module.exports = /[!-#%-\*,-\/:;\?@\[-\]_\{\}\xA1\xA7\xAB\xB6\xB7\xBB\xBF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166D\u166E\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2010-\u2027\u2030-\u2043\u2045-\u2051\u2053-\u205E\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4E\u3001-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]|\uD800[\uDD00-\uDD02\uDF9F\uDFD0]|\uD801\uDD6F|\uD802[\uDC57\uDD1F\uDD3F\uDE50-\uDE58\uDE7F\uDEF0-\uDEF6\uDF39-\uDF3F\uDF99-\uDF9C]|\uD803[\uDF55-\uDF59]|\uD804[\uDC47-\uDC4D\uDCBB\uDCBC\uDCBE-\uDCC1\uDD40-\uDD43\uDD74\uDD75\uDDC5-\uDDC8\uDDCD\uDDDB\uDDDD-\uDDDF\uDE38-\uDE3D\uDEA9]|\uD805[\uDC4B-\uDC4F\uDC5B\uDC5D\uDCC6\uDDC1-\uDDD7\uDE41-\uDE43\uDE60-\uDE6C\uDF3C-\uDF3E]|\uD806[\uDC3B\uDE3F-\uDE46\uDE9A-\uDE9C\uDE9E-\uDEA2]|\uD807[\uDC41-\uDC45\uDC70\uDC71\uDEF7\uDEF8]|\uD809[\uDC70-\uDC74]|\uD81A[\uDE6E\uDE6F\uDEF5\uDF37-\uDF3B\uDF44]|\uD81B[\uDE97-\uDE9A]|\uD82F\uDC9F|\uD836[\uDE87-\uDE8B]|\uD83A[\uDD5E\uDD5F]/;

},{}],"cfVrT":[function(require,module,exports) {
"use strict";
module.exports.encode = require("./encode");
module.exports.decode = require("./decode");
module.exports.format = require("./format");
module.exports.parse = require("./parse");

},{"./encode":"liWSn","./decode":"c9qtY","./format":"4o6Ue","./parse":"5BWHY"}],"liWSn":[function(require,module,exports) {
"use strict";
var encodeCache = {};
// Create a lookup array where anything but characters in `chars` string
// and alphanumeric chars is percent-encoded.
//
function getEncodeCache(exclude) {
    var i, ch, cache = encodeCache[exclude];
    if (cache) return cache;
    cache = encodeCache[exclude] = [];
    for(i = 0; i < 128; i++){
        ch = String.fromCharCode(i);
        if (/^[0-9a-z]$/i.test(ch)) // always allow unencoded alphanumeric characters
        cache.push(ch);
        else cache.push("%" + ("0" + i.toString(16).toUpperCase()).slice(-2));
    }
    for(i = 0; i < exclude.length; i++)cache[exclude.charCodeAt(i)] = exclude[i];
    return cache;
}
// Encode unsafe characters with percent-encoding, skipping already
// encoded sequences.
//
//  - string       - string to encode
//  - exclude      - list of characters to ignore (in addition to a-zA-Z0-9)
//  - keepEscaped  - don't encode '%' in a correct escape sequence (default: true)
//
function encode(string, exclude, keepEscaped) {
    var i, l, code, nextCode, cache, result = "";
    if (typeof exclude !== "string") {
        // encode(string, keepEscaped)
        keepEscaped = exclude;
        exclude = encode.defaultChars;
    }
    if (typeof keepEscaped === "undefined") keepEscaped = true;
    cache = getEncodeCache(exclude);
    for(i = 0, l = string.length; i < l; i++){
        code = string.charCodeAt(i);
        if (keepEscaped && code === 0x25 /* % */  && i + 2 < l) {
            if (/^[0-9a-f]{2}$/i.test(string.slice(i + 1, i + 3))) {
                result += string.slice(i, i + 3);
                i += 2;
                continue;
            }
        }
        if (code < 128) {
            result += cache[code];
            continue;
        }
        if (code >= 0xD800 && code <= 0xDFFF) {
            if (code >= 0xD800 && code <= 0xDBFF && i + 1 < l) {
                nextCode = string.charCodeAt(i + 1);
                if (nextCode >= 0xDC00 && nextCode <= 0xDFFF) {
                    result += encodeURIComponent(string[i] + string[i + 1]);
                    i++;
                    continue;
                }
            }
            result += "%EF%BF%BD";
            continue;
        }
        result += encodeURIComponent(string[i]);
    }
    return result;
}
encode.defaultChars = ";/?:@&=+$,-_.!~*'()#";
encode.componentChars = "-_.!~*'()";
module.exports = encode;

},{}],"c9qtY":[function(require,module,exports) {
"use strict";
/* eslint-disable no-bitwise */ var decodeCache = {};
function getDecodeCache(exclude) {
    var i, ch, cache = decodeCache[exclude];
    if (cache) return cache;
    cache = decodeCache[exclude] = [];
    for(i = 0; i < 128; i++){
        ch = String.fromCharCode(i);
        cache.push(ch);
    }
    for(i = 0; i < exclude.length; i++){
        ch = exclude.charCodeAt(i);
        cache[ch] = "%" + ("0" + ch.toString(16).toUpperCase()).slice(-2);
    }
    return cache;
}
// Decode percent-encoded string.
//
function decode(string, exclude) {
    var cache;
    if (typeof exclude !== "string") exclude = decode.defaultChars;
    cache = getDecodeCache(exclude);
    return string.replace(/(%[a-f0-9]{2})+/gi, function(seq) {
        var i, l, b1, b2, b3, b4, chr, result = "";
        for(i = 0, l = seq.length; i < l; i += 3){
            b1 = parseInt(seq.slice(i + 1, i + 3), 16);
            if (b1 < 0x80) {
                result += cache[b1];
                continue;
            }
            if ((b1 & 0xE0) === 0xC0 && i + 3 < l) {
                // 110xxxxx 10xxxxxx
                b2 = parseInt(seq.slice(i + 4, i + 6), 16);
                if ((b2 & 0xC0) === 0x80) {
                    chr = b1 << 6 & 0x7C0 | b2 & 0x3F;
                    if (chr < 0x80) result += "\uFFFD\uFFFD";
                    else result += String.fromCharCode(chr);
                    i += 3;
                    continue;
                }
            }
            if ((b1 & 0xF0) === 0xE0 && i + 6 < l) {
                // 1110xxxx 10xxxxxx 10xxxxxx
                b2 = parseInt(seq.slice(i + 4, i + 6), 16);
                b3 = parseInt(seq.slice(i + 7, i + 9), 16);
                if ((b2 & 0xC0) === 0x80 && (b3 & 0xC0) === 0x80) {
                    chr = b1 << 12 & 0xF000 | b2 << 6 & 0xFC0 | b3 & 0x3F;
                    if (chr < 0x800 || chr >= 0xD800 && chr <= 0xDFFF) result += "\uFFFD\uFFFD\uFFFD";
                    else result += String.fromCharCode(chr);
                    i += 6;
                    continue;
                }
            }
            if ((b1 & 0xF8) === 0xF0 && i + 9 < l) {
                // 111110xx 10xxxxxx 10xxxxxx 10xxxxxx
                b2 = parseInt(seq.slice(i + 4, i + 6), 16);
                b3 = parseInt(seq.slice(i + 7, i + 9), 16);
                b4 = parseInt(seq.slice(i + 10, i + 12), 16);
                if ((b2 & 0xC0) === 0x80 && (b3 & 0xC0) === 0x80 && (b4 & 0xC0) === 0x80) {
                    chr = b1 << 18 & 0x1C0000 | b2 << 12 & 0x3F000 | b3 << 6 & 0xFC0 | b4 & 0x3F;
                    if (chr < 0x10000 || chr > 0x10FFFF) result += "\uFFFD\uFFFD\uFFFD\uFFFD";
                    else {
                        chr -= 0x10000;
                        result += String.fromCharCode(0xD800 + (chr >> 10), 0xDC00 + (chr & 0x3FF));
                    }
                    i += 9;
                    continue;
                }
            }
            result += "\uFFFD";
        }
        return result;
    });
}
decode.defaultChars = ";/?:@&=+$,#";
decode.componentChars = "";
module.exports = decode;

},{}],"4o6Ue":[function(require,module,exports) {
"use strict";
module.exports = function format(url) {
    var result = "";
    result += url.protocol || "";
    result += url.slashes ? "//" : "";
    result += url.auth ? url.auth + "@" : "";
    if (url.hostname && url.hostname.indexOf(":") !== -1) // ipv6 address
    result += "[" + url.hostname + "]";
    else result += url.hostname || "";
    result += url.port ? ":" + url.port : "";
    result += url.pathname || "";
    result += url.search || "";
    result += url.hash || "";
    return result;
};

},{}],"5BWHY":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
"use strict";
//
// Changes from joyent/node:
//
// 1. No leading slash in paths,
//    e.g. in `url.parse('http://foo?bar')` pathname is ``, not `/`
//
// 2. Backslashes are not replaced with slashes,
//    so `http:\\example.org\` is treated like a relative path
//
// 3. Trailing colon is treated like a part of the path,
//    i.e. in `http://example.org:foo` pathname is `:foo`
//
// 4. Nothing is URL-encoded in the resulting object,
//    (in joyent/node some chars in auth and paths are encoded)
//
// 5. `url.parse()` does not have `parseQueryString` argument
//
// 6. Removed extraneous result properties: `host`, `path`, `query`, etc.,
//    which can be constructed using other parts of the url.
//
function Url() {
    this.protocol = null;
    this.slashes = null;
    this.auth = null;
    this.port = null;
    this.hostname = null;
    this.hash = null;
    this.search = null;
    this.pathname = null;
}
// Reference: RFC 3986, RFC 1808, RFC 2396
// define these here so at least they only have to be
// compiled once on the first module load.
var protocolPattern = /^([a-z0-9.+-]+:)/i, portPattern = /:[0-9]*$/, // Special case for a simple path URL
simplePathPattern = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/, // RFC 2396: characters reserved for delimiting URLs.
// We actually just auto-escape these.
delims = [
    "<",
    ">",
    '"',
    "`",
    " ",
    "\r",
    "\n",
    "	"
], // RFC 2396: characters not allowed for various reasons.
unwise = [
    "{",
    "}",
    "|",
    "\\",
    "^",
    "`"
].concat(delims), // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
autoEscape = [
    "'"
].concat(unwise), // Characters that are never ever allowed in a hostname.
// Note that any invalid chars are also handled, but these
// are the ones that are *expected* to be seen, so we fast-path
// them.
nonHostChars = [
    "%",
    "/",
    "?",
    ";",
    "#"
].concat(autoEscape), hostEndingChars = [
    "/",
    "?",
    "#"
], hostnameMaxLen = 255, hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/, hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/, // protocols that can allow "unsafe" and "unwise" chars.
/* eslint-disable no-script-url */ // protocols that never have a hostname.
hostlessProtocol = {
    "javascript": true,
    "javascript:": true
}, // protocols that always contain a // bit.
slashedProtocol = {
    "http": true,
    "https": true,
    "ftp": true,
    "gopher": true,
    "file": true,
    "http:": true,
    "https:": true,
    "ftp:": true,
    "gopher:": true,
    "file:": true
};
/* eslint-enable no-script-url */ function urlParse(url, slashesDenoteHost) {
    if (url && url instanceof Url) return url;
    var u = new Url();
    u.parse(url, slashesDenoteHost);
    return u;
}
Url.prototype.parse = function(url, slashesDenoteHost) {
    var i, l, lowerProto, hec, slashes, rest = url;
    // trim before proceeding.
    // This is to support parse stuff like "  http://foo.com  \n"
    rest = rest.trim();
    if (!slashesDenoteHost && url.split("#").length === 1) {
        // Try fast path regexp
        var simplePath = simplePathPattern.exec(rest);
        if (simplePath) {
            this.pathname = simplePath[1];
            if (simplePath[2]) this.search = simplePath[2];
            return this;
        }
    }
    var proto = protocolPattern.exec(rest);
    if (proto) {
        proto = proto[0];
        lowerProto = proto.toLowerCase();
        this.protocol = proto;
        rest = rest.substr(proto.length);
    }
    // figure out if it's got a host
    // user@server is *always* interpreted as a hostname, and url
    // resolution will treat //foo/bar as host=foo,path=bar because that's
    // how the browser resolves relative URLs.
    if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
        slashes = rest.substr(0, 2) === "//";
        if (slashes && !(proto && hostlessProtocol[proto])) {
            rest = rest.substr(2);
            this.slashes = true;
        }
    }
    if (!hostlessProtocol[proto] && (slashes || proto && !slashedProtocol[proto])) {
        // there's a hostname.
        // the first instance of /, ?, ;, or # ends the host.
        //
        // If there is an @ in the hostname, then non-host chars *are* allowed
        // to the left of the last @ sign, unless some host-ending character
        // comes *before* the @-sign.
        // URLs are obnoxious.
        //
        // ex:
        // http://a@b@c/ => user:a@b host:c
        // http://a@b?@c => user:a host:c path:/?@c
        // v0.12 TODO(isaacs): This is not quite how Chrome does things.
        // Review our test case against browsers more comprehensively.
        // find the first instance of any hostEndingChars
        var hostEnd = -1;
        for(i = 0; i < hostEndingChars.length; i++){
            hec = rest.indexOf(hostEndingChars[i]);
            if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) hostEnd = hec;
        }
        // at this point, either we have an explicit point where the
        // auth portion cannot go past, or the last @ char is the decider.
        var auth, atSign;
        if (hostEnd === -1) // atSign can be anywhere.
        atSign = rest.lastIndexOf("@");
        else // atSign must be in auth portion.
        // http://a@b/c@d => host:b auth:a path:/c@d
        atSign = rest.lastIndexOf("@", hostEnd);
        // Now we have a portion which is definitely the auth.
        // Pull that off.
        if (atSign !== -1) {
            auth = rest.slice(0, atSign);
            rest = rest.slice(atSign + 1);
            this.auth = auth;
        }
        // the host is the remaining to the left of the first non-host char
        hostEnd = -1;
        for(i = 0; i < nonHostChars.length; i++){
            hec = rest.indexOf(nonHostChars[i]);
            if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) hostEnd = hec;
        }
        // if we still have not hit it, then the entire thing is a host.
        if (hostEnd === -1) hostEnd = rest.length;
        if (rest[hostEnd - 1] === ":") hostEnd--;
        var host = rest.slice(0, hostEnd);
        rest = rest.slice(hostEnd);
        // pull out port.
        this.parseHost(host);
        // we've indicated that there is a hostname,
        // so even if it's empty, it has to be present.
        this.hostname = this.hostname || "";
        // if hostname begins with [ and ends with ]
        // assume that it's an IPv6 address.
        var ipv6Hostname = this.hostname[0] === "[" && this.hostname[this.hostname.length - 1] === "]";
        // validate a little.
        if (!ipv6Hostname) {
            var hostparts = this.hostname.split(/\./);
            for(i = 0, l = hostparts.length; i < l; i++){
                var part = hostparts[i];
                if (!part) continue;
                if (!part.match(hostnamePartPattern)) {
                    var newpart = "";
                    for(var j = 0, k = part.length; j < k; j++)if (part.charCodeAt(j) > 127) // we replace non-ASCII char with a temporary placeholder
                    // we need this to make sure size of hostname is not
                    // broken by replacing non-ASCII by nothing
                    newpart += "x";
                    else newpart += part[j];
                    // we test again with ASCII char only
                    if (!newpart.match(hostnamePartPattern)) {
                        var validParts = hostparts.slice(0, i);
                        var notHost = hostparts.slice(i + 1);
                        var bit = part.match(hostnamePartStart);
                        if (bit) {
                            validParts.push(bit[1]);
                            notHost.unshift(bit[2]);
                        }
                        if (notHost.length) rest = notHost.join(".") + rest;
                        this.hostname = validParts.join(".");
                        break;
                    }
                }
            }
        }
        if (this.hostname.length > hostnameMaxLen) this.hostname = "";
        // strip [ and ] from the hostname
        // the host field still retains them, though
        if (ipv6Hostname) this.hostname = this.hostname.substr(1, this.hostname.length - 2);
    }
    // chop off from the tail first.
    var hash = rest.indexOf("#");
    if (hash !== -1) {
        // got a fragment string.
        this.hash = rest.substr(hash);
        rest = rest.slice(0, hash);
    }
    var qm = rest.indexOf("?");
    if (qm !== -1) {
        this.search = rest.substr(qm);
        rest = rest.slice(0, qm);
    }
    if (rest) this.pathname = rest;
    if (slashedProtocol[lowerProto] && this.hostname && !this.pathname) this.pathname = "";
    return this;
};
Url.prototype.parseHost = function(host) {
    var port = portPattern.exec(host);
    if (port) {
        port = port[0];
        if (port !== ":") this.port = port.substr(1);
        host = host.substr(0, host.length - port.length);
    }
    if (host) this.hostname = host;
};
module.exports = urlParse;

},{}],"lyqSr":[function(require,module,exports) {
"use strict";
exports.Any = require("./properties/Any/regex");
exports.Cc = require("./categories/Cc/regex");
exports.Cf = require("./categories/Cf/regex");
exports.P = require("./categories/P/regex");
exports.Z = require("./categories/Z/regex");

},{"./properties/Any/regex":"3eQ2Y","./categories/Cc/regex":"ch9ds","./categories/Cf/regex":"jkQRa","./categories/P/regex":"h8JTc","./categories/Z/regex":"bY1IV"}],"3eQ2Y":[function(require,module,exports) {
module.exports = /[\0-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/;

},{}],"ch9ds":[function(require,module,exports) {
module.exports = /[\0-\x1F\x7F-\x9F]/;

},{}],"jkQRa":[function(require,module,exports) {
module.exports = /[\xAD\u0600-\u0605\u061C\u06DD\u070F\u08E2\u180E\u200B-\u200F\u202A-\u202E\u2060-\u2064\u2066-\u206F\uFEFF\uFFF9-\uFFFB]|\uD804[\uDCBD\uDCCD]|\uD82F[\uDCA0-\uDCA3]|\uD834[\uDD73-\uDD7A]|\uDB40[\uDC01\uDC20-\uDC7F]/;

},{}],"bY1IV":[function(require,module,exports) {
module.exports = /[ \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000]/;

},{}],"gdwjd":[function(require,module,exports) {
// Just a shortcut for bulk export
"use strict";
exports.parseLinkLabel = require("./parse_link_label");
exports.parseLinkDestination = require("./parse_link_destination");
exports.parseLinkTitle = require("./parse_link_title");

},{"./parse_link_label":"3leOa","./parse_link_destination":"42taJ","./parse_link_title":"5g31v"}],"3leOa":[function(require,module,exports) {
// Parse link label
//
// this function assumes that first character ("[") already matches;
// returns the end of the label
//
"use strict";
module.exports = function parseLinkLabel(state, start, disableNested) {
    var level, found, marker, prevPos, labelEnd = -1, max = state.posMax, oldPos = state.pos;
    state.pos = start + 1;
    level = 1;
    while(state.pos < max){
        marker = state.src.charCodeAt(state.pos);
        if (marker === 0x5D /* ] */ ) {
            level--;
            if (level === 0) {
                found = true;
                break;
            }
        }
        prevPos = state.pos;
        state.md.inline.skipToken(state);
        if (marker === 0x5B /* [ */ ) {
            if (prevPos === state.pos - 1) // increase level if we find text `[`, which is not a part of any token
            level++;
            else if (disableNested) {
                state.pos = oldPos;
                return -1;
            }
        }
    }
    if (found) labelEnd = state.pos;
    // restore old state
    state.pos = oldPos;
    return labelEnd;
};

},{}],"42taJ":[function(require,module,exports) {
// Parse link destination
//
"use strict";
var unescapeAll = require("../common/utils").unescapeAll;
module.exports = function parseLinkDestination(str, pos, max) {
    var code, level, lines = 0, start = pos, result = {
        ok: false,
        pos: 0,
        lines: 0,
        str: ""
    };
    if (str.charCodeAt(pos) === 0x3C /* < */ ) {
        pos++;
        while(pos < max){
            code = str.charCodeAt(pos);
            if (code === 0x0A /* \n */ ) return result;
            if (code === 0x3C /* < */ ) return result;
            if (code === 0x3E /* > */ ) {
                result.pos = pos + 1;
                result.str = unescapeAll(str.slice(start + 1, pos));
                result.ok = true;
                return result;
            }
            if (code === 0x5C /* \ */  && pos + 1 < max) {
                pos += 2;
                continue;
            }
            pos++;
        }
        // no closing '>'
        return result;
    }
    // this should be ... } else { ... branch
    level = 0;
    while(pos < max){
        code = str.charCodeAt(pos);
        if (code === 0x20) break;
        // ascii control characters
        if (code < 0x20 || code === 0x7F) break;
        if (code === 0x5C /* \ */  && pos + 1 < max) {
            if (str.charCodeAt(pos + 1) === 0x20) break;
            pos += 2;
            continue;
        }
        if (code === 0x28 /* ( */ ) {
            level++;
            if (level > 32) return result;
        }
        if (code === 0x29 /* ) */ ) {
            if (level === 0) break;
            level--;
        }
        pos++;
    }
    if (start === pos) return result;
    if (level !== 0) return result;
    result.str = unescapeAll(str.slice(start, pos));
    result.lines = lines;
    result.pos = pos;
    result.ok = true;
    return result;
};

},{"../common/utils":"fp3Yu"}],"5g31v":[function(require,module,exports) {
// Parse link title
//
"use strict";
var unescapeAll = require("../common/utils").unescapeAll;
module.exports = function parseLinkTitle(str, pos, max) {
    var code, marker, lines = 0, start = pos, result = {
        ok: false,
        pos: 0,
        lines: 0,
        str: ""
    };
    if (pos >= max) return result;
    marker = str.charCodeAt(pos);
    if (marker !== 0x22 /* " */  && marker !== 0x27 /* ' */  && marker !== 0x28 /* ( */ ) return result;
    pos++;
    // if opening marker is "(", switch it to closing marker ")"
    if (marker === 0x28) marker = 0x29;
    while(pos < max){
        code = str.charCodeAt(pos);
        if (code === marker) {
            result.pos = pos + 1;
            result.lines = lines;
            result.str = unescapeAll(str.slice(start + 1, pos));
            result.ok = true;
            return result;
        } else if (code === 0x28 /* ( */  && marker === 0x29 /* ) */ ) return result;
        else if (code === 0x0A) lines++;
        else if (code === 0x5C /* \ */  && pos + 1 < max) {
            pos++;
            if (str.charCodeAt(pos) === 0x0A) lines++;
        }
        pos++;
    }
    return result;
};

},{"../common/utils":"fp3Yu"}],"h6Aaq":[function(require,module,exports) {
/**
 * class Renderer
 *
 * Generates HTML from parsed token stream. Each instance has independent
 * copy of rules. Those can be rewritten with ease. Also, you can add new
 * rules if you create plugin and adds new token types.
 **/ "use strict";
var assign = require("./common/utils").assign;
var unescapeAll = require("./common/utils").unescapeAll;
var escapeHtml = require("./common/utils").escapeHtml;
////////////////////////////////////////////////////////////////////////////////
var default_rules = {};
default_rules.code_inline = function(tokens, idx, options, env, slf) {
    var token = tokens[idx];
    return "<code" + slf.renderAttrs(token) + ">" + escapeHtml(tokens[idx].content) + "</code>";
};
default_rules.code_block = function(tokens, idx, options, env, slf) {
    var token = tokens[idx];
    return "<pre" + slf.renderAttrs(token) + "><code>" + escapeHtml(tokens[idx].content) + "</code></pre>\n";
};
default_rules.fence = function(tokens, idx, options, env, slf) {
    var token = tokens[idx], info = token.info ? unescapeAll(token.info).trim() : "", langName = "", langAttrs = "", highlighted, i, arr, tmpAttrs, tmpToken;
    if (info) {
        arr = info.split(/(\s+)/g);
        langName = arr[0];
        langAttrs = arr.slice(2).join("");
    }
    if (options.highlight) highlighted = options.highlight(token.content, langName, langAttrs) || escapeHtml(token.content);
    else highlighted = escapeHtml(token.content);
    if (highlighted.indexOf("<pre") === 0) return highlighted + "\n";
    // If language exists, inject class gently, without modifying original token.
    // May be, one day we will add .deepClone() for token and simplify this part, but
    // now we prefer to keep things local.
    if (info) {
        i = token.attrIndex("class");
        tmpAttrs = token.attrs ? token.attrs.slice() : [];
        if (i < 0) tmpAttrs.push([
            "class",
            options.langPrefix + langName
        ]);
        else {
            tmpAttrs[i] = tmpAttrs[i].slice();
            tmpAttrs[i][1] += " " + options.langPrefix + langName;
        }
        // Fake token just to render attributes
        tmpToken = {
            attrs: tmpAttrs
        };
        return "<pre><code" + slf.renderAttrs(tmpToken) + ">" + highlighted + "</code></pre>\n";
    }
    return "<pre><code" + slf.renderAttrs(token) + ">" + highlighted + "</code></pre>\n";
};
default_rules.image = function(tokens, idx, options, env, slf) {
    var token = tokens[idx];
    // "alt" attr MUST be set, even if empty. Because it's mandatory and
    // should be placed on proper position for tests.
    //
    // Replace content with actual value
    token.attrs[token.attrIndex("alt")][1] = slf.renderInlineAsText(token.children, options, env);
    return slf.renderToken(tokens, idx, options);
};
default_rules.hardbreak = function(tokens, idx, options /*, env */ ) {
    return options.xhtmlOut ? "<br />\n" : "<br>\n";
};
default_rules.softbreak = function(tokens, idx, options /*, env */ ) {
    return options.breaks ? options.xhtmlOut ? "<br />\n" : "<br>\n" : "\n";
};
default_rules.text = function(tokens, idx /*, options, env */ ) {
    return escapeHtml(tokens[idx].content);
};
default_rules.html_block = function(tokens, idx /*, options, env */ ) {
    return tokens[idx].content;
};
default_rules.html_inline = function(tokens, idx /*, options, env */ ) {
    return tokens[idx].content;
};
/**
 * new Renderer()
 *
 * Creates new [[Renderer]] instance and fill [[Renderer#rules]] with defaults.
 **/ function Renderer() {
    /**
   * Renderer#rules -> Object
   *
   * Contains render rules for tokens. Can be updated and extended.
   *
   * ##### Example
   *
   * ```javascript
   * var md = require('markdown-it')();
   *
   * md.renderer.rules.strong_open  = function () { return '<b>'; };
   * md.renderer.rules.strong_close = function () { return '</b>'; };
   *
   * var result = md.renderInline(...);
   * ```
   *
   * Each rule is called as independent static function with fixed signature:
   *
   * ```javascript
   * function my_token_render(tokens, idx, options, env, renderer) {
   *   // ...
   *   return renderedHTML;
   * }
   * ```
   *
   * See [source code](https://github.com/markdown-it/markdown-it/blob/master/lib/renderer.js)
   * for more details and examples.
   **/ this.rules = assign({}, default_rules);
}
/**
 * Renderer.renderAttrs(token) -> String
 *
 * Render token attributes to string.
 **/ Renderer.prototype.renderAttrs = function renderAttrs(token) {
    var i, l, result;
    if (!token.attrs) return "";
    result = "";
    for(i = 0, l = token.attrs.length; i < l; i++)result += " " + escapeHtml(token.attrs[i][0]) + '="' + escapeHtml(token.attrs[i][1]) + '"';
    return result;
};
/**
 * Renderer.renderToken(tokens, idx, options) -> String
 * - tokens (Array): list of tokens
 * - idx (Numbed): token index to render
 * - options (Object): params of parser instance
 *
 * Default token renderer. Can be overriden by custom function
 * in [[Renderer#rules]].
 **/ Renderer.prototype.renderToken = function renderToken(tokens, idx, options) {
    var nextToken, result = "", needLf = false, token = tokens[idx];
    // Tight list paragraphs
    if (token.hidden) return "";
    // Insert a newline between hidden paragraph and subsequent opening
    // block-level tag.
    //
    // For example, here we should insert a newline before blockquote:
    //  - a
    //    >
    //
    if (token.block && token.nesting !== -1 && idx && tokens[idx - 1].hidden) result += "\n";
    // Add token name, e.g. `<img`
    result += (token.nesting === -1 ? "</" : "<") + token.tag;
    // Encode attributes, e.g. `<img src="foo"`
    result += this.renderAttrs(token);
    // Add a slash for self-closing tags, e.g. `<img src="foo" /`
    if (token.nesting === 0 && options.xhtmlOut) result += " /";
    // Check if we need to add a newline after this tag
    if (token.block) {
        needLf = true;
        if (token.nesting === 1) {
            if (idx + 1 < tokens.length) {
                nextToken = tokens[idx + 1];
                if (nextToken.type === "inline" || nextToken.hidden) // Block-level tag containing an inline tag.
                //
                needLf = false;
                else if (nextToken.nesting === -1 && nextToken.tag === token.tag) // Opening tag + closing tag of the same type. E.g. `<li></li>`.
                //
                needLf = false;
            }
        }
    }
    result += needLf ? ">\n" : ">";
    return result;
};
/**
 * Renderer.renderInline(tokens, options, env) -> String
 * - tokens (Array): list on block tokens to render
 * - options (Object): params of parser instance
 * - env (Object): additional data from parsed input (references, for example)
 *
 * The same as [[Renderer.render]], but for single token of `inline` type.
 **/ Renderer.prototype.renderInline = function(tokens, options, env) {
    var type, result = "", rules = this.rules;
    for(var i = 0, len = tokens.length; i < len; i++){
        type = tokens[i].type;
        if (typeof rules[type] !== "undefined") result += rules[type](tokens, i, options, env, this);
        else result += this.renderToken(tokens, i, options);
    }
    return result;
};
/** internal
 * Renderer.renderInlineAsText(tokens, options, env) -> String
 * - tokens (Array): list on block tokens to render
 * - options (Object): params of parser instance
 * - env (Object): additional data from parsed input (references, for example)
 *
 * Special kludge for image `alt` attributes to conform CommonMark spec.
 * Don't try to use it! Spec requires to show `alt` content with stripped markup,
 * instead of simple escaping.
 **/ Renderer.prototype.renderInlineAsText = function(tokens, options, env) {
    var result = "";
    for(var i = 0, len = tokens.length; i < len; i++){
        if (tokens[i].type === "text") result += tokens[i].content;
        else if (tokens[i].type === "image") result += this.renderInlineAsText(tokens[i].children, options, env);
        else if (tokens[i].type === "softbreak") result += "\n";
    }
    return result;
};
/**
 * Renderer.render(tokens, options, env) -> String
 * - tokens (Array): list on block tokens to render
 * - options (Object): params of parser instance
 * - env (Object): additional data from parsed input (references, for example)
 *
 * Takes token stream and generates HTML. Probably, you will never need to call
 * this method directly.
 **/ Renderer.prototype.render = function(tokens, options, env) {
    var i, len, type, result = "", rules = this.rules;
    for(i = 0, len = tokens.length; i < len; i++){
        type = tokens[i].type;
        if (type === "inline") result += this.renderInline(tokens[i].children, options, env);
        else if (typeof rules[type] !== "undefined") result += rules[tokens[i].type](tokens, i, options, env, this);
        else result += this.renderToken(tokens, i, options, env);
    }
    return result;
};
module.exports = Renderer;

},{"./common/utils":"fp3Yu"}],"jOauP":[function(require,module,exports) {
/** internal
 * class Core
 *
 * Top-level rules executor. Glues block/inline parsers and does intermediate
 * transformations.
 **/ "use strict";
var Ruler = require("./ruler");
var _rules = [
    [
        "normalize",
        require("./rules_core/normalize")
    ],
    [
        "block",
        require("./rules_core/block")
    ],
    [
        "inline",
        require("./rules_core/inline")
    ],
    [
        "linkify",
        require("./rules_core/linkify")
    ],
    [
        "replacements",
        require("./rules_core/replacements")
    ],
    [
        "smartquotes",
        require("./rules_core/smartquotes")
    ]
];
/**
 * new Core()
 **/ function Core() {
    /**
   * Core#ruler -> Ruler
   *
   * [[Ruler]] instance. Keep configuration of core rules.
   **/ this.ruler = new Ruler();
    for(var i = 0; i < _rules.length; i++)this.ruler.push(_rules[i][0], _rules[i][1]);
}
/**
 * Core.process(state)
 *
 * Executes core chain rules.
 **/ Core.prototype.process = function(state) {
    var i, l, rules;
    rules = this.ruler.getRules("");
    for(i = 0, l = rules.length; i < l; i++)rules[i](state);
};
Core.prototype.State = require("./rules_core/state_core");
module.exports = Core;

},{"./ruler":"iVWwo","./rules_core/normalize":"8mbgp","./rules_core/block":"133JT","./rules_core/inline":"5z9hO","./rules_core/linkify":"9B48d","./rules_core/replacements":"6xmgA","./rules_core/smartquotes":"4LvsV","./rules_core/state_core":"kCwdF"}],"iVWwo":[function(require,module,exports) {
/**
 * class Ruler
 *
 * Helper class, used by [[MarkdownIt#core]], [[MarkdownIt#block]] and
 * [[MarkdownIt#inline]] to manage sequences of functions (rules):
 *
 * - keep rules in defined order
 * - assign the name to each rule
 * - enable/disable rules
 * - add/replace rules
 * - allow assign rules to additional named chains (in the same)
 * - cacheing lists of active rules
 *
 * You will not need use this class directly until write plugins. For simple
 * rules control use [[MarkdownIt.disable]], [[MarkdownIt.enable]] and
 * [[MarkdownIt.use]].
 **/ "use strict";
/**
 * new Ruler()
 **/ function Ruler() {
    // List of added rules. Each element is:
    //
    // {
    //   name: XXX,
    //   enabled: Boolean,
    //   fn: Function(),
    //   alt: [ name2, name3 ]
    // }
    //
    this.__rules__ = [];
    // Cached rule chains.
    //
    // First level - chain name, '' for default.
    // Second level - diginal anchor for fast filtering by charcodes.
    //
    this.__cache__ = null;
}
////////////////////////////////////////////////////////////////////////////////
// Helper methods, should not be used directly
// Find rule index by name
//
Ruler.prototype.__find__ = function(name) {
    for(var i = 0; i < this.__rules__.length; i++){
        if (this.__rules__[i].name === name) return i;
    }
    return -1;
};
// Build rules lookup cache
//
Ruler.prototype.__compile__ = function() {
    var self = this;
    var chains = [
        ""
    ];
    // collect unique names
    self.__rules__.forEach(function(rule) {
        if (!rule.enabled) return;
        rule.alt.forEach(function(altName) {
            if (chains.indexOf(altName) < 0) chains.push(altName);
        });
    });
    self.__cache__ = {};
    chains.forEach(function(chain) {
        self.__cache__[chain] = [];
        self.__rules__.forEach(function(rule) {
            if (!rule.enabled) return;
            if (chain && rule.alt.indexOf(chain) < 0) return;
            self.__cache__[chain].push(rule.fn);
        });
    });
};
/**
 * Ruler.at(name, fn [, options])
 * - name (String): rule name to replace.
 * - fn (Function): new rule function.
 * - options (Object): new rule options (not mandatory).
 *
 * Replace rule by name with new function & options. Throws error if name not
 * found.
 *
 * ##### Options:
 *
 * - __alt__ - array with names of "alternate" chains.
 *
 * ##### Example
 *
 * Replace existing typographer replacement rule with new one:
 *
 * ```javascript
 * var md = require('markdown-it')();
 *
 * md.core.ruler.at('replacements', function replace(state) {
 *   //...
 * });
 * ```
 **/ Ruler.prototype.at = function(name, fn, options) {
    var index = this.__find__(name);
    var opt = options || {};
    if (index === -1) throw new Error("Parser rule not found: " + name);
    this.__rules__[index].fn = fn;
    this.__rules__[index].alt = opt.alt || [];
    this.__cache__ = null;
};
/**
 * Ruler.before(beforeName, ruleName, fn [, options])
 * - beforeName (String): new rule will be added before this one.
 * - ruleName (String): name of added rule.
 * - fn (Function): rule function.
 * - options (Object): rule options (not mandatory).
 *
 * Add new rule to chain before one with given name. See also
 * [[Ruler.after]], [[Ruler.push]].
 *
 * ##### Options:
 *
 * - __alt__ - array with names of "alternate" chains.
 *
 * ##### Example
 *
 * ```javascript
 * var md = require('markdown-it')();
 *
 * md.block.ruler.before('paragraph', 'my_rule', function replace(state) {
 *   //...
 * });
 * ```
 **/ Ruler.prototype.before = function(beforeName, ruleName, fn, options) {
    var index = this.__find__(beforeName);
    var opt = options || {};
    if (index === -1) throw new Error("Parser rule not found: " + beforeName);
    this.__rules__.splice(index, 0, {
        name: ruleName,
        enabled: true,
        fn: fn,
        alt: opt.alt || []
    });
    this.__cache__ = null;
};
/**
 * Ruler.after(afterName, ruleName, fn [, options])
 * - afterName (String): new rule will be added after this one.
 * - ruleName (String): name of added rule.
 * - fn (Function): rule function.
 * - options (Object): rule options (not mandatory).
 *
 * Add new rule to chain after one with given name. See also
 * [[Ruler.before]], [[Ruler.push]].
 *
 * ##### Options:
 *
 * - __alt__ - array with names of "alternate" chains.
 *
 * ##### Example
 *
 * ```javascript
 * var md = require('markdown-it')();
 *
 * md.inline.ruler.after('text', 'my_rule', function replace(state) {
 *   //...
 * });
 * ```
 **/ Ruler.prototype.after = function(afterName, ruleName, fn, options) {
    var index = this.__find__(afterName);
    var opt = options || {};
    if (index === -1) throw new Error("Parser rule not found: " + afterName);
    this.__rules__.splice(index + 1, 0, {
        name: ruleName,
        enabled: true,
        fn: fn,
        alt: opt.alt || []
    });
    this.__cache__ = null;
};
/**
 * Ruler.push(ruleName, fn [, options])
 * - ruleName (String): name of added rule.
 * - fn (Function): rule function.
 * - options (Object): rule options (not mandatory).
 *
 * Push new rule to the end of chain. See also
 * [[Ruler.before]], [[Ruler.after]].
 *
 * ##### Options:
 *
 * - __alt__ - array with names of "alternate" chains.
 *
 * ##### Example
 *
 * ```javascript
 * var md = require('markdown-it')();
 *
 * md.core.ruler.push('my_rule', function replace(state) {
 *   //...
 * });
 * ```
 **/ Ruler.prototype.push = function(ruleName, fn, options) {
    var opt = options || {};
    this.__rules__.push({
        name: ruleName,
        enabled: true,
        fn: fn,
        alt: opt.alt || []
    });
    this.__cache__ = null;
};
/**
 * Ruler.enable(list [, ignoreInvalid]) -> Array
 * - list (String|Array): list of rule names to enable.
 * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.
 *
 * Enable rules with given names. If any rule name not found - throw Error.
 * Errors can be disabled by second param.
 *
 * Returns list of found rule names (if no exception happened).
 *
 * See also [[Ruler.disable]], [[Ruler.enableOnly]].
 **/ Ruler.prototype.enable = function(list, ignoreInvalid) {
    if (!Array.isArray(list)) list = [
        list
    ];
    var result = [];
    // Search by name and enable
    list.forEach(function(name) {
        var idx = this.__find__(name);
        if (idx < 0) {
            if (ignoreInvalid) return;
            throw new Error("Rules manager: invalid rule name " + name);
        }
        this.__rules__[idx].enabled = true;
        result.push(name);
    }, this);
    this.__cache__ = null;
    return result;
};
/**
 * Ruler.enableOnly(list [, ignoreInvalid])
 * - list (String|Array): list of rule names to enable (whitelist).
 * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.
 *
 * Enable rules with given names, and disable everything else. If any rule name
 * not found - throw Error. Errors can be disabled by second param.
 *
 * See also [[Ruler.disable]], [[Ruler.enable]].
 **/ Ruler.prototype.enableOnly = function(list, ignoreInvalid) {
    if (!Array.isArray(list)) list = [
        list
    ];
    this.__rules__.forEach(function(rule) {
        rule.enabled = false;
    });
    this.enable(list, ignoreInvalid);
};
/**
 * Ruler.disable(list [, ignoreInvalid]) -> Array
 * - list (String|Array): list of rule names to disable.
 * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.
 *
 * Disable rules with given names. If any rule name not found - throw Error.
 * Errors can be disabled by second param.
 *
 * Returns list of found rule names (if no exception happened).
 *
 * See also [[Ruler.enable]], [[Ruler.enableOnly]].
 **/ Ruler.prototype.disable = function(list, ignoreInvalid) {
    if (!Array.isArray(list)) list = [
        list
    ];
    var result = [];
    // Search by name and disable
    list.forEach(function(name) {
        var idx = this.__find__(name);
        if (idx < 0) {
            if (ignoreInvalid) return;
            throw new Error("Rules manager: invalid rule name " + name);
        }
        this.__rules__[idx].enabled = false;
        result.push(name);
    }, this);
    this.__cache__ = null;
    return result;
};
/**
 * Ruler.getRules(chainName) -> Array
 *
 * Return array of active functions (rules) for given chain name. It analyzes
 * rules configuration, compiles caches if not exists and returns result.
 *
 * Default chain name is `''` (empty string). It can't be skipped. That's
 * done intentionally, to keep signature monomorphic for high speed.
 **/ Ruler.prototype.getRules = function(chainName) {
    if (this.__cache__ === null) this.__compile__();
    // Chain can be empty, if rules disabled. But we still have to return Array.
    return this.__cache__[chainName] || [];
};
module.exports = Ruler;

},{}],"8mbgp":[function(require,module,exports) {
// Normalize input string
"use strict";
// https://spec.commonmark.org/0.29/#line-ending
var NEWLINES_RE = /\r\n?|\n/g;
var NULL_RE = /\0/g;
module.exports = function normalize(state) {
    var str;
    // Normalize newlines
    str = state.src.replace(NEWLINES_RE, "\n");
    // Replace NULL characters
    str = str.replace(NULL_RE, "\uFFFD");
    state.src = str;
};

},{}],"133JT":[function(require,module,exports) {
"use strict";
module.exports = function block(state) {
    var token;
    if (state.inlineMode) {
        token = new state.Token("inline", "", 0);
        token.content = state.src;
        token.map = [
            0,
            1
        ];
        token.children = [];
        state.tokens.push(token);
    } else state.md.block.parse(state.src, state.md, state.env, state.tokens);
};

},{}],"5z9hO":[function(require,module,exports) {
"use strict";
module.exports = function inline(state) {
    var tokens = state.tokens, tok, i, l;
    // Parse inlines
    for(i = 0, l = tokens.length; i < l; i++){
        tok = tokens[i];
        if (tok.type === "inline") state.md.inline.parse(tok.content, state.md, state.env, tok.children);
    }
};

},{}],"9B48d":[function(require,module,exports) {
// Replace link-like texts with link nodes.
//
// Currently restricted by `md.validateLink()` to http/https/ftp
//
"use strict";
var arrayReplaceAt = require("../common/utils").arrayReplaceAt;
function isLinkOpen(str) {
    return /^<a[>\s]/i.test(str);
}
function isLinkClose(str) {
    return /^<\/a\s*>/i.test(str);
}
module.exports = function linkify(state) {
    var i, j, l, tokens, token, currentToken, nodes, ln, text, pos, lastPos, level, htmlLinkLevel, url, fullUrl, urlText, blockTokens = state.tokens, links;
    if (!state.md.options.linkify) return;
    for(j = 0, l = blockTokens.length; j < l; j++){
        if (blockTokens[j].type !== "inline" || !state.md.linkify.pretest(blockTokens[j].content)) continue;
        tokens = blockTokens[j].children;
        htmlLinkLevel = 0;
        // We scan from the end, to keep position when new tags added.
        // Use reversed logic in links start/end match
        for(i = tokens.length - 1; i >= 0; i--){
            currentToken = tokens[i];
            // Skip content of markdown links
            if (currentToken.type === "link_close") {
                i--;
                while(tokens[i].level !== currentToken.level && tokens[i].type !== "link_open")i--;
                continue;
            }
            // Skip content of html tag links
            if (currentToken.type === "html_inline") {
                if (isLinkOpen(currentToken.content) && htmlLinkLevel > 0) htmlLinkLevel--;
                if (isLinkClose(currentToken.content)) htmlLinkLevel++;
            }
            if (htmlLinkLevel > 0) continue;
            if (currentToken.type === "text" && state.md.linkify.test(currentToken.content)) {
                text = currentToken.content;
                links = state.md.linkify.match(text);
                // Now split string to nodes
                nodes = [];
                level = currentToken.level;
                lastPos = 0;
                for(ln = 0; ln < links.length; ln++){
                    url = links[ln].url;
                    fullUrl = state.md.normalizeLink(url);
                    if (!state.md.validateLink(fullUrl)) continue;
                    urlText = links[ln].text;
                    // Linkifier might send raw hostnames like "example.com", where url
                    // starts with domain name. So we prepend http:// in those cases,
                    // and remove it afterwards.
                    //
                    if (!links[ln].schema) urlText = state.md.normalizeLinkText("http://" + urlText).replace(/^http:\/\//, "");
                    else if (links[ln].schema === "mailto:" && !/^mailto:/i.test(urlText)) urlText = state.md.normalizeLinkText("mailto:" + urlText).replace(/^mailto:/, "");
                    else urlText = state.md.normalizeLinkText(urlText);
                    pos = links[ln].index;
                    if (pos > lastPos) {
                        token = new state.Token("text", "", 0);
                        token.content = text.slice(lastPos, pos);
                        token.level = level;
                        nodes.push(token);
                    }
                    token = new state.Token("link_open", "a", 1);
                    token.attrs = [
                        [
                            "href",
                            fullUrl
                        ]
                    ];
                    token.level = level++;
                    token.markup = "linkify";
                    token.info = "auto";
                    nodes.push(token);
                    token = new state.Token("text", "", 0);
                    token.content = urlText;
                    token.level = level;
                    nodes.push(token);
                    token = new state.Token("link_close", "a", -1);
                    token.level = --level;
                    token.markup = "linkify";
                    token.info = "auto";
                    nodes.push(token);
                    lastPos = links[ln].lastIndex;
                }
                if (lastPos < text.length) {
                    token = new state.Token("text", "", 0);
                    token.content = text.slice(lastPos);
                    token.level = level;
                    nodes.push(token);
                }
                // replace current node
                blockTokens[j].children = tokens = arrayReplaceAt(tokens, i, nodes);
            }
        }
    }
};

},{"../common/utils":"fp3Yu"}],"6xmgA":[function(require,module,exports) {
// Simple typographic replacements
//
// (c) (C) → ©
// (tm) (TM) → ™
// (r) (R) → ®
// +- → ±
// (p) (P) -> §
// ... → … (also ?.... → ?.., !.... → !..)
// ???????? → ???, !!!!! → !!!, `,,` → `,`
// -- → &ndash;, --- → &mdash;
//
"use strict";
// TODO:
// - fractionals 1/2, 1/4, 3/4 -> ½, ¼, ¾
// - miltiplication 2 x 4 -> 2 × 4
var RARE_RE = /\+-|\.\.|\?\?\?\?|!!!!|,,|--/;
// Workaround for phantomjs - need regex without /g flag,
// or root check will fail every second time
var SCOPED_ABBR_TEST_RE = /\((c|tm|r|p)\)/i;
var SCOPED_ABBR_RE = /\((c|tm|r|p)\)/ig;
var SCOPED_ABBR = {
    c: "\xa9",
    r: "\xae",
    p: "\xa7",
    tm: "\u2122"
};
function replaceFn(match, name) {
    return SCOPED_ABBR[name.toLowerCase()];
}
function replace_scoped(inlineTokens) {
    var i, token, inside_autolink = 0;
    for(i = inlineTokens.length - 1; i >= 0; i--){
        token = inlineTokens[i];
        if (token.type === "text" && !inside_autolink) token.content = token.content.replace(SCOPED_ABBR_RE, replaceFn);
        if (token.type === "link_open" && token.info === "auto") inside_autolink--;
        if (token.type === "link_close" && token.info === "auto") inside_autolink++;
    }
}
function replace_rare(inlineTokens) {
    var i, token, inside_autolink = 0;
    for(i = inlineTokens.length - 1; i >= 0; i--){
        token = inlineTokens[i];
        if (token.type === "text" && !inside_autolink) {
            if (RARE_RE.test(token.content)) token.content = token.content.replace(/\+-/g, "\xb1")// .., ..., ....... -> …
            // but ?..... & !..... -> ?.. & !..
            .replace(/\.{2,}/g, "\u2026").replace(/([?!])…/g, "$1..").replace(/([?!]){4,}/g, "$1$1$1").replace(/,{2,}/g, ",")// em-dash
            .replace(/(^|[^-])---(?=[^-]|$)/mg, "$1\u2014")// en-dash
            .replace(/(^|\s)--(?=\s|$)/mg, "$1\u2013").replace(/(^|[^-\s])--(?=[^-\s]|$)/mg, "$1\u2013");
        }
        if (token.type === "link_open" && token.info === "auto") inside_autolink--;
        if (token.type === "link_close" && token.info === "auto") inside_autolink++;
    }
}
module.exports = function replace(state) {
    var blkIdx;
    if (!state.md.options.typographer) return;
    for(blkIdx = state.tokens.length - 1; blkIdx >= 0; blkIdx--){
        if (state.tokens[blkIdx].type !== "inline") continue;
        if (SCOPED_ABBR_TEST_RE.test(state.tokens[blkIdx].content)) replace_scoped(state.tokens[blkIdx].children);
        if (RARE_RE.test(state.tokens[blkIdx].content)) replace_rare(state.tokens[blkIdx].children);
    }
};

},{}],"4LvsV":[function(require,module,exports) {
// Convert straight quotation marks to typographic ones
//
"use strict";
var isWhiteSpace = require("../common/utils").isWhiteSpace;
var isPunctChar = require("../common/utils").isPunctChar;
var isMdAsciiPunct = require("../common/utils").isMdAsciiPunct;
var QUOTE_TEST_RE = /['"]/;
var QUOTE_RE = /['"]/g;
var APOSTROPHE = "\u2019"; /* ’ */ 
function replaceAt(str, index, ch) {
    return str.substr(0, index) + ch + str.substr(index + 1);
}
function process_inlines(tokens, state) {
    var i, token, text, t, pos, max, thisLevel, item, lastChar, nextChar, isLastPunctChar, isNextPunctChar, isLastWhiteSpace, isNextWhiteSpace, canOpen, canClose, j, isSingle, stack, openQuote, closeQuote;
    stack = [];
    for(i = 0; i < tokens.length; i++){
        token = tokens[i];
        thisLevel = tokens[i].level;
        for(j = stack.length - 1; j >= 0; j--){
            if (stack[j].level <= thisLevel) break;
        }
        stack.length = j + 1;
        if (token.type !== "text") continue;
        text = token.content;
        pos = 0;
        max = text.length;
        /*eslint no-labels:0,block-scoped-var:0*/ OUTER: while(pos < max){
            QUOTE_RE.lastIndex = pos;
            t = QUOTE_RE.exec(text);
            if (!t) break;
            canOpen = canClose = true;
            pos = t.index + 1;
            isSingle = t[0] === "'";
            // Find previous character,
            // default to space if it's the beginning of the line
            //
            lastChar = 0x20;
            if (t.index - 1 >= 0) lastChar = text.charCodeAt(t.index - 1);
            else for(j = i - 1; j >= 0; j--){
                if (tokens[j].type === "softbreak" || tokens[j].type === "hardbreak") break; // lastChar defaults to 0x20
                if (!tokens[j].content) continue; // should skip all tokens except 'text', 'html_inline' or 'code_inline'
                lastChar = tokens[j].content.charCodeAt(tokens[j].content.length - 1);
                break;
            }
            // Find next character,
            // default to space if it's the end of the line
            //
            nextChar = 0x20;
            if (pos < max) nextChar = text.charCodeAt(pos);
            else for(j = i + 1; j < tokens.length; j++){
                if (tokens[j].type === "softbreak" || tokens[j].type === "hardbreak") break; // nextChar defaults to 0x20
                if (!tokens[j].content) continue; // should skip all tokens except 'text', 'html_inline' or 'code_inline'
                nextChar = tokens[j].content.charCodeAt(0);
                break;
            }
            isLastPunctChar = isMdAsciiPunct(lastChar) || isPunctChar(String.fromCharCode(lastChar));
            isNextPunctChar = isMdAsciiPunct(nextChar) || isPunctChar(String.fromCharCode(nextChar));
            isLastWhiteSpace = isWhiteSpace(lastChar);
            isNextWhiteSpace = isWhiteSpace(nextChar);
            if (isNextWhiteSpace) canOpen = false;
            else if (isNextPunctChar) {
                if (!(isLastWhiteSpace || isLastPunctChar)) canOpen = false;
            }
            if (isLastWhiteSpace) canClose = false;
            else if (isLastPunctChar) {
                if (!(isNextWhiteSpace || isNextPunctChar)) canClose = false;
            }
            if (nextChar === 0x22 /* " */  && t[0] === '"') {
                if (lastChar >= 0x30 /* 0 */  && lastChar <= 0x39 /* 9 */ ) // special case: 1"" - count first quote as an inch
                canClose = canOpen = false;
            }
            if (canOpen && canClose) {
                // Replace quotes in the middle of punctuation sequence, but not
                // in the middle of the words, i.e.:
                //
                // 1. foo " bar " baz - not replaced
                // 2. foo-"-bar-"-baz - replaced
                // 3. foo"bar"baz     - not replaced
                //
                canOpen = isLastPunctChar;
                canClose = isNextPunctChar;
            }
            if (!canOpen && !canClose) {
                // middle of word
                if (isSingle) token.content = replaceAt(token.content, t.index, APOSTROPHE);
                continue;
            }
            if (canClose) // this could be a closing quote, rewind the stack to get a match
            for(j = stack.length - 1; j >= 0; j--){
                item = stack[j];
                if (stack[j].level < thisLevel) break;
                if (item.single === isSingle && stack[j].level === thisLevel) {
                    item = stack[j];
                    if (isSingle) {
                        openQuote = state.md.options.quotes[2];
                        closeQuote = state.md.options.quotes[3];
                    } else {
                        openQuote = state.md.options.quotes[0];
                        closeQuote = state.md.options.quotes[1];
                    }
                    // replace token.content *before* tokens[item.token].content,
                    // because, if they are pointing at the same token, replaceAt
                    // could mess up indices when quote length != 1
                    token.content = replaceAt(token.content, t.index, closeQuote);
                    tokens[item.token].content = replaceAt(tokens[item.token].content, item.pos, openQuote);
                    pos += closeQuote.length - 1;
                    if (item.token === i) pos += openQuote.length - 1;
                    text = token.content;
                    max = text.length;
                    stack.length = j;
                    continue OUTER;
                }
            }
            if (canOpen) stack.push({
                token: i,
                pos: t.index,
                single: isSingle,
                level: thisLevel
            });
            else if (canClose && isSingle) token.content = replaceAt(token.content, t.index, APOSTROPHE);
        }
    }
}
module.exports = function smartquotes(state) {
    /*eslint max-depth:0*/ var blkIdx;
    if (!state.md.options.typographer) return;
    for(blkIdx = state.tokens.length - 1; blkIdx >= 0; blkIdx--){
        if (state.tokens[blkIdx].type !== "inline" || !QUOTE_TEST_RE.test(state.tokens[blkIdx].content)) continue;
        process_inlines(state.tokens[blkIdx].children, state);
    }
};

},{"../common/utils":"fp3Yu"}],"kCwdF":[function(require,module,exports) {
// Core state object
//
"use strict";
var Token = require("../token");
function StateCore(src, md, env) {
    this.src = src;
    this.env = env;
    this.tokens = [];
    this.inlineMode = false;
    this.md = md; // link to parser instance
}
// re-export Token class to use in core rules
StateCore.prototype.Token = Token;
module.exports = StateCore;

},{"../token":"5BqGp"}],"5BqGp":[function(require,module,exports) {
// Token class
"use strict";
/**
 * class Token
 **/ /**
 * new Token(type, tag, nesting)
 *
 * Create new token and fill passed properties.
 **/ function Token(type, tag, nesting) {
    /**
   * Token#type -> String
   *
   * Type of the token (string, e.g. "paragraph_open")
   **/ this.type = type;
    /**
   * Token#tag -> String
   *
   * html tag name, e.g. "p"
   **/ this.tag = tag;
    /**
   * Token#attrs -> Array
   *
   * Html attributes. Format: `[ [ name1, value1 ], [ name2, value2 ] ]`
   **/ this.attrs = null;
    /**
   * Token#map -> Array
   *
   * Source map info. Format: `[ line_begin, line_end ]`
   **/ this.map = null;
    /**
   * Token#nesting -> Number
   *
   * Level change (number in {-1, 0, 1} set), where:
   *
   * -  `1` means the tag is opening
   * -  `0` means the tag is self-closing
   * - `-1` means the tag is closing
   **/ this.nesting = nesting;
    /**
   * Token#level -> Number
   *
   * nesting level, the same as `state.level`
   **/ this.level = 0;
    /**
   * Token#children -> Array
   *
   * An array of child nodes (inline and img tokens)
   **/ this.children = null;
    /**
   * Token#content -> String
   *
   * In a case of self-closing tag (code, html, fence, etc.),
   * it has contents of this tag.
   **/ this.content = "";
    /**
   * Token#markup -> String
   *
   * '*' or '_' for emphasis, fence string for fence, etc.
   **/ this.markup = "";
    /**
   * Token#info -> String
   *
   * Additional information:
   *
   * - Info string for "fence" tokens
   * - The value "auto" for autolink "link_open" and "link_close" tokens
   * - The string value of the item marker for ordered-list "list_item_open" tokens
   **/ this.info = "";
    /**
   * Token#meta -> Object
   *
   * A place for plugins to store an arbitrary data
   **/ this.meta = null;
    /**
   * Token#block -> Boolean
   *
   * True for block-level tokens, false for inline tokens.
   * Used in renderer to calculate line breaks
   **/ this.block = false;
    /**
   * Token#hidden -> Boolean
   *
   * If it's true, ignore this element when rendering. Used for tight lists
   * to hide paragraphs.
   **/ this.hidden = false;
}
/**
 * Token.attrIndex(name) -> Number
 *
 * Search attribute index by name.
 **/ Token.prototype.attrIndex = function attrIndex(name) {
    var attrs, i, len;
    if (!this.attrs) return -1;
    attrs = this.attrs;
    for(i = 0, len = attrs.length; i < len; i++){
        if (attrs[i][0] === name) return i;
    }
    return -1;
};
/**
 * Token.attrPush(attrData)
 *
 * Add `[ name, value ]` attribute to list. Init attrs if necessary
 **/ Token.prototype.attrPush = function attrPush(attrData) {
    if (this.attrs) this.attrs.push(attrData);
    else this.attrs = [
        attrData
    ];
};
/**
 * Token.attrSet(name, value)
 *
 * Set `name` attribute to `value`. Override old value if exists.
 **/ Token.prototype.attrSet = function attrSet(name, value) {
    var idx = this.attrIndex(name), attrData = [
        name,
        value
    ];
    if (idx < 0) this.attrPush(attrData);
    else this.attrs[idx] = attrData;
};
/**
 * Token.attrGet(name)
 *
 * Get the value of attribute `name`, or null if it does not exist.
 **/ Token.prototype.attrGet = function attrGet(name) {
    var idx = this.attrIndex(name), value = null;
    if (idx >= 0) value = this.attrs[idx][1];
    return value;
};
/**
 * Token.attrJoin(name, value)
 *
 * Join value to existing attribute via space. Or create new attribute if not
 * exists. Useful to operate with token classes.
 **/ Token.prototype.attrJoin = function attrJoin(name, value) {
    var idx = this.attrIndex(name);
    if (idx < 0) this.attrPush([
        name,
        value
    ]);
    else this.attrs[idx][1] = this.attrs[idx][1] + " " + value;
};
module.exports = Token;

},{}],"45OVj":[function(require,module,exports) {
/** internal
 * class ParserBlock
 *
 * Block-level tokenizer.
 **/ "use strict";
var Ruler = require("./ruler");
var _rules = [
    // First 2 params - rule name & source. Secondary array - list of rules,
    // which can be terminated by this one.
    [
        "table",
        require("./rules_block/table"),
        [
            "paragraph",
            "reference"
        ]
    ],
    [
        "code",
        require("./rules_block/code")
    ],
    [
        "fence",
        require("./rules_block/fence"),
        [
            "paragraph",
            "reference",
            "blockquote",
            "list"
        ]
    ],
    [
        "blockquote",
        require("./rules_block/blockquote"),
        [
            "paragraph",
            "reference",
            "blockquote",
            "list"
        ]
    ],
    [
        "hr",
        require("./rules_block/hr"),
        [
            "paragraph",
            "reference",
            "blockquote",
            "list"
        ]
    ],
    [
        "list",
        require("./rules_block/list"),
        [
            "paragraph",
            "reference",
            "blockquote"
        ]
    ],
    [
        "reference",
        require("./rules_block/reference")
    ],
    [
        "html_block",
        require("./rules_block/html_block"),
        [
            "paragraph",
            "reference",
            "blockquote"
        ]
    ],
    [
        "heading",
        require("./rules_block/heading"),
        [
            "paragraph",
            "reference",
            "blockquote"
        ]
    ],
    [
        "lheading",
        require("./rules_block/lheading")
    ],
    [
        "paragraph",
        require("./rules_block/paragraph")
    ]
];
/**
 * new ParserBlock()
 **/ function ParserBlock() {
    /**
   * ParserBlock#ruler -> Ruler
   *
   * [[Ruler]] instance. Keep configuration of block rules.
   **/ this.ruler = new Ruler();
    for(var i = 0; i < _rules.length; i++)this.ruler.push(_rules[i][0], _rules[i][1], {
        alt: (_rules[i][2] || []).slice()
    });
}
// Generate tokens for input range
//
ParserBlock.prototype.tokenize = function(state, startLine, endLine) {
    var ok, i, rules = this.ruler.getRules(""), len = rules.length, line = startLine, hasEmptyLines = false, maxNesting = state.md.options.maxNesting;
    while(line < endLine){
        state.line = line = state.skipEmptyLines(line);
        if (line >= endLine) break;
        // Termination condition for nested calls.
        // Nested calls currently used for blockquotes & lists
        if (state.sCount[line] < state.blkIndent) break;
        // If nesting level exceeded - skip tail to the end. That's not ordinary
        // situation and we should not care about content.
        if (state.level >= maxNesting) {
            state.line = endLine;
            break;
        }
        // Try all possible rules.
        // On success, rule should:
        //
        // - update `state.line`
        // - update `state.tokens`
        // - return true
        for(i = 0; i < len; i++){
            ok = rules[i](state, line, endLine, false);
            if (ok) break;
        }
        // set state.tight if we had an empty line before current tag
        // i.e. latest empty line should not count
        state.tight = !hasEmptyLines;
        // paragraph might "eat" one newline after it in nested lists
        if (state.isEmpty(state.line - 1)) hasEmptyLines = true;
        line = state.line;
        if (line < endLine && state.isEmpty(line)) {
            hasEmptyLines = true;
            line++;
            state.line = line;
        }
    }
};
/**
 * ParserBlock.parse(str, md, env, outTokens)
 *
 * Process input string and push block tokens into `outTokens`
 **/ ParserBlock.prototype.parse = function(src, md, env, outTokens) {
    var state;
    if (!src) return;
    state = new this.State(src, md, env, outTokens);
    this.tokenize(state, state.line, state.lineMax);
};
ParserBlock.prototype.State = require("./rules_block/state_block");
module.exports = ParserBlock;

},{"./ruler":"iVWwo","./rules_block/table":"7h2bm","./rules_block/code":"kzCLk","./rules_block/fence":"7H86Z","./rules_block/blockquote":"iHrzQ","./rules_block/hr":"i6zSA","./rules_block/list":"8MWMe","./rules_block/reference":"3qPyg","./rules_block/html_block":"2LbOe","./rules_block/heading":"9JCP7","./rules_block/lheading":"jb6LI","./rules_block/paragraph":"l91ew","./rules_block/state_block":"krNTo"}],"7h2bm":[function(require,module,exports) {
// GFM table, https://github.github.com/gfm/#tables-extension-
"use strict";
var isSpace = require("../common/utils").isSpace;
function getLine(state, line) {
    var pos = state.bMarks[line] + state.tShift[line], max = state.eMarks[line];
    return state.src.substr(pos, max - pos);
}
function escapedSplit(str) {
    var result = [], pos = 0, max = str.length, ch, isEscaped = false, lastPos = 0, current = "";
    ch = str.charCodeAt(pos);
    while(pos < max){
        if (ch === 0x7c /* | */ ) {
            if (!isEscaped) {
                // pipe separating cells, '|'
                result.push(current + str.substring(lastPos, pos));
                current = "";
                lastPos = pos + 1;
            } else {
                // escaped pipe, '\|'
                current += str.substring(lastPos, pos - 1);
                lastPos = pos;
            }
        }
        isEscaped = ch === 0x5c /* \ */ ;
        pos++;
        ch = str.charCodeAt(pos);
    }
    result.push(current + str.substring(lastPos));
    return result;
}
module.exports = function table(state, startLine, endLine, silent) {
    var ch, lineText, pos, i, l, nextLine, columns, columnCount, token, aligns, t, tableLines, tbodyLines, oldParentType, terminate, terminatorRules, firstCh, secondCh;
    // should have at least two lines
    if (startLine + 2 > endLine) return false;
    nextLine = startLine + 1;
    if (state.sCount[nextLine] < state.blkIndent) return false;
    // if it's indented more than 3 spaces, it should be a code block
    if (state.sCount[nextLine] - state.blkIndent >= 4) return false;
    // first character of the second line should be '|', '-', ':',
    // and no other characters are allowed but spaces;
    // basically, this is the equivalent of /^[-:|][-:|\s]*$/ regexp
    pos = state.bMarks[nextLine] + state.tShift[nextLine];
    if (pos >= state.eMarks[nextLine]) return false;
    firstCh = state.src.charCodeAt(pos++);
    if (firstCh !== 0x7C /* | */  && firstCh !== 0x2D /* - */  && firstCh !== 0x3A /* : */ ) return false;
    if (pos >= state.eMarks[nextLine]) return false;
    secondCh = state.src.charCodeAt(pos++);
    if (secondCh !== 0x7C /* | */  && secondCh !== 0x2D /* - */  && secondCh !== 0x3A /* : */  && !isSpace(secondCh)) return false;
    // if first character is '-', then second character must not be a space
    // (due to parsing ambiguity with list)
    if (firstCh === 0x2D /* - */  && isSpace(secondCh)) return false;
    while(pos < state.eMarks[nextLine]){
        ch = state.src.charCodeAt(pos);
        if (ch !== 0x7C /* | */  && ch !== 0x2D /* - */  && ch !== 0x3A /* : */  && !isSpace(ch)) return false;
        pos++;
    }
    lineText = getLine(state, startLine + 1);
    columns = lineText.split("|");
    aligns = [];
    for(i = 0; i < columns.length; i++){
        t = columns[i].trim();
        if (!t) {
            // allow empty columns before and after table, but not in between columns;
            // e.g. allow ` |---| `, disallow ` ---||--- `
            if (i === 0 || i === columns.length - 1) continue;
            else return false;
        }
        if (!/^:?-+:?$/.test(t)) return false;
        if (t.charCodeAt(t.length - 1) === 0x3A /* : */ ) aligns.push(t.charCodeAt(0) === 0x3A /* : */  ? "center" : "right");
        else if (t.charCodeAt(0) === 0x3A /* : */ ) aligns.push("left");
        else aligns.push("");
    }
    lineText = getLine(state, startLine).trim();
    if (lineText.indexOf("|") === -1) return false;
    if (state.sCount[startLine] - state.blkIndent >= 4) return false;
    columns = escapedSplit(lineText);
    if (columns.length && columns[0] === "") columns.shift();
    if (columns.length && columns[columns.length - 1] === "") columns.pop();
    // header row will define an amount of columns in the entire table,
    // and align row should be exactly the same (the rest of the rows can differ)
    columnCount = columns.length;
    if (columnCount === 0 || columnCount !== aligns.length) return false;
    if (silent) return true;
    oldParentType = state.parentType;
    state.parentType = "table";
    // use 'blockquote' lists for termination because it's
    // the most similar to tables
    terminatorRules = state.md.block.ruler.getRules("blockquote");
    token = state.push("table_open", "table", 1);
    token.map = tableLines = [
        startLine,
        0
    ];
    token = state.push("thead_open", "thead", 1);
    token.map = [
        startLine,
        startLine + 1
    ];
    token = state.push("tr_open", "tr", 1);
    token.map = [
        startLine,
        startLine + 1
    ];
    for(i = 0; i < columns.length; i++){
        token = state.push("th_open", "th", 1);
        if (aligns[i]) token.attrs = [
            [
                "style",
                "text-align:" + aligns[i]
            ]
        ];
        token = state.push("inline", "", 0);
        token.content = columns[i].trim();
        token.children = [];
        token = state.push("th_close", "th", -1);
    }
    token = state.push("tr_close", "tr", -1);
    token = state.push("thead_close", "thead", -1);
    for(nextLine = startLine + 2; nextLine < endLine; nextLine++){
        if (state.sCount[nextLine] < state.blkIndent) break;
        terminate = false;
        for(i = 0, l = terminatorRules.length; i < l; i++)if (terminatorRules[i](state, nextLine, endLine, true)) {
            terminate = true;
            break;
        }
        if (terminate) break;
        lineText = getLine(state, nextLine).trim();
        if (!lineText) break;
        if (state.sCount[nextLine] - state.blkIndent >= 4) break;
        columns = escapedSplit(lineText);
        if (columns.length && columns[0] === "") columns.shift();
        if (columns.length && columns[columns.length - 1] === "") columns.pop();
        if (nextLine === startLine + 2) {
            token = state.push("tbody_open", "tbody", 1);
            token.map = tbodyLines = [
                startLine + 2,
                0
            ];
        }
        token = state.push("tr_open", "tr", 1);
        token.map = [
            nextLine,
            nextLine + 1
        ];
        for(i = 0; i < columnCount; i++){
            token = state.push("td_open", "td", 1);
            if (aligns[i]) token.attrs = [
                [
                    "style",
                    "text-align:" + aligns[i]
                ]
            ];
            token = state.push("inline", "", 0);
            token.content = columns[i] ? columns[i].trim() : "";
            token.children = [];
            token = state.push("td_close", "td", -1);
        }
        token = state.push("tr_close", "tr", -1);
    }
    if (tbodyLines) {
        token = state.push("tbody_close", "tbody", -1);
        tbodyLines[1] = nextLine;
    }
    token = state.push("table_close", "table", -1);
    tableLines[1] = nextLine;
    state.parentType = oldParentType;
    state.line = nextLine;
    return true;
};

},{"../common/utils":"fp3Yu"}],"kzCLk":[function(require,module,exports) {
// Code block (4 spaces padded)
"use strict";
module.exports = function code(state, startLine, endLine /*, silent*/ ) {
    var nextLine, last, token;
    if (state.sCount[startLine] - state.blkIndent < 4) return false;
    last = nextLine = startLine + 1;
    while(nextLine < endLine){
        if (state.isEmpty(nextLine)) {
            nextLine++;
            continue;
        }
        if (state.sCount[nextLine] - state.blkIndent >= 4) {
            nextLine++;
            last = nextLine;
            continue;
        }
        break;
    }
    state.line = last;
    token = state.push("code_block", "code", 0);
    token.content = state.getLines(startLine, last, 4 + state.blkIndent, false) + "\n";
    token.map = [
        startLine,
        state.line
    ];
    return true;
};

},{}],"7H86Z":[function(require,module,exports) {
// fences (``` lang, ~~~ lang)
"use strict";
module.exports = function fence(state, startLine, endLine, silent) {
    var marker, len, params, nextLine, mem, token, markup, haveEndMarker = false, pos = state.bMarks[startLine] + state.tShift[startLine], max = state.eMarks[startLine];
    // if it's indented more than 3 spaces, it should be a code block
    if (state.sCount[startLine] - state.blkIndent >= 4) return false;
    if (pos + 3 > max) return false;
    marker = state.src.charCodeAt(pos);
    if (marker !== 0x7E /* ~ */  && marker !== 0x60 /* ` */ ) return false;
    // scan marker length
    mem = pos;
    pos = state.skipChars(pos, marker);
    len = pos - mem;
    if (len < 3) return false;
    markup = state.src.slice(mem, pos);
    params = state.src.slice(pos, max);
    if (marker === 0x60 /* ` */ ) {
        if (params.indexOf(String.fromCharCode(marker)) >= 0) return false;
    }
    // Since start is found, we can report success here in validation mode
    if (silent) return true;
    // search end of block
    nextLine = startLine;
    for(;;){
        nextLine++;
        if (nextLine >= endLine) break;
        pos = mem = state.bMarks[nextLine] + state.tShift[nextLine];
        max = state.eMarks[nextLine];
        if (pos < max && state.sCount[nextLine] < state.blkIndent) break;
        if (state.src.charCodeAt(pos) !== marker) continue;
        if (state.sCount[nextLine] - state.blkIndent >= 4) continue;
        pos = state.skipChars(pos, marker);
        // closing code fence must be at least as long as the opening one
        if (pos - mem < len) continue;
        // make sure tail has spaces only
        pos = state.skipSpaces(pos);
        if (pos < max) continue;
        haveEndMarker = true;
        break;
    }
    // If a fence has heading spaces, they should be removed from its inner block
    len = state.sCount[startLine];
    state.line = nextLine + (haveEndMarker ? 1 : 0);
    token = state.push("fence", "code", 0);
    token.info = params;
    token.content = state.getLines(startLine + 1, nextLine, len, true);
    token.markup = markup;
    token.map = [
        startLine,
        state.line
    ];
    return true;
};

},{}],"iHrzQ":[function(require,module,exports) {
// Block quotes
"use strict";
var isSpace = require("../common/utils").isSpace;
module.exports = function blockquote(state, startLine, endLine, silent) {
    var adjustTab, ch, i, initial, l, lastLineEmpty, lines, nextLine, offset, oldBMarks, oldBSCount, oldIndent, oldParentType, oldSCount, oldTShift, spaceAfterMarker, terminate, terminatorRules, token, isOutdented, oldLineMax = state.lineMax, pos = state.bMarks[startLine] + state.tShift[startLine], max = state.eMarks[startLine];
    // if it's indented more than 3 spaces, it should be a code block
    if (state.sCount[startLine] - state.blkIndent >= 4) return false;
    // check the block quote marker
    if (state.src.charCodeAt(pos++) !== 0x3E /* > */ ) return false;
    // we know that it's going to be a valid blockquote,
    // so no point trying to find the end of it in silent mode
    if (silent) return true;
    // set offset past spaces and ">"
    initial = offset = state.sCount[startLine] + 1;
    // skip one optional space after '>'
    if (state.src.charCodeAt(pos) === 0x20 /* space */ ) {
        // ' >   test '
        //     ^ -- position start of line here:
        pos++;
        initial++;
        offset++;
        adjustTab = false;
        spaceAfterMarker = true;
    } else if (state.src.charCodeAt(pos) === 0x09 /* tab */ ) {
        spaceAfterMarker = true;
        if ((state.bsCount[startLine] + offset) % 4 === 3) {
            // '  >\t  test '
            //       ^ -- position start of line here (tab has width===1)
            pos++;
            initial++;
            offset++;
            adjustTab = false;
        } else // ' >\t  test '
        //    ^ -- position start of line here + shift bsCount slightly
        //         to make extra space appear
        adjustTab = true;
    } else spaceAfterMarker = false;
    oldBMarks = [
        state.bMarks[startLine]
    ];
    state.bMarks[startLine] = pos;
    while(pos < max){
        ch = state.src.charCodeAt(pos);
        if (isSpace(ch)) {
            if (ch === 0x09) offset += 4 - (offset + state.bsCount[startLine] + (adjustTab ? 1 : 0)) % 4;
            else offset++;
        } else break;
        pos++;
    }
    oldBSCount = [
        state.bsCount[startLine]
    ];
    state.bsCount[startLine] = state.sCount[startLine] + 1 + (spaceAfterMarker ? 1 : 0);
    lastLineEmpty = pos >= max;
    oldSCount = [
        state.sCount[startLine]
    ];
    state.sCount[startLine] = offset - initial;
    oldTShift = [
        state.tShift[startLine]
    ];
    state.tShift[startLine] = pos - state.bMarks[startLine];
    terminatorRules = state.md.block.ruler.getRules("blockquote");
    oldParentType = state.parentType;
    state.parentType = "blockquote";
    // Search the end of the block
    //
    // Block ends with either:
    //  1. an empty line outside:
    //     ```
    //     > test
    //
    //     ```
    //  2. an empty line inside:
    //     ```
    //     >
    //     test
    //     ```
    //  3. another tag:
    //     ```
    //     > test
    //      - - -
    //     ```
    for(nextLine = startLine + 1; nextLine < endLine; nextLine++){
        // check if it's outdented, i.e. it's inside list item and indented
        // less than said list item:
        //
        // ```
        // 1. anything
        //    > current blockquote
        // 2. checking this line
        // ```
        isOutdented = state.sCount[nextLine] < state.blkIndent;
        pos = state.bMarks[nextLine] + state.tShift[nextLine];
        max = state.eMarks[nextLine];
        if (pos >= max) break;
        if (state.src.charCodeAt(pos++) === 0x3E /* > */  && !isOutdented) {
            // This line is inside the blockquote.
            // set offset past spaces and ">"
            initial = offset = state.sCount[nextLine] + 1;
            // skip one optional space after '>'
            if (state.src.charCodeAt(pos) === 0x20 /* space */ ) {
                // ' >   test '
                //     ^ -- position start of line here:
                pos++;
                initial++;
                offset++;
                adjustTab = false;
                spaceAfterMarker = true;
            } else if (state.src.charCodeAt(pos) === 0x09 /* tab */ ) {
                spaceAfterMarker = true;
                if ((state.bsCount[nextLine] + offset) % 4 === 3) {
                    // '  >\t  test '
                    //       ^ -- position start of line here (tab has width===1)
                    pos++;
                    initial++;
                    offset++;
                    adjustTab = false;
                } else // ' >\t  test '
                //    ^ -- position start of line here + shift bsCount slightly
                //         to make extra space appear
                adjustTab = true;
            } else spaceAfterMarker = false;
            oldBMarks.push(state.bMarks[nextLine]);
            state.bMarks[nextLine] = pos;
            while(pos < max){
                ch = state.src.charCodeAt(pos);
                if (isSpace(ch)) {
                    if (ch === 0x09) offset += 4 - (offset + state.bsCount[nextLine] + (adjustTab ? 1 : 0)) % 4;
                    else offset++;
                } else break;
                pos++;
            }
            lastLineEmpty = pos >= max;
            oldBSCount.push(state.bsCount[nextLine]);
            state.bsCount[nextLine] = state.sCount[nextLine] + 1 + (spaceAfterMarker ? 1 : 0);
            oldSCount.push(state.sCount[nextLine]);
            state.sCount[nextLine] = offset - initial;
            oldTShift.push(state.tShift[nextLine]);
            state.tShift[nextLine] = pos - state.bMarks[nextLine];
            continue;
        }
        // Case 2: line is not inside the blockquote, and the last line was empty.
        if (lastLineEmpty) break;
        // Case 3: another tag found.
        terminate = false;
        for(i = 0, l = terminatorRules.length; i < l; i++)if (terminatorRules[i](state, nextLine, endLine, true)) {
            terminate = true;
            break;
        }
        if (terminate) {
            // Quirk to enforce "hard termination mode" for paragraphs;
            // normally if you call `tokenize(state, startLine, nextLine)`,
            // paragraphs will look below nextLine for paragraph continuation,
            // but if blockquote is terminated by another tag, they shouldn't
            state.lineMax = nextLine;
            if (state.blkIndent !== 0) {
                // state.blkIndent was non-zero, we now set it to zero,
                // so we need to re-calculate all offsets to appear as
                // if indent wasn't changed
                oldBMarks.push(state.bMarks[nextLine]);
                oldBSCount.push(state.bsCount[nextLine]);
                oldTShift.push(state.tShift[nextLine]);
                oldSCount.push(state.sCount[nextLine]);
                state.sCount[nextLine] -= state.blkIndent;
            }
            break;
        }
        oldBMarks.push(state.bMarks[nextLine]);
        oldBSCount.push(state.bsCount[nextLine]);
        oldTShift.push(state.tShift[nextLine]);
        oldSCount.push(state.sCount[nextLine]);
        // A negative indentation means that this is a paragraph continuation
        //
        state.sCount[nextLine] = -1;
    }
    oldIndent = state.blkIndent;
    state.blkIndent = 0;
    token = state.push("blockquote_open", "blockquote", 1);
    token.markup = ">";
    token.map = lines = [
        startLine,
        0
    ];
    state.md.block.tokenize(state, startLine, nextLine);
    token = state.push("blockquote_close", "blockquote", -1);
    token.markup = ">";
    state.lineMax = oldLineMax;
    state.parentType = oldParentType;
    lines[1] = state.line;
    // Restore original tShift; this might not be necessary since the parser
    // has already been here, but just to make sure we can do that.
    for(i = 0; i < oldTShift.length; i++){
        state.bMarks[i + startLine] = oldBMarks[i];
        state.tShift[i + startLine] = oldTShift[i];
        state.sCount[i + startLine] = oldSCount[i];
        state.bsCount[i + startLine] = oldBSCount[i];
    }
    state.blkIndent = oldIndent;
    return true;
};

},{"../common/utils":"fp3Yu"}],"i6zSA":[function(require,module,exports) {
// Horizontal rule
"use strict";
var isSpace = require("../common/utils").isSpace;
module.exports = function hr(state, startLine, endLine, silent) {
    var marker, cnt, ch, token, pos = state.bMarks[startLine] + state.tShift[startLine], max = state.eMarks[startLine];
    // if it's indented more than 3 spaces, it should be a code block
    if (state.sCount[startLine] - state.blkIndent >= 4) return false;
    marker = state.src.charCodeAt(pos++);
    // Check hr marker
    if (marker !== 0x2A /* * */  && marker !== 0x2D /* - */  && marker !== 0x5F /* _ */ ) return false;
    // markers can be mixed with spaces, but there should be at least 3 of them
    cnt = 1;
    while(pos < max){
        ch = state.src.charCodeAt(pos++);
        if (ch !== marker && !isSpace(ch)) return false;
        if (ch === marker) cnt++;
    }
    if (cnt < 3) return false;
    if (silent) return true;
    state.line = startLine + 1;
    token = state.push("hr", "hr", 0);
    token.map = [
        startLine,
        state.line
    ];
    token.markup = Array(cnt + 1).join(String.fromCharCode(marker));
    return true;
};

},{"../common/utils":"fp3Yu"}],"8MWMe":[function(require,module,exports) {
// Lists
"use strict";
var isSpace = require("../common/utils").isSpace;
// Search `[-+*][\n ]`, returns next pos after marker on success
// or -1 on fail.
function skipBulletListMarker(state, startLine) {
    var marker, pos, max, ch;
    pos = state.bMarks[startLine] + state.tShift[startLine];
    max = state.eMarks[startLine];
    marker = state.src.charCodeAt(pos++);
    // Check bullet
    if (marker !== 0x2A /* * */  && marker !== 0x2D /* - */  && marker !== 0x2B /* + */ ) return -1;
    if (pos < max) {
        ch = state.src.charCodeAt(pos);
        if (!isSpace(ch)) // " -test " - is not a list item
        return -1;
    }
    return pos;
}
// Search `\d+[.)][\n ]`, returns next pos after marker on success
// or -1 on fail.
function skipOrderedListMarker(state, startLine) {
    var ch, start = state.bMarks[startLine] + state.tShift[startLine], pos = start, max = state.eMarks[startLine];
    // List marker should have at least 2 chars (digit + dot)
    if (pos + 1 >= max) return -1;
    ch = state.src.charCodeAt(pos++);
    if (ch < 0x30 /* 0 */  || ch > 0x39 /* 9 */ ) return -1;
    for(;;){
        // EOL -> fail
        if (pos >= max) return -1;
        ch = state.src.charCodeAt(pos++);
        if (ch >= 0x30 /* 0 */  && ch <= 0x39 /* 9 */ ) {
            // List marker should have no more than 9 digits
            // (prevents integer overflow in browsers)
            if (pos - start >= 10) return -1;
            continue;
        }
        // found valid marker
        if (ch === 0x29 /* ) */  || ch === 0x2e /* . */ ) break;
        return -1;
    }
    if (pos < max) {
        ch = state.src.charCodeAt(pos);
        if (!isSpace(ch)) // " 1.test " - is not a list item
        return -1;
    }
    return pos;
}
function markTightParagraphs(state, idx) {
    var i, l, level = state.level + 2;
    for(i = idx + 2, l = state.tokens.length - 2; i < l; i++)if (state.tokens[i].level === level && state.tokens[i].type === "paragraph_open") {
        state.tokens[i + 2].hidden = true;
        state.tokens[i].hidden = true;
        i += 2;
    }
}
module.exports = function list(state, startLine, endLine, silent) {
    var ch, contentStart, i, indent, indentAfterMarker, initial, isOrdered, itemLines, l, listLines, listTokIdx, markerCharCode, markerValue, max, nextLine, offset, oldListIndent, oldParentType, oldSCount, oldTShift, oldTight, pos, posAfterMarker, prevEmptyEnd, start, terminate, terminatorRules, token, isTerminatingParagraph = false, tight = true;
    // if it's indented more than 3 spaces, it should be a code block
    if (state.sCount[startLine] - state.blkIndent >= 4) return false;
    // Special case:
    //  - item 1
    //   - item 2
    //    - item 3
    //     - item 4
    //      - this one is a paragraph continuation
    if (state.listIndent >= 0 && state.sCount[startLine] - state.listIndent >= 4 && state.sCount[startLine] < state.blkIndent) return false;
    // limit conditions when list can interrupt
    // a paragraph (validation mode only)
    if (silent && state.parentType === "paragraph") // Next list item should still terminate previous list item;
    //
    // This code can fail if plugins use blkIndent as well as lists,
    // but I hope the spec gets fixed long before that happens.
    //
    {
        if (state.sCount[startLine] >= state.blkIndent) isTerminatingParagraph = true;
    }
    // Detect list type and position after marker
    if ((posAfterMarker = skipOrderedListMarker(state, startLine)) >= 0) {
        isOrdered = true;
        start = state.bMarks[startLine] + state.tShift[startLine];
        markerValue = Number(state.src.slice(start, posAfterMarker - 1));
        // If we're starting a new ordered list right after
        // a paragraph, it should start with 1.
        if (isTerminatingParagraph && markerValue !== 1) return false;
    } else if ((posAfterMarker = skipBulletListMarker(state, startLine)) >= 0) isOrdered = false;
    else return false;
    // If we're starting a new unordered list right after
    // a paragraph, first line should not be empty.
    if (isTerminatingParagraph) {
        if (state.skipSpaces(posAfterMarker) >= state.eMarks[startLine]) return false;
    }
    // We should terminate list on style change. Remember first one to compare.
    markerCharCode = state.src.charCodeAt(posAfterMarker - 1);
    // For validation mode we can terminate immediately
    if (silent) return true;
    // Start list
    listTokIdx = state.tokens.length;
    if (isOrdered) {
        token = state.push("ordered_list_open", "ol", 1);
        if (markerValue !== 1) token.attrs = [
            [
                "start",
                markerValue
            ]
        ];
    } else token = state.push("bullet_list_open", "ul", 1);
    token.map = listLines = [
        startLine,
        0
    ];
    token.markup = String.fromCharCode(markerCharCode);
    //
    // Iterate list items
    //
    nextLine = startLine;
    prevEmptyEnd = false;
    terminatorRules = state.md.block.ruler.getRules("list");
    oldParentType = state.parentType;
    state.parentType = "list";
    while(nextLine < endLine){
        pos = posAfterMarker;
        max = state.eMarks[nextLine];
        initial = offset = state.sCount[nextLine] + posAfterMarker - (state.bMarks[startLine] + state.tShift[startLine]);
        while(pos < max){
            ch = state.src.charCodeAt(pos);
            if (ch === 0x09) offset += 4 - (offset + state.bsCount[nextLine]) % 4;
            else if (ch === 0x20) offset++;
            else break;
            pos++;
        }
        contentStart = pos;
        if (contentStart >= max) // trimming space in "-    \n  3" case, indent is 1 here
        indentAfterMarker = 1;
        else indentAfterMarker = offset - initial;
        // If we have more than 4 spaces, the indent is 1
        // (the rest is just indented code block)
        if (indentAfterMarker > 4) indentAfterMarker = 1;
        // "  -  test"
        //  ^^^^^ - calculating total length of this thing
        indent = initial + indentAfterMarker;
        // Run subparser & write tokens
        token = state.push("list_item_open", "li", 1);
        token.markup = String.fromCharCode(markerCharCode);
        token.map = itemLines = [
            startLine,
            0
        ];
        if (isOrdered) token.info = state.src.slice(start, posAfterMarker - 1);
        // change current state, then restore it after parser subcall
        oldTight = state.tight;
        oldTShift = state.tShift[startLine];
        oldSCount = state.sCount[startLine];
        //  - example list
        // ^ listIndent position will be here
        //   ^ blkIndent position will be here
        //
        oldListIndent = state.listIndent;
        state.listIndent = state.blkIndent;
        state.blkIndent = indent;
        state.tight = true;
        state.tShift[startLine] = contentStart - state.bMarks[startLine];
        state.sCount[startLine] = offset;
        if (contentStart >= max && state.isEmpty(startLine + 1)) // workaround for this case
        // (list item is empty, list terminates before "foo"):
        // ~~~~~~~~
        //   -
        //
        //     foo
        // ~~~~~~~~
        state.line = Math.min(state.line + 2, endLine);
        else state.md.block.tokenize(state, startLine, endLine, true);
        // If any of list item is tight, mark list as tight
        if (!state.tight || prevEmptyEnd) tight = false;
        // Item become loose if finish with empty line,
        // but we should filter last element, because it means list finish
        prevEmptyEnd = state.line - startLine > 1 && state.isEmpty(state.line - 1);
        state.blkIndent = state.listIndent;
        state.listIndent = oldListIndent;
        state.tShift[startLine] = oldTShift;
        state.sCount[startLine] = oldSCount;
        state.tight = oldTight;
        token = state.push("list_item_close", "li", -1);
        token.markup = String.fromCharCode(markerCharCode);
        nextLine = startLine = state.line;
        itemLines[1] = nextLine;
        contentStart = state.bMarks[startLine];
        if (nextLine >= endLine) break;
        //
        // Try to check if list is terminated or continued.
        //
        if (state.sCount[nextLine] < state.blkIndent) break;
        // if it's indented more than 3 spaces, it should be a code block
        if (state.sCount[startLine] - state.blkIndent >= 4) break;
        // fail if terminating block found
        terminate = false;
        for(i = 0, l = terminatorRules.length; i < l; i++)if (terminatorRules[i](state, nextLine, endLine, true)) {
            terminate = true;
            break;
        }
        if (terminate) break;
        // fail if list has another type
        if (isOrdered) {
            posAfterMarker = skipOrderedListMarker(state, nextLine);
            if (posAfterMarker < 0) break;
            start = state.bMarks[nextLine] + state.tShift[nextLine];
        } else {
            posAfterMarker = skipBulletListMarker(state, nextLine);
            if (posAfterMarker < 0) break;
        }
        if (markerCharCode !== state.src.charCodeAt(posAfterMarker - 1)) break;
    }
    // Finalize list
    if (isOrdered) token = state.push("ordered_list_close", "ol", -1);
    else token = state.push("bullet_list_close", "ul", -1);
    token.markup = String.fromCharCode(markerCharCode);
    listLines[1] = nextLine;
    state.line = nextLine;
    state.parentType = oldParentType;
    // mark paragraphs tight if needed
    if (tight) markTightParagraphs(state, listTokIdx);
    return true;
};

},{"../common/utils":"fp3Yu"}],"3qPyg":[function(require,module,exports) {
"use strict";
var normalizeReference = require("../common/utils").normalizeReference;
var isSpace = require("../common/utils").isSpace;
module.exports = function reference(state, startLine, _endLine, silent) {
    var ch, destEndPos, destEndLineNo, endLine, href, i, l, label, labelEnd, oldParentType, res, start, str, terminate, terminatorRules, title, lines = 0, pos = state.bMarks[startLine] + state.tShift[startLine], max = state.eMarks[startLine], nextLine = startLine + 1;
    // if it's indented more than 3 spaces, it should be a code block
    if (state.sCount[startLine] - state.blkIndent >= 4) return false;
    if (state.src.charCodeAt(pos) !== 0x5B /* [ */ ) return false;
    // Simple check to quickly interrupt scan on [link](url) at the start of line.
    // Can be useful on practice: https://github.com/markdown-it/markdown-it/issues/54
    while(++pos < max)if (state.src.charCodeAt(pos) === 0x5D /* ] */  && state.src.charCodeAt(pos - 1) !== 0x5C /* \ */ ) {
        if (pos + 1 === max) return false;
        if (state.src.charCodeAt(pos + 1) !== 0x3A /* : */ ) return false;
        break;
    }
    endLine = state.lineMax;
    // jump line-by-line until empty one or EOF
    terminatorRules = state.md.block.ruler.getRules("reference");
    oldParentType = state.parentType;
    state.parentType = "reference";
    for(; nextLine < endLine && !state.isEmpty(nextLine); nextLine++){
        // this would be a code block normally, but after paragraph
        // it's considered a lazy continuation regardless of what's there
        if (state.sCount[nextLine] - state.blkIndent > 3) continue;
        // quirk for blockquotes, this line should already be checked by that rule
        if (state.sCount[nextLine] < 0) continue;
        // Some tags can terminate paragraph without empty line.
        terminate = false;
        for(i = 0, l = terminatorRules.length; i < l; i++)if (terminatorRules[i](state, nextLine, endLine, true)) {
            terminate = true;
            break;
        }
        if (terminate) break;
    }
    str = state.getLines(startLine, nextLine, state.blkIndent, false).trim();
    max = str.length;
    for(pos = 1; pos < max; pos++){
        ch = str.charCodeAt(pos);
        if (ch === 0x5B /* [ */ ) return false;
        else if (ch === 0x5D /* ] */ ) {
            labelEnd = pos;
            break;
        } else if (ch === 0x0A /* \n */ ) lines++;
        else if (ch === 0x5C /* \ */ ) {
            pos++;
            if (pos < max && str.charCodeAt(pos) === 0x0A) lines++;
        }
    }
    if (labelEnd < 0 || str.charCodeAt(labelEnd + 1) !== 0x3A /* : */ ) return false;
    // [label]:   destination   'title'
    //         ^^^ skip optional whitespace here
    for(pos = labelEnd + 2; pos < max; pos++){
        ch = str.charCodeAt(pos);
        if (ch === 0x0A) lines++;
        else if (isSpace(ch)) ;
        else break;
    }
    // [label]:   destination   'title'
    //            ^^^^^^^^^^^ parse this
    res = state.md.helpers.parseLinkDestination(str, pos, max);
    if (!res.ok) return false;
    href = state.md.normalizeLink(res.str);
    if (!state.md.validateLink(href)) return false;
    pos = res.pos;
    lines += res.lines;
    // save cursor state, we could require to rollback later
    destEndPos = pos;
    destEndLineNo = lines;
    // [label]:   destination   'title'
    //                       ^^^ skipping those spaces
    start = pos;
    for(; pos < max; pos++){
        ch = str.charCodeAt(pos);
        if (ch === 0x0A) lines++;
        else if (isSpace(ch)) ;
        else break;
    }
    // [label]:   destination   'title'
    //                          ^^^^^^^ parse this
    res = state.md.helpers.parseLinkTitle(str, pos, max);
    if (pos < max && start !== pos && res.ok) {
        title = res.str;
        pos = res.pos;
        lines += res.lines;
    } else {
        title = "";
        pos = destEndPos;
        lines = destEndLineNo;
    }
    // skip trailing spaces until the rest of the line
    while(pos < max){
        ch = str.charCodeAt(pos);
        if (!isSpace(ch)) break;
        pos++;
    }
    if (pos < max && str.charCodeAt(pos) !== 0x0A) {
        if (title) {
            // garbage at the end of the line after title,
            // but it could still be a valid reference if we roll back
            title = "";
            pos = destEndPos;
            lines = destEndLineNo;
            while(pos < max){
                ch = str.charCodeAt(pos);
                if (!isSpace(ch)) break;
                pos++;
            }
        }
    }
    if (pos < max && str.charCodeAt(pos) !== 0x0A) // garbage at the end of the line
    return false;
    label = normalizeReference(str.slice(1, labelEnd));
    if (!label) // CommonMark 0.20 disallows empty labels
    return false;
    // Reference can not terminate anything. This check is for safety only.
    /*istanbul ignore if*/ if (silent) return true;
    if (typeof state.env.references === "undefined") state.env.references = {};
    if (typeof state.env.references[label] === "undefined") state.env.references[label] = {
        title: title,
        href: href
    };
    state.parentType = oldParentType;
    state.line = startLine + lines + 1;
    return true;
};

},{"../common/utils":"fp3Yu"}],"2LbOe":[function(require,module,exports) {
// HTML block
"use strict";
var block_names = require("../common/html_blocks");
var HTML_OPEN_CLOSE_TAG_RE = require("../common/html_re").HTML_OPEN_CLOSE_TAG_RE;
// An array of opening and corresponding closing sequences for html tags,
// last argument defines whether it can terminate a paragraph or not
//
var HTML_SEQUENCES = [
    [
        /^<(script|pre|style|textarea)(?=(\s|>|$))/i,
        /<\/(script|pre|style|textarea)>/i,
        true
    ],
    [
        /^<!--/,
        /-->/,
        true
    ],
    [
        /^<\?/,
        /\?>/,
        true
    ],
    [
        /^<![A-Z]/,
        />/,
        true
    ],
    [
        /^<!\[CDATA\[/,
        /\]\]>/,
        true
    ],
    [
        new RegExp("^</?(" + block_names.join("|") + ")(?=(\\s|/?>|$))", "i"),
        /^$/,
        true
    ],
    [
        new RegExp(HTML_OPEN_CLOSE_TAG_RE.source + "\\s*$"),
        /^$/,
        false
    ]
];
module.exports = function html_block(state, startLine, endLine, silent) {
    var i, nextLine, token, lineText, pos = state.bMarks[startLine] + state.tShift[startLine], max = state.eMarks[startLine];
    // if it's indented more than 3 spaces, it should be a code block
    if (state.sCount[startLine] - state.blkIndent >= 4) return false;
    if (!state.md.options.html) return false;
    if (state.src.charCodeAt(pos) !== 0x3C /* < */ ) return false;
    lineText = state.src.slice(pos, max);
    for(i = 0; i < HTML_SEQUENCES.length; i++){
        if (HTML_SEQUENCES[i][0].test(lineText)) break;
    }
    if (i === HTML_SEQUENCES.length) return false;
    if (silent) // true if this sequence can be a terminator, false otherwise
    return HTML_SEQUENCES[i][2];
    nextLine = startLine + 1;
    // If we are here - we detected HTML block.
    // Let's roll down till block end.
    if (!HTML_SEQUENCES[i][1].test(lineText)) for(; nextLine < endLine; nextLine++){
        if (state.sCount[nextLine] < state.blkIndent) break;
        pos = state.bMarks[nextLine] + state.tShift[nextLine];
        max = state.eMarks[nextLine];
        lineText = state.src.slice(pos, max);
        if (HTML_SEQUENCES[i][1].test(lineText)) {
            if (lineText.length !== 0) nextLine++;
            break;
        }
    }
    state.line = nextLine;
    token = state.push("html_block", "", 0);
    token.map = [
        startLine,
        nextLine
    ];
    token.content = state.getLines(startLine, nextLine, state.blkIndent, true);
    return true;
};

},{"../common/html_blocks":"aJoXW","../common/html_re":"j3zl7"}],"aJoXW":[function(require,module,exports) {
// List of valid html blocks names, accorting to commonmark spec
// http://jgm.github.io/CommonMark/spec.html#html-blocks
"use strict";
module.exports = [
    "address",
    "article",
    "aside",
    "base",
    "basefont",
    "blockquote",
    "body",
    "caption",
    "center",
    "col",
    "colgroup",
    "dd",
    "details",
    "dialog",
    "dir",
    "div",
    "dl",
    "dt",
    "fieldset",
    "figcaption",
    "figure",
    "footer",
    "form",
    "frame",
    "frameset",
    "h1",
    "h2",
    "h3",
    "h4",
    "h5",
    "h6",
    "head",
    "header",
    "hr",
    "html",
    "iframe",
    "legend",
    "li",
    "link",
    "main",
    "menu",
    "menuitem",
    "nav",
    "noframes",
    "ol",
    "optgroup",
    "option",
    "p",
    "param",
    "section",
    "source",
    "summary",
    "table",
    "tbody",
    "td",
    "tfoot",
    "th",
    "thead",
    "title",
    "tr",
    "track",
    "ul"
];

},{}],"j3zl7":[function(require,module,exports) {
// Regexps to match html elements
"use strict";
var attr_name = "[a-zA-Z_:][a-zA-Z0-9:._-]*";
var unquoted = "[^\"'=<>`\\x00-\\x20]+";
var single_quoted = "'[^']*'";
var double_quoted = '"[^"]*"';
var attr_value = "(?:" + unquoted + "|" + single_quoted + "|" + double_quoted + ")";
var attribute = "(?:\\s+" + attr_name + "(?:\\s*=\\s*" + attr_value + ")?)";
var open_tag = "<[A-Za-z][A-Za-z0-9\\-]*" + attribute + "*\\s*\\/?>";
var close_tag = "<\\/[A-Za-z][A-Za-z0-9\\-]*\\s*>";
var comment = "<!---->|<!--(?:-?[^>-])(?:-?[^-])*-->";
var processing = "<[?][\\s\\S]*?[?]>";
var declaration = "<![A-Z]+\\s+[^>]*>";
var cdata = "<!\\[CDATA\\[[\\s\\S]*?\\]\\]>";
var HTML_TAG_RE = new RegExp("^(?:" + open_tag + "|" + close_tag + "|" + comment + "|" + processing + "|" + declaration + "|" + cdata + ")");
var HTML_OPEN_CLOSE_TAG_RE = new RegExp("^(?:" + open_tag + "|" + close_tag + ")");
module.exports.HTML_TAG_RE = HTML_TAG_RE;
module.exports.HTML_OPEN_CLOSE_TAG_RE = HTML_OPEN_CLOSE_TAG_RE;

},{}],"9JCP7":[function(require,module,exports) {
// heading (#, ##, ...)
"use strict";
var isSpace = require("../common/utils").isSpace;
module.exports = function heading(state, startLine, endLine, silent) {
    var ch, level, tmp, token, pos = state.bMarks[startLine] + state.tShift[startLine], max = state.eMarks[startLine];
    // if it's indented more than 3 spaces, it should be a code block
    if (state.sCount[startLine] - state.blkIndent >= 4) return false;
    ch = state.src.charCodeAt(pos);
    if (ch !== 0x23 /* # */  || pos >= max) return false;
    // count heading level
    level = 1;
    ch = state.src.charCodeAt(++pos);
    while(ch === 0x23 /* # */  && pos < max && level <= 6){
        level++;
        ch = state.src.charCodeAt(++pos);
    }
    if (level > 6 || pos < max && !isSpace(ch)) return false;
    if (silent) return true;
    // Let's cut tails like '    ###  ' from the end of string
    max = state.skipSpacesBack(max, pos);
    tmp = state.skipCharsBack(max, 0x23, pos); // #
    if (tmp > pos && isSpace(state.src.charCodeAt(tmp - 1))) max = tmp;
    state.line = startLine + 1;
    token = state.push("heading_open", "h" + String(level), 1);
    token.markup = "########".slice(0, level);
    token.map = [
        startLine,
        state.line
    ];
    token = state.push("inline", "", 0);
    token.content = state.src.slice(pos, max).trim();
    token.map = [
        startLine,
        state.line
    ];
    token.children = [];
    token = state.push("heading_close", "h" + String(level), -1);
    token.markup = "########".slice(0, level);
    return true;
};

},{"../common/utils":"fp3Yu"}],"jb6LI":[function(require,module,exports) {
// lheading (---, ===)
"use strict";
module.exports = function lheading(state, startLine, endLine /*, silent*/ ) {
    var content, terminate, i, l, token, pos, max, level, marker, nextLine = startLine + 1, oldParentType, terminatorRules = state.md.block.ruler.getRules("paragraph");
    // if it's indented more than 3 spaces, it should be a code block
    if (state.sCount[startLine] - state.blkIndent >= 4) return false;
    oldParentType = state.parentType;
    state.parentType = "paragraph"; // use paragraph to match terminatorRules
    // jump line-by-line until empty one or EOF
    for(; nextLine < endLine && !state.isEmpty(nextLine); nextLine++){
        // this would be a code block normally, but after paragraph
        // it's considered a lazy continuation regardless of what's there
        if (state.sCount[nextLine] - state.blkIndent > 3) continue;
        //
        // Check for underline in setext header
        //
        if (state.sCount[nextLine] >= state.blkIndent) {
            pos = state.bMarks[nextLine] + state.tShift[nextLine];
            max = state.eMarks[nextLine];
            if (pos < max) {
                marker = state.src.charCodeAt(pos);
                if (marker === 0x2D /* - */  || marker === 0x3D /* = */ ) {
                    pos = state.skipChars(pos, marker);
                    pos = state.skipSpaces(pos);
                    if (pos >= max) {
                        level = marker === 0x3D /* = */  ? 1 : 2;
                        break;
                    }
                }
            }
        }
        // quirk for blockquotes, this line should already be checked by that rule
        if (state.sCount[nextLine] < 0) continue;
        // Some tags can terminate paragraph without empty line.
        terminate = false;
        for(i = 0, l = terminatorRules.length; i < l; i++)if (terminatorRules[i](state, nextLine, endLine, true)) {
            terminate = true;
            break;
        }
        if (terminate) break;
    }
    if (!level) // Didn't find valid underline
    return false;
    content = state.getLines(startLine, nextLine, state.blkIndent, false).trim();
    state.line = nextLine + 1;
    token = state.push("heading_open", "h" + String(level), 1);
    token.markup = String.fromCharCode(marker);
    token.map = [
        startLine,
        state.line
    ];
    token = state.push("inline", "", 0);
    token.content = content;
    token.map = [
        startLine,
        state.line - 1
    ];
    token.children = [];
    token = state.push("heading_close", "h" + String(level), -1);
    token.markup = String.fromCharCode(marker);
    state.parentType = oldParentType;
    return true;
};

},{}],"l91ew":[function(require,module,exports) {
// Paragraph
"use strict";
module.exports = function paragraph(state, startLine /*, endLine*/ ) {
    var content, terminate, i, l, token, oldParentType, nextLine = startLine + 1, terminatorRules = state.md.block.ruler.getRules("paragraph"), endLine = state.lineMax;
    oldParentType = state.parentType;
    state.parentType = "paragraph";
    // jump line-by-line until empty one or EOF
    for(; nextLine < endLine && !state.isEmpty(nextLine); nextLine++){
        // this would be a code block normally, but after paragraph
        // it's considered a lazy continuation regardless of what's there
        if (state.sCount[nextLine] - state.blkIndent > 3) continue;
        // quirk for blockquotes, this line should already be checked by that rule
        if (state.sCount[nextLine] < 0) continue;
        // Some tags can terminate paragraph without empty line.
        terminate = false;
        for(i = 0, l = terminatorRules.length; i < l; i++)if (terminatorRules[i](state, nextLine, endLine, true)) {
            terminate = true;
            break;
        }
        if (terminate) break;
    }
    content = state.getLines(startLine, nextLine, state.blkIndent, false).trim();
    state.line = nextLine;
    token = state.push("paragraph_open", "p", 1);
    token.map = [
        startLine,
        state.line
    ];
    token = state.push("inline", "", 0);
    token.content = content;
    token.map = [
        startLine,
        state.line
    ];
    token.children = [];
    token = state.push("paragraph_close", "p", -1);
    state.parentType = oldParentType;
    return true;
};

},{}],"krNTo":[function(require,module,exports) {
// Parser state class
"use strict";
var Token = require("../token");
var isSpace = require("../common/utils").isSpace;
function StateBlock(src, md, env, tokens) {
    var ch, s, start, pos, len, indent, offset, indent_found;
    this.src = src;
    // link to parser instance
    this.md = md;
    this.env = env;
    //
    // Internal state vartiables
    //
    this.tokens = tokens;
    this.bMarks = []; // line begin offsets for fast jumps
    this.eMarks = []; // line end offsets for fast jumps
    this.tShift = []; // offsets of the first non-space characters (tabs not expanded)
    this.sCount = []; // indents for each line (tabs expanded)
    // An amount of virtual spaces (tabs expanded) between beginning
    // of each line (bMarks) and real beginning of that line.
    //
    // It exists only as a hack because blockquotes override bMarks
    // losing information in the process.
    //
    // It's used only when expanding tabs, you can think about it as
    // an initial tab length, e.g. bsCount=21 applied to string `\t123`
    // means first tab should be expanded to 4-21%4 === 3 spaces.
    //
    this.bsCount = [];
    // block parser variables
    this.blkIndent = 0; // required block content indent (for example, if we are
    // inside a list, it would be positioned after list marker)
    this.line = 0; // line index in src
    this.lineMax = 0; // lines count
    this.tight = false; // loose/tight mode for lists
    this.ddIndent = -1; // indent of the current dd block (-1 if there isn't any)
    this.listIndent = -1; // indent of the current list block (-1 if there isn't any)
    // can be 'blockquote', 'list', 'root', 'paragraph' or 'reference'
    // used in lists to determine if they interrupt a paragraph
    this.parentType = "root";
    this.level = 0;
    // renderer
    this.result = "";
    // Create caches
    // Generate markers.
    s = this.src;
    indent_found = false;
    for(start = pos = indent = offset = 0, len = s.length; pos < len; pos++){
        ch = s.charCodeAt(pos);
        if (!indent_found) {
            if (isSpace(ch)) {
                indent++;
                if (ch === 0x09) offset += 4 - offset % 4;
                else offset++;
                continue;
            } else indent_found = true;
        }
        if (ch === 0x0A || pos === len - 1) {
            if (ch !== 0x0A) pos++;
            this.bMarks.push(start);
            this.eMarks.push(pos);
            this.tShift.push(indent);
            this.sCount.push(offset);
            this.bsCount.push(0);
            indent_found = false;
            indent = 0;
            offset = 0;
            start = pos + 1;
        }
    }
    // Push fake entry to simplify cache bounds checks
    this.bMarks.push(s.length);
    this.eMarks.push(s.length);
    this.tShift.push(0);
    this.sCount.push(0);
    this.bsCount.push(0);
    this.lineMax = this.bMarks.length - 1; // don't count last fake line
}
// Push new token to "stream".
//
StateBlock.prototype.push = function(type, tag, nesting) {
    var token = new Token(type, tag, nesting);
    token.block = true;
    if (nesting < 0) this.level--; // closing tag
    token.level = this.level;
    if (nesting > 0) this.level++; // opening tag
    this.tokens.push(token);
    return token;
};
StateBlock.prototype.isEmpty = function isEmpty(line) {
    return this.bMarks[line] + this.tShift[line] >= this.eMarks[line];
};
StateBlock.prototype.skipEmptyLines = function skipEmptyLines(from) {
    for(var max = this.lineMax; from < max; from++){
        if (this.bMarks[from] + this.tShift[from] < this.eMarks[from]) break;
    }
    return from;
};
// Skip spaces from given position.
StateBlock.prototype.skipSpaces = function skipSpaces(pos) {
    var ch;
    for(var max = this.src.length; pos < max; pos++){
        ch = this.src.charCodeAt(pos);
        if (!isSpace(ch)) break;
    }
    return pos;
};
// Skip spaces from given position in reverse.
StateBlock.prototype.skipSpacesBack = function skipSpacesBack(pos, min) {
    if (pos <= min) return pos;
    while(pos > min){
        if (!isSpace(this.src.charCodeAt(--pos))) return pos + 1;
    }
    return pos;
};
// Skip char codes from given position
StateBlock.prototype.skipChars = function skipChars(pos, code) {
    for(var max = this.src.length; pos < max; pos++){
        if (this.src.charCodeAt(pos) !== code) break;
    }
    return pos;
};
// Skip char codes reverse from given position - 1
StateBlock.prototype.skipCharsBack = function skipCharsBack(pos, code, min) {
    if (pos <= min) return pos;
    while(pos > min){
        if (code !== this.src.charCodeAt(--pos)) return pos + 1;
    }
    return pos;
};
// cut lines range from source.
StateBlock.prototype.getLines = function getLines(begin, end, indent, keepLastLF) {
    var i, lineIndent, ch, first, last, queue, lineStart, line = begin;
    if (begin >= end) return "";
    queue = new Array(end - begin);
    for(i = 0; line < end; line++, i++){
        lineIndent = 0;
        lineStart = first = this.bMarks[line];
        if (line + 1 < end || keepLastLF) // No need for bounds check because we have fake entry on tail.
        last = this.eMarks[line] + 1;
        else last = this.eMarks[line];
        while(first < last && lineIndent < indent){
            ch = this.src.charCodeAt(first);
            if (isSpace(ch)) {
                if (ch === 0x09) lineIndent += 4 - (lineIndent + this.bsCount[line]) % 4;
                else lineIndent++;
            } else if (first - lineStart < this.tShift[line]) // patched tShift masked characters to look like spaces (blockquotes, list markers)
            lineIndent++;
            else break;
            first++;
        }
        if (lineIndent > indent) // partially expanding tabs in code blocks, e.g '\t\tfoobar'
        // with indent=2 becomes '  \tfoobar'
        queue[i] = new Array(lineIndent - indent + 1).join(" ") + this.src.slice(first, last);
        else queue[i] = this.src.slice(first, last);
    }
    return queue.join("");
};
// re-export Token class to use in block rules
StateBlock.prototype.Token = Token;
module.exports = StateBlock;

},{"../token":"5BqGp","../common/utils":"fp3Yu"}],"2gKTK":[function(require,module,exports) {
/** internal
 * class ParserInline
 *
 * Tokenizes paragraph content.
 **/ "use strict";
var Ruler = require("./ruler");
////////////////////////////////////////////////////////////////////////////////
// Parser rules
var _rules = [
    [
        "text",
        require("./rules_inline/text")
    ],
    [
        "newline",
        require("./rules_inline/newline")
    ],
    [
        "escape",
        require("./rules_inline/escape")
    ],
    [
        "backticks",
        require("./rules_inline/backticks")
    ],
    [
        "strikethrough",
        require("./rules_inline/strikethrough").tokenize
    ],
    [
        "emphasis",
        require("./rules_inline/emphasis").tokenize
    ],
    [
        "link",
        require("./rules_inline/link")
    ],
    [
        "image",
        require("./rules_inline/image")
    ],
    [
        "autolink",
        require("./rules_inline/autolink")
    ],
    [
        "html_inline",
        require("./rules_inline/html_inline")
    ],
    [
        "entity",
        require("./rules_inline/entity")
    ]
];
var _rules2 = [
    [
        "balance_pairs",
        require("./rules_inline/balance_pairs")
    ],
    [
        "strikethrough",
        require("./rules_inline/strikethrough").postProcess
    ],
    [
        "emphasis",
        require("./rules_inline/emphasis").postProcess
    ],
    [
        "text_collapse",
        require("./rules_inline/text_collapse")
    ]
];
/**
 * new ParserInline()
 **/ function ParserInline() {
    var i;
    /**
   * ParserInline#ruler -> Ruler
   *
   * [[Ruler]] instance. Keep configuration of inline rules.
   **/ this.ruler = new Ruler();
    for(i = 0; i < _rules.length; i++)this.ruler.push(_rules[i][0], _rules[i][1]);
    /**
   * ParserInline#ruler2 -> Ruler
   *
   * [[Ruler]] instance. Second ruler used for post-processing
   * (e.g. in emphasis-like rules).
   **/ this.ruler2 = new Ruler();
    for(i = 0; i < _rules2.length; i++)this.ruler2.push(_rules2[i][0], _rules2[i][1]);
}
// Skip single token by running all rules in validation mode;
// returns `true` if any rule reported success
//
ParserInline.prototype.skipToken = function(state) {
    var ok, i, pos = state.pos, rules = this.ruler.getRules(""), len = rules.length, maxNesting = state.md.options.maxNesting, cache = state.cache;
    if (typeof cache[pos] !== "undefined") {
        state.pos = cache[pos];
        return;
    }
    if (state.level < maxNesting) for(i = 0; i < len; i++){
        // Increment state.level and decrement it later to limit recursion.
        // It's harmless to do here, because no tokens are created. But ideally,
        // we'd need a separate private state variable for this purpose.
        //
        state.level++;
        ok = rules[i](state, true);
        state.level--;
        if (ok) break;
    }
    else // Too much nesting, just skip until the end of the paragraph.
    //
    // NOTE: this will cause links to behave incorrectly in the following case,
    //       when an amount of `[` is exactly equal to `maxNesting + 1`:
    //
    //       [[[[[[[[[[[[[[[[[[[[[foo]()
    //
    // TODO: remove this workaround when CM standard will allow nested links
    //       (we can replace it by preventing links from being parsed in
    //       validation mode)
    //
    state.pos = state.posMax;
    if (!ok) state.pos++;
    cache[pos] = state.pos;
};
// Generate tokens for input range
//
ParserInline.prototype.tokenize = function(state) {
    var ok, i, rules = this.ruler.getRules(""), len = rules.length, end = state.posMax, maxNesting = state.md.options.maxNesting;
    while(state.pos < end){
        // Try all possible rules.
        // On success, rule should:
        //
        // - update `state.pos`
        // - update `state.tokens`
        // - return true
        if (state.level < maxNesting) for(i = 0; i < len; i++){
            ok = rules[i](state, false);
            if (ok) break;
        }
        if (ok) {
            if (state.pos >= end) break;
            continue;
        }
        state.pending += state.src[state.pos++];
    }
    if (state.pending) state.pushPending();
};
/**
 * ParserInline.parse(str, md, env, outTokens)
 *
 * Process input string and push inline tokens into `outTokens`
 **/ ParserInline.prototype.parse = function(str, md, env, outTokens) {
    var i, rules, len;
    var state = new this.State(str, md, env, outTokens);
    this.tokenize(state);
    rules = this.ruler2.getRules("");
    len = rules.length;
    for(i = 0; i < len; i++)rules[i](state);
};
ParserInline.prototype.State = require("./rules_inline/state_inline");
module.exports = ParserInline;

},{"./ruler":"iVWwo","./rules_inline/text":"agUrL","./rules_inline/newline":"gLFfL","./rules_inline/escape":"hCpvJ","./rules_inline/backticks":"8cgDI","./rules_inline/strikethrough":"iWMJ0","./rules_inline/emphasis":"2MchP","./rules_inline/link":"4MtaS","./rules_inline/image":"3ZqLO","./rules_inline/autolink":"ld6gs","./rules_inline/html_inline":"gzxW9","./rules_inline/entity":"fckPL","./rules_inline/balance_pairs":"h5GQY","./rules_inline/text_collapse":"beisl","./rules_inline/state_inline":"7NFFQ"}],"agUrL":[function(require,module,exports) {
// Skip text characters for text token, place those to pending buffer
// and increment current pos
"use strict";
// Rule to skip pure text
// '{}$%@~+=:' reserved for extentions
// !, ", #, $, %, &, ', (, ), *, +, ,, -, ., /, :, ;, <, =, >, ?, @, [, \, ], ^, _, `, {, |, }, or ~
// !!!! Don't confuse with "Markdown ASCII Punctuation" chars
// http://spec.commonmark.org/0.15/#ascii-punctuation-character
function isTerminatorChar(ch) {
    switch(ch){
        case 0x0A /* \n */ :
        case 0x21 /* ! */ :
        case 0x23 /* # */ :
        case 0x24 /* $ */ :
        case 0x25 /* % */ :
        case 0x26 /* & */ :
        case 0x2A /* * */ :
        case 0x2B /* + */ :
        case 0x2D /* - */ :
        case 0x3A /* : */ :
        case 0x3C /* < */ :
        case 0x3D /* = */ :
        case 0x3E /* > */ :
        case 0x40 /* @ */ :
        case 0x5B /* [ */ :
        case 0x5C /* \ */ :
        case 0x5D /* ] */ :
        case 0x5E /* ^ */ :
        case 0x5F /* _ */ :
        case 0x60 /* ` */ :
        case 0x7B /* { */ :
        case 0x7D /* } */ :
        case 0x7E /* ~ */ :
            return true;
        default:
            return false;
    }
}
module.exports = function text(state, silent) {
    var pos = state.pos;
    while(pos < state.posMax && !isTerminatorChar(state.src.charCodeAt(pos)))pos++;
    if (pos === state.pos) return false;
    if (!silent) state.pending += state.src.slice(state.pos, pos);
    state.pos = pos;
    return true;
}; // Alternative implementation, for memory.
 //
 // It costs 10% of performance, but allows extend terminators list, if place it
 // to `ParcerInline` property. Probably, will switch to it sometime, such
 // flexibility required.
 /*
var TERMINATOR_RE = /[\n!#$%&*+\-:<=>@[\\\]^_`{}~]/;

module.exports = function text(state, silent) {
  var pos = state.pos,
      idx = state.src.slice(pos).search(TERMINATOR_RE);

  // first char is terminator -> empty text
  if (idx === 0) { return false; }

  // no terminator -> text till end of string
  if (idx < 0) {
    if (!silent) { state.pending += state.src.slice(pos); }
    state.pos = state.src.length;
    return true;
  }

  if (!silent) { state.pending += state.src.slice(pos, pos + idx); }

  state.pos += idx;

  return true;
};*/ 

},{}],"gLFfL":[function(require,module,exports) {
// Proceess '\n'
"use strict";
var isSpace = require("../common/utils").isSpace;
module.exports = function newline(state, silent) {
    var pmax, max, ws, pos = state.pos;
    if (state.src.charCodeAt(pos) !== 0x0A /* \n */ ) return false;
    pmax = state.pending.length - 1;
    max = state.posMax;
    // '  \n' -> hardbreak
    // Lookup in pending chars is bad practice! Don't copy to other rules!
    // Pending string is stored in concat mode, indexed lookups will cause
    // convertion to flat mode.
    if (!silent) {
        if (pmax >= 0 && state.pending.charCodeAt(pmax) === 0x20) {
            if (pmax >= 1 && state.pending.charCodeAt(pmax - 1) === 0x20) {
                // Find whitespaces tail of pending chars.
                ws = pmax - 1;
                while(ws >= 1 && state.pending.charCodeAt(ws - 1) === 0x20)ws--;
                state.pending = state.pending.slice(0, ws);
                state.push("hardbreak", "br", 0);
            } else {
                state.pending = state.pending.slice(0, -1);
                state.push("softbreak", "br", 0);
            }
        } else state.push("softbreak", "br", 0);
    }
    pos++;
    // skip heading spaces for next line
    while(pos < max && isSpace(state.src.charCodeAt(pos)))pos++;
    state.pos = pos;
    return true;
};

},{"../common/utils":"fp3Yu"}],"hCpvJ":[function(require,module,exports) {
// Process escaped chars and hardbreaks
"use strict";
var isSpace = require("../common/utils").isSpace;
var ESCAPED = [];
for(var i = 0; i < 256; i++)ESCAPED.push(0);
"\\!\"#$%&'()*+,./:;<=>?@[]^_`{|}~-".split("").forEach(function(ch) {
    ESCAPED[ch.charCodeAt(0)] = 1;
});
module.exports = function escape(state, silent) {
    var ch, pos = state.pos, max = state.posMax;
    if (state.src.charCodeAt(pos) !== 0x5C /* \ */ ) return false;
    pos++;
    if (pos < max) {
        ch = state.src.charCodeAt(pos);
        if (ch < 256 && ESCAPED[ch] !== 0) {
            if (!silent) state.pending += state.src[pos];
            state.pos += 2;
            return true;
        }
        if (ch === 0x0A) {
            if (!silent) state.push("hardbreak", "br", 0);
            pos++;
            // skip leading whitespaces from next line
            while(pos < max){
                ch = state.src.charCodeAt(pos);
                if (!isSpace(ch)) break;
                pos++;
            }
            state.pos = pos;
            return true;
        }
    }
    if (!silent) state.pending += "\\";
    state.pos++;
    return true;
};

},{"../common/utils":"fp3Yu"}],"8cgDI":[function(require,module,exports) {
// Parse backticks
"use strict";
module.exports = function backtick(state, silent) {
    var start, max, marker, token, matchStart, matchEnd, openerLength, closerLength, pos = state.pos, ch = state.src.charCodeAt(pos);
    if (ch !== 0x60 /* ` */ ) return false;
    start = pos;
    pos++;
    max = state.posMax;
    // scan marker length
    while(pos < max && state.src.charCodeAt(pos) === 0x60 /* ` */ )pos++;
    marker = state.src.slice(start, pos);
    openerLength = marker.length;
    if (state.backticksScanned && (state.backticks[openerLength] || 0) <= start) {
        if (!silent) state.pending += marker;
        state.pos += openerLength;
        return true;
    }
    matchStart = matchEnd = pos;
    // Nothing found in the cache, scan until the end of the line (or until marker is found)
    while((matchStart = state.src.indexOf("`", matchEnd)) !== -1){
        matchEnd = matchStart + 1;
        // scan marker length
        while(matchEnd < max && state.src.charCodeAt(matchEnd) === 0x60 /* ` */ )matchEnd++;
        closerLength = matchEnd - matchStart;
        if (closerLength === openerLength) {
            // Found matching closer length.
            if (!silent) {
                token = state.push("code_inline", "code", 0);
                token.markup = marker;
                token.content = state.src.slice(pos, matchStart).replace(/\n/g, " ").replace(/^ (.+) $/, "$1");
            }
            state.pos = matchEnd;
            return true;
        }
        // Some different length found, put it in cache as upper limit of where closer can be found
        state.backticks[closerLength] = matchStart;
    }
    // Scanned through the end, didn't find anything
    state.backticksScanned = true;
    if (!silent) state.pending += marker;
    state.pos += openerLength;
    return true;
};

},{}],"iWMJ0":[function(require,module,exports) {
// ~~strike through~~
//
"use strict";
// Insert each marker as a separate text token, and add it to delimiter list
//
module.exports.tokenize = function strikethrough(state, silent) {
    var i, scanned, token, len, ch, start = state.pos, marker = state.src.charCodeAt(start);
    if (silent) return false;
    if (marker !== 0x7E /* ~ */ ) return false;
    scanned = state.scanDelims(state.pos, true);
    len = scanned.length;
    ch = String.fromCharCode(marker);
    if (len < 2) return false;
    if (len % 2) {
        token = state.push("text", "", 0);
        token.content = ch;
        len--;
    }
    for(i = 0; i < len; i += 2){
        token = state.push("text", "", 0);
        token.content = ch + ch;
        state.delimiters.push({
            marker: marker,
            length: 0,
            token: state.tokens.length - 1,
            end: -1,
            open: scanned.can_open,
            close: scanned.can_close
        });
    }
    state.pos += scanned.length;
    return true;
};
function postProcess(state, delimiters) {
    var i, j, startDelim, endDelim, token, loneMarkers = [], max = delimiters.length;
    for(i = 0; i < max; i++){
        startDelim = delimiters[i];
        if (startDelim.marker !== 0x7E /* ~ */ ) continue;
        if (startDelim.end === -1) continue;
        endDelim = delimiters[startDelim.end];
        token = state.tokens[startDelim.token];
        token.type = "s_open";
        token.tag = "s";
        token.nesting = 1;
        token.markup = "~~";
        token.content = "";
        token = state.tokens[endDelim.token];
        token.type = "s_close";
        token.tag = "s";
        token.nesting = -1;
        token.markup = "~~";
        token.content = "";
        if (state.tokens[endDelim.token - 1].type === "text" && state.tokens[endDelim.token - 1].content === "~") loneMarkers.push(endDelim.token - 1);
    }
    // If a marker sequence has an odd number of characters, it's splitted
    // like this: `~~~~~` -> `~` + `~~` + `~~`, leaving one marker at the
    // start of the sequence.
    //
    // So, we have to move all those markers after subsequent s_close tags.
    //
    while(loneMarkers.length){
        i = loneMarkers.pop();
        j = i + 1;
        while(j < state.tokens.length && state.tokens[j].type === "s_close")j++;
        j--;
        if (i !== j) {
            token = state.tokens[j];
            state.tokens[j] = state.tokens[i];
            state.tokens[i] = token;
        }
    }
}
// Walk through delimiter list and replace text tokens with tags
//
module.exports.postProcess = function strikethrough(state) {
    var curr, tokens_meta = state.tokens_meta, max = state.tokens_meta.length;
    postProcess(state, state.delimiters);
    for(curr = 0; curr < max; curr++)if (tokens_meta[curr] && tokens_meta[curr].delimiters) postProcess(state, tokens_meta[curr].delimiters);
};

},{}],"2MchP":[function(require,module,exports) {
// Process *this* and _that_
//
"use strict";
// Insert each marker as a separate text token, and add it to delimiter list
//
module.exports.tokenize = function emphasis(state, silent) {
    var i, scanned, token, start = state.pos, marker = state.src.charCodeAt(start);
    if (silent) return false;
    if (marker !== 0x5F /* _ */  && marker !== 0x2A /* * */ ) return false;
    scanned = state.scanDelims(state.pos, marker === 0x2A);
    for(i = 0; i < scanned.length; i++){
        token = state.push("text", "", 0);
        token.content = String.fromCharCode(marker);
        state.delimiters.push({
            // Char code of the starting marker (number).
            //
            marker: marker,
            // Total length of these series of delimiters.
            //
            length: scanned.length,
            // A position of the token this delimiter corresponds to.
            //
            token: state.tokens.length - 1,
            // If this delimiter is matched as a valid opener, `end` will be
            // equal to its position, otherwise it's `-1`.
            //
            end: -1,
            // Boolean flags that determine if this delimiter could open or close
            // an emphasis.
            //
            open: scanned.can_open,
            close: scanned.can_close
        });
    }
    state.pos += scanned.length;
    return true;
};
function postProcess(state, delimiters) {
    var i, startDelim, endDelim, token, ch, isStrong, max = delimiters.length;
    for(i = max - 1; i >= 0; i--){
        startDelim = delimiters[i];
        if (startDelim.marker !== 0x5F /* _ */  && startDelim.marker !== 0x2A /* * */ ) continue;
        // Process only opening markers
        if (startDelim.end === -1) continue;
        endDelim = delimiters[startDelim.end];
        // If the previous delimiter has the same marker and is adjacent to this one,
        // merge those into one strong delimiter.
        //
        // `<em><em>whatever</em></em>` -> `<strong>whatever</strong>`
        //
        isStrong = i > 0 && delimiters[i - 1].end === startDelim.end + 1 && // check that first two markers match and adjacent
        delimiters[i - 1].marker === startDelim.marker && delimiters[i - 1].token === startDelim.token - 1 && // check that last two markers are adjacent (we can safely assume they match)
        delimiters[startDelim.end + 1].token === endDelim.token + 1;
        ch = String.fromCharCode(startDelim.marker);
        token = state.tokens[startDelim.token];
        token.type = isStrong ? "strong_open" : "em_open";
        token.tag = isStrong ? "strong" : "em";
        token.nesting = 1;
        token.markup = isStrong ? ch + ch : ch;
        token.content = "";
        token = state.tokens[endDelim.token];
        token.type = isStrong ? "strong_close" : "em_close";
        token.tag = isStrong ? "strong" : "em";
        token.nesting = -1;
        token.markup = isStrong ? ch + ch : ch;
        token.content = "";
        if (isStrong) {
            state.tokens[delimiters[i - 1].token].content = "";
            state.tokens[delimiters[startDelim.end + 1].token].content = "";
            i--;
        }
    }
}
// Walk through delimiter list and replace text tokens with tags
//
module.exports.postProcess = function emphasis(state) {
    var curr, tokens_meta = state.tokens_meta, max = state.tokens_meta.length;
    postProcess(state, state.delimiters);
    for(curr = 0; curr < max; curr++)if (tokens_meta[curr] && tokens_meta[curr].delimiters) postProcess(state, tokens_meta[curr].delimiters);
};

},{}],"4MtaS":[function(require,module,exports) {
// Process [link](<to> "stuff")
"use strict";
var normalizeReference = require("../common/utils").normalizeReference;
var isSpace = require("../common/utils").isSpace;
module.exports = function link(state, silent) {
    var attrs, code, label, labelEnd, labelStart, pos, res, ref, token, href = "", title = "", oldPos = state.pos, max = state.posMax, start = state.pos, parseReference = true;
    if (state.src.charCodeAt(state.pos) !== 0x5B /* [ */ ) return false;
    labelStart = state.pos + 1;
    labelEnd = state.md.helpers.parseLinkLabel(state, state.pos, true);
    // parser failed to find ']', so it's not a valid link
    if (labelEnd < 0) return false;
    pos = labelEnd + 1;
    if (pos < max && state.src.charCodeAt(pos) === 0x28 /* ( */ ) {
        //
        // Inline link
        //
        // might have found a valid shortcut link, disable reference parsing
        parseReference = false;
        // [link](  <href>  "title"  )
        //        ^^ skipping these spaces
        pos++;
        for(; pos < max; pos++){
            code = state.src.charCodeAt(pos);
            if (!isSpace(code) && code !== 0x0A) break;
        }
        if (pos >= max) return false;
        // [link](  <href>  "title"  )
        //          ^^^^^^ parsing link destination
        start = pos;
        res = state.md.helpers.parseLinkDestination(state.src, pos, state.posMax);
        if (res.ok) {
            href = state.md.normalizeLink(res.str);
            if (state.md.validateLink(href)) pos = res.pos;
            else href = "";
            // [link](  <href>  "title"  )
            //                ^^ skipping these spaces
            start = pos;
            for(; pos < max; pos++){
                code = state.src.charCodeAt(pos);
                if (!isSpace(code) && code !== 0x0A) break;
            }
            // [link](  <href>  "title"  )
            //                  ^^^^^^^ parsing link title
            res = state.md.helpers.parseLinkTitle(state.src, pos, state.posMax);
            if (pos < max && start !== pos && res.ok) {
                title = res.str;
                pos = res.pos;
                // [link](  <href>  "title"  )
                //                         ^^ skipping these spaces
                for(; pos < max; pos++){
                    code = state.src.charCodeAt(pos);
                    if (!isSpace(code) && code !== 0x0A) break;
                }
            }
        }
        if (pos >= max || state.src.charCodeAt(pos) !== 0x29 /* ) */ ) // parsing a valid shortcut link failed, fallback to reference
        parseReference = true;
        pos++;
    }
    if (parseReference) {
        //
        // Link reference
        //
        if (typeof state.env.references === "undefined") return false;
        if (pos < max && state.src.charCodeAt(pos) === 0x5B /* [ */ ) {
            start = pos + 1;
            pos = state.md.helpers.parseLinkLabel(state, pos);
            if (pos >= 0) label = state.src.slice(start, pos++);
            else pos = labelEnd + 1;
        } else pos = labelEnd + 1;
        // covers label === '' and label === undefined
        // (collapsed reference link and shortcut reference link respectively)
        if (!label) label = state.src.slice(labelStart, labelEnd);
        ref = state.env.references[normalizeReference(label)];
        if (!ref) {
            state.pos = oldPos;
            return false;
        }
        href = ref.href;
        title = ref.title;
    }
    //
    // We found the end of the link, and know for a fact it's a valid link;
    // so all that's left to do is to call tokenizer.
    //
    if (!silent) {
        state.pos = labelStart;
        state.posMax = labelEnd;
        token = state.push("link_open", "a", 1);
        token.attrs = attrs = [
            [
                "href",
                href
            ]
        ];
        if (title) attrs.push([
            "title",
            title
        ]);
        state.md.inline.tokenize(state);
        token = state.push("link_close", "a", -1);
    }
    state.pos = pos;
    state.posMax = max;
    return true;
};

},{"../common/utils":"fp3Yu"}],"3ZqLO":[function(require,module,exports) {
// Process ![image](<src> "title")
"use strict";
var normalizeReference = require("../common/utils").normalizeReference;
var isSpace = require("../common/utils").isSpace;
module.exports = function image(state, silent) {
    var attrs, code, content, label, labelEnd, labelStart, pos, ref, res, title, token, tokens, start, href = "", oldPos = state.pos, max = state.posMax;
    if (state.src.charCodeAt(state.pos) !== 0x21 /* ! */ ) return false;
    if (state.src.charCodeAt(state.pos + 1) !== 0x5B /* [ */ ) return false;
    labelStart = state.pos + 2;
    labelEnd = state.md.helpers.parseLinkLabel(state, state.pos + 1, false);
    // parser failed to find ']', so it's not a valid link
    if (labelEnd < 0) return false;
    pos = labelEnd + 1;
    if (pos < max && state.src.charCodeAt(pos) === 0x28 /* ( */ ) {
        //
        // Inline link
        //
        // [link](  <href>  "title"  )
        //        ^^ skipping these spaces
        pos++;
        for(; pos < max; pos++){
            code = state.src.charCodeAt(pos);
            if (!isSpace(code) && code !== 0x0A) break;
        }
        if (pos >= max) return false;
        // [link](  <href>  "title"  )
        //          ^^^^^^ parsing link destination
        start = pos;
        res = state.md.helpers.parseLinkDestination(state.src, pos, state.posMax);
        if (res.ok) {
            href = state.md.normalizeLink(res.str);
            if (state.md.validateLink(href)) pos = res.pos;
            else href = "";
        }
        // [link](  <href>  "title"  )
        //                ^^ skipping these spaces
        start = pos;
        for(; pos < max; pos++){
            code = state.src.charCodeAt(pos);
            if (!isSpace(code) && code !== 0x0A) break;
        }
        // [link](  <href>  "title"  )
        //                  ^^^^^^^ parsing link title
        res = state.md.helpers.parseLinkTitle(state.src, pos, state.posMax);
        if (pos < max && start !== pos && res.ok) {
            title = res.str;
            pos = res.pos;
            // [link](  <href>  "title"  )
            //                         ^^ skipping these spaces
            for(; pos < max; pos++){
                code = state.src.charCodeAt(pos);
                if (!isSpace(code) && code !== 0x0A) break;
            }
        } else title = "";
        if (pos >= max || state.src.charCodeAt(pos) !== 0x29 /* ) */ ) {
            state.pos = oldPos;
            return false;
        }
        pos++;
    } else {
        //
        // Link reference
        //
        if (typeof state.env.references === "undefined") return false;
        if (pos < max && state.src.charCodeAt(pos) === 0x5B /* [ */ ) {
            start = pos + 1;
            pos = state.md.helpers.parseLinkLabel(state, pos);
            if (pos >= 0) label = state.src.slice(start, pos++);
            else pos = labelEnd + 1;
        } else pos = labelEnd + 1;
        // covers label === '' and label === undefined
        // (collapsed reference link and shortcut reference link respectively)
        if (!label) label = state.src.slice(labelStart, labelEnd);
        ref = state.env.references[normalizeReference(label)];
        if (!ref) {
            state.pos = oldPos;
            return false;
        }
        href = ref.href;
        title = ref.title;
    }
    //
    // We found the end of the link, and know for a fact it's a valid link;
    // so all that's left to do is to call tokenizer.
    //
    if (!silent) {
        content = state.src.slice(labelStart, labelEnd);
        state.md.inline.parse(content, state.md, state.env, tokens = []);
        token = state.push("image", "img", 0);
        token.attrs = attrs = [
            [
                "src",
                href
            ],
            [
                "alt",
                ""
            ]
        ];
        token.children = tokens;
        token.content = content;
        if (title) attrs.push([
            "title",
            title
        ]);
    }
    state.pos = pos;
    state.posMax = max;
    return true;
};

},{"../common/utils":"fp3Yu"}],"ld6gs":[function(require,module,exports) {
// Process autolinks '<protocol:...>'
"use strict";
/*eslint max-len:0*/ var EMAIL_RE = /^([a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*)$/;
var AUTOLINK_RE = /^([a-zA-Z][a-zA-Z0-9+.\-]{1,31}):([^<>\x00-\x20]*)$/;
module.exports = function autolink(state, silent) {
    var url, fullUrl, token, ch, start, max, pos = state.pos;
    if (state.src.charCodeAt(pos) !== 0x3C /* < */ ) return false;
    start = state.pos;
    max = state.posMax;
    for(;;){
        if (++pos >= max) return false;
        ch = state.src.charCodeAt(pos);
        if (ch === 0x3C /* < */ ) return false;
        if (ch === 0x3E /* > */ ) break;
    }
    url = state.src.slice(start + 1, pos);
    if (AUTOLINK_RE.test(url)) {
        fullUrl = state.md.normalizeLink(url);
        if (!state.md.validateLink(fullUrl)) return false;
        if (!silent) {
            token = state.push("link_open", "a", 1);
            token.attrs = [
                [
                    "href",
                    fullUrl
                ]
            ];
            token.markup = "autolink";
            token.info = "auto";
            token = state.push("text", "", 0);
            token.content = state.md.normalizeLinkText(url);
            token = state.push("link_close", "a", -1);
            token.markup = "autolink";
            token.info = "auto";
        }
        state.pos += url.length + 2;
        return true;
    }
    if (EMAIL_RE.test(url)) {
        fullUrl = state.md.normalizeLink("mailto:" + url);
        if (!state.md.validateLink(fullUrl)) return false;
        if (!silent) {
            token = state.push("link_open", "a", 1);
            token.attrs = [
                [
                    "href",
                    fullUrl
                ]
            ];
            token.markup = "autolink";
            token.info = "auto";
            token = state.push("text", "", 0);
            token.content = state.md.normalizeLinkText(url);
            token = state.push("link_close", "a", -1);
            token.markup = "autolink";
            token.info = "auto";
        }
        state.pos += url.length + 2;
        return true;
    }
    return false;
};

},{}],"gzxW9":[function(require,module,exports) {
// Process html tags
"use strict";
var HTML_TAG_RE = require("../common/html_re").HTML_TAG_RE;
function isLetter(ch) {
    /*eslint no-bitwise:0*/ var lc = ch | 0x20; // to lower case
    return lc >= 0x61 /* a */  && lc <= 0x7a /* z */ ;
}
module.exports = function html_inline(state, silent) {
    var ch, match, max, token, pos = state.pos;
    if (!state.md.options.html) return false;
    // Check start
    max = state.posMax;
    if (state.src.charCodeAt(pos) !== 0x3C /* < */  || pos + 2 >= max) return false;
    // Quick fail on second char
    ch = state.src.charCodeAt(pos + 1);
    if (ch !== 0x21 /* ! */  && ch !== 0x3F /* ? */  && ch !== 0x2F /* / */  && !isLetter(ch)) return false;
    match = state.src.slice(pos).match(HTML_TAG_RE);
    if (!match) return false;
    if (!silent) {
        token = state.push("html_inline", "", 0);
        token.content = state.src.slice(pos, pos + match[0].length);
    }
    state.pos += match[0].length;
    return true;
};

},{"../common/html_re":"j3zl7"}],"fckPL":[function(require,module,exports) {
// Process html entity - &#123;, &#xAF;, &quot;, ...
"use strict";
var entities = require("../common/entities");
var has = require("../common/utils").has;
var isValidEntityCode = require("../common/utils").isValidEntityCode;
var fromCodePoint = require("../common/utils").fromCodePoint;
var DIGITAL_RE = /^&#((?:x[a-f0-9]{1,6}|[0-9]{1,7}));/i;
var NAMED_RE = /^&([a-z][a-z0-9]{1,31});/i;
module.exports = function entity(state, silent) {
    var ch, code, match, pos = state.pos, max = state.posMax;
    if (state.src.charCodeAt(pos) !== 0x26 /* & */ ) return false;
    if (pos + 1 < max) {
        ch = state.src.charCodeAt(pos + 1);
        if (ch === 0x23 /* # */ ) {
            match = state.src.slice(pos).match(DIGITAL_RE);
            if (match) {
                if (!silent) {
                    code = match[1][0].toLowerCase() === "x" ? parseInt(match[1].slice(1), 16) : parseInt(match[1], 10);
                    state.pending += isValidEntityCode(code) ? fromCodePoint(code) : fromCodePoint(0xFFFD);
                }
                state.pos += match[0].length;
                return true;
            }
        } else {
            match = state.src.slice(pos).match(NAMED_RE);
            if (match) {
                if (has(entities, match[1])) {
                    if (!silent) state.pending += entities[match[1]];
                    state.pos += match[0].length;
                    return true;
                }
            }
        }
    }
    if (!silent) state.pending += "&";
    state.pos++;
    return true;
};

},{"../common/entities":"aZc5c","../common/utils":"fp3Yu"}],"h5GQY":[function(require,module,exports) {
// For each opening emphasis-like marker find a matching closing one
//
"use strict";
function processDelimiters(state, delimiters) {
    var closerIdx, openerIdx, closer, opener, minOpenerIdx, newMinOpenerIdx, isOddMatch, lastJump, openersBottom = {}, max = delimiters.length;
    if (!max) return;
    // headerIdx is the first delimiter of the current (where closer is) delimiter run
    var headerIdx = 0;
    var lastTokenIdx = -2; // needs any value lower than -1
    var jumps = [];
    for(closerIdx = 0; closerIdx < max; closerIdx++){
        closer = delimiters[closerIdx];
        jumps.push(0);
        // markers belong to same delimiter run if:
        //  - they have adjacent tokens
        //  - AND markers are the same
        //
        if (delimiters[headerIdx].marker !== closer.marker || lastTokenIdx !== closer.token - 1) headerIdx = closerIdx;
        lastTokenIdx = closer.token;
        // Length is only used for emphasis-specific "rule of 3",
        // if it's not defined (in strikethrough or 3rd party plugins),
        // we can default it to 0 to disable those checks.
        //
        closer.length = closer.length || 0;
        if (!closer.close) continue;
        // Previously calculated lower bounds (previous fails)
        // for each marker, each delimiter length modulo 3,
        // and for whether this closer can be an opener;
        // https://github.com/commonmark/cmark/commit/34250e12ccebdc6372b8b49c44fab57c72443460
        if (!openersBottom.hasOwnProperty(closer.marker)) openersBottom[closer.marker] = [
            -1,
            -1,
            -1,
            -1,
            -1,
            -1
        ];
        minOpenerIdx = openersBottom[closer.marker][(closer.open ? 3 : 0) + closer.length % 3];
        openerIdx = headerIdx - jumps[headerIdx] - 1;
        newMinOpenerIdx = openerIdx;
        for(; openerIdx > minOpenerIdx; openerIdx -= jumps[openerIdx] + 1){
            opener = delimiters[openerIdx];
            if (opener.marker !== closer.marker) continue;
            if (opener.open && opener.end < 0) {
                isOddMatch = false;
                // from spec:
                //
                // If one of the delimiters can both open and close emphasis, then the
                // sum of the lengths of the delimiter runs containing the opening and
                // closing delimiters must not be a multiple of 3 unless both lengths
                // are multiples of 3.
                //
                if (opener.close || closer.open) {
                    if ((opener.length + closer.length) % 3 === 0) {
                        if (opener.length % 3 !== 0 || closer.length % 3 !== 0) isOddMatch = true;
                    }
                }
                if (!isOddMatch) {
                    // If previous delimiter cannot be an opener, we can safely skip
                    // the entire sequence in future checks. This is required to make
                    // sure algorithm has linear complexity (see *_*_*_*_*_... case).
                    //
                    lastJump = openerIdx > 0 && !delimiters[openerIdx - 1].open ? jumps[openerIdx - 1] + 1 : 0;
                    jumps[closerIdx] = closerIdx - openerIdx + lastJump;
                    jumps[openerIdx] = lastJump;
                    closer.open = false;
                    opener.end = closerIdx;
                    opener.close = false;
                    newMinOpenerIdx = -1;
                    // treat next token as start of run,
                    // it optimizes skips in **<...>**a**<...>** pathological case
                    lastTokenIdx = -2;
                    break;
                }
            }
        }
        if (newMinOpenerIdx !== -1) // If match for this delimiter run failed, we want to set lower bound for
        // future lookups. This is required to make sure algorithm has linear
        // complexity.
        //
        // See details here:
        // https://github.com/commonmark/cmark/issues/178#issuecomment-270417442
        //
        openersBottom[closer.marker][(closer.open ? 3 : 0) + (closer.length || 0) % 3] = newMinOpenerIdx;
    }
}
module.exports = function link_pairs(state) {
    var curr, tokens_meta = state.tokens_meta, max = state.tokens_meta.length;
    processDelimiters(state, state.delimiters);
    for(curr = 0; curr < max; curr++)if (tokens_meta[curr] && tokens_meta[curr].delimiters) processDelimiters(state, tokens_meta[curr].delimiters);
};

},{}],"beisl":[function(require,module,exports) {
// Clean up tokens after emphasis and strikethrough postprocessing:
// merge adjacent text nodes into one and re-calculate all token levels
//
// This is necessary because initially emphasis delimiter markers (*, _, ~)
// are treated as their own separate text tokens. Then emphasis rule either
// leaves them as text (needed to merge with adjacent text) or turns them
// into opening/closing tags (which messes up levels inside).
//
"use strict";
module.exports = function text_collapse(state) {
    var curr, last, level = 0, tokens = state.tokens, max = state.tokens.length;
    for(curr = last = 0; curr < max; curr++){
        // re-calculate levels after emphasis/strikethrough turns some text nodes
        // into opening/closing tags
        if (tokens[curr].nesting < 0) level--; // closing tag
        tokens[curr].level = level;
        if (tokens[curr].nesting > 0) level++; // opening tag
        if (tokens[curr].type === "text" && curr + 1 < max && tokens[curr + 1].type === "text") // collapse two adjacent text nodes
        tokens[curr + 1].content = tokens[curr].content + tokens[curr + 1].content;
        else {
            if (curr !== last) tokens[last] = tokens[curr];
            last++;
        }
    }
    if (curr !== last) tokens.length = last;
};

},{}],"7NFFQ":[function(require,module,exports) {
// Inline parser state
"use strict";
var Token = require("../token");
var isWhiteSpace = require("../common/utils").isWhiteSpace;
var isPunctChar = require("../common/utils").isPunctChar;
var isMdAsciiPunct = require("../common/utils").isMdAsciiPunct;
function StateInline(src, md, env, outTokens) {
    this.src = src;
    this.env = env;
    this.md = md;
    this.tokens = outTokens;
    this.tokens_meta = Array(outTokens.length);
    this.pos = 0;
    this.posMax = this.src.length;
    this.level = 0;
    this.pending = "";
    this.pendingLevel = 0;
    // Stores { start: end } pairs. Useful for backtrack
    // optimization of pairs parse (emphasis, strikes).
    this.cache = {};
    // List of emphasis-like delimiters for current tag
    this.delimiters = [];
    // Stack of delimiter lists for upper level tags
    this._prev_delimiters = [];
    // backtick length => last seen position
    this.backticks = {};
    this.backticksScanned = false;
}
// Flush pending text
//
StateInline.prototype.pushPending = function() {
    var token = new Token("text", "", 0);
    token.content = this.pending;
    token.level = this.pendingLevel;
    this.tokens.push(token);
    this.pending = "";
    return token;
};
// Push new token to "stream".
// If pending text exists - flush it as text token
//
StateInline.prototype.push = function(type, tag, nesting) {
    if (this.pending) this.pushPending();
    var token = new Token(type, tag, nesting);
    var token_meta = null;
    if (nesting < 0) {
        // closing tag
        this.level--;
        this.delimiters = this._prev_delimiters.pop();
    }
    token.level = this.level;
    if (nesting > 0) {
        // opening tag
        this.level++;
        this._prev_delimiters.push(this.delimiters);
        this.delimiters = [];
        token_meta = {
            delimiters: this.delimiters
        };
    }
    this.pendingLevel = this.level;
    this.tokens.push(token);
    this.tokens_meta.push(token_meta);
    return token;
};
// Scan a sequence of emphasis-like markers, and determine whether
// it can start an emphasis sequence or end an emphasis sequence.
//
//  - start - position to scan from (it should point at a valid marker);
//  - canSplitWord - determine if these markers can be found inside a word
//
StateInline.prototype.scanDelims = function(start, canSplitWord) {
    var pos = start, lastChar, nextChar, count, can_open, can_close, isLastWhiteSpace, isLastPunctChar, isNextWhiteSpace, isNextPunctChar, left_flanking = true, right_flanking = true, max = this.posMax, marker = this.src.charCodeAt(start);
    // treat beginning of the line as a whitespace
    lastChar = start > 0 ? this.src.charCodeAt(start - 1) : 0x20;
    while(pos < max && this.src.charCodeAt(pos) === marker)pos++;
    count = pos - start;
    // treat end of the line as a whitespace
    nextChar = pos < max ? this.src.charCodeAt(pos) : 0x20;
    isLastPunctChar = isMdAsciiPunct(lastChar) || isPunctChar(String.fromCharCode(lastChar));
    isNextPunctChar = isMdAsciiPunct(nextChar) || isPunctChar(String.fromCharCode(nextChar));
    isLastWhiteSpace = isWhiteSpace(lastChar);
    isNextWhiteSpace = isWhiteSpace(nextChar);
    if (isNextWhiteSpace) left_flanking = false;
    else if (isNextPunctChar) {
        if (!(isLastWhiteSpace || isLastPunctChar)) left_flanking = false;
    }
    if (isLastWhiteSpace) right_flanking = false;
    else if (isLastPunctChar) {
        if (!(isNextWhiteSpace || isNextPunctChar)) right_flanking = false;
    }
    if (!canSplitWord) {
        can_open = left_flanking && (!right_flanking || isLastPunctChar);
        can_close = right_flanking && (!left_flanking || isNextPunctChar);
    } else {
        can_open = left_flanking;
        can_close = right_flanking;
    }
    return {
        can_open: can_open,
        can_close: can_close,
        length: count
    };
};
// re-export Token class to use in block rules
StateInline.prototype.Token = Token;
module.exports = StateInline;

},{"../token":"5BqGp","../common/utils":"fp3Yu"}],"94rsK":[function(require,module,exports) {
"use strict";
////////////////////////////////////////////////////////////////////////////////
// Helpers
// Merge objects
//
function assign(obj /*from1, from2, from3, ...*/ ) {
    var sources = Array.prototype.slice.call(arguments, 1);
    sources.forEach(function(source) {
        if (!source) return;
        Object.keys(source).forEach(function(key) {
            obj[key] = source[key];
        });
    });
    return obj;
}
function _class(obj) {
    return Object.prototype.toString.call(obj);
}
function isString(obj) {
    return _class(obj) === "[object String]";
}
function isObject(obj) {
    return _class(obj) === "[object Object]";
}
function isRegExp(obj) {
    return _class(obj) === "[object RegExp]";
}
function isFunction(obj) {
    return _class(obj) === "[object Function]";
}
function escapeRE(str) {
    return str.replace(/[.?*+^$[\]\\(){}|-]/g, "\\$&");
}
////////////////////////////////////////////////////////////////////////////////
var defaultOptions = {
    fuzzyLink: true,
    fuzzyEmail: true,
    fuzzyIP: false
};
function isOptionsObj(obj) {
    return Object.keys(obj || {}).reduce(function(acc, k) {
        return acc || defaultOptions.hasOwnProperty(k);
    }, false);
}
var defaultSchemas = {
    "http:": {
        validate: function(text, pos, self) {
            var tail = text.slice(pos);
            if (!self.re.http) // compile lazily, because "host"-containing variables can change on tlds update.
            self.re.http = new RegExp("^\\/\\/" + self.re.src_auth + self.re.src_host_port_strict + self.re.src_path, "i");
            if (self.re.http.test(tail)) return tail.match(self.re.http)[0].length;
            return 0;
        }
    },
    "https:": "http:",
    "ftp:": "http:",
    "//": {
        validate: function(text, pos, self) {
            var tail = text.slice(pos);
            if (!self.re.no_http) // compile lazily, because "host"-containing variables can change on tlds update.
            self.re.no_http = new RegExp("^" + self.re.src_auth + // Don't allow single-level domains, because of false positives like '//test'
            // with code comments
            "(?:localhost|(?:(?:" + self.re.src_domain + ")\\.)+" + self.re.src_domain_root + ")" + self.re.src_port + self.re.src_host_terminator + self.re.src_path, "i");
            if (self.re.no_http.test(tail)) {
                // should not be `://` & `///`, that protects from errors in protocol name
                if (pos >= 3 && text[pos - 3] === ":") return 0;
                if (pos >= 3 && text[pos - 3] === "/") return 0;
                return tail.match(self.re.no_http)[0].length;
            }
            return 0;
        }
    },
    "mailto:": {
        validate: function(text, pos, self) {
            var tail = text.slice(pos);
            if (!self.re.mailto) self.re.mailto = new RegExp("^" + self.re.src_email_name + "@" + self.re.src_host_strict, "i");
            if (self.re.mailto.test(tail)) return tail.match(self.re.mailto)[0].length;
            return 0;
        }
    }
};
/*eslint-disable max-len*/ // RE pattern for 2-character tlds (autogenerated by ./support/tlds_2char_gen.js)
var tlds_2ch_src_re = "a[cdefgilmnoqrstuwxz]|b[abdefghijmnorstvwyz]|c[acdfghiklmnoruvwxyz]|d[ejkmoz]|e[cegrstu]|f[ijkmor]|g[abdefghilmnpqrstuwy]|h[kmnrtu]|i[delmnoqrst]|j[emop]|k[eghimnprwyz]|l[abcikrstuvy]|m[acdeghklmnopqrstuvwxyz]|n[acefgilopruz]|om|p[aefghklmnrstwy]|qa|r[eosuw]|s[abcdeghijklmnortuvxyz]|t[cdfghjklmnortvwz]|u[agksyz]|v[aceginu]|w[fs]|y[et]|z[amw]";
// DON'T try to make PRs with changes. Extend TLDs with LinkifyIt.tlds() instead
var tlds_default = "biz|com|edu|gov|net|org|pro|web|xxx|aero|asia|coop|info|museum|name|shop|\u0440\u0444".split("|");
/*eslint-enable max-len*/ ////////////////////////////////////////////////////////////////////////////////
function resetScanCache(self) {
    self.__index__ = -1;
    self.__text_cache__ = "";
}
function createValidator(re) {
    return function(text, pos) {
        var tail = text.slice(pos);
        if (re.test(tail)) return tail.match(re)[0].length;
        return 0;
    };
}
function createNormalizer() {
    return function(match, self) {
        self.normalize(match);
    };
}
// Schemas compiler. Build regexps.
//
function compile(self) {
    // Load & clone RE patterns.
    var re = self.re = require("./lib/re")(self.__opts__);
    // Define dynamic patterns
    var tlds = self.__tlds__.slice();
    self.onCompile();
    if (!self.__tlds_replaced__) tlds.push(tlds_2ch_src_re);
    tlds.push(re.src_xn);
    re.src_tlds = tlds.join("|");
    function untpl(tpl) {
        return tpl.replace("%TLDS%", re.src_tlds);
    }
    re.email_fuzzy = RegExp(untpl(re.tpl_email_fuzzy), "i");
    re.link_fuzzy = RegExp(untpl(re.tpl_link_fuzzy), "i");
    re.link_no_ip_fuzzy = RegExp(untpl(re.tpl_link_no_ip_fuzzy), "i");
    re.host_fuzzy_test = RegExp(untpl(re.tpl_host_fuzzy_test), "i");
    //
    // Compile each schema
    //
    var aliases = [];
    self.__compiled__ = {}; // Reset compiled data
    function schemaError(name, val) {
        throw new Error('(LinkifyIt) Invalid schema "' + name + '": ' + val);
    }
    Object.keys(self.__schemas__).forEach(function(name) {
        var val = self.__schemas__[name];
        // skip disabled methods
        if (val === null) return;
        var compiled = {
            validate: null,
            link: null
        };
        self.__compiled__[name] = compiled;
        if (isObject(val)) {
            if (isRegExp(val.validate)) compiled.validate = createValidator(val.validate);
            else if (isFunction(val.validate)) compiled.validate = val.validate;
            else schemaError(name, val);
            if (isFunction(val.normalize)) compiled.normalize = val.normalize;
            else if (!val.normalize) compiled.normalize = createNormalizer();
            else schemaError(name, val);
            return;
        }
        if (isString(val)) {
            aliases.push(name);
            return;
        }
        schemaError(name, val);
    });
    //
    // Compile postponed aliases
    //
    aliases.forEach(function(alias) {
        if (!self.__compiled__[self.__schemas__[alias]]) // Silently fail on missed schemas to avoid errons on disable.
        // schemaError(alias, self.__schemas__[alias]);
        return;
        self.__compiled__[alias].validate = self.__compiled__[self.__schemas__[alias]].validate;
        self.__compiled__[alias].normalize = self.__compiled__[self.__schemas__[alias]].normalize;
    });
    //
    // Fake record for guessed links
    //
    self.__compiled__[""] = {
        validate: null,
        normalize: createNormalizer()
    };
    //
    // Build schema condition
    //
    var slist = Object.keys(self.__compiled__).filter(function(name) {
        // Filter disabled & fake schemas
        return name.length > 0 && self.__compiled__[name];
    }).map(escapeRE).join("|");
    // (?!_) cause 1.5x slowdown
    self.re.schema_test = RegExp("(^|(?!_)(?:[><\uFF5C]|" + re.src_ZPCc + "))(" + slist + ")", "i");
    self.re.schema_search = RegExp("(^|(?!_)(?:[><\uFF5C]|" + re.src_ZPCc + "))(" + slist + ")", "ig");
    self.re.pretest = RegExp("(" + self.re.schema_test.source + ")|(" + self.re.host_fuzzy_test.source + ")|@", "i");
    //
    // Cleanup
    //
    resetScanCache(self);
}
/**
 * class Match
 *
 * Match result. Single element of array, returned by [[LinkifyIt#match]]
 **/ function Match(self, shift) {
    var start = self.__index__, end = self.__last_index__, text = self.__text_cache__.slice(start, end);
    /**
   * Match#schema -> String
   *
   * Prefix (protocol) for matched string.
   **/ this.schema = self.__schema__.toLowerCase();
    /**
   * Match#index -> Number
   *
   * First position of matched string.
   **/ this.index = start + shift;
    /**
   * Match#lastIndex -> Number
   *
   * Next position after matched string.
   **/ this.lastIndex = end + shift;
    /**
   * Match#raw -> String
   *
   * Matched string.
   **/ this.raw = text;
    /**
   * Match#text -> String
   *
   * Notmalized text of matched string.
   **/ this.text = text;
    /**
   * Match#url -> String
   *
   * Normalized url of matched string.
   **/ this.url = text;
}
function createMatch(self, shift) {
    var match = new Match(self, shift);
    self.__compiled__[match.schema].normalize(match, self);
    return match;
}
/**
 * class LinkifyIt
 **/ /**
 * new LinkifyIt(schemas, options)
 * - schemas (Object): Optional. Additional schemas to validate (prefix/validator)
 * - options (Object): { fuzzyLink|fuzzyEmail|fuzzyIP: true|false }
 *
 * Creates new linkifier instance with optional additional schemas.
 * Can be called without `new` keyword for convenience.
 *
 * By default understands:
 *
 * - `http(s)://...` , `ftp://...`, `mailto:...` & `//...` links
 * - "fuzzy" links and emails (example.com, foo@bar.com).
 *
 * `schemas` is an object, where each key/value describes protocol/rule:
 *
 * - __key__ - link prefix (usually, protocol name with `:` at the end, `skype:`
 *   for example). `linkify-it` makes shure that prefix is not preceeded with
 *   alphanumeric char and symbols. Only whitespaces and punctuation allowed.
 * - __value__ - rule to check tail after link prefix
 *   - _String_ - just alias to existing rule
 *   - _Object_
 *     - _validate_ - validator function (should return matched length on success),
 *       or `RegExp`.
 *     - _normalize_ - optional function to normalize text & url of matched result
 *       (for example, for @twitter mentions).
 *
 * `options`:
 *
 * - __fuzzyLink__ - recognige URL-s without `http(s):` prefix. Default `true`.
 * - __fuzzyIP__ - allow IPs in fuzzy links above. Can conflict with some texts
 *   like version numbers. Default `false`.
 * - __fuzzyEmail__ - recognize emails without `mailto:` prefix.
 *
 **/ function LinkifyIt(schemas, options) {
    if (!(this instanceof LinkifyIt)) return new LinkifyIt(schemas, options);
    if (!options) {
        if (isOptionsObj(schemas)) {
            options = schemas;
            schemas = {};
        }
    }
    this.__opts__ = assign({}, defaultOptions, options);
    // Cache last tested result. Used to skip repeating steps on next `match` call.
    this.__index__ = -1;
    this.__last_index__ = -1; // Next scan position
    this.__schema__ = "";
    this.__text_cache__ = "";
    this.__schemas__ = assign({}, defaultSchemas, schemas);
    this.__compiled__ = {};
    this.__tlds__ = tlds_default;
    this.__tlds_replaced__ = false;
    this.re = {};
    compile(this);
}
/** chainable
 * LinkifyIt#add(schema, definition)
 * - schema (String): rule name (fixed pattern prefix)
 * - definition (String|RegExp|Object): schema definition
 *
 * Add new rule definition. See constructor description for details.
 **/ LinkifyIt.prototype.add = function add(schema, definition) {
    this.__schemas__[schema] = definition;
    compile(this);
    return this;
};
/** chainable
 * LinkifyIt#set(options)
 * - options (Object): { fuzzyLink|fuzzyEmail|fuzzyIP: true|false }
 *
 * Set recognition options for links without schema.
 **/ LinkifyIt.prototype.set = function set(options) {
    this.__opts__ = assign(this.__opts__, options);
    return this;
};
/**
 * LinkifyIt#test(text) -> Boolean
 *
 * Searches linkifiable pattern and returns `true` on success or `false` on fail.
 **/ LinkifyIt.prototype.test = function test(text) {
    // Reset scan cache
    this.__text_cache__ = text;
    this.__index__ = -1;
    if (!text.length) return false;
    var m, ml, me, len, shift, next, re, tld_pos, at_pos;
    // try to scan for link with schema - that's the most simple rule
    if (this.re.schema_test.test(text)) {
        re = this.re.schema_search;
        re.lastIndex = 0;
        while((m = re.exec(text)) !== null){
            len = this.testSchemaAt(text, m[2], re.lastIndex);
            if (len) {
                this.__schema__ = m[2];
                this.__index__ = m.index + m[1].length;
                this.__last_index__ = m.index + m[0].length + len;
                break;
            }
        }
    }
    if (this.__opts__.fuzzyLink && this.__compiled__["http:"]) {
        // guess schemaless links
        tld_pos = text.search(this.re.host_fuzzy_test);
        if (tld_pos >= 0) {
            // if tld is located after found link - no need to check fuzzy pattern
            if (this.__index__ < 0 || tld_pos < this.__index__) {
                if ((ml = text.match(this.__opts__.fuzzyIP ? this.re.link_fuzzy : this.re.link_no_ip_fuzzy)) !== null) {
                    shift = ml.index + ml[1].length;
                    if (this.__index__ < 0 || shift < this.__index__) {
                        this.__schema__ = "";
                        this.__index__ = shift;
                        this.__last_index__ = ml.index + ml[0].length;
                    }
                }
            }
        }
    }
    if (this.__opts__.fuzzyEmail && this.__compiled__["mailto:"]) {
        // guess schemaless emails
        at_pos = text.indexOf("@");
        if (at_pos >= 0) // We can't skip this check, because this cases are possible:
        // 192.168.1.1@gmail.com, my.in@example.com
        {
            if ((me = text.match(this.re.email_fuzzy)) !== null) {
                shift = me.index + me[1].length;
                next = me.index + me[0].length;
                if (this.__index__ < 0 || shift < this.__index__ || shift === this.__index__ && next > this.__last_index__) {
                    this.__schema__ = "mailto:";
                    this.__index__ = shift;
                    this.__last_index__ = next;
                }
            }
        }
    }
    return this.__index__ >= 0;
};
/**
 * LinkifyIt#pretest(text) -> Boolean
 *
 * Very quick check, that can give false positives. Returns true if link MAY BE
 * can exists. Can be used for speed optimization, when you need to check that
 * link NOT exists.
 **/ LinkifyIt.prototype.pretest = function pretest(text) {
    return this.re.pretest.test(text);
};
/**
 * LinkifyIt#testSchemaAt(text, name, position) -> Number
 * - text (String): text to scan
 * - name (String): rule (schema) name
 * - position (Number): text offset to check from
 *
 * Similar to [[LinkifyIt#test]] but checks only specific protocol tail exactly
 * at given position. Returns length of found pattern (0 on fail).
 **/ LinkifyIt.prototype.testSchemaAt = function testSchemaAt(text, schema, pos) {
    // If not supported schema check requested - terminate
    if (!this.__compiled__[schema.toLowerCase()]) return 0;
    return this.__compiled__[schema.toLowerCase()].validate(text, pos, this);
};
/**
 * LinkifyIt#match(text) -> Array|null
 *
 * Returns array of found link descriptions or `null` on fail. We strongly
 * recommend to use [[LinkifyIt#test]] first, for best speed.
 *
 * ##### Result match description
 *
 * - __schema__ - link schema, can be empty for fuzzy links, or `//` for
 *   protocol-neutral  links.
 * - __index__ - offset of matched text
 * - __lastIndex__ - index of next char after mathch end
 * - __raw__ - matched text
 * - __text__ - normalized text
 * - __url__ - link, generated from matched text
 **/ LinkifyIt.prototype.match = function match(text) {
    var shift = 0, result = [];
    // Try to take previous element from cache, if .test() called before
    if (this.__index__ >= 0 && this.__text_cache__ === text) {
        result.push(createMatch(this, shift));
        shift = this.__last_index__;
    }
    // Cut head if cache was used
    var tail = shift ? text.slice(shift) : text;
    // Scan string until end reached
    while(this.test(tail)){
        result.push(createMatch(this, shift));
        tail = tail.slice(this.__last_index__);
        shift += this.__last_index__;
    }
    if (result.length) return result;
    return null;
};
/** chainable
 * LinkifyIt#tlds(list [, keepOld]) -> this
 * - list (Array): list of tlds
 * - keepOld (Boolean): merge with current list if `true` (`false` by default)
 *
 * Load (or merge) new tlds list. Those are user for fuzzy links (without prefix)
 * to avoid false positives. By default this algorythm used:
 *
 * - hostname with any 2-letter root zones are ok.
 * - biz|com|edu|gov|net|org|pro|web|xxx|aero|asia|coop|info|museum|name|shop|рф
 *   are ok.
 * - encoded (`xn--...`) root zones are ok.
 *
 * If list is replaced, then exact match for 2-chars root zones will be checked.
 **/ LinkifyIt.prototype.tlds = function tlds(list, keepOld) {
    list = Array.isArray(list) ? list : [
        list
    ];
    if (!keepOld) {
        this.__tlds__ = list.slice();
        this.__tlds_replaced__ = true;
        compile(this);
        return this;
    }
    this.__tlds__ = this.__tlds__.concat(list).sort().filter(function(el, idx, arr) {
        return el !== arr[idx - 1];
    }).reverse();
    compile(this);
    return this;
};
/**
 * LinkifyIt#normalize(match)
 *
 * Default normalizer (if schema does not define it's own).
 **/ LinkifyIt.prototype.normalize = function normalize(match) {
    // Do minimal possible changes by default. Need to collect feedback prior
    // to move forward https://github.com/markdown-it/linkify-it/issues/1
    if (!match.schema) match.url = "http://" + match.url;
    if (match.schema === "mailto:" && !/^mailto:/i.test(match.url)) match.url = "mailto:" + match.url;
};
/**
 * LinkifyIt#onCompile()
 *
 * Override to modify basic RegExp-s.
 **/ LinkifyIt.prototype.onCompile = function onCompile() {};
module.exports = LinkifyIt;

},{"./lib/re":"6OGSl"}],"6OGSl":[function(require,module,exports) {
"use strict";
module.exports = function(opts) {
    var re = {};
    // Use direct extract instead of `regenerate` to reduse browserified size
    re.src_Any = require("uc.micro/properties/Any/regex").source;
    re.src_Cc = require("uc.micro/categories/Cc/regex").source;
    re.src_Z = require("uc.micro/categories/Z/regex").source;
    re.src_P = require("uc.micro/categories/P/regex").source;
    // \p{\Z\P\Cc\CF} (white spaces + control + format + punctuation)
    re.src_ZPCc = [
        re.src_Z,
        re.src_P,
        re.src_Cc
    ].join("|");
    // \p{\Z\Cc} (white spaces + control)
    re.src_ZCc = [
        re.src_Z,
        re.src_Cc
    ].join("|");
    // Experimental. List of chars, completely prohibited in links
    // because can separate it from other part of text
    var text_separators = "[><\uFF5C]";
    // All possible word characters (everything without punctuation, spaces & controls)
    // Defined via punctuation & spaces to save space
    // Should be something like \p{\L\N\S\M} (\w but without `_`)
    re.src_pseudo_letter = "(?:(?!" + text_separators + "|" + re.src_ZPCc + ")" + re.src_Any + ")";
    // The same as abothe but without [0-9]
    // var src_pseudo_letter_non_d = '(?:(?![0-9]|' + src_ZPCc + ')' + src_Any + ')';
    ////////////////////////////////////////////////////////////////////////////////
    re.src_ip4 = "(?:(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)";
    // Prohibit any of "@/[]()" in user/pass to avoid wrong domain fetch.
    re.src_auth = "(?:(?:(?!" + re.src_ZCc + "|[@/\\[\\]()]).)+@)?";
    re.src_port = "(?::(?:6(?:[0-4]\\d{3}|5(?:[0-4]\\d{2}|5(?:[0-2]\\d|3[0-5])))|[1-5]?\\d{1,4}))?";
    re.src_host_terminator = "(?=$|" + text_separators + "|" + re.src_ZPCc + ")(?!-|_|:\\d|\\.-|\\.(?!$|" + re.src_ZPCc + "))";
    re.src_path = "(?:[/?#](?:(?!" + re.src_ZCc + "|" + text_separators + "|[()[\\]{}.,\"'?!\\-;]).|" + "\\[(?:(?!" + re.src_ZCc + "|\\]).)*\\]|" + "\\((?:(?!" + re.src_ZCc + "|[)]).)*\\)|" + "\\{(?:(?!" + re.src_ZCc + "|[}]).)*\\}|" + '\\"(?:(?!' + re.src_ZCc + '|["]).)+\\"|' + "\\'(?:(?!" + re.src_ZCc + "|[']).)+\\'|" + "\\'(?=" + re.src_pseudo_letter + "|[-]).|" + "\\.{2,}[a-zA-Z0-9%/&]|" + // github has ... in commit range links,
    // Restrict to
    // - english
    // - percent-encoded
    // - parts of file path
    // - params separator
    // until more examples found.
    "\\.(?!" + re.src_ZCc + "|[.]).|" + (opts && opts["---"] ? "\\-(?!--(?:[^-]|$))(?:-*)|" // `---` => long dash, terminate
     : "\\-+|") + ",(?!" + re.src_ZCc + ").|" + ";(?!" + re.src_ZCc + ").|" + "\\!+(?!" + re.src_ZCc + "|[!]).|" + "\\?(?!" + re.src_ZCc + "|[?])." + ")+" + "|\\/" + ")?";
    // Allow anything in markdown spec, forbid quote (") at the first position
    // because emails enclosed in quotes are far more common
    re.src_email_name = '[\\-;:&=\\+\\$,\\.a-zA-Z0-9_][\\-;:&=\\+\\$,\\"\\.a-zA-Z0-9_]*';
    re.src_xn = "xn--[a-z0-9\\-]{1,59}";
    // More to read about domain names
    // http://serverfault.com/questions/638260/
    re.src_domain_root = // Allow letters & digits (http://test1)
    "(?:" + re.src_xn + "|" + re.src_pseudo_letter + "{1,63}" + ")";
    re.src_domain = "(?:" + re.src_xn + "|" + "(?:" + re.src_pseudo_letter + ")" + "|" + "(?:" + re.src_pseudo_letter + "(?:-|" + re.src_pseudo_letter + "){0,61}" + re.src_pseudo_letter + ")" + ")";
    re.src_host = "(?:(?:(?:(?:" + re.src_domain + ")\\.)*" + re.src_domain /*_root*/  + ")" + ")";
    re.tpl_host_fuzzy = "(?:" + re.src_ip4 + "|" + "(?:(?:(?:" + re.src_domain + ")\\.)+(?:%TLDS%))" + ")";
    re.tpl_host_no_ip_fuzzy = "(?:(?:(?:" + re.src_domain + ")\\.)+(?:%TLDS%))";
    re.src_host_strict = re.src_host + re.src_host_terminator;
    re.tpl_host_fuzzy_strict = re.tpl_host_fuzzy + re.src_host_terminator;
    re.src_host_port_strict = re.src_host + re.src_port + re.src_host_terminator;
    re.tpl_host_port_fuzzy_strict = re.tpl_host_fuzzy + re.src_port + re.src_host_terminator;
    re.tpl_host_port_no_ip_fuzzy_strict = re.tpl_host_no_ip_fuzzy + re.src_port + re.src_host_terminator;
    ////////////////////////////////////////////////////////////////////////////////
    // Main rules
    // Rude test fuzzy links by host, for quick deny
    re.tpl_host_fuzzy_test = "localhost|www\\.|\\.\\d{1,3}\\.|(?:\\.(?:%TLDS%)(?:" + re.src_ZPCc + "|>|$))";
    re.tpl_email_fuzzy = "(^|" + text_separators + '|"|\\(|' + re.src_ZCc + ")" + "(" + re.src_email_name + "@" + re.tpl_host_fuzzy_strict + ")";
    re.tpl_link_fuzzy = // Fuzzy link can't be prepended with .:/\- and non punctuation.
    // but can start with > (markdown blockquote)
    "(^|(?![.:/\\-_@])(?:[$+<=>^`|\uFF5C]|" + re.src_ZPCc + "))" + "((?![$+<=>^`|\uFF5C])" + re.tpl_host_port_fuzzy_strict + re.src_path + ")";
    re.tpl_link_no_ip_fuzzy = // Fuzzy link can't be prepended with .:/\- and non punctuation.
    // but can start with > (markdown blockquote)
    "(^|(?![.:/\\-_@])(?:[$+<=>^`|\uFF5C]|" + re.src_ZPCc + "))" + "((?![$+<=>^`|\uFF5C])" + re.tpl_host_port_no_ip_fuzzy_strict + re.src_path + ")";
    return re;
};

},{"uc.micro/properties/Any/regex":"3eQ2Y","uc.micro/categories/Cc/regex":"ch9ds","uc.micro/categories/Z/regex":"bY1IV","uc.micro/categories/P/regex":"h8JTc"}],"6nhNf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ucs2decode", ()=>ucs2decode);
parcelHelpers.export(exports, "ucs2encode", ()=>ucs2encode);
parcelHelpers.export(exports, "decode", ()=>decode);
parcelHelpers.export(exports, "encode", ()=>encode);
parcelHelpers.export(exports, "toASCII", ()=>toASCII);
parcelHelpers.export(exports, "toUnicode", ()=>toUnicode);
"use strict";
/** Highest positive signed 32-bit float value */ const maxInt = 2147483647; // aka. 0x7FFFFFFF or 2^31-1
/** Bootstring parameters */ const base = 36;
const tMin = 1;
const tMax = 26;
const skew = 38;
const damp = 700;
const initialBias = 72;
const initialN = 128; // 0x80
const delimiter = "-"; // '\x2D'
/** Regular expressions */ const regexPunycode = /^xn--/;
const regexNonASCII = /[^\0-\x7E]/; // non-ASCII chars
const regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g; // RFC 3490 separators
/** Error messages */ const errors = {
    "overflow": "Overflow: input needs wider integers to process",
    "not-basic": "Illegal input >= 0x80 (not a basic code point)",
    "invalid-input": "Invalid input"
};
/** Convenience shortcuts */ const baseMinusTMin = base - tMin;
const floor = Math.floor;
const stringFromCharCode = String.fromCharCode;
/*--------------------------------------------------------------------------*/ /**
 * A generic error utility function.
 * @private
 * @param {String} type The error type.
 * @returns {Error} Throws a `RangeError` with the applicable error message.
 */ function error(type) {
    throw new RangeError(errors[type]);
}
/**
 * A generic `Array#map` utility function.
 * @private
 * @param {Array} array The array to iterate over.
 * @param {Function} callback The function that gets called for every array
 * item.
 * @returns {Array} A new array of values returned by the callback function.
 */ function map(array, fn) {
    const result = [];
    let length = array.length;
    while(length--)result[length] = fn(array[length]);
    return result;
}
/**
 * A simple `Array#map`-like wrapper to work with domain name strings or email
 * addresses.
 * @private
 * @param {String} domain The domain name or email address.
 * @param {Function} callback The function that gets called for every
 * character.
 * @returns {Array} A new string of characters returned by the callback
 * function.
 */ function mapDomain(string, fn) {
    const parts = string.split("@");
    let result = "";
    if (parts.length > 1) {
        // In email addresses, only the domain name should be punycoded. Leave
        // the local part (i.e. everything up to `@`) intact.
        result = parts[0] + "@";
        string = parts[1];
    }
    // Avoid `split(regex)` for IE8 compatibility. See #17.
    string = string.replace(regexSeparators, ".");
    const labels = string.split(".");
    const encoded = map(labels, fn).join(".");
    return result + encoded;
}
/**
 * Creates an array containing the numeric code points of each Unicode
 * character in the string. While JavaScript uses UCS-2 internally,
 * this function will convert a pair of surrogate halves (each of which
 * UCS-2 exposes as separate characters) into a single code point,
 * matching UTF-16.
 * @see `punycode.ucs2.encode`
 * @see <https://mathiasbynens.be/notes/javascript-encoding>
 * @memberOf punycode.ucs2
 * @name decode
 * @param {String} string The Unicode input string (UCS-2).
 * @returns {Array} The new array of code points.
 */ function ucs2decode(string) {
    const output = [];
    let counter = 0;
    const length = string.length;
    while(counter < length){
        const value = string.charCodeAt(counter++);
        if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
            // It's a high surrogate, and there is a next character.
            const extra = string.charCodeAt(counter++);
            if ((extra & 0xFC00) == 0xDC00) output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
            else {
                // It's an unmatched surrogate; only append this code unit, in case the
                // next code unit is the high surrogate of a surrogate pair.
                output.push(value);
                counter--;
            }
        } else output.push(value);
    }
    return output;
}
/**
 * Creates a string based on an array of numeric code points.
 * @see `punycode.ucs2.decode`
 * @memberOf punycode.ucs2
 * @name encode
 * @param {Array} codePoints The array of numeric code points.
 * @returns {String} The new Unicode string (UCS-2).
 */ const ucs2encode = (array)=>String.fromCodePoint(...array);
/**
 * Converts a basic code point into a digit/integer.
 * @see `digitToBasic()`
 * @private
 * @param {Number} codePoint The basic numeric code point value.
 * @returns {Number} The numeric value of a basic code point (for use in
 * representing integers) in the range `0` to `base - 1`, or `base` if
 * the code point does not represent a value.
 */ const basicToDigit = function(codePoint) {
    if (codePoint - 0x30 < 0x0A) return codePoint - 0x16;
    if (codePoint - 0x41 < 0x1A) return codePoint - 0x41;
    if (codePoint - 0x61 < 0x1A) return codePoint - 0x61;
    return base;
};
/**
 * Converts a digit/integer into a basic code point.
 * @see `basicToDigit()`
 * @private
 * @param {Number} digit The numeric value of a basic code point.
 * @returns {Number} The basic code point whose value (when used for
 * representing integers) is `digit`, which needs to be in the range
 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
 * used; else, the lowercase form is used. The behavior is undefined
 * if `flag` is non-zero and `digit` has no uppercase form.
 */ const digitToBasic = function(digit, flag) {
    //  0..25 map to ASCII a..z or A..Z
    // 26..35 map to ASCII 0..9
    return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
};
/**
 * Bias adaptation function as per section 3.4 of RFC 3492.
 * https://tools.ietf.org/html/rfc3492#section-3.4
 * @private
 */ const adapt = function(delta, numPoints, firstTime) {
    let k = 0;
    delta = firstTime ? floor(delta / damp) : delta >> 1;
    delta += floor(delta / numPoints);
    for(; delta > baseMinusTMin * tMax >> 1; k += base)delta = floor(delta / baseMinusTMin);
    return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
};
/**
 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
 * symbols.
 * @memberOf punycode
 * @param {String} input The Punycode string of ASCII-only symbols.
 * @returns {String} The resulting string of Unicode symbols.
 */ const decode = function(input) {
    // Don't use UCS-2.
    const output = [];
    const inputLength = input.length;
    let i = 0;
    let n = initialN;
    let bias = initialBias;
    // Handle the basic code points: let `basic` be the number of input code
    // points before the last delimiter, or `0` if there is none, then copy
    // the first basic code points to the output.
    let basic = input.lastIndexOf(delimiter);
    if (basic < 0) basic = 0;
    for(let j = 0; j < basic; ++j){
        // if it's not a basic code point
        if (input.charCodeAt(j) >= 0x80) error("not-basic");
        output.push(input.charCodeAt(j));
    }
    // Main decoding loop: start just after the last delimiter if any basic code
    // points were copied; start at the beginning otherwise.
    for(let index = basic > 0 ? basic + 1 : 0; index < inputLength;){
        // `index` is the index of the next character to be consumed.
        // Decode a generalized variable-length integer into `delta`,
        // which gets added to `i`. The overflow checking is easier
        // if we increase `i` as we go, then subtract off its starting
        // value at the end to obtain `delta`.
        let oldi = i;
        for(let w = 1, k = base;; k += base){
            if (index >= inputLength) error("invalid-input");
            const digit = basicToDigit(input.charCodeAt(index++));
            if (digit >= base || digit > floor((maxInt - i) / w)) error("overflow");
            i += digit * w;
            const t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
            if (digit < t) break;
            const baseMinusT = base - t;
            if (w > floor(maxInt / baseMinusT)) error("overflow");
            w *= baseMinusT;
        }
        const out = output.length + 1;
        bias = adapt(i - oldi, out, oldi == 0);
        // `i` was supposed to wrap around from `out` to `0`,
        // incrementing `n` each time, so we'll fix that now:
        if (floor(i / out) > maxInt - n) error("overflow");
        n += floor(i / out);
        i %= out;
        // Insert `n` at position `i` of the output.
        output.splice(i++, 0, n);
    }
    return String.fromCodePoint(...output);
};
/**
 * Converts a string of Unicode symbols (e.g. a domain name label) to a
 * Punycode string of ASCII-only symbols.
 * @memberOf punycode
 * @param {String} input The string of Unicode symbols.
 * @returns {String} The resulting Punycode string of ASCII-only symbols.
 */ const encode = function(input) {
    const output = [];
    // Convert the input in UCS-2 to an array of Unicode code points.
    input = ucs2decode(input);
    // Cache the length.
    let inputLength = input.length;
    // Initialize the state.
    let n = initialN;
    let delta = 0;
    let bias = initialBias;
    // Handle the basic code points.
    for (const currentValue of input)if (currentValue < 0x80) output.push(stringFromCharCode(currentValue));
    let basicLength = output.length;
    let handledCPCount = basicLength;
    // `handledCPCount` is the number of code points that have been handled;
    // `basicLength` is the number of basic code points.
    // Finish the basic string with a delimiter unless it's empty.
    if (basicLength) output.push(delimiter);
    // Main encoding loop:
    while(handledCPCount < inputLength){
        // All non-basic code points < n have been handled already. Find the next
        // larger one:
        let m = maxInt;
        for (const currentValue of input)if (currentValue >= n && currentValue < m) m = currentValue;
        // Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
        // but guard against overflow.
        const handledCPCountPlusOne = handledCPCount + 1;
        if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) error("overflow");
        delta += (m - n) * handledCPCountPlusOne;
        n = m;
        for (const currentValue1 of input){
            if (currentValue1 < n && ++delta > maxInt) error("overflow");
            if (currentValue1 == n) {
                // Represent delta as a generalized variable-length integer.
                let q = delta;
                for(let k = base;; k += base){
                    const t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
                    if (q < t) break;
                    const qMinusT = q - t;
                    const baseMinusT = base - t;
                    output.push(stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0)));
                    q = floor(qMinusT / baseMinusT);
                }
                output.push(stringFromCharCode(digitToBasic(q, 0)));
                bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
                delta = 0;
                ++handledCPCount;
            }
        }
        ++delta;
        ++n;
    }
    return output.join("");
};
/**
 * Converts a Punycode string representing a domain name or an email address
 * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
 * it doesn't matter if you call it on a string that has already been
 * converted to Unicode.
 * @memberOf punycode
 * @param {String} input The Punycoded domain name or email address to
 * convert to Unicode.
 * @returns {String} The Unicode representation of the given Punycode
 * string.
 */ const toUnicode = function(input) {
    return mapDomain(input, function(string) {
        return regexPunycode.test(string) ? decode(string.slice(4).toLowerCase()) : string;
    });
};
/**
 * Converts a Unicode string representing a domain name or an email address to
 * Punycode. Only the non-ASCII parts of the domain name will be converted,
 * i.e. it doesn't matter if you call it with a domain that's already in
 * ASCII.
 * @memberOf punycode
 * @param {String} input The domain name or email address to convert, as a
 * Unicode string.
 * @returns {String} The Punycode representation of the given domain name or
 * email address.
 */ const toASCII = function(input) {
    return mapDomain(input, function(string) {
        return regexNonASCII.test(string) ? "xn--" + encode(string) : string;
    });
};
/*--------------------------------------------------------------------------*/ /** Define the public API */ const punycode = {
    /**
	 * A string representing the current Punycode.js version number.
	 * @memberOf punycode
	 * @type String
	 */ "version": "2.1.0",
    /**
	 * An object of methods to convert from JavaScript's internal character
	 * representation (UCS-2) to Unicode code points, and back.
	 * @see <https://mathiasbynens.be/notes/javascript-encoding>
	 * @memberOf punycode
	 * @type Object
	 */ "ucs2": {
        "decode": ucs2decode,
        "encode": ucs2encode
    },
    "decode": decode,
    "encode": encode,
    "toASCII": toASCII,
    "toUnicode": toUnicode
};
exports.default = punycode;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"biCzc":[function(require,module,exports) {
// markdown-it default options
"use strict";
module.exports = {
    options: {
        html: false,
        xhtmlOut: false,
        breaks: false,
        langPrefix: "language-",
        linkify: false,
        // Enable some language-neutral replacements + quotes beautification
        typographer: false,
        // Double + single quotes replacement pairs, when typographer enabled,
        // and smartquotes on. Could be either a String or an Array.
        //
        // For example, you can use '«»„“' for Russian, '„“‚‘' for German,
        // and ['«\xA0', '\xA0»', '‹\xA0', '\xA0›'] for French (including nbsp).
        quotes: "\u201C\u201D\u2018\u2019",
        /* “”‘’ */ // Highlighter function. Should return escaped HTML,
        // or '' if the source string is not changed and should be escaped externaly.
        // If result starts with <pre... internal wrapper is skipped.
        //
        // function (/*str, lang*/) { return ''; }
        //
        highlight: null,
        maxNesting: 100 // Internal protection, recursion limit
    },
    components: {
        core: {},
        block: {},
        inline: {}
    }
};

},{}],"7sPz2":[function(require,module,exports) {
// "Zero" preset, with nothing enabled. Useful for manual configuring of simple
// modes. For example, to parse bold/italic only.
"use strict";
module.exports = {
    options: {
        html: false,
        xhtmlOut: false,
        breaks: false,
        langPrefix: "language-",
        linkify: false,
        // Enable some language-neutral replacements + quotes beautification
        typographer: false,
        // Double + single quotes replacement pairs, when typographer enabled,
        // and smartquotes on. Could be either a String or an Array.
        //
        // For example, you can use '«»„“' for Russian, '„“‚‘' for German,
        // and ['«\xA0', '\xA0»', '‹\xA0', '\xA0›'] for French (including nbsp).
        quotes: "\u201C\u201D\u2018\u2019",
        /* “”‘’ */ // Highlighter function. Should return escaped HTML,
        // or '' if the source string is not changed and should be escaped externaly.
        // If result starts with <pre... internal wrapper is skipped.
        //
        // function (/*str, lang*/) { return ''; }
        //
        highlight: null,
        maxNesting: 20 // Internal protection, recursion limit
    },
    components: {
        core: {
            rules: [
                "normalize",
                "block",
                "inline"
            ]
        },
        block: {
            rules: [
                "paragraph"
            ]
        },
        inline: {
            rules: [
                "text"
            ],
            rules2: [
                "balance_pairs",
                "text_collapse"
            ]
        }
    }
};

},{}],"1nTfr":[function(require,module,exports) {
// Commonmark default options
"use strict";
module.exports = {
    options: {
        html: true,
        xhtmlOut: true,
        breaks: false,
        langPrefix: "language-",
        linkify: false,
        // Enable some language-neutral replacements + quotes beautification
        typographer: false,
        // Double + single quotes replacement pairs, when typographer enabled,
        // and smartquotes on. Could be either a String or an Array.
        //
        // For example, you can use '«»„“' for Russian, '„“‚‘' for German,
        // and ['«\xA0', '\xA0»', '‹\xA0', '\xA0›'] for French (including nbsp).
        quotes: "\u201C\u201D\u2018\u2019",
        /* “”‘’ */ // Highlighter function. Should return escaped HTML,
        // or '' if the source string is not changed and should be escaped externaly.
        // If result starts with <pre... internal wrapper is skipped.
        //
        // function (/*str, lang*/) { return ''; }
        //
        highlight: null,
        maxNesting: 20 // Internal protection, recursion limit
    },
    components: {
        core: {
            rules: [
                "normalize",
                "block",
                "inline"
            ]
        },
        block: {
            rules: [
                "blockquote",
                "code",
                "fence",
                "heading",
                "hr",
                "html_block",
                "lheading",
                "list",
                "reference",
                "paragraph"
            ]
        },
        inline: {
            rules: [
                "autolink",
                "backticks",
                "emphasis",
                "entity",
                "escape",
                "html_inline",
                "image",
                "link",
                "newline",
                "text"
            ],
            rules2: [
                "balance_pairs",
                "emphasis",
                "text_collapse"
            ]
        }
    }
};

},{}],"5z8o8":[function(require,module,exports) {
!function(e, _) {
    module.exports = _(require("dayjs"));
}(this, function(e1) {
    "use strict";
    e1 = e1 && e1.hasOwnProperty("default") ? e1.default : e1;
    var _ = {
        name: "fr",
        weekdays: "dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),
        weekdaysShort: "dim._lun._mar._mer._jeu._ven._sam.".split("_"),
        weekdaysMin: "di_lu_ma_me_je_ve_sa".split("_"),
        months: "janvier_f\xe9vrier_mars_avril_mai_juin_juillet_ao\xfbt_septembre_octobre_novembre_d\xe9cembre".split("_"),
        monthsShort: "janv._f\xe9vr._mars_avr._mai_juin_juil._ao\xfbt_sept._oct._nov._d\xe9c.".split("_"),
        weekStart: 1,
        yearStart: 4,
        formats: {
            LT: "HH:mm",
            LTS: "HH:mm:ss",
            L: "DD/MM/YYYY",
            LL: "D MMMM YYYY",
            LLL: "D MMMM YYYY HH:mm",
            LLLL: "dddd D MMMM YYYY HH:mm"
        },
        relativeTime: {
            future: "dans %s",
            past: "il y a %s",
            s: "quelques secondes",
            m: "une minute",
            mm: "%d minutes",
            h: "une heure",
            hh: "%d heures",
            d: "un jour",
            dd: "%d jours",
            M: "un mois",
            MM: "%d mois",
            y: "un an",
            yy: "%d ans"
        },
        ordinal: function(e) {
            return "" + e + (1 === e ? "er" : "");
        }
    };
    return e1.locale(_, null, !0), _;
});

},{"dayjs":"NJZFB"}],"jjEh4":[function(require,module,exports) {
!function(e, n) {
    module.exports = n();
}(this, function() {
    "use strict";
    return {
        name: "en",
        weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),
        months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_")
    };
});

},{}],"anAVg":[function(require,module,exports) {
!function(e, s) {
    module.exports = s(require("dayjs"));
}(this, function(e1) {
    "use strict";
    e1 = e1 && e1.hasOwnProperty("default") ? e1.default : e1;
    var s = {
        name: "es",
        monthsShort: "ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"),
        weekdays: "domingo_lunes_martes_mi\xe9rcoles_jueves_viernes_s\xe1bado".split("_"),
        weekdaysShort: "dom._lun._mar._mi\xe9._jue._vie._s\xe1b.".split("_"),
        weekdaysMin: "do_lu_ma_mi_ju_vi_s\xe1".split("_"),
        months: "Enero_Febrero_Marzo_Abril_Mayo_Junio_Julio_Agosto_Septiembre_Octubre_Noviembre_Diciembre".split("_"),
        weekStart: 1,
        formats: {
            LT: "H:mm",
            LTS: "H:mm:ss",
            L: "DD/MM/YYYY",
            LL: "D [de] MMMM [de] YYYY",
            LLL: "D [de] MMMM [de] YYYY H:mm",
            LLLL: "dddd, D [de] MMMM [de] YYYY H:mm"
        },
        relativeTime: {
            future: "en %s",
            past: "hace %s",
            s: "unos segundos",
            m: "un minuto",
            mm: "%d minutos",
            h: "una hora",
            hh: "%d horas",
            d: "un d\xeda",
            dd: "%d d\xedas",
            M: "un mes",
            MM: "%d meses",
            y: "un a\xf1o",
            yy: "%d a\xf1os"
        },
        ordinal: function(e) {
            return e + "\xba";
        }
    };
    return e1.locale(s, null, !0), s;
});

},{"dayjs":"NJZFB"}],"kXF87":[function(require,module,exports) {
!function(e, t) {
    module.exports = t();
}(this, function() {
    "use strict";
    var e = {
        LTS: "h:mm:ss A",
        LT: "h:mm A",
        L: "MM/DD/YYYY",
        LL: "MMMM D, YYYY",
        LLL: "MMMM D, YYYY h:mm A",
        LLLL: "dddd, MMMM D, YYYY h:mm A"
    };
    return function(t1, n1, o1) {
        var r1 = n1.prototype, M1 = r1.format;
        o1.en.formats = e, r1.format = function(t2) {
            void 0 === t2 && (t2 = "YYYY-MM-DDTHH:mm:ssZ");
            var n2 = this.$locale().formats, o2 = function(t3, n3) {
                return t3.replace(/(\[[^\]]+])|(LTS?|l{1,4}|L{1,4})/g, function(t4, o, r) {
                    var M = r && r.toUpperCase();
                    return o || n3[r] || e[r] || n3[M].replace(/(\[[^\]]+])|(MMMM|MM|DD|dddd)/g, function(e, t, n) {
                        return t || n.slice(1);
                    });
                });
            }(t2, void 0 === n2 ? {} : n2);
            return M1.call(this, o2);
        };
    };
});

},{}],"a6buL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _vue = require("@sentry/vue");
var _tracing = require("@sentry/tracing");
var _config = require("./config");
var _configDefault = parcelHelpers.interopDefault(_config);
function InitSentry(app) {
    if ((0, _configDefault.default).sentry) {
        _vue.init({
            app,
            dsn: (0, _configDefault.default).sentry.dsn,
            integrations: [
                new (0, _tracing.Integrations).BrowserTracing()
            ],
            release: (0, _configDefault.default).sentry.release,
            ignoreErrors: [
                "AuthenticationRequired"
            ]
        });
        _vue.setTags((0, _configDefault.default).sentry.tags);
    }
}
exports.default = InitSentry;

},{"@sentry/vue":"jniQ3","@sentry/tracing":"lAvZa","./config":"G7A2j","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jniQ3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "init", ()=>(0, _sdk.init));
parcelHelpers.export(exports, "vueRouterInstrumentation", ()=>(0, _router.vueRouterInstrumentation));
parcelHelpers.export(exports, "attachErrorHandler", ()=>(0, _errorhandler.attachErrorHandler));
parcelHelpers.export(exports, "createTracingMixins", ()=>(0, _tracing.createTracingMixins));
var _browser = require("@sentry/browser");
parcelHelpers.exportAll(_browser, exports);
var _sdk = require("./sdk");
var _router = require("./router");
var _errorhandler = require("./errorhandler");
var _tracing = require("./tracing");

},{"@sentry/browser":"lFFil","./sdk":"5Y5vD","./router":"gdUB3","./errorhandler":"giaP9","./tracing":"5sNMy","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lFFil":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Integrations", ()=>INTEGRATIONS);
parcelHelpers.export(exports, "Transports", ()=>_transports);
var _tslib = require("tslib");
var _core = require("@sentry/core");
var _utils = require("@sentry/utils");
var _integrations = require("./integrations");
var _transports = require("./transports");
var _exports = require("./exports");
parcelHelpers.exportAll(_exports, exports);
var windowIntegrations = {};
// This block is needed to add compatibility with the integrations packages when used with a CDN
var _window = (0, _utils.getGlobalObject)();
if (_window.Sentry && _window.Sentry.Integrations) windowIntegrations = _window.Sentry.Integrations;
var INTEGRATIONS = (0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)({}, windowIntegrations), (0, _core.Integrations)), _integrations);

},{"tslib":"lRdW5","@sentry/core":"bWm3H","@sentry/utils":"5auop","./integrations":"hvGYe","./transports":"kqSAw","./exports":"85sHY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bWm3H":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "addBreadcrumb", ()=>(0, _minimal.addBreadcrumb));
parcelHelpers.export(exports, "captureException", ()=>(0, _minimal.captureException));
parcelHelpers.export(exports, "captureEvent", ()=>(0, _minimal.captureEvent));
parcelHelpers.export(exports, "captureMessage", ()=>(0, _minimal.captureMessage));
parcelHelpers.export(exports, "configureScope", ()=>(0, _minimal.configureScope));
parcelHelpers.export(exports, "startTransaction", ()=>(0, _minimal.startTransaction));
parcelHelpers.export(exports, "setContext", ()=>(0, _minimal.setContext));
parcelHelpers.export(exports, "setExtra", ()=>(0, _minimal.setExtra));
parcelHelpers.export(exports, "setExtras", ()=>(0, _minimal.setExtras));
parcelHelpers.export(exports, "setTag", ()=>(0, _minimal.setTag));
parcelHelpers.export(exports, "setTags", ()=>(0, _minimal.setTags));
parcelHelpers.export(exports, "setUser", ()=>(0, _minimal.setUser));
parcelHelpers.export(exports, "withScope", ()=>(0, _minimal.withScope));
parcelHelpers.export(exports, "addGlobalEventProcessor", ()=>(0, _hub.addGlobalEventProcessor));
parcelHelpers.export(exports, "getCurrentHub", ()=>(0, _hub.getCurrentHub));
parcelHelpers.export(exports, "getHubFromCarrier", ()=>(0, _hub.getHubFromCarrier));
parcelHelpers.export(exports, "Hub", ()=>(0, _hub.Hub));
parcelHelpers.export(exports, "makeMain", ()=>(0, _hub.makeMain));
parcelHelpers.export(exports, "Scope", ()=>(0, _hub.Scope));
parcelHelpers.export(exports, "API", ()=>(0, _api.API));
parcelHelpers.export(exports, "BaseClient", ()=>(0, _baseclient.BaseClient));
parcelHelpers.export(exports, "BaseBackend", ()=>(0, _basebackend.BaseBackend));
parcelHelpers.export(exports, "eventToSentryRequest", ()=>(0, _request.eventToSentryRequest));
parcelHelpers.export(exports, "sessionToSentryRequest", ()=>(0, _request.sessionToSentryRequest));
parcelHelpers.export(exports, "initAndBind", ()=>(0, _sdk.initAndBind));
parcelHelpers.export(exports, "NoopTransport", ()=>(0, _noop.NoopTransport));
parcelHelpers.export(exports, "SDK_VERSION", ()=>(0, _version.SDK_VERSION));
parcelHelpers.export(exports, "Integrations", ()=>_integrations);
var _integrations = require("./integrations");
var _minimal = require("@sentry/minimal");
var _hub = require("@sentry/hub");
var _api = require("./api");
var _baseclient = require("./baseclient");
var _basebackend = require("./basebackend");
var _request = require("./request");
var _sdk = require("./sdk");
var _noop = require("./transports/noop");
var _version = require("./version");

},{"./integrations":"kSCSG","@sentry/minimal":"1ZWIK","@sentry/hub":"cqx4p","./api":"lBZIO","./baseclient":"blPmr","./basebackend":"ku9SA","./request":"kNswP","./sdk":"c4En9","./transports/noop":"3bQdV","./version":"1zT0P","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kSCSG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "FunctionToString", ()=>(0, _functiontostring.FunctionToString));
parcelHelpers.export(exports, "InboundFilters", ()=>(0, _inboundfilters.InboundFilters));
var _functiontostring = require("./functiontostring");
var _inboundfilters = require("./inboundfilters");

},{"./functiontostring":"bk1rH","./inboundfilters":"8Oqww","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bk1rH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "FunctionToString", ()=>FunctionToString);
var originalFunctionToString;
/** Patch toString calls to return proper name for wrapped functions */ var FunctionToString = /** @class */ function() {
    function FunctionToString1() {
        /**
         * @inheritDoc
         */ this.name = FunctionToString1.id;
    }
    /**
     * @inheritDoc
     */ FunctionToString1.prototype.setupOnce = function() {
        // eslint-disable-next-line @typescript-eslint/unbound-method
        originalFunctionToString = Function.prototype.toString;
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        Function.prototype.toString = function() {
            var args = [];
            for(var _i = 0; _i < arguments.length; _i++)args[_i] = arguments[_i];
            var context = this.__sentry_original__ || this;
            return originalFunctionToString.apply(context, args);
        };
    };
    /**
     * @inheritDoc
     */ FunctionToString1.id = "FunctionToString";
    return FunctionToString1;
}();

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8Oqww":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "InboundFilters", ()=>InboundFilters);
var _tslib = require("tslib");
var _hub = require("@sentry/hub");
var _utils = require("@sentry/utils");
// "Script error." is hard coded into browsers for errors that it can't read.
// this is the result of a script being pulled in from an external domain and CORS.
var DEFAULT_IGNORE_ERRORS = [
    /^Script error\.?$/,
    /^Javascript error: Script error\.? on line 0$/
];
/** Inbound filters configurable by the user */ var InboundFilters = /** @class */ function() {
    function InboundFilters1(_options) {
        if (_options === void 0) _options = {};
        this._options = _options;
        /**
         * @inheritDoc
         */ this.name = InboundFilters1.id;
    }
    /**
     * @inheritDoc
     */ InboundFilters1.prototype.setupOnce = function() {
        (0, _hub.addGlobalEventProcessor)(function(event) {
            var hub = (0, _hub.getCurrentHub)();
            if (!hub) return event;
            var self = hub.getIntegration(InboundFilters1);
            if (self) {
                var client = hub.getClient();
                var clientOptions = client ? client.getOptions() : {};
                // This checks prevents most of the occurrences of the bug linked below:
                // https://github.com/getsentry/sentry-javascript/issues/2622
                // The bug is caused by multiple SDK instances, where one is minified and one is using non-mangled code.
                // Unfortunatelly we cannot fix it reliably (thus reserved property in rollup's terser config),
                // as we cannot force people using multiple instances in their apps to sync SDK versions.
                var options = typeof self._mergeOptions === "function" ? self._mergeOptions(clientOptions) : {};
                if (typeof self._shouldDropEvent !== "function") return event;
                return self._shouldDropEvent(event, options) ? null : event;
            }
            return event;
        });
    };
    /** JSDoc */ InboundFilters1.prototype._shouldDropEvent = function(event, options) {
        if (this._isSentryError(event, options)) {
            (0, _utils.logger).warn("Event dropped due to being internal Sentry Error.\nEvent: " + (0, _utils.getEventDescription)(event));
            return true;
        }
        if (this._isIgnoredError(event, options)) {
            (0, _utils.logger).warn("Event dropped due to being matched by `ignoreErrors` option.\nEvent: " + (0, _utils.getEventDescription)(event));
            return true;
        }
        if (this._isDeniedUrl(event, options)) {
            (0, _utils.logger).warn("Event dropped due to being matched by `denyUrls` option.\nEvent: " + (0, _utils.getEventDescription)(event) + ".\nUrl: " + this._getEventFilterUrl(event));
            return true;
        }
        if (!this._isAllowedUrl(event, options)) {
            (0, _utils.logger).warn("Event dropped due to not being matched by `allowUrls` option.\nEvent: " + (0, _utils.getEventDescription)(event) + ".\nUrl: " + this._getEventFilterUrl(event));
            return true;
        }
        return false;
    };
    /** JSDoc */ InboundFilters1.prototype._isSentryError = function(event, options) {
        if (!options.ignoreInternal) return false;
        try {
            return event && event.exception && event.exception.values && event.exception.values[0] && event.exception.values[0].type === "SentryError" || false;
        } catch (_oO) {
            return false;
        }
    };
    /** JSDoc */ InboundFilters1.prototype._isIgnoredError = function(event, options) {
        if (!options.ignoreErrors || !options.ignoreErrors.length) return false;
        return this._getPossibleEventMessages(event).some(function(message) {
            // Not sure why TypeScript complains here...
            return options.ignoreErrors.some(function(pattern) {
                return (0, _utils.isMatchingPattern)(message, pattern);
            });
        });
    };
    /** JSDoc */ InboundFilters1.prototype._isDeniedUrl = function(event, options) {
        // TODO: Use Glob instead?
        if (!options.denyUrls || !options.denyUrls.length) return false;
        var url = this._getEventFilterUrl(event);
        return !url ? false : options.denyUrls.some(function(pattern) {
            return (0, _utils.isMatchingPattern)(url, pattern);
        });
    };
    /** JSDoc */ InboundFilters1.prototype._isAllowedUrl = function(event, options) {
        // TODO: Use Glob instead?
        if (!options.allowUrls || !options.allowUrls.length) return true;
        var url = this._getEventFilterUrl(event);
        return !url ? true : options.allowUrls.some(function(pattern) {
            return (0, _utils.isMatchingPattern)(url, pattern);
        });
    };
    /** JSDoc */ InboundFilters1.prototype._mergeOptions = function(clientOptions) {
        if (clientOptions === void 0) clientOptions = {};
        return {
            allowUrls: (0, _tslib.__spread)(this._options.whitelistUrls || [], this._options.allowUrls || [], clientOptions.whitelistUrls || [], clientOptions.allowUrls || []),
            denyUrls: (0, _tslib.__spread)(this._options.blacklistUrls || [], this._options.denyUrls || [], clientOptions.blacklistUrls || [], clientOptions.denyUrls || []),
            ignoreErrors: (0, _tslib.__spread)(this._options.ignoreErrors || [], clientOptions.ignoreErrors || [], DEFAULT_IGNORE_ERRORS),
            ignoreInternal: typeof this._options.ignoreInternal !== "undefined" ? this._options.ignoreInternal : true
        };
    };
    /** JSDoc */ InboundFilters1.prototype._getPossibleEventMessages = function(event) {
        if (event.message) return [
            event.message
        ];
        if (event.exception) try {
            var _a = event.exception.values && event.exception.values[0] || {}, _b = _a.type, type = _b === void 0 ? "" : _b, _c = _a.value, value = _c === void 0 ? "" : _c;
            return [
                "" + value,
                type + ": " + value
            ];
        } catch (oO) {
            (0, _utils.logger).error("Cannot extract message for event " + (0, _utils.getEventDescription)(event));
            return [];
        }
        return [];
    };
    /** JSDoc */ InboundFilters1.prototype._getEventFilterUrl = function(event) {
        try {
            if (event.stacktrace) {
                var frames_1 = event.stacktrace.frames;
                return frames_1 && frames_1[frames_1.length - 1].filename || null;
            }
            if (event.exception) {
                var frames_2 = event.exception.values && event.exception.values[0].stacktrace && event.exception.values[0].stacktrace.frames;
                return frames_2 && frames_2[frames_2.length - 1].filename || null;
            }
            return null;
        } catch (oO) {
            (0, _utils.logger).error("Cannot extract url for event " + (0, _utils.getEventDescription)(event));
            return null;
        }
    };
    /**
     * @inheritDoc
     */ InboundFilters1.id = "InboundFilters";
    return InboundFilters1;
}();

},{"tslib":"lRdW5","@sentry/hub":"cqx4p","@sentry/utils":"5auop","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cqx4p":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "addGlobalEventProcessor", ()=>(0, _scope.addGlobalEventProcessor));
parcelHelpers.export(exports, "Scope", ()=>(0, _scope.Scope));
parcelHelpers.export(exports, "Session", ()=>(0, _session.Session));
parcelHelpers.export(exports, "SessionFlusher", ()=>(0, _sessionflusher.SessionFlusher));
parcelHelpers.export(exports, "getActiveDomain", ()=>(0, _hub.getActiveDomain));
parcelHelpers.export(exports, "getCurrentHub", ()=>(0, _hub.getCurrentHub));
parcelHelpers.export(exports, "getHubFromCarrier", ()=>(0, _hub.getHubFromCarrier));
parcelHelpers.export(exports, "getMainCarrier", ()=>(0, _hub.getMainCarrier));
parcelHelpers.export(exports, "Hub", ()=>(0, _hub.Hub));
parcelHelpers.export(exports, "makeMain", ()=>(0, _hub.makeMain));
parcelHelpers.export(exports, "setHubOnCarrier", ()=>(0, _hub.setHubOnCarrier));
var _scope = require("./scope");
var _session = require("./session");
var _sessionflusher = require("./sessionflusher");
var _hub = require("./hub");

},{"./scope":"dlu4O","./session":"5hcrL","./sessionflusher":"jVHDe","./hub":"80DzD","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dlu4O":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Scope", ()=>Scope);
/**
 * Add a EventProcessor to be kept globally.
 * @param callback EventProcessor to add
 */ parcelHelpers.export(exports, "addGlobalEventProcessor", ()=>addGlobalEventProcessor);
var _tslib = require("tslib");
var _utils = require("@sentry/utils");
/**
 * Absolute maximum number of breadcrumbs added to an event.
 * The `maxBreadcrumbs` option cannot be higher than this value.
 */ var MAX_BREADCRUMBS = 100;
/**
 * Holds additional event information. {@link Scope.applyToEvent} will be
 * called by the client before an event will be sent.
 */ var Scope = /** @class */ function() {
    function Scope1() {
        /** Flag if notifiying is happening. */ this._notifyingListeners = false;
        /** Callback for client to receive scope changes. */ this._scopeListeners = [];
        /** Callback list that will be called after {@link applyToEvent}. */ this._eventProcessors = [];
        /** Array of breadcrumbs. */ this._breadcrumbs = [];
        /** User */ this._user = {};
        /** Tags */ this._tags = {};
        /** Extra */ this._extra = {};
        /** Contexts */ this._contexts = {};
    }
    /**
     * Inherit values from the parent scope.
     * @param scope to clone.
     */ Scope1.clone = function(scope) {
        var newScope = new Scope1();
        if (scope) {
            newScope._breadcrumbs = (0, _tslib.__spread)(scope._breadcrumbs);
            newScope._tags = (0, _tslib.__assign)({}, scope._tags);
            newScope._extra = (0, _tslib.__assign)({}, scope._extra);
            newScope._contexts = (0, _tslib.__assign)({}, scope._contexts);
            newScope._user = scope._user;
            newScope._level = scope._level;
            newScope._span = scope._span;
            newScope._session = scope._session;
            newScope._transactionName = scope._transactionName;
            newScope._fingerprint = scope._fingerprint;
            newScope._eventProcessors = (0, _tslib.__spread)(scope._eventProcessors);
            newScope._requestSession = scope._requestSession;
        }
        return newScope;
    };
    /**
     * Add internal on change listener. Used for sub SDKs that need to store the scope.
     * @hidden
     */ Scope1.prototype.addScopeListener = function(callback) {
        this._scopeListeners.push(callback);
    };
    /**
     * @inheritDoc
     */ Scope1.prototype.addEventProcessor = function(callback) {
        this._eventProcessors.push(callback);
        return this;
    };
    /**
     * @inheritDoc
     */ Scope1.prototype.setUser = function(user) {
        this._user = user || {};
        if (this._session) this._session.update({
            user: user
        });
        this._notifyScopeListeners();
        return this;
    };
    /**
     * @inheritDoc
     */ Scope1.prototype.getUser = function() {
        return this._user;
    };
    /**
     * @inheritDoc
     */ Scope1.prototype.getRequestSession = function() {
        return this._requestSession;
    };
    /**
     * @inheritDoc
     */ Scope1.prototype.setRequestSession = function(requestSession) {
        this._requestSession = requestSession;
        return this;
    };
    /**
     * @inheritDoc
     */ Scope1.prototype.setTags = function(tags) {
        this._tags = (0, _tslib.__assign)((0, _tslib.__assign)({}, this._tags), tags);
        this._notifyScopeListeners();
        return this;
    };
    /**
     * @inheritDoc
     */ Scope1.prototype.setTag = function(key, value) {
        var _a;
        this._tags = (0, _tslib.__assign)((0, _tslib.__assign)({}, this._tags), (_a = {}, _a[key] = value, _a));
        this._notifyScopeListeners();
        return this;
    };
    /**
     * @inheritDoc
     */ Scope1.prototype.setExtras = function(extras) {
        this._extra = (0, _tslib.__assign)((0, _tslib.__assign)({}, this._extra), extras);
        this._notifyScopeListeners();
        return this;
    };
    /**
     * @inheritDoc
     */ Scope1.prototype.setExtra = function(key, extra) {
        var _a;
        this._extra = (0, _tslib.__assign)((0, _tslib.__assign)({}, this._extra), (_a = {}, _a[key] = extra, _a));
        this._notifyScopeListeners();
        return this;
    };
    /**
     * @inheritDoc
     */ Scope1.prototype.setFingerprint = function(fingerprint) {
        this._fingerprint = fingerprint;
        this._notifyScopeListeners();
        return this;
    };
    /**
     * @inheritDoc
     */ Scope1.prototype.setLevel = function(level) {
        this._level = level;
        this._notifyScopeListeners();
        return this;
    };
    /**
     * @inheritDoc
     */ Scope1.prototype.setTransactionName = function(name) {
        this._transactionName = name;
        this._notifyScopeListeners();
        return this;
    };
    /**
     * Can be removed in major version.
     * @deprecated in favor of {@link this.setTransactionName}
     */ Scope1.prototype.setTransaction = function(name) {
        return this.setTransactionName(name);
    };
    /**
     * @inheritDoc
     */ Scope1.prototype.setContext = function(key, context) {
        var _a;
        if (context === null) // eslint-disable-next-line @typescript-eslint/no-dynamic-delete
        delete this._contexts[key];
        else this._contexts = (0, _tslib.__assign)((0, _tslib.__assign)({}, this._contexts), (_a = {}, _a[key] = context, _a));
        this._notifyScopeListeners();
        return this;
    };
    /**
     * @inheritDoc
     */ Scope1.prototype.setSpan = function(span) {
        this._span = span;
        this._notifyScopeListeners();
        return this;
    };
    /**
     * @inheritDoc
     */ Scope1.prototype.getSpan = function() {
        return this._span;
    };
    /**
     * @inheritDoc
     */ Scope1.prototype.getTransaction = function() {
        var _a, _b, _c, _d;
        // often, this span will be a transaction, but it's not guaranteed to be
        var span = this.getSpan();
        // try it the new way first
        if ((_a = span) === null || _a === void 0 ? void 0 : _a.transaction) return (_b = span) === null || _b === void 0 ? void 0 : _b.transaction;
        // fallback to the old way (known bug: this only finds transactions with sampled = true)
        if ((_d = (_c = span) === null || _c === void 0 ? void 0 : _c.spanRecorder) === null || _d === void 0 ? void 0 : _d.spans[0]) return span.spanRecorder.spans[0];
        // neither way found a transaction
        return undefined;
    };
    /**
     * @inheritDoc
     */ Scope1.prototype.setSession = function(session) {
        if (!session) delete this._session;
        else this._session = session;
        this._notifyScopeListeners();
        return this;
    };
    /**
     * @inheritDoc
     */ Scope1.prototype.getSession = function() {
        return this._session;
    };
    /**
     * @inheritDoc
     */ Scope1.prototype.update = function(captureContext) {
        if (!captureContext) return this;
        if (typeof captureContext === "function") {
            var updatedScope = captureContext(this);
            return updatedScope instanceof Scope1 ? updatedScope : this;
        }
        if (captureContext instanceof Scope1) {
            this._tags = (0, _tslib.__assign)((0, _tslib.__assign)({}, this._tags), captureContext._tags);
            this._extra = (0, _tslib.__assign)((0, _tslib.__assign)({}, this._extra), captureContext._extra);
            this._contexts = (0, _tslib.__assign)((0, _tslib.__assign)({}, this._contexts), captureContext._contexts);
            if (captureContext._user && Object.keys(captureContext._user).length) this._user = captureContext._user;
            if (captureContext._level) this._level = captureContext._level;
            if (captureContext._fingerprint) this._fingerprint = captureContext._fingerprint;
            if (captureContext._requestSession) this._requestSession = captureContext._requestSession;
        } else if ((0, _utils.isPlainObject)(captureContext)) {
            captureContext;
            this._tags = (0, _tslib.__assign)((0, _tslib.__assign)({}, this._tags), captureContext.tags);
            this._extra = (0, _tslib.__assign)((0, _tslib.__assign)({}, this._extra), captureContext.extra);
            this._contexts = (0, _tslib.__assign)((0, _tslib.__assign)({}, this._contexts), captureContext.contexts);
            if (captureContext.user) this._user = captureContext.user;
            if (captureContext.level) this._level = captureContext.level;
            if (captureContext.fingerprint) this._fingerprint = captureContext.fingerprint;
            if (captureContext.requestSession) this._requestSession = captureContext.requestSession;
        }
        return this;
    };
    /**
     * @inheritDoc
     */ Scope1.prototype.clear = function() {
        this._breadcrumbs = [];
        this._tags = {};
        this._extra = {};
        this._user = {};
        this._contexts = {};
        this._level = undefined;
        this._transactionName = undefined;
        this._fingerprint = undefined;
        this._requestSession = undefined;
        this._span = undefined;
        this._session = undefined;
        this._notifyScopeListeners();
        return this;
    };
    /**
     * @inheritDoc
     */ Scope1.prototype.addBreadcrumb = function(breadcrumb, maxBreadcrumbs) {
        var maxCrumbs = typeof maxBreadcrumbs === "number" ? Math.min(maxBreadcrumbs, MAX_BREADCRUMBS) : MAX_BREADCRUMBS;
        // No data has been changed, so don't notify scope listeners
        if (maxCrumbs <= 0) return this;
        var mergedBreadcrumb = (0, _tslib.__assign)({
            timestamp: (0, _utils.dateTimestampInSeconds)()
        }, breadcrumb);
        this._breadcrumbs = (0, _tslib.__spread)(this._breadcrumbs, [
            mergedBreadcrumb
        ]).slice(-maxCrumbs);
        this._notifyScopeListeners();
        return this;
    };
    /**
     * @inheritDoc
     */ Scope1.prototype.clearBreadcrumbs = function() {
        this._breadcrumbs = [];
        this._notifyScopeListeners();
        return this;
    };
    /**
     * Applies the current context and fingerprint to the event.
     * Note that breadcrumbs will be added by the client.
     * Also if the event has already breadcrumbs on it, we do not merge them.
     * @param event Event
     * @param hint May contain additional informartion about the original exception.
     * @hidden
     */ Scope1.prototype.applyToEvent = function(event, hint) {
        var _a;
        if (this._extra && Object.keys(this._extra).length) event.extra = (0, _tslib.__assign)((0, _tslib.__assign)({}, this._extra), event.extra);
        if (this._tags && Object.keys(this._tags).length) event.tags = (0, _tslib.__assign)((0, _tslib.__assign)({}, this._tags), event.tags);
        if (this._user && Object.keys(this._user).length) event.user = (0, _tslib.__assign)((0, _tslib.__assign)({}, this._user), event.user);
        if (this._contexts && Object.keys(this._contexts).length) event.contexts = (0, _tslib.__assign)((0, _tslib.__assign)({}, this._contexts), event.contexts);
        if (this._level) event.level = this._level;
        if (this._transactionName) event.transaction = this._transactionName;
        // We want to set the trace context for normal events only if there isn't already
        // a trace context on the event. There is a product feature in place where we link
        // errors with transaction and it relys on that.
        if (this._span) {
            event.contexts = (0, _tslib.__assign)({
                trace: this._span.getTraceContext()
            }, event.contexts);
            var transactionName = (_a = this._span.transaction) === null || _a === void 0 ? void 0 : _a.name;
            if (transactionName) event.tags = (0, _tslib.__assign)({
                transaction: transactionName
            }, event.tags);
        }
        this._applyFingerprint(event);
        event.breadcrumbs = (0, _tslib.__spread)(event.breadcrumbs || [], this._breadcrumbs);
        event.breadcrumbs = event.breadcrumbs.length > 0 ? event.breadcrumbs : undefined;
        return this._notifyEventProcessors((0, _tslib.__spread)(getGlobalEventProcessors(), this._eventProcessors), event, hint);
    };
    /**
     * This will be called after {@link applyToEvent} is finished.
     */ Scope1.prototype._notifyEventProcessors = function(processors, event, hint, index) {
        var _this = this;
        if (index === void 0) index = 0;
        return new (0, _utils.SyncPromise)(function(resolve, reject) {
            var processor = processors[index];
            if (event === null || typeof processor !== "function") resolve(event);
            else {
                var result = processor((0, _tslib.__assign)({}, event), hint);
                if ((0, _utils.isThenable)(result)) result.then(function(final) {
                    return _this._notifyEventProcessors(processors, final, hint, index + 1).then(resolve);
                }).then(null, reject);
                else _this._notifyEventProcessors(processors, result, hint, index + 1).then(resolve).then(null, reject);
            }
        });
    };
    /**
     * This will be called on every set call.
     */ Scope1.prototype._notifyScopeListeners = function() {
        var _this = this;
        // We need this check for this._notifyingListeners to be able to work on scope during updates
        // If this check is not here we'll produce endless recursion when something is done with the scope
        // during the callback.
        if (!this._notifyingListeners) {
            this._notifyingListeners = true;
            this._scopeListeners.forEach(function(callback) {
                callback(_this);
            });
            this._notifyingListeners = false;
        }
    };
    /**
     * Applies fingerprint from the scope to the event if there's one,
     * uses message if there's one instead or get rid of empty fingerprint
     */ Scope1.prototype._applyFingerprint = function(event) {
        // Make sure it's an array first and we actually have something in place
        event.fingerprint = event.fingerprint ? Array.isArray(event.fingerprint) ? event.fingerprint : [
            event.fingerprint
        ] : [];
        // If we have something on the scope, then merge it with event
        if (this._fingerprint) event.fingerprint = event.fingerprint.concat(this._fingerprint);
        // If we have no data at all, remove empty array default
        if (event.fingerprint && !event.fingerprint.length) delete event.fingerprint;
    };
    return Scope1;
}();
/**
 * Retruns the global event processors.
 */ function getGlobalEventProcessors() {
    /* eslint-disable @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access  */ var global = (0, _utils.getGlobalObject)();
    global.__SENTRY__ = global.__SENTRY__ || {};
    global.__SENTRY__.globalEventProcessors = global.__SENTRY__.globalEventProcessors || [];
    return global.__SENTRY__.globalEventProcessors;
/* eslint-enable @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access */ }
function addGlobalEventProcessor(callback) {
    getGlobalEventProcessors().push(callback);
}

},{"tslib":"lRdW5","@sentry/utils":"5auop","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5auop":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _async = require("./async");
parcelHelpers.exportAll(_async, exports);
var _browser = require("./browser");
parcelHelpers.exportAll(_browser, exports);
var _dsn = require("./dsn");
parcelHelpers.exportAll(_dsn, exports);
var _error = require("./error");
parcelHelpers.exportAll(_error, exports);
var _instrument = require("./instrument");
parcelHelpers.exportAll(_instrument, exports);
var _is = require("./is");
parcelHelpers.exportAll(_is, exports);
var _logger = require("./logger");
parcelHelpers.exportAll(_logger, exports);
var _memo = require("./memo");
parcelHelpers.exportAll(_memo, exports);
var _misc = require("./misc");
parcelHelpers.exportAll(_misc, exports);
var _node = require("./node");
parcelHelpers.exportAll(_node, exports);
var _object = require("./object");
parcelHelpers.exportAll(_object, exports);
var _path = require("./path");
parcelHelpers.exportAll(_path, exports);
var _promisebuffer = require("./promisebuffer");
parcelHelpers.exportAll(_promisebuffer, exports);
var _stacktrace = require("./stacktrace");
parcelHelpers.exportAll(_stacktrace, exports);
var _string = require("./string");
parcelHelpers.exportAll(_string, exports);
var _supports = require("./supports");
parcelHelpers.exportAll(_supports, exports);
var _syncpromise = require("./syncpromise");
parcelHelpers.exportAll(_syncpromise, exports);
var _time = require("./time");
parcelHelpers.exportAll(_time, exports);

},{"./async":"dOFDX","./browser":"4zy0v","./dsn":"jwVZL","./error":"1RnP9","./instrument":"gOTR7","./is":"451Wr","./logger":"3LvdY","./memo":"fYv2G","./misc":"bgT10","./node":"2Azyo","./object":"56C4m","./path":"7BESG","./promisebuffer":"lufcL","./stacktrace":"2Z3L5","./string":"6VoCN","./supports":"6y74r","./syncpromise":"cSJ3y","./time":"bLEdM","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dOFDX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Consumes the promise and logs the error when it rejects.
 * @param promise A promise to forget.
 */ // eslint-disable-next-line @typescript-eslint/no-explicit-any
parcelHelpers.export(exports, "forget", ()=>forget);
function forget(promise) {
    promise.then(null, function(e) {
        // TODO: Use a better logging mechanism
        // eslint-disable-next-line no-console
        console.error(e);
    });
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4zy0v":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Given a child DOM element, returns a query-selector statement describing that
 * and its ancestors
 * e.g. [HTMLElement] => body > div > input#foo.btn[name=baz]
 * @returns generated DOM path
 */ parcelHelpers.export(exports, "htmlTreeAsString", ()=>htmlTreeAsString);
var _is = require("./is");
function htmlTreeAsString(elem, keyAttrs) {
    // try/catch both:
    // - accessing event.target (see getsentry/raven-js#838, #768)
    // - `htmlTreeAsString` because it's complex, and just accessing the DOM incorrectly
    // - can throw an exception in some circumstances.
    try {
        var currentElem = elem;
        var MAX_TRAVERSE_HEIGHT = 5;
        var MAX_OUTPUT_LEN = 80;
        var out = [];
        var height = 0;
        var len = 0;
        var separator = " > ";
        var sepLength = separator.length;
        var nextStr = void 0;
        // eslint-disable-next-line no-plusplus
        while(currentElem && (height++) < MAX_TRAVERSE_HEIGHT){
            nextStr = _htmlElementAsString(currentElem, keyAttrs);
            // bail out if
            // - nextStr is the 'html' element
            // - the length of the string that would be created exceeds MAX_OUTPUT_LEN
            //   (ignore this limit if we are on the first iteration)
            if (nextStr === "html" || height > 1 && len + out.length * sepLength + nextStr.length >= MAX_OUTPUT_LEN) break;
            out.push(nextStr);
            len += nextStr.length;
            currentElem = currentElem.parentNode;
        }
        return out.reverse().join(separator);
    } catch (_oO) {
        return "<unknown>";
    }
}
/**
 * Returns a simple, query-selector representation of a DOM element
 * e.g. [HTMLElement] => input#foo.btn[name=baz]
 * @returns generated DOM path
 */ function _htmlElementAsString(el, keyAttrs) {
    var _a, _b;
    var elem = el;
    var out = [];
    var className;
    var classes;
    var key;
    var attr;
    var i;
    if (!elem || !elem.tagName) return "";
    out.push(elem.tagName.toLowerCase());
    // Pairs of attribute keys defined in `serializeAttribute` and their values on element.
    var keyAttrPairs = ((_a = keyAttrs) === null || _a === void 0 ? void 0 : _a.length) ? keyAttrs.filter(function(keyAttr) {
        return elem.getAttribute(keyAttr);
    }).map(function(keyAttr) {
        return [
            keyAttr,
            elem.getAttribute(keyAttr)
        ];
    }) : null;
    if ((_b = keyAttrPairs) === null || _b === void 0 ? void 0 : _b.length) keyAttrPairs.forEach(function(keyAttrPair) {
        out.push("[" + keyAttrPair[0] + '="' + keyAttrPair[1] + '"]');
    });
    else {
        if (elem.id) out.push("#" + elem.id);
        // eslint-disable-next-line prefer-const
        className = elem.className;
        if (className && (0, _is.isString)(className)) {
            classes = className.split(/\s+/);
            for(i = 0; i < classes.length; i++)out.push("." + classes[i]);
        }
    }
    var allowedAttrs = [
        "type",
        "name",
        "title",
        "alt"
    ];
    for(i = 0; i < allowedAttrs.length; i++){
        key = allowedAttrs[i];
        attr = elem.getAttribute(key);
        if (attr) out.push("[" + key + '="' + attr + '"]');
    }
    return out.join("");
}

},{"./is":"451Wr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"451Wr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/* eslint-disable @typescript-eslint/no-explicit-any */ /* eslint-disable @typescript-eslint/explicit-module-boundary-types */ /**
 * Checks whether given value's type is one of a few Error or Error-like
 * {@link isError}.
 *
 * @param wat A value to be checked.
 * @returns A boolean representing the result.
 */ parcelHelpers.export(exports, "isError", ()=>isError);
/**
 * Checks whether given value's type is ErrorEvent
 * {@link isErrorEvent}.
 *
 * @param wat A value to be checked.
 * @returns A boolean representing the result.
 */ parcelHelpers.export(exports, "isErrorEvent", ()=>isErrorEvent);
/**
 * Checks whether given value's type is DOMError
 * {@link isDOMError}.
 *
 * @param wat A value to be checked.
 * @returns A boolean representing the result.
 */ parcelHelpers.export(exports, "isDOMError", ()=>isDOMError);
/**
 * Checks whether given value's type is DOMException
 * {@link isDOMException}.
 *
 * @param wat A value to be checked.
 * @returns A boolean representing the result.
 */ parcelHelpers.export(exports, "isDOMException", ()=>isDOMException);
/**
 * Checks whether given value's type is a string
 * {@link isString}.
 *
 * @param wat A value to be checked.
 * @returns A boolean representing the result.
 */ parcelHelpers.export(exports, "isString", ()=>isString);
/**
 * Checks whether given value's is a primitive (undefined, null, number, boolean, string, bigint, symbol)
 * {@link isPrimitive}.
 *
 * @param wat A value to be checked.
 * @returns A boolean representing the result.
 */ parcelHelpers.export(exports, "isPrimitive", ()=>isPrimitive);
/**
 * Checks whether given value's type is an object literal
 * {@link isPlainObject}.
 *
 * @param wat A value to be checked.
 * @returns A boolean representing the result.
 */ parcelHelpers.export(exports, "isPlainObject", ()=>isPlainObject);
/**
 * Checks whether given value's type is an Event instance
 * {@link isEvent}.
 *
 * @param wat A value to be checked.
 * @returns A boolean representing the result.
 */ parcelHelpers.export(exports, "isEvent", ()=>isEvent);
/**
 * Checks whether given value's type is an Element instance
 * {@link isElement}.
 *
 * @param wat A value to be checked.
 * @returns A boolean representing the result.
 */ parcelHelpers.export(exports, "isElement", ()=>isElement);
/**
 * Checks whether given value's type is an regexp
 * {@link isRegExp}.
 *
 * @param wat A value to be checked.
 * @returns A boolean representing the result.
 */ parcelHelpers.export(exports, "isRegExp", ()=>isRegExp);
/**
 * Checks whether given value has a then function.
 * @param wat A value to be checked.
 */ parcelHelpers.export(exports, "isThenable", ()=>isThenable);
/**
 * Checks whether given value's type is a SyntheticEvent
 * {@link isSyntheticEvent}.
 *
 * @param wat A value to be checked.
 * @returns A boolean representing the result.
 */ parcelHelpers.export(exports, "isSyntheticEvent", ()=>isSyntheticEvent);
/**
 * Checks whether given value's type is an instance of provided constructor.
 * {@link isInstanceOf}.
 *
 * @param wat A value to be checked.
 * @param base A constructor to be used in a check.
 * @returns A boolean representing the result.
 */ parcelHelpers.export(exports, "isInstanceOf", ()=>isInstanceOf);
function isError(wat) {
    switch(Object.prototype.toString.call(wat)){
        case "[object Error]":
            return true;
        case "[object Exception]":
            return true;
        case "[object DOMException]":
            return true;
        default:
            return isInstanceOf(wat, Error);
    }
}
function isErrorEvent(wat) {
    return Object.prototype.toString.call(wat) === "[object ErrorEvent]";
}
function isDOMError(wat) {
    return Object.prototype.toString.call(wat) === "[object DOMError]";
}
function isDOMException(wat) {
    return Object.prototype.toString.call(wat) === "[object DOMException]";
}
function isString(wat) {
    return Object.prototype.toString.call(wat) === "[object String]";
}
function isPrimitive(wat) {
    return wat === null || typeof wat !== "object" && typeof wat !== "function";
}
function isPlainObject(wat) {
    return Object.prototype.toString.call(wat) === "[object Object]";
}
function isEvent(wat) {
    return typeof Event !== "undefined" && isInstanceOf(wat, Event);
}
function isElement(wat) {
    return typeof Element !== "undefined" && isInstanceOf(wat, Element);
}
function isRegExp(wat) {
    return Object.prototype.toString.call(wat) === "[object RegExp]";
}
function isThenable(wat) {
    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
    return Boolean(wat && wat.then && typeof wat.then === "function");
}
function isSyntheticEvent(wat) {
    return isPlainObject(wat) && "nativeEvent" in wat && "preventDefault" in wat && "stopPropagation" in wat;
}
function isInstanceOf(wat, base) {
    try {
        return wat instanceof base;
    } catch (_e) {
        return false;
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jwVZL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Dsn", ()=>Dsn);
var _tslib = require("tslib");
var _error = require("./error");
/** Regular expression used to parse a Dsn. */ var DSN_REGEX = /^(?:(\w+):)\/\/(?:(\w+)(?::(\w+))?@)([\w.-]+)(?::(\d+))?\/(.+)/;
/** Error message */ var ERROR_MESSAGE = "Invalid Dsn";
/** The Sentry Dsn, identifying a Sentry instance and project. */ var Dsn = /** @class */ function() {
    /** Creates a new Dsn component */ function Dsn1(from) {
        if (typeof from === "string") this._fromString(from);
        else this._fromComponents(from);
        this._validate();
    }
    /**
     * Renders the string representation of this Dsn.
     *
     * By default, this will render the public representation without the password
     * component. To get the deprecated private representation, set `withPassword`
     * to true.
     *
     * @param withPassword When set to true, the password will be included.
     */ Dsn1.prototype.toString = function(withPassword) {
        if (withPassword === void 0) withPassword = false;
        var _a = this, host = _a.host, path = _a.path, pass = _a.pass, port = _a.port, projectId = _a.projectId, protocol = _a.protocol, publicKey = _a.publicKey;
        return protocol + "://" + publicKey + (withPassword && pass ? ":" + pass : "") + ("@" + host + (port ? ":" + port : "") + "/" + (path ? path + "/" : path) + projectId);
    };
    /** Parses a string into this Dsn. */ Dsn1.prototype._fromString = function(str) {
        var match = DSN_REGEX.exec(str);
        if (!match) throw new (0, _error.SentryError)(ERROR_MESSAGE);
        var _a = (0, _tslib.__read)(match.slice(1), 6), protocol = _a[0], publicKey = _a[1], _b = _a[2], pass = _b === void 0 ? "" : _b, host = _a[3], _c = _a[4], port = _c === void 0 ? "" : _c, lastPath = _a[5];
        var path = "";
        var projectId = lastPath;
        var split = projectId.split("/");
        if (split.length > 1) {
            path = split.slice(0, -1).join("/");
            projectId = split.pop();
        }
        if (projectId) {
            var projectMatch = projectId.match(/^\d+/);
            if (projectMatch) projectId = projectMatch[0];
        }
        this._fromComponents({
            host: host,
            pass: pass,
            path: path,
            projectId: projectId,
            port: port,
            protocol: protocol,
            publicKey: publicKey
        });
    };
    /** Maps Dsn components into this instance. */ Dsn1.prototype._fromComponents = function(components) {
        // TODO this is for backwards compatibility, and can be removed in a future version
        if ("user" in components && !("publicKey" in components)) components.publicKey = components.user;
        this.user = components.publicKey || "";
        this.protocol = components.protocol;
        this.publicKey = components.publicKey || "";
        this.pass = components.pass || "";
        this.host = components.host;
        this.port = components.port || "";
        this.path = components.path || "";
        this.projectId = components.projectId;
    };
    /** Validates this Dsn and throws on error. */ Dsn1.prototype._validate = function() {
        var _this = this;
        [
            "protocol",
            "publicKey",
            "host",
            "projectId"
        ].forEach(function(component) {
            if (!_this[component]) throw new (0, _error.SentryError)(ERROR_MESSAGE + ": " + component + " missing");
        });
        if (!this.projectId.match(/^\d+$/)) throw new (0, _error.SentryError)(ERROR_MESSAGE + ": Invalid projectId " + this.projectId);
        if (this.protocol !== "http" && this.protocol !== "https") throw new (0, _error.SentryError)(ERROR_MESSAGE + ": Invalid protocol " + this.protocol);
        if (this.port && isNaN(parseInt(this.port, 10))) throw new (0, _error.SentryError)(ERROR_MESSAGE + ": Invalid port " + this.port);
    };
    return Dsn1;
}();

},{"tslib":"lRdW5","./error":"1RnP9","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1RnP9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SentryError", ()=>SentryError);
var _tslib = require("tslib");
var _polyfill = require("./polyfill");
/** An error emitted by Sentry SDKs and related utilities. */ var SentryError = /** @class */ function(_super) {
    (0, _tslib.__extends)(SentryError1, _super);
    function SentryError1(message) {
        var _newTarget = this.constructor;
        var _this = _super.call(this, message) || this;
        _this.message = message;
        _this.name = _newTarget.prototype.constructor.name;
        (0, _polyfill.setPrototypeOf)(_this, _newTarget.prototype);
        return _this;
    }
    return SentryError1;
}(Error);

},{"tslib":"lRdW5","./polyfill":"asPcD","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"asPcD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "setPrototypeOf", ()=>setPrototypeOf);
var setPrototypeOf = Object.setPrototypeOf || (({
    __proto__: []
}) instanceof Array ? setProtoOf : mixinProperties);
/**
 * setPrototypeOf polyfill using __proto__
 */ // eslint-disable-next-line @typescript-eslint/ban-types
function setProtoOf(obj, proto) {
    // @ts-ignore __proto__ does not exist on obj
    obj.__proto__ = proto;
    return obj;
}
/**
 * setPrototypeOf polyfill using mixin
 */ // eslint-disable-next-line @typescript-eslint/ban-types
function mixinProperties(obj, proto) {
    for(var prop in proto)// eslint-disable-next-line no-prototype-builtins
    if (!obj.hasOwnProperty(prop)) // @ts-ignore typescript complains about indexing so we remove
    obj[prop] = proto[prop];
    return obj;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gOTR7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Add handler that will be called when given type of instrumentation triggers.
 * Use at your own risk, this might break without changelog notice, only used internally.
 * @hidden
 */ parcelHelpers.export(exports, "addInstrumentationHandler", ()=>addInstrumentationHandler);
var _tslib = require("tslib");
var _is = require("./is");
var _logger = require("./logger");
var _misc = require("./misc");
var _object = require("./object");
var _stacktrace = require("./stacktrace");
var _supports = require("./supports");
var global = (0, _misc.getGlobalObject)();
/**
 * Instrument native APIs to call handlers that can be used to create breadcrumbs, APM spans etc.
 *  - Console API
 *  - Fetch API
 *  - XHR API
 *  - History API
 *  - DOM API (click/typing)
 *  - Error API
 *  - UnhandledRejection API
 */ var handlers = {};
var instrumented = {};
/** Instruments given API */ function instrument(type) {
    if (instrumented[type]) return;
    instrumented[type] = true;
    switch(type){
        case "console":
            instrumentConsole();
            break;
        case "dom":
            instrumentDOM();
            break;
        case "xhr":
            instrumentXHR();
            break;
        case "fetch":
            instrumentFetch();
            break;
        case "history":
            instrumentHistory();
            break;
        case "error":
            instrumentError();
            break;
        case "unhandledrejection":
            instrumentUnhandledRejection();
            break;
        default:
            (0, _logger.logger).warn("unknown instrumentation type:", type);
    }
}
function addInstrumentationHandler(handler) {
    if (!handler || typeof handler.type !== "string" || typeof handler.callback !== "function") return;
    handlers[handler.type] = handlers[handler.type] || [];
    handlers[handler.type].push(handler.callback);
    instrument(handler.type);
}
/** JSDoc */ function triggerHandlers(type, data) {
    var e_1, _a;
    if (!type || !handlers[type]) return;
    try {
        for(var _b = (0, _tslib.__values)(handlers[type] || []), _c = _b.next(); !_c.done; _c = _b.next()){
            var handler = _c.value;
            try {
                handler(data);
            } catch (e) {
                (0, _logger.logger).error("Error while triggering instrumentation handler.\nType: " + type + "\nName: " + (0, _stacktrace.getFunctionName)(handler) + "\nError: " + e);
            }
        }
    } catch (e_1_1) {
        e_1 = {
            error: e_1_1
        };
    } finally{
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        } finally{
            if (e_1) throw e_1.error;
        }
    }
}
/** JSDoc */ function instrumentConsole() {
    if (!("console" in global)) return;
    [
        "debug",
        "info",
        "warn",
        "error",
        "log",
        "assert"
    ].forEach(function(level) {
        if (!(level in global.console)) return;
        (0, _object.fill)(global.console, level, function(originalConsoleLevel) {
            return function() {
                var args = [];
                for(var _i = 0; _i < arguments.length; _i++)args[_i] = arguments[_i];
                triggerHandlers("console", {
                    args: args,
                    level: level
                });
                // this fails for some browsers. :(
                if (originalConsoleLevel) Function.prototype.apply.call(originalConsoleLevel, global.console, args);
            };
        });
    });
}
/** JSDoc */ function instrumentFetch() {
    if (!(0, _supports.supportsNativeFetch)()) return;
    (0, _object.fill)(global, "fetch", function(originalFetch) {
        return function() {
            var args = [];
            for(var _i = 0; _i < arguments.length; _i++)args[_i] = arguments[_i];
            var handlerData = {
                args: args,
                fetchData: {
                    method: getFetchMethod(args),
                    url: getFetchUrl(args)
                },
                startTimestamp: Date.now()
            };
            triggerHandlers("fetch", (0, _tslib.__assign)({}, handlerData));
            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
            return originalFetch.apply(global, args).then(function(response) {
                triggerHandlers("fetch", (0, _tslib.__assign)((0, _tslib.__assign)({}, handlerData), {
                    endTimestamp: Date.now(),
                    response: response
                }));
                return response;
            }, function(error) {
                triggerHandlers("fetch", (0, _tslib.__assign)((0, _tslib.__assign)({}, handlerData), {
                    endTimestamp: Date.now(),
                    error: error
                }));
                // NOTE: If you are a Sentry user, and you are seeing this stack frame,
                //       it means the sentry.javascript SDK caught an error invoking your application code.
                //       This is expected behavior and NOT indicative of a bug with sentry.javascript.
                throw error;
            });
        };
    });
}
/* eslint-disable @typescript-eslint/no-unsafe-member-access */ /** Extract `method` from fetch call arguments */ function getFetchMethod(fetchArgs) {
    if (fetchArgs === void 0) fetchArgs = [];
    if ("Request" in global && (0, _is.isInstanceOf)(fetchArgs[0], Request) && fetchArgs[0].method) return String(fetchArgs[0].method).toUpperCase();
    if (fetchArgs[1] && fetchArgs[1].method) return String(fetchArgs[1].method).toUpperCase();
    return "GET";
}
/** Extract `url` from fetch call arguments */ function getFetchUrl(fetchArgs) {
    if (fetchArgs === void 0) fetchArgs = [];
    if (typeof fetchArgs[0] === "string") return fetchArgs[0];
    if ("Request" in global && (0, _is.isInstanceOf)(fetchArgs[0], Request)) return fetchArgs[0].url;
    return String(fetchArgs[0]);
}
/* eslint-enable @typescript-eslint/no-unsafe-member-access */ /** JSDoc */ function instrumentXHR() {
    if (!("XMLHttpRequest" in global)) return;
    // Poor man's implementation of ES6 `Map`, tracking and keeping in sync key and value separately.
    var requestKeys = [];
    var requestValues = [];
    var xhrproto = XMLHttpRequest.prototype;
    (0, _object.fill)(xhrproto, "open", function(originalOpen) {
        return function() {
            var args = [];
            for(var _i1 = 0; _i1 < arguments.length; _i1++)args[_i1] = arguments[_i1];
            // eslint-disable-next-line @typescript-eslint/no-this-alias
            var xhr = this;
            var url = args[1];
            xhr.__sentry_xhr__ = {
                // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
                method: (0, _is.isString)(args[0]) ? args[0].toUpperCase() : args[0],
                url: args[1]
            };
            // if Sentry key appears in URL, don't capture it as a request
            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
            if ((0, _is.isString)(url) && xhr.__sentry_xhr__.method === "POST" && url.match(/sentry_key/)) xhr.__sentry_own_request__ = true;
            var onreadystatechangeHandler = function() {
                if (xhr.readyState === 4) {
                    try {
                        // touching statusCode in some platforms throws
                        // an exception
                        if (xhr.__sentry_xhr__) xhr.__sentry_xhr__.status_code = xhr.status;
                    } catch (e) {
                    /* do nothing */ }
                    try {
                        var requestPos = requestKeys.indexOf(xhr);
                        if (requestPos !== -1) {
                            // Make sure to pop both key and value to keep it in sync.
                            requestKeys.splice(requestPos);
                            var args_1 = requestValues.splice(requestPos)[0];
                            if (xhr.__sentry_xhr__ && args_1[0] !== undefined) xhr.__sentry_xhr__.body = args_1[0];
                        }
                    } catch (e1) {
                    /* do nothing */ }
                    triggerHandlers("xhr", {
                        args: args,
                        endTimestamp: Date.now(),
                        startTimestamp: Date.now(),
                        xhr: xhr
                    });
                }
            };
            if ("onreadystatechange" in xhr && typeof xhr.onreadystatechange === "function") (0, _object.fill)(xhr, "onreadystatechange", function(original) {
                return function() {
                    var readyStateArgs = [];
                    for(var _i = 0; _i < arguments.length; _i++)readyStateArgs[_i] = arguments[_i];
                    onreadystatechangeHandler();
                    return original.apply(xhr, readyStateArgs);
                };
            });
            else xhr.addEventListener("readystatechange", onreadystatechangeHandler);
            return originalOpen.apply(xhr, args);
        };
    });
    (0, _object.fill)(xhrproto, "send", function(originalSend) {
        return function() {
            var args = [];
            for(var _i = 0; _i < arguments.length; _i++)args[_i] = arguments[_i];
            requestKeys.push(this);
            requestValues.push(args);
            triggerHandlers("xhr", {
                args: args,
                startTimestamp: Date.now(),
                xhr: this
            });
            return originalSend.apply(this, args);
        };
    });
}
var lastHref;
/** JSDoc */ function instrumentHistory() {
    if (!(0, _supports.supportsHistory)()) return;
    var oldOnPopState = global.onpopstate;
    global.onpopstate = function() {
        var args = [];
        for(var _i = 0; _i < arguments.length; _i++)args[_i] = arguments[_i];
        var to = global.location.href;
        // keep track of the current URL state, as we always receive only the updated state
        var from = lastHref;
        lastHref = to;
        triggerHandlers("history", {
            from: from,
            to: to
        });
        if (oldOnPopState) // Apparently this can throw in Firefox when incorrectly implemented plugin is installed.
        // https://github.com/getsentry/sentry-javascript/issues/3344
        // https://github.com/bugsnag/bugsnag-js/issues/469
        try {
            return oldOnPopState.apply(this, args);
        } catch (_oO) {
        // no-empty
        }
    };
    /** @hidden */ function historyReplacementFunction(originalHistoryFunction) {
        return function() {
            var args = [];
            for(var _i = 0; _i < arguments.length; _i++)args[_i] = arguments[_i];
            var url = args.length > 2 ? args[2] : undefined;
            if (url) {
                // coerce to string (this is what pushState does)
                var from = lastHref;
                var to = String(url);
                // keep track of the current URL state, as we always receive only the updated state
                lastHref = to;
                triggerHandlers("history", {
                    from: from,
                    to: to
                });
            }
            return originalHistoryFunction.apply(this, args);
        };
    }
    (0, _object.fill)(global.history, "pushState", historyReplacementFunction);
    (0, _object.fill)(global.history, "replaceState", historyReplacementFunction);
}
var debounceDuration = 1000;
var debounceTimerID;
var lastCapturedEvent;
/**
 * Decide whether the current event should finish the debounce of previously captured one.
 * @param previous previously captured event
 * @param current event to be captured
 */ function shouldShortcircuitPreviousDebounce(previous, current) {
    // If there was no previous event, it should always be swapped for the new one.
    if (!previous) return true;
    // If both events have different type, then user definitely performed two separate actions. e.g. click + keypress.
    if (previous.type !== current.type) return true;
    try {
        // If both events have the same type, it's still possible that actions were performed on different targets.
        // e.g. 2 clicks on different buttons.
        if (previous.target !== current.target) return true;
    } catch (e) {
    // just accessing `target` property can throw an exception in some rare circumstances
    // see: https://github.com/getsentry/sentry-javascript/issues/838
    }
    // If both events have the same type _and_ same `target` (an element which triggered an event, _not necessarily_
    // to which an event listener was attached), we treat them as the same action, as we want to capture
    // only one breadcrumb. e.g. multiple clicks on the same button, or typing inside a user input box.
    return false;
}
/**
 * Decide whether an event should be captured.
 * @param event event to be captured
 */ function shouldSkipDOMEvent(event) {
    // We are only interested in filtering `keypress` events for now.
    if (event.type !== "keypress") return false;
    try {
        var target = event.target;
        if (!target || !target.tagName) return true;
        // Only consider keypress events on actual input elements. This will disregard keypresses targeting body
        // e.g.tabbing through elements, hotkeys, etc.
        if (target.tagName === "INPUT" || target.tagName === "TEXTAREA" || target.isContentEditable) return false;
    } catch (e) {
    // just accessing `target` property can throw an exception in some rare circumstances
    // see: https://github.com/getsentry/sentry-javascript/issues/838
    }
    return true;
}
/**
 * Wraps addEventListener to capture UI breadcrumbs
 * @param handler function that will be triggered
 * @param globalListener indicates whether event was captured by the global event listener
 * @returns wrapped breadcrumb events handler
 * @hidden
 */ function makeDOMEventHandler(handler, globalListener) {
    if (globalListener === void 0) globalListener = false;
    return function(event) {
        // It's possible this handler might trigger multiple times for the same
        // event (e.g. event propagation through node ancestors).
        // Ignore if we've already captured that event.
        if (!event || lastCapturedEvent === event) return;
        // We always want to skip _some_ events.
        if (shouldSkipDOMEvent(event)) return;
        var name = event.type === "keypress" ? "input" : event.type;
        // If there is no debounce timer, it means that we can safely capture the new event and store it for future comparisons.
        if (debounceTimerID === undefined) {
            handler({
                event: event,
                name: name,
                global: globalListener
            });
            lastCapturedEvent = event;
        } else if (shouldShortcircuitPreviousDebounce(lastCapturedEvent, event)) {
            handler({
                event: event,
                name: name,
                global: globalListener
            });
            lastCapturedEvent = event;
        }
        // Start a new debounce timer that will prevent us from capturing multiple events that should be grouped together.
        clearTimeout(debounceTimerID);
        debounceTimerID = global.setTimeout(function() {
            debounceTimerID = undefined;
        }, debounceDuration);
    };
}
/** JSDoc */ function instrumentDOM() {
    if (!("document" in global)) return;
    // Make it so that any click or keypress that is unhandled / bubbled up all the way to the document triggers our dom
    // handlers. (Normally we have only one, which captures a breadcrumb for each click or keypress.) Do this before
    // we instrument `addEventListener` so that we don't end up attaching this handler twice.
    var triggerDOMHandler = triggerHandlers.bind(null, "dom");
    var globalDOMEventHandler = makeDOMEventHandler(triggerDOMHandler, true);
    global.document.addEventListener("click", globalDOMEventHandler, false);
    global.document.addEventListener("keypress", globalDOMEventHandler, false);
    // After hooking into click and keypress events bubbled up to `document`, we also hook into user-handled
    // clicks & keypresses, by adding an event listener of our own to any element to which they add a listener. That
    // way, whenever one of their handlers is triggered, ours will be, too. (This is needed because their handler
    // could potentially prevent the event from bubbling up to our global listeners. This way, our handler are still
    // guaranteed to fire at least once.)
    [
        "EventTarget",
        "Node"
    ].forEach(function(target) {
        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
        var proto = global[target] && global[target].prototype;
        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, no-prototype-builtins
        if (!proto || !proto.hasOwnProperty || !proto.hasOwnProperty("addEventListener")) return;
        (0, _object.fill)(proto, "addEventListener", function(originalAddEventListener) {
            return function(type, listener, options) {
                if (type === "click" || type == "keypress") try {
                    var el = this;
                    var handlers_1 = el.__sentry_instrumentation_handlers__ = el.__sentry_instrumentation_handlers__ || {};
                    var handlerForType = handlers_1[type] = handlers_1[type] || {
                        refCount: 0
                    };
                    if (!handlerForType.handler) {
                        var handler = makeDOMEventHandler(triggerDOMHandler);
                        handlerForType.handler = handler;
                        originalAddEventListener.call(this, type, handler, options);
                    }
                    handlerForType.refCount += 1;
                } catch (e) {
                // Accessing dom properties is always fragile.
                // Also allows us to skip `addEventListenrs` calls with no proper `this` context.
                }
                return originalAddEventListener.call(this, type, listener, options);
            };
        });
        (0, _object.fill)(proto, "removeEventListener", function(originalRemoveEventListener) {
            return function(type, listener, options) {
                if (type === "click" || type == "keypress") try {
                    var el = this;
                    var handlers_2 = el.__sentry_instrumentation_handlers__ || {};
                    var handlerForType = handlers_2[type];
                    if (handlerForType) {
                        handlerForType.refCount -= 1;
                        // If there are no longer any custom handlers of the current type on this element, we can remove ours, too.
                        if (handlerForType.refCount <= 0) {
                            originalRemoveEventListener.call(this, type, handlerForType.handler, options);
                            handlerForType.handler = undefined;
                            delete handlers_2[type]; // eslint-disable-line @typescript-eslint/no-dynamic-delete
                        }
                        // If there are no longer any custom handlers of any type on this element, cleanup everything.
                        if (Object.keys(handlers_2).length === 0) delete el.__sentry_instrumentation_handlers__;
                    }
                } catch (e) {
                // Accessing dom properties is always fragile.
                // Also allows us to skip `addEventListenrs` calls with no proper `this` context.
                }
                return originalRemoveEventListener.call(this, type, listener, options);
            };
        });
    });
}
var _oldOnErrorHandler = null;
/** JSDoc */ function instrumentError() {
    _oldOnErrorHandler = global.onerror;
    global.onerror = function(msg, url, line, column, error) {
        triggerHandlers("error", {
            column: column,
            error: error,
            line: line,
            msg: msg,
            url: url
        });
        if (_oldOnErrorHandler) // eslint-disable-next-line prefer-rest-params
        return _oldOnErrorHandler.apply(this, arguments);
        return false;
    };
}
var _oldOnUnhandledRejectionHandler = null;
/** JSDoc */ function instrumentUnhandledRejection() {
    _oldOnUnhandledRejectionHandler = global.onunhandledrejection;
    global.onunhandledrejection = function(e) {
        triggerHandlers("unhandledrejection", e);
        if (_oldOnUnhandledRejectionHandler) // eslint-disable-next-line prefer-rest-params
        return _oldOnUnhandledRejectionHandler.apply(this, arguments);
        return true;
    };
}

},{"tslib":"lRdW5","./is":"451Wr","./logger":"3LvdY","./misc":"bgT10","./object":"56C4m","./stacktrace":"2Z3L5","./supports":"6y74r","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3LvdY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "logger", ()=>logger);
/* eslint-disable @typescript-eslint/no-explicit-any */ var _misc = require("./misc");
// TODO: Implement different loggers for different environments
var global = (0, _misc.getGlobalObject)();
/** Prefix for logging strings */ var PREFIX = "Sentry Logger ";
/** JSDoc */ var Logger = /** @class */ function() {
    /** JSDoc */ function Logger1() {
        this._enabled = false;
    }
    /** JSDoc */ Logger1.prototype.disable = function() {
        this._enabled = false;
    };
    /** JSDoc */ Logger1.prototype.enable = function() {
        this._enabled = true;
    };
    /** JSDoc */ Logger1.prototype.log = function() {
        var args = [];
        for(var _i = 0; _i < arguments.length; _i++)args[_i] = arguments[_i];
        if (!this._enabled) return;
        (0, _misc.consoleSandbox)(function() {
            global.console.log(PREFIX + "[Log]: " + args.join(" "));
        });
    };
    /** JSDoc */ Logger1.prototype.warn = function() {
        var args = [];
        for(var _i = 0; _i < arguments.length; _i++)args[_i] = arguments[_i];
        if (!this._enabled) return;
        (0, _misc.consoleSandbox)(function() {
            global.console.warn(PREFIX + "[Warn]: " + args.join(" "));
        });
    };
    /** JSDoc */ Logger1.prototype.error = function() {
        var args = [];
        for(var _i = 0; _i < arguments.length; _i++)args[_i] = arguments[_i];
        if (!this._enabled) return;
        (0, _misc.consoleSandbox)(function() {
            global.console.error(PREFIX + "[Error]: " + args.join(" "));
        });
    };
    return Logger1;
}();
// Ensure we only have a single logger instance, even if multiple versions of @sentry/utils are being used
global.__SENTRY__ = global.__SENTRY__ || {};
var logger = global.__SENTRY__.logger || (global.__SENTRY__.logger = new Logger());

},{"./misc":"bgT10","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bgT10":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Safely get global scope object
 *
 * @returns Global scope object
 */ parcelHelpers.export(exports, "getGlobalObject", ()=>getGlobalObject);
/**
 * UUID4 generator
 *
 * @returns string Generated UUID4.
 */ parcelHelpers.export(exports, "uuid4", ()=>uuid4);
/**
 * Parses string form of URL into an object
 * // borrowed from https://tools.ietf.org/html/rfc3986#appendix-B
 * // intentionally using regex and not <a/> href parsing trick because React Native and other
 * // environments where DOM might not be available
 * @returns parsed URL object
 */ parcelHelpers.export(exports, "parseUrl", ()=>parseUrl);
/**
 * Extracts either message or type+value from an event that can be used for user-facing logs
 * @returns event's description
 */ parcelHelpers.export(exports, "getEventDescription", ()=>getEventDescription);
/** JSDoc */ parcelHelpers.export(exports, "consoleSandbox", ()=>consoleSandbox);
/**
 * Adds exception values, type and value to an synthetic Exception.
 * @param event The event to modify.
 * @param value Value of the exception.
 * @param type Type of the exception.
 * @hidden
 */ parcelHelpers.export(exports, "addExceptionTypeValue", ()=>addExceptionTypeValue);
/**
 * Adds exception mechanism to a given event.
 * @param event The event to modify.
 * @param mechanism Mechanism of the mechanism.
 * @hidden
 */ parcelHelpers.export(exports, "addExceptionMechanism", ()=>addExceptionMechanism);
/**
 * A safe form of location.href
 */ parcelHelpers.export(exports, "getLocationHref", ()=>getLocationHref);
/**
 * Parses input into a SemVer interface
 * @param input string representation of a semver version
 */ parcelHelpers.export(exports, "parseSemver", ()=>parseSemver);
/**
 * Extracts Retry-After value from the request header or returns default value
 * @param now current unix timestamp
 * @param header string representation of 'Retry-After' header
 */ parcelHelpers.export(exports, "parseRetryAfterHeader", ()=>parseRetryAfterHeader);
/**
 * This function adds context (pre/post/line) lines to the provided frame
 *
 * @param lines string[] containing all lines
 * @param frame StackFrame that will be mutated
 * @param linesOfContext number of context lines we want to add pre/post
 */ parcelHelpers.export(exports, "addContextToFrame", ()=>addContextToFrame);
/**
 * Strip the query string and fragment off of a given URL or path (if present)
 *
 * @param urlPath Full URL or path, including possible query string and/or fragment
 * @returns URL or path without query string or fragment
 */ parcelHelpers.export(exports, "stripUrlQueryAndFragment", ()=>stripUrlQueryAndFragment);
var _node = require("./node");
var _string = require("./string");
var global = arguments[3];
var fallbackGlobalObject = {};
function getGlobalObject() {
    return (0, _node.isNodeEnv)() ? global : typeof window !== "undefined" ? window : typeof self !== "undefined" ? self : fallbackGlobalObject;
}
function uuid4() {
    var global1 = getGlobalObject();
    var crypto = global1.crypto || global1.msCrypto;
    if (!(crypto === void 0) && crypto.getRandomValues) {
        // Use window.crypto API if available
        var arr = new Uint16Array(8);
        crypto.getRandomValues(arr);
        // set 4 in byte 7
        // eslint-disable-next-line no-bitwise
        arr[3] = arr[3] & 0xfff | 0x4000;
        // set 2 most significant bits of byte 9 to '10'
        // eslint-disable-next-line no-bitwise
        arr[4] = arr[4] & 0x3fff | 0x8000;
        var pad = function(num) {
            var v = num.toString(16);
            while(v.length < 4)v = "0" + v;
            return v;
        };
        return pad(arr[0]) + pad(arr[1]) + pad(arr[2]) + pad(arr[3]) + pad(arr[4]) + pad(arr[5]) + pad(arr[6]) + pad(arr[7]);
    }
    // http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/2117523#2117523
    return "xxxxxxxxxxxx4xxxyxxxxxxxxxxxxxxx".replace(/[xy]/g, function(c) {
        // eslint-disable-next-line no-bitwise
        var r = Math.random() * 16 | 0;
        // eslint-disable-next-line no-bitwise
        var v = c === "x" ? r : r & 0x3 | 0x8;
        return v.toString(16);
    });
}
function parseUrl(url) {
    if (!url) return {};
    var match = url.match(/^(([^:/?#]+):)?(\/\/([^/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?$/);
    if (!match) return {};
    // coerce to undefined values to empty string so we don't get 'undefined'
    var query = match[6] || "";
    var fragment = match[8] || "";
    return {
        host: match[4],
        path: match[5],
        protocol: match[2],
        relative: match[5] + query + fragment
    };
}
function getEventDescription(event) {
    if (event.message) return event.message;
    if (event.exception && event.exception.values && event.exception.values[0]) {
        var exception = event.exception.values[0];
        if (exception.type && exception.value) return exception.type + ": " + exception.value;
        return exception.type || exception.value || event.event_id || "<unknown>";
    }
    return event.event_id || "<unknown>";
}
function consoleSandbox(callback) {
    var global2 = getGlobalObject();
    var levels = [
        "debug",
        "info",
        "warn",
        "error",
        "log",
        "assert"
    ];
    if (!("console" in global2)) return callback();
    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
    var originalConsole = global2.console;
    var wrappedLevels = {};
    // Restore all wrapped console methods
    levels.forEach(function(level) {
        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
        if (level in global2.console && originalConsole[level].__sentry_original__) {
            wrappedLevels[level] = originalConsole[level];
            originalConsole[level] = originalConsole[level].__sentry_original__;
        }
    });
    // Perform callback manipulations
    var result = callback();
    // Revert restoration to wrapped state
    Object.keys(wrappedLevels).forEach(function(level) {
        originalConsole[level] = wrappedLevels[level];
    });
    return result;
}
function addExceptionTypeValue(event, value, type) {
    event.exception = event.exception || {};
    event.exception.values = event.exception.values || [];
    event.exception.values[0] = event.exception.values[0] || {};
    event.exception.values[0].value = event.exception.values[0].value || value || "";
    event.exception.values[0].type = event.exception.values[0].type || type || "Error";
}
function addExceptionMechanism(event, mechanism) {
    if (mechanism === void 0) mechanism = {};
    // TODO: Use real type with `keyof Mechanism` thingy and maybe make it better?
    try {
        // @ts-ignore Type 'Mechanism | {}' is not assignable to type 'Mechanism | undefined'
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        event.exception.values[0].mechanism = event.exception.values[0].mechanism || {};
        Object.keys(mechanism).forEach(function(key) {
            // @ts-ignore Mechanism has no index signature
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            event.exception.values[0].mechanism[key] = mechanism[key];
        });
    } catch (_oO) {
    // no-empty
    }
}
function getLocationHref() {
    try {
        return document.location.href;
    } catch (oO) {
        return "";
    }
}
// https://semver.org/#is-there-a-suggested-regular-expression-regex-to-check-a-semver-string
var SEMVER_REGEXP = /^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$/;
function parseSemver(input) {
    var match = input.match(SEMVER_REGEXP) || [];
    var major = parseInt(match[1], 10);
    var minor = parseInt(match[2], 10);
    var patch = parseInt(match[3], 10);
    return {
        buildmetadata: match[5],
        major: isNaN(major) ? undefined : major,
        minor: isNaN(minor) ? undefined : minor,
        patch: isNaN(patch) ? undefined : patch,
        prerelease: match[4]
    };
}
var defaultRetryAfter = 60000; // 60 seconds
function parseRetryAfterHeader(now, header) {
    if (!header) return defaultRetryAfter;
    var headerDelay = parseInt("" + header, 10);
    if (!isNaN(headerDelay)) return headerDelay * 1000;
    var headerDate = Date.parse("" + header);
    if (!isNaN(headerDate)) return headerDate - now;
    return defaultRetryAfter;
}
function addContextToFrame(lines, frame, linesOfContext) {
    if (linesOfContext === void 0) linesOfContext = 5;
    var lineno = frame.lineno || 0;
    var maxLines = lines.length;
    var sourceLine = Math.max(Math.min(maxLines, lineno - 1), 0);
    frame.pre_context = lines.slice(Math.max(0, sourceLine - linesOfContext), sourceLine).map(function(line) {
        return (0, _string.snipLine)(line, 0);
    });
    frame.context_line = (0, _string.snipLine)(lines[Math.min(maxLines - 1, sourceLine)], frame.colno || 0);
    frame.post_context = lines.slice(Math.min(sourceLine + 1, maxLines), sourceLine + 1 + linesOfContext).map(function(line) {
        return (0, _string.snipLine)(line, 0);
    });
}
function stripUrlQueryAndFragment(urlPath) {
    // eslint-disable-next-line no-useless-escape
    return urlPath.split(/[\?#]/, 1)[0];
}

},{"./node":"2Azyo","./string":"6VoCN","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2Azyo":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Checks whether we're in the Node.js or Browser environment
 *
 * @returns Answer to given question
 */ parcelHelpers.export(exports, "isNodeEnv", ()=>isNodeEnv);
/**
 * Requires a module which is protected against bundler minification.
 *
 * @param request The module path to resolve
 */ // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/no-explicit-any
parcelHelpers.export(exports, "dynamicRequire", ()=>dynamicRequire);
/**
 * Helper for dynamically loading module that should work with linked dependencies.
 * The problem is that we _should_ be using `require(require.resolve(moduleName, { paths: [cwd()] }))`
 * However it's _not possible_ to do that with Webpack, as it has to know all the dependencies during
 * build time. `require.resolve` is also not available in any other way, so we cannot create,
 * a fake helper like we do with `dynamicRequire`.
 *
 * We always prefer to use local package, thus the value is not returned early from each `try/catch` block.
 * That is to mimic the behavior of `require.resolve` exactly.
 *
 * @param moduleName module name to require
 * @returns possibly required module
 */ parcelHelpers.export(exports, "loadModule", ()=>loadModule);
var process = require("process");
function isNodeEnv() {
    return Object.prototype.toString.call(typeof process !== "undefined" ? process : 0) === "[object process]";
}
function dynamicRequire(mod, request) {
    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
    return mod.require(request);
}
function loadModule(moduleName) {
    var mod;
    try {
        mod = dynamicRequire(module, moduleName);
    } catch (e) {
    // no-empty
    }
    try {
        var cwd = dynamicRequire(module, "process").cwd;
        mod = dynamicRequire(module, cwd() + "/node_modules/" + moduleName);
    } catch (e1) {
    // no-empty
    }
    return mod;
}

},{"process":"d5jf4","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6VoCN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Truncates given string to the maximum characters count
 *
 * @param str An object that contains serializable values
 * @param max Maximum number of characters in truncated string (0 = unlimited)
 * @returns string Encoded
 */ parcelHelpers.export(exports, "truncate", ()=>truncate);
/**
 * This is basically just `trim_line` from
 * https://github.com/getsentry/sentry/blob/master/src/sentry/lang/javascript/processor.py#L67
 *
 * @param str An object that contains serializable values
 * @param max Maximum number of characters in truncated string
 * @returns string Encoded
 */ parcelHelpers.export(exports, "snipLine", ()=>snipLine);
/**
 * Join values in array
 * @param input array of values to be joined together
 * @param delimiter string to be placed in-between values
 * @returns Joined values
 */ // eslint-disable-next-line @typescript-eslint/no-explicit-any
parcelHelpers.export(exports, "safeJoin", ()=>safeJoin);
/**
 * Checks if the value matches a regex or includes the string
 * @param value The string value to be checked against
 * @param pattern Either a regex or a string that must be contained in value
 */ parcelHelpers.export(exports, "isMatchingPattern", ()=>isMatchingPattern);
var _is = require("./is");
function truncate(str, max) {
    if (max === void 0) max = 0;
    if (typeof str !== "string" || max === 0) return str;
    return str.length <= max ? str : str.substr(0, max) + "...";
}
function snipLine(line, colno) {
    var newLine = line;
    var ll = newLine.length;
    if (ll <= 150) return newLine;
    if (colno > ll) // eslint-disable-next-line no-param-reassign
    colno = ll;
    var start = Math.max(colno - 60, 0);
    if (start < 5) start = 0;
    var end = Math.min(start + 140, ll);
    if (end > ll - 5) end = ll;
    if (end === ll) start = Math.max(end - 140, 0);
    newLine = newLine.slice(start, end);
    if (start > 0) newLine = "'{snip} " + newLine;
    if (end < ll) newLine += " {snip}";
    return newLine;
}
function safeJoin(input, delimiter) {
    if (!Array.isArray(input)) return "";
    var output = [];
    // eslint-disable-next-line @typescript-eslint/prefer-for-of
    for(var i = 0; i < input.length; i++){
        var value = input[i];
        try {
            output.push(String(value));
        } catch (e) {
            output.push("[value cannot be serialized]");
        }
    }
    return output.join(delimiter);
}
function isMatchingPattern(value, pattern) {
    if (!(0, _is.isString)(value)) return false;
    if ((0, _is.isRegExp)(pattern)) return pattern.test(value);
    if (typeof pattern === "string") return value.indexOf(pattern) !== -1;
    return false;
}

},{"./is":"451Wr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"56C4m":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Replace a method in an object with a wrapped version of itself.
 *
 * @param source An object that contains a method to be wrapped.
 * @param name The name of the method to be wrapped.
 * @param replacementFactory A higher-order function that takes the original version of the given method and returns a
 * wrapped version. Note: The function returned by `replacementFactory` needs to be a non-arrow function, in order to
 * preserve the correct value of `this`, and the original method must be called using `origMethod.call(this, <other
 * args>)` or `origMethod.apply(this, [<other args>])` (rather than being called directly), again to preserve `this`.
 * @returns void
 */ parcelHelpers.export(exports, "fill", ()=>fill);
/**
 * Encodes given object into url-friendly format
 *
 * @param object An object that contains serializable values
 * @returns string Encoded
 */ parcelHelpers.export(exports, "urlEncode", ()=>urlEncode);
/** JSDoc */ parcelHelpers.export(exports, "normalizeToSize", ()=>normalizeToSize);
/**
 * Walks an object to perform a normalization on it
 *
 * @param key of object that's walked in current iteration
 * @param value object to be walked
 * @param depth Optional number indicating how deep should walking be performed
 * @param memo Optional Memo class handling decycling
 */ // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
parcelHelpers.export(exports, "walk", ()=>walk);
/**
 * normalize()
 *
 * - Creates a copy to prevent original input mutation
 * - Skip non-enumerablers
 * - Calls `toJSON` if implemented
 * - Removes circular references
 * - Translates non-serializeable values (undefined/NaN/Functions) to serializable format
 * - Translates known global objects/Classes to a string representations
 * - Takes care of Error objects serialization
 * - Optionally limit depth of final output
 */ // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
parcelHelpers.export(exports, "normalize", ()=>normalize);
/**
 * Given any captured exception, extract its keys and create a sorted
 * and truncated list that will be used inside the event message.
 * eg. `Non-error exception captured with keys: foo, bar, baz`
 */ // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
parcelHelpers.export(exports, "extractExceptionKeysForMessage", ()=>extractExceptionKeysForMessage);
/**
 * Given any object, return the new object with removed keys that value was `undefined`.
 * Works recursively on objects and arrays.
 */ parcelHelpers.export(exports, "dropUndefinedKeys", ()=>dropUndefinedKeys);
var _tslib = require("tslib");
var _browser = require("./browser");
var _is = require("./is");
var _memo = require("./memo");
var _stacktrace = require("./stacktrace");
var _string = require("./string");
var global = arguments[3];
function fill(source, name, replacementFactory) {
    if (!(name in source)) return;
    var original = source[name];
    var wrapped = replacementFactory(original);
    // Make sure it's a function first, as we need to attach an empty prototype for `defineProperties` to work
    // otherwise it'll throw "TypeError: Object.defineProperties called on non-object"
    if (typeof wrapped === "function") try {
        wrapped.prototype = wrapped.prototype || {};
        Object.defineProperties(wrapped, {
            __sentry_original__: {
                enumerable: false,
                value: original
            }
        });
    } catch (_Oo) {
    // This can throw if multiple fill happens on a global object like XMLHttpRequest
    // Fixes https://github.com/getsentry/sentry-javascript/issues/2043
    }
    source[name] = wrapped;
}
function urlEncode(object) {
    return Object.keys(object).map(function(key) {
        return encodeURIComponent(key) + "=" + encodeURIComponent(object[key]);
    }).join("&");
}
/**
 * Transforms any object into an object literal with all its attributes
 * attached to it.
 *
 * @param value Initial source that we have to transform in order for it to be usable by the serializer
 */ function getWalkSource(value) {
    if ((0, _is.isError)(value)) {
        var error = value;
        var err = {
            message: error.message,
            name: error.name,
            stack: error.stack
        };
        for(var i in error)if (Object.prototype.hasOwnProperty.call(error, i)) err[i] = error[i];
        return err;
    }
    if ((0, _is.isEvent)(value)) {
        var event_1 = value;
        var source = {};
        source.type = event_1.type;
        // Accessing event.target can throw (see getsentry/raven-js#838, #768)
        try {
            source.target = (0, _is.isElement)(event_1.target) ? (0, _browser.htmlTreeAsString)(event_1.target) : Object.prototype.toString.call(event_1.target);
        } catch (_oO) {
            source.target = "<unknown>";
        }
        try {
            source.currentTarget = (0, _is.isElement)(event_1.currentTarget) ? (0, _browser.htmlTreeAsString)(event_1.currentTarget) : Object.prototype.toString.call(event_1.currentTarget);
        } catch (_oO1) {
            source.currentTarget = "<unknown>";
        }
        if (typeof CustomEvent !== "undefined" && (0, _is.isInstanceOf)(value, CustomEvent)) source.detail = event_1.detail;
        for(var i in event_1)if (Object.prototype.hasOwnProperty.call(event_1, i)) source[i] = event_1;
        return source;
    }
    return value;
}
/** Calculates bytes size of input string */ function utf8Length(value) {
    // eslint-disable-next-line no-bitwise
    return ~-encodeURI(value).split(/%..|./).length;
}
/** Calculates bytes size of input object */ function jsonSize(value) {
    return utf8Length(JSON.stringify(value));
}
function normalizeToSize(object, // Default Node.js REPL depth
depth, // 100kB, as 200kB is max payload size, so half sounds reasonable
maxSize) {
    if (depth === void 0) depth = 3;
    if (maxSize === void 0) maxSize = 102400;
    var serialized = normalize(object, depth);
    if (jsonSize(serialized) > maxSize) return normalizeToSize(object, depth - 1, maxSize);
    return serialized;
}
/**
 * Transform any non-primitive, BigInt, or Symbol-type value into a string. Acts as a no-op on strings, numbers,
 * booleans, null, and undefined.
 *
 * @param value The value to stringify
 * @returns For non-primitive, BigInt, and Symbol-type values, a string denoting the value's type, type and value, or
 *  type and `description` property, respectively. For non-BigInt, non-Symbol primitives, returns the original value,
 *  unchanged.
 */ function serializeValue(value) {
    var type = Object.prototype.toString.call(value);
    // Node.js REPL notation
    if (typeof value === "string") return value;
    if (type === "[object Object]") return "[Object]";
    if (type === "[object Array]") return "[Array]";
    var normalized = normalizeValue(value);
    return (0, _is.isPrimitive)(normalized) ? normalized : type;
}
/**
 * normalizeValue()
 *
 * Takes unserializable input and make it serializable friendly
 *
 * - translates undefined/NaN values to "[undefined]"/"[NaN]" respectively,
 * - serializes Error objects
 * - filter global objects
 */ function normalizeValue(value, key) {
    if (key === "domain" && value && typeof value === "object" && value._events) return "[Domain]";
    if (key === "domainEmitter") return "[DomainEmitter]";
    if (typeof global !== "undefined" && value === global) return "[Global]";
    if (typeof window !== "undefined" && value === window) return "[Window]";
    if (typeof document !== "undefined" && value === document) return "[Document]";
    // React's SyntheticEvent thingy
    if ((0, _is.isSyntheticEvent)(value)) return "[SyntheticEvent]";
    if (typeof value === "number" && value !== value) return "[NaN]";
    if (value === void 0) return "[undefined]";
    if (typeof value === "function") return "[Function: " + (0, _stacktrace.getFunctionName)(value) + "]";
    // symbols and bigints are considered primitives by TS, but aren't natively JSON-serilaizable
    if (typeof value === "symbol") return "[" + String(value) + "]";
    if (typeof value === "bigint") return "[BigInt: " + String(value) + "]";
    return value;
}
function walk(key, value, depth, memo) {
    if (depth === void 0) depth = Infinity;
    if (memo === void 0) memo = new (0, _memo.Memo)();
    // If we reach the maximum depth, serialize whatever has left
    if (depth === 0) return serializeValue(value);
    /* eslint-disable @typescript-eslint/no-unsafe-member-access */ // If value implements `toJSON` method, call it and return early
    if (value !== null && value !== undefined && typeof value.toJSON === "function") return value.toJSON();
    /* eslint-enable @typescript-eslint/no-unsafe-member-access */ // If normalized value is a primitive, there are no branches left to walk, so we can just bail out, as theres no point in going down that branch any further
    var normalized = normalizeValue(value, key);
    if ((0, _is.isPrimitive)(normalized)) return normalized;
    // Create source that we will use for next itterations, either objectified error object (Error type with extracted keys:value pairs) or the input itself
    var source = getWalkSource(value);
    // Create an accumulator that will act as a parent for all future itterations of that branch
    var acc = Array.isArray(value) ? [] : {};
    // If we already walked that branch, bail out, as it's circular reference
    if (memo.memoize(value)) return "[Circular ~]";
    // Walk all keys of the source
    for(var innerKey in source){
        // Avoid iterating over fields in the prototype if they've somehow been exposed to enumeration.
        if (!Object.prototype.hasOwnProperty.call(source, innerKey)) continue;
        // Recursively walk through all the child nodes
        acc[innerKey] = walk(innerKey, source[innerKey], depth - 1, memo);
    }
    // Once walked through all the branches, remove the parent from memo storage
    memo.unmemoize(value);
    // Return accumulated values
    return acc;
}
function normalize(input, depth) {
    try {
        return JSON.parse(JSON.stringify(input, function(key, value) {
            return walk(key, value, depth);
        }));
    } catch (_oO) {
        return "**non-serializable**";
    }
}
function extractExceptionKeysForMessage(exception, maxLength) {
    if (maxLength === void 0) maxLength = 40;
    var keys = Object.keys(getWalkSource(exception));
    keys.sort();
    if (!keys.length) return "[object has no keys]";
    if (keys[0].length >= maxLength) return (0, _string.truncate)(keys[0], maxLength);
    for(var includedKeys = keys.length; includedKeys > 0; includedKeys--){
        var serialized = keys.slice(0, includedKeys).join(", ");
        if (serialized.length > maxLength) continue;
        if (includedKeys === keys.length) return serialized;
        return (0, _string.truncate)(serialized, maxLength);
    }
    return "";
}
function dropUndefinedKeys(val) {
    var e_1, _a;
    if ((0, _is.isPlainObject)(val)) {
        var obj = val;
        var rv = {};
        try {
            for(var _b = (0, _tslib.__values)(Object.keys(obj)), _c = _b.next(); !_c.done; _c = _b.next()){
                var key = _c.value;
                if (typeof obj[key] !== "undefined") rv[key] = dropUndefinedKeys(obj[key]);
            }
        } catch (e_1_1) {
            e_1 = {
                error: e_1_1
            };
        } finally{
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            } finally{
                if (e_1) throw e_1.error;
            }
        }
        return rv;
    }
    if (Array.isArray(val)) return val.map(dropUndefinedKeys);
    return val;
}

},{"tslib":"lRdW5","./browser":"4zy0v","./is":"451Wr","./memo":"fYv2G","./stacktrace":"2Z3L5","./string":"6VoCN","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fYv2G":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Memo", ()=>Memo);
/* eslint-disable @typescript-eslint/no-unsafe-member-access */ /* eslint-disable @typescript-eslint/no-explicit-any */ /* eslint-disable @typescript-eslint/explicit-module-boundary-types */ /**
 * Memo class used for decycle json objects. Uses WeakSet if available otherwise array.
 */ var Memo = /** @class */ function() {
    function Memo1() {
        this._hasWeakSet = typeof WeakSet === "function";
        this._inner = this._hasWeakSet ? new WeakSet() : [];
    }
    /**
     * Sets obj to remember.
     * @param obj Object to remember
     */ Memo1.prototype.memoize = function(obj) {
        if (this._hasWeakSet) {
            if (this._inner.has(obj)) return true;
            this._inner.add(obj);
            return false;
        }
        // eslint-disable-next-line @typescript-eslint/prefer-for-of
        for(var i = 0; i < this._inner.length; i++){
            var value = this._inner[i];
            if (value === obj) return true;
        }
        this._inner.push(obj);
        return false;
    };
    /**
     * Removes object from internal storage.
     * @param obj Object to forget
     */ Memo1.prototype.unmemoize = function(obj) {
        if (this._hasWeakSet) this._inner.delete(obj);
        else {
            for(var i = 0; i < this._inner.length; i++)if (this._inner[i] === obj) {
                this._inner.splice(i, 1);
                break;
            }
        }
    };
    return Memo1;
}();

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2Z3L5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Safely extract function name from itself
 */ parcelHelpers.export(exports, "getFunctionName", ()=>getFunctionName);
var defaultFunctionName = "<anonymous>";
function getFunctionName(fn) {
    try {
        if (!fn || typeof fn !== "function") return defaultFunctionName;
        return fn.name || defaultFunctionName;
    } catch (e) {
        // Just accessing custom props in some Selenium environments
        // can cause a "Permission denied" exception (see raven-js#495).
        return defaultFunctionName;
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6y74r":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Tells whether current environment supports ErrorEvent objects
 * {@link supportsErrorEvent}.
 *
 * @returns Answer to the given question.
 */ parcelHelpers.export(exports, "supportsErrorEvent", ()=>supportsErrorEvent);
/**
 * Tells whether current environment supports DOMError objects
 * {@link supportsDOMError}.
 *
 * @returns Answer to the given question.
 */ parcelHelpers.export(exports, "supportsDOMError", ()=>supportsDOMError);
/**
 * Tells whether current environment supports DOMException objects
 * {@link supportsDOMException}.
 *
 * @returns Answer to the given question.
 */ parcelHelpers.export(exports, "supportsDOMException", ()=>supportsDOMException);
/**
 * Tells whether current environment supports Fetch API
 * {@link supportsFetch}.
 *
 * @returns Answer to the given question.
 */ parcelHelpers.export(exports, "supportsFetch", ()=>supportsFetch);
/**
 * isNativeFetch checks if the given function is a native implementation of fetch()
 */ // eslint-disable-next-line @typescript-eslint/ban-types
parcelHelpers.export(exports, "isNativeFetch", ()=>isNativeFetch);
/**
 * Tells whether current environment supports Fetch API natively
 * {@link supportsNativeFetch}.
 *
 * @returns true if `window.fetch` is natively implemented, false otherwise
 */ parcelHelpers.export(exports, "supportsNativeFetch", ()=>supportsNativeFetch);
/**
 * Tells whether current environment supports ReportingObserver API
 * {@link supportsReportingObserver}.
 *
 * @returns Answer to the given question.
 */ parcelHelpers.export(exports, "supportsReportingObserver", ()=>supportsReportingObserver);
/**
 * Tells whether current environment supports Referrer Policy API
 * {@link supportsReferrerPolicy}.
 *
 * @returns Answer to the given question.
 */ parcelHelpers.export(exports, "supportsReferrerPolicy", ()=>supportsReferrerPolicy);
/**
 * Tells whether current environment supports History API
 * {@link supportsHistory}.
 *
 * @returns Answer to the given question.
 */ parcelHelpers.export(exports, "supportsHistory", ()=>supportsHistory);
var _logger = require("./logger");
var _misc = require("./misc");
function supportsErrorEvent() {
    try {
        new ErrorEvent("");
        return true;
    } catch (e) {
        return false;
    }
}
function supportsDOMError() {
    try {
        // Chrome: VM89:1 Uncaught TypeError: Failed to construct 'DOMError':
        // 1 argument required, but only 0 present.
        // @ts-ignore It really needs 1 argument, not 0.
        new DOMError("");
        return true;
    } catch (e) {
        return false;
    }
}
function supportsDOMException() {
    try {
        new DOMException("");
        return true;
    } catch (e) {
        return false;
    }
}
function supportsFetch() {
    if (!("fetch" in (0, _misc.getGlobalObject)())) return false;
    try {
        new Headers();
        new Request("");
        new Response();
        return true;
    } catch (e) {
        return false;
    }
}
function isNativeFetch(func) {
    return func && /^function fetch\(\)\s+\{\s+\[native code\]\s+\}$/.test(func.toString());
}
function supportsNativeFetch() {
    if (!supportsFetch()) return false;
    var global = (0, _misc.getGlobalObject)();
    // Fast path to avoid DOM I/O
    // eslint-disable-next-line @typescript-eslint/unbound-method
    if (isNativeFetch(global.fetch)) return true;
    // window.fetch is implemented, but is polyfilled or already wrapped (e.g: by a chrome extension)
    // so create a "pure" iframe to see if that has native fetch
    var result = false;
    var doc = global.document;
    // eslint-disable-next-line deprecation/deprecation
    if (doc && typeof doc.createElement === "function") try {
        var sandbox = doc.createElement("iframe");
        sandbox.hidden = true;
        doc.head.appendChild(sandbox);
        if (sandbox.contentWindow && sandbox.contentWindow.fetch) // eslint-disable-next-line @typescript-eslint/unbound-method
        result = isNativeFetch(sandbox.contentWindow.fetch);
        doc.head.removeChild(sandbox);
    } catch (err) {
        (0, _logger.logger).warn("Could not create sandbox iframe for pure fetch check, bailing to window.fetch: ", err);
    }
    return result;
}
function supportsReportingObserver() {
    return "ReportingObserver" in (0, _misc.getGlobalObject)();
}
function supportsReferrerPolicy() {
    // Despite all stars in the sky saying that Edge supports old draft syntax, aka 'never', 'always', 'origin' and 'default
    // https://caniuse.com/#feat=referrer-policy
    // It doesn't. And it throw exception instead of ignoring this parameter...
    // REF: https://github.com/getsentry/raven-js/issues/1233
    if (!supportsFetch()) return false;
    try {
        new Request("_", {
            referrerPolicy: "origin"
        });
        return true;
    } catch (e) {
        return false;
    }
}
function supportsHistory() {
    // NOTE: in Chrome App environment, touching history.pushState, *even inside
    //       a try/catch block*, will cause Chrome to output an error to console.error
    // borrowed from: https://github.com/angular/angular.js/pull/13945/files
    var global = (0, _misc.getGlobalObject)();
    /* eslint-disable @typescript-eslint/no-unsafe-member-access */ // eslint-disable-next-line @typescript-eslint/no-explicit-any
    var chrome = global.chrome;
    var isChromePackagedApp = chrome && chrome.app && chrome.app.runtime;
    /* eslint-enable @typescript-eslint/no-unsafe-member-access */ var hasHistoryApi = "history" in global && !!global.history.pushState && !!global.history.replaceState;
    return !isChromePackagedApp && hasHistoryApi;
}

},{"./logger":"3LvdY","./misc":"bgT10","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7BESG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// path.resolve([from ...], to)
// posix version
/** JSDoc */ parcelHelpers.export(exports, "resolve", ()=>resolve);
// path.relative(from, to)
// posix version
/** JSDoc */ parcelHelpers.export(exports, "relative", ()=>relative);
// path.normalize(path)
// posix version
/** JSDoc */ parcelHelpers.export(exports, "normalizePath", ()=>normalizePath);
// posix version
/** JSDoc */ parcelHelpers.export(exports, "isAbsolute", ()=>isAbsolute);
// posix version
/** JSDoc */ parcelHelpers.export(exports, "join", ()=>join);
/** JSDoc */ parcelHelpers.export(exports, "dirname", ()=>dirname);
/** JSDoc */ parcelHelpers.export(exports, "basename", ()=>basename);
// Slightly modified (no IE8 support, ES6) and transcribed to TypeScript
// https://raw.githubusercontent.com/calvinmetcalf/rollup-plugin-node-builtins/master/src/es6/path.js
/** JSDoc */ function normalizeArray(parts, allowAboveRoot) {
    // if the path tries to go above the root, `up` ends up > 0
    var up = 0;
    for(var i = parts.length - 1; i >= 0; i--){
        var last = parts[i];
        if (last === ".") parts.splice(i, 1);
        else if (last === "..") {
            parts.splice(i, 1);
            // eslint-disable-next-line no-plusplus
            up++;
        } else if (up) {
            parts.splice(i, 1);
            // eslint-disable-next-line no-plusplus
            up--;
        }
    }
    // if the path is allowed to go above the root, restore leading ..s
    if (allowAboveRoot) // eslint-disable-next-line no-plusplus
    for(; up--; up)parts.unshift("..");
    return parts;
}
// Split a filename into [root, dir, basename, ext], unix version
// 'root' is just a slash, or nothing.
var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^/]+?|)(\.[^./]*|))(?:[/]*)$/;
/** JSDoc */ function splitPath(filename) {
    var parts = splitPathRe.exec(filename);
    return parts ? parts.slice(1) : [];
}
function resolve() {
    var args = [];
    for(var _i = 0; _i < arguments.length; _i++)args[_i] = arguments[_i];
    var resolvedPath = "";
    var resolvedAbsolute = false;
    for(var i = args.length - 1; i >= -1 && !resolvedAbsolute; i--){
        var path = i >= 0 ? args[i] : "/";
        // Skip empty entries
        if (!path) continue;
        resolvedPath = path + "/" + resolvedPath;
        resolvedAbsolute = path.charAt(0) === "/";
    }
    // At this point the path should be resolved to a full absolute path, but
    // handle relative paths to be safe (might happen when process.cwd() fails)
    // Normalize the path
    resolvedPath = normalizeArray(resolvedPath.split("/").filter(function(p) {
        return !!p;
    }), !resolvedAbsolute).join("/");
    return (resolvedAbsolute ? "/" : "") + resolvedPath || ".";
}
/** JSDoc */ function trim(arr) {
    var start = 0;
    for(; start < arr.length; start++){
        if (arr[start] !== "") break;
    }
    var end = arr.length - 1;
    for(; end >= 0; end--){
        if (arr[end] !== "") break;
    }
    if (start > end) return [];
    return arr.slice(start, end - start + 1);
}
function relative(from, to) {
    /* eslint-disable no-param-reassign */ from = resolve(from).substr(1);
    to = resolve(to).substr(1);
    /* eslint-enable no-param-reassign */ var fromParts = trim(from.split("/"));
    var toParts = trim(to.split("/"));
    var length = Math.min(fromParts.length, toParts.length);
    var samePartsLength = length;
    for(var i = 0; i < length; i++)if (fromParts[i] !== toParts[i]) {
        samePartsLength = i;
        break;
    }
    var outputParts = [];
    for(var i = samePartsLength; i < fromParts.length; i++)outputParts.push("..");
    outputParts = outputParts.concat(toParts.slice(samePartsLength));
    return outputParts.join("/");
}
function normalizePath(path) {
    var isPathAbsolute = isAbsolute(path);
    var trailingSlash = path.substr(-1) === "/";
    // Normalize the path
    var normalizedPath = normalizeArray(path.split("/").filter(function(p) {
        return !!p;
    }), !isPathAbsolute).join("/");
    if (!normalizedPath && !isPathAbsolute) normalizedPath = ".";
    if (normalizedPath && trailingSlash) normalizedPath += "/";
    return (isPathAbsolute ? "/" : "") + normalizedPath;
}
function isAbsolute(path) {
    return path.charAt(0) === "/";
}
function join() {
    var args = [];
    for(var _i = 0; _i < arguments.length; _i++)args[_i] = arguments[_i];
    return normalizePath(args.join("/"));
}
function dirname(path) {
    var result = splitPath(path);
    var root = result[0];
    var dir = result[1];
    if (!root && !dir) // No dirname whatsoever
    return ".";
    if (dir) // It has a dirname, strip trailing slash
    dir = dir.substr(0, dir.length - 1);
    return root + dir;
}
function basename(path, ext) {
    var f = splitPath(path)[2];
    if (ext && f.substr(ext.length * -1) === ext) f = f.substr(0, f.length - ext.length);
    return f;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lufcL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "PromiseBuffer", ()=>PromiseBuffer);
var _error = require("./error");
var _syncpromise = require("./syncpromise");
/** A simple queue that holds promises. */ var PromiseBuffer = /** @class */ function() {
    function PromiseBuffer1(_limit) {
        this._limit = _limit;
        /** Internal set of queued Promises */ this._buffer = [];
    }
    /**
     * Says if the buffer is ready to take more requests
     */ PromiseBuffer1.prototype.isReady = function() {
        return this._limit === undefined || this.length() < this._limit;
    };
    /**
     * Add a promise (representing an in-flight action) to the queue, and set it to remove itself on fulfillment.
     *
     * @param taskProducer A function producing any PromiseLike<T>; In previous versions this used to be `task:
     *        PromiseLike<T>`, but under that model, Promises were instantly created on the call-site and their executor
     *        functions therefore ran immediately. Thus, even if the buffer was full, the action still happened. By
     *        requiring the promise to be wrapped in a function, we can defer promise creation until after the buffer
     *        limit check.
     * @returns The original promise.
     */ PromiseBuffer1.prototype.add = function(taskProducer) {
        var _this = this;
        if (!this.isReady()) return (0, _syncpromise.SyncPromise).reject(new (0, _error.SentryError)("Not adding Promise due to buffer limit reached."));
        // start the task and add its promise to the queue
        var task = taskProducer();
        if (this._buffer.indexOf(task) === -1) this._buffer.push(task);
        task.then(function() {
            return _this.remove(task);
        })// Use `then(null, rejectionHandler)` rather than `catch(rejectionHandler)` so that we can use `PromiseLike`
        // rather than `Promise`. `PromiseLike` doesn't have a `.catch` method, making its polyfill smaller. (ES5 didn't
        // have promises, so TS has to polyfill when down-compiling.)
        .then(null, function() {
            return _this.remove(task).then(null, function() {
            // We have to add another catch here because `this.remove()` starts a new promise chain.
            });
        });
        return task;
    };
    /**
     * Remove a promise from the queue.
     *
     * @param task Can be any PromiseLike<T>
     * @returns Removed promise.
     */ PromiseBuffer1.prototype.remove = function(task) {
        var removedTask = this._buffer.splice(this._buffer.indexOf(task), 1)[0];
        return removedTask;
    };
    /**
     * This function returns the number of unresolved promises in the queue.
     */ PromiseBuffer1.prototype.length = function() {
        return this._buffer.length;
    };
    /**
     * Wait for all promises in the queue to resolve or for timeout to expire, whichever comes first.
     *
     * @param timeout The time, in ms, after which to resolve to `false` if the queue is still non-empty. Passing `0` (or
     * not passing anything) will make the promise wait as long as it takes for the queue to drain before resolving to
     * `true`.
     * @returns A promise which will resolve to `true` if the queue is already empty or drains before the timeout, and
     * `false` otherwise
     */ PromiseBuffer1.prototype.drain = function(timeout) {
        var _this = this;
        return new (0, _syncpromise.SyncPromise)(function(resolve) {
            // wait for `timeout` ms and then resolve to `false` (if not cancelled first)
            var capturedSetTimeout = setTimeout(function() {
                if (timeout && timeout > 0) resolve(false);
            }, timeout);
            (0, _syncpromise.SyncPromise).all(_this._buffer).then(function() {
                clearTimeout(capturedSetTimeout);
                resolve(true);
            }).then(null, function() {
                resolve(true);
            });
        });
    };
    return PromiseBuffer1;
}();

},{"./error":"1RnP9","./syncpromise":"cSJ3y","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cSJ3y":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SyncPromise", ()=>SyncPromise);
/* eslint-disable @typescript-eslint/explicit-function-return-type */ /* eslint-disable @typescript-eslint/typedef */ /* eslint-disable @typescript-eslint/explicit-module-boundary-types */ /* eslint-disable @typescript-eslint/no-explicit-any */ var _is = require("./is");
/** SyncPromise internal states */ var States;
(function(States1) {
    /** Pending */ States1["PENDING"] = "PENDING";
    /** Resolved / OK */ States1["RESOLVED"] = "RESOLVED";
    /** Rejected / Error */ States1["REJECTED"] = "REJECTED";
})(States || (States = {}));
/**
 * Thenable class that behaves like a Promise and follows it's interface
 * but is not async internally
 */ var SyncPromise = /** @class */ function() {
    function SyncPromise1(executor) {
        var _this = this;
        this._state = States.PENDING;
        this._handlers = [];
        /** JSDoc */ this._resolve = function(value) {
            _this._setResult(States.RESOLVED, value);
        };
        /** JSDoc */ this._reject = function(reason) {
            _this._setResult(States.REJECTED, reason);
        };
        /** JSDoc */ this._setResult = function(state, value) {
            if (_this._state !== States.PENDING) return;
            if ((0, _is.isThenable)(value)) {
                value.then(_this._resolve, _this._reject);
                return;
            }
            _this._state = state;
            _this._value = value;
            _this._executeHandlers();
        };
        // TODO: FIXME
        /** JSDoc */ this._attachHandler = function(handler) {
            _this._handlers = _this._handlers.concat(handler);
            _this._executeHandlers();
        };
        /** JSDoc */ this._executeHandlers = function() {
            if (_this._state === States.PENDING) return;
            var cachedHandlers = _this._handlers.slice();
            _this._handlers = [];
            cachedHandlers.forEach(function(handler) {
                if (handler.done) return;
                if (_this._state === States.RESOLVED) {
                    if (handler.onfulfilled) // eslint-disable-next-line @typescript-eslint/no-floating-promises
                    handler.onfulfilled(_this._value);
                }
                if (_this._state === States.REJECTED) {
                    if (handler.onrejected) handler.onrejected(_this._value);
                }
                handler.done = true;
            });
        };
        try {
            executor(this._resolve, this._reject);
        } catch (e) {
            this._reject(e);
        }
    }
    /** JSDoc */ SyncPromise1.resolve = function(value) {
        return new SyncPromise1(function(resolve) {
            resolve(value);
        });
    };
    /** JSDoc */ SyncPromise1.reject = function(reason) {
        return new SyncPromise1(function(_, reject) {
            reject(reason);
        });
    };
    /** JSDoc */ SyncPromise1.all = function(collection) {
        return new SyncPromise1(function(resolve, reject) {
            if (!Array.isArray(collection)) {
                reject(new TypeError("Promise.all requires an array as input."));
                return;
            }
            if (collection.length === 0) {
                resolve([]);
                return;
            }
            var counter = collection.length;
            var resolvedCollection = [];
            collection.forEach(function(item, index) {
                SyncPromise1.resolve(item).then(function(value) {
                    resolvedCollection[index] = value;
                    counter -= 1;
                    if (counter !== 0) return;
                    resolve(resolvedCollection);
                }).then(null, reject);
            });
        });
    };
    /** JSDoc */ SyncPromise1.prototype.then = function(onfulfilled, onrejected) {
        var _this = this;
        return new SyncPromise1(function(resolve, reject) {
            _this._attachHandler({
                done: false,
                onfulfilled: function(result) {
                    if (!onfulfilled) {
                        // TODO: ¯\_(ツ)_/¯
                        // TODO: FIXME
                        resolve(result);
                        return;
                    }
                    try {
                        resolve(onfulfilled(result));
                        return;
                    } catch (e) {
                        reject(e);
                        return;
                    }
                },
                onrejected: function(reason) {
                    if (!onrejected) {
                        reject(reason);
                        return;
                    }
                    try {
                        resolve(onrejected(reason));
                        return;
                    } catch (e) {
                        reject(e);
                        return;
                    }
                }
            });
        });
    };
    /** JSDoc */ SyncPromise1.prototype.catch = function(onrejected) {
        return this.then(function(val) {
            return val;
        }, onrejected);
    };
    /** JSDoc */ SyncPromise1.prototype.finally = function(onfinally) {
        var _this = this;
        return new SyncPromise1(function(resolve, reject) {
            var val;
            var isRejected;
            return _this.then(function(value) {
                isRejected = false;
                val = value;
                if (onfinally) onfinally();
            }, function(reason) {
                isRejected = true;
                val = reason;
                if (onfinally) onfinally();
            }).then(function() {
                if (isRejected) {
                    reject(val);
                    return;
                }
                resolve(val);
            });
        });
    };
    /** JSDoc */ SyncPromise1.prototype.toString = function() {
        return "[object SyncPromise]";
    };
    return SyncPromise1;
}();

},{"./is":"451Wr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bLEdM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "dateTimestampInSeconds", ()=>dateTimestampInSeconds);
parcelHelpers.export(exports, "timestampInSeconds", ()=>timestampInSeconds);
parcelHelpers.export(exports, "timestampWithMs", ()=>timestampWithMs);
parcelHelpers.export(exports, "usingPerformanceAPI", ()=>usingPerformanceAPI);
parcelHelpers.export(exports, "_browserPerformanceTimeOriginMode", ()=>_browserPerformanceTimeOriginMode);
parcelHelpers.export(exports, "browserPerformanceTimeOrigin", ()=>browserPerformanceTimeOrigin);
var _misc = require("./misc");
var _node = require("./node");
/**
 * A TimestampSource implementation for environments that do not support the Performance Web API natively.
 *
 * Note that this TimestampSource does not use a monotonic clock. A call to `nowSeconds` may return a timestamp earlier
 * than a previously returned value. We do not try to emulate a monotonic behavior in order to facilitate debugging. It
 * is more obvious to explain "why does my span have negative duration" than "why my spans have zero duration".
 */ var dateTimestampSource = {
    nowSeconds: function() {
        return Date.now() / 1000;
    }
};
/**
 * Returns a wrapper around the native Performance API browser implementation, or undefined for browsers that do not
 * support the API.
 *
 * Wrapping the native API works around differences in behavior from different browsers.
 */ function getBrowserPerformance() {
    var performance = (0, _misc.getGlobalObject)().performance;
    if (!performance || !performance.now) return undefined;
    // Replace performance.timeOrigin with our own timeOrigin based on Date.now().
    //
    // This is a partial workaround for browsers reporting performance.timeOrigin such that performance.timeOrigin +
    // performance.now() gives a date arbitrarily in the past.
    //
    // Additionally, computing timeOrigin in this way fills the gap for browsers where performance.timeOrigin is
    // undefined.
    //
    // The assumption that performance.timeOrigin + performance.now() ~= Date.now() is flawed, but we depend on it to
    // interact with data coming out of performance entries.
    //
    // Note that despite recommendations against it in the spec, browsers implement the Performance API with a clock that
    // might stop when the computer is asleep (and perhaps under other circumstances). Such behavior causes
    // performance.timeOrigin + performance.now() to have an arbitrary skew over Date.now(). In laptop computers, we have
    // observed skews that can be as long as days, weeks or months.
    //
    // See https://github.com/getsentry/sentry-javascript/issues/2590.
    //
    // BUG: despite our best intentions, this workaround has its limitations. It mostly addresses timings of pageload
    // transactions, but ignores the skew built up over time that can aversely affect timestamps of navigation
    // transactions of long-lived web pages.
    var timeOrigin = Date.now() - performance.now();
    return {
        now: function() {
            return performance.now();
        },
        timeOrigin: timeOrigin
    };
}
/**
 * Returns the native Performance API implementation from Node.js. Returns undefined in old Node.js versions that don't
 * implement the API.
 */ function getNodePerformance() {
    try {
        var perfHooks = (0, _node.dynamicRequire)(module, "perf_hooks");
        return perfHooks.performance;
    } catch (_) {
        return undefined;
    }
}
/**
 * The Performance API implementation for the current platform, if available.
 */ var platformPerformance = (0, _node.isNodeEnv)() ? getNodePerformance() : getBrowserPerformance();
var timestampSource = platformPerformance === undefined ? dateTimestampSource : {
    nowSeconds: function() {
        return (platformPerformance.timeOrigin + platformPerformance.now()) / 1000;
    }
};
var dateTimestampInSeconds = dateTimestampSource.nowSeconds.bind(dateTimestampSource);
var timestampInSeconds = timestampSource.nowSeconds.bind(timestampSource);
var timestampWithMs = timestampInSeconds;
var usingPerformanceAPI = platformPerformance !== undefined;
var _browserPerformanceTimeOriginMode;
var browserPerformanceTimeOrigin = function() {
    // Unfortunately browsers may report an inaccurate time origin data, through either performance.timeOrigin or
    // performance.timing.navigationStart, which results in poor results in performance data. We only treat time origin
    // data as reliable if they are within a reasonable threshold of the current time.
    var performance = (0, _misc.getGlobalObject)().performance;
    if (!performance || !performance.now) {
        _browserPerformanceTimeOriginMode = "none";
        return undefined;
    }
    var threshold = 3600000;
    var performanceNow = performance.now();
    var dateNow = Date.now();
    // if timeOrigin isn't available set delta to threshold so it isn't used
    var timeOriginDelta = performance.timeOrigin ? Math.abs(performance.timeOrigin + performanceNow - dateNow) : threshold;
    var timeOriginIsReliable = timeOriginDelta < threshold;
    // While performance.timing.navigationStart is deprecated in favor of performance.timeOrigin, performance.timeOrigin
    // is not as widely supported. Namely, performance.timeOrigin is undefined in Safari as of writing.
    // Also as of writing, performance.timing is not available in Web Workers in mainstream browsers, so it is not always
    // a valid fallback. In the absence of an initial time provided by the browser, fallback to the current time from the
    // Date API.
    // eslint-disable-next-line deprecation/deprecation
    var navigationStart = performance.timing && performance.timing.navigationStart;
    var hasNavigationStart = typeof navigationStart === "number";
    // if navigationStart isn't available set delta to threshold so it isn't used
    var navigationStartDelta = hasNavigationStart ? Math.abs(navigationStart + performanceNow - dateNow) : threshold;
    var navigationStartIsReliable = navigationStartDelta < threshold;
    if (timeOriginIsReliable || navigationStartIsReliable) {
        // Use the more reliable time origin
        if (timeOriginDelta <= navigationStartDelta) {
            _browserPerformanceTimeOriginMode = "timeOrigin";
            return performance.timeOrigin;
        } else {
            _browserPerformanceTimeOriginMode = "navigationStart";
            return navigationStart;
        }
    }
    // Either both timeOrigin and navigationStart are skewed or neither is available, fallback to Date.
    _browserPerformanceTimeOriginMode = "dateNow";
    return dateNow;
}();

},{"./misc":"bgT10","./node":"2Azyo","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5hcrL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Session", ()=>Session);
var _types = require("@sentry/types");
var _utils = require("@sentry/utils");
/**
 * @inheritdoc
 */ var Session = /** @class */ function() {
    function Session1(context) {
        this.errors = 0;
        this.sid = (0, _utils.uuid4)();
        this.duration = 0;
        this.status = (0, _types.SessionStatus).Ok;
        this.init = true;
        this.ignoreDuration = false;
        // Both timestamp and started are in seconds since the UNIX epoch.
        var startingTime = (0, _utils.timestampInSeconds)();
        this.timestamp = startingTime;
        this.started = startingTime;
        if (context) this.update(context);
    }
    /** JSDoc */ // eslint-disable-next-line complexity
    Session1.prototype.update = function(context) {
        if (context === void 0) context = {};
        if (context.user) {
            if (!this.ipAddress && context.user.ip_address) this.ipAddress = context.user.ip_address;
            if (!this.did && !context.did) this.did = context.user.id || context.user.email || context.user.username;
        }
        this.timestamp = context.timestamp || (0, _utils.timestampInSeconds)();
        if (context.ignoreDuration) this.ignoreDuration = context.ignoreDuration;
        if (context.sid) // Good enough uuid validation. — Kamil
        this.sid = context.sid.length === 32 ? context.sid : (0, _utils.uuid4)();
        if (context.init !== undefined) this.init = context.init;
        if (!this.did && context.did) this.did = "" + context.did;
        if (typeof context.started === "number") this.started = context.started;
        if (this.ignoreDuration) this.duration = undefined;
        else if (typeof context.duration === "number") this.duration = context.duration;
        else {
            var duration = this.timestamp - this.started;
            this.duration = duration >= 0 ? duration : 0;
        }
        if (context.release) this.release = context.release;
        if (context.environment) this.environment = context.environment;
        if (!this.ipAddress && context.ipAddress) this.ipAddress = context.ipAddress;
        if (!this.userAgent && context.userAgent) this.userAgent = context.userAgent;
        if (typeof context.errors === "number") this.errors = context.errors;
        if (context.status) this.status = context.status;
    };
    /** JSDoc */ Session1.prototype.close = function(status) {
        if (status) this.update({
            status: status
        });
        else if (this.status === (0, _types.SessionStatus).Ok) this.update({
            status: (0, _types.SessionStatus).Exited
        });
        else this.update();
    };
    /** JSDoc */ Session1.prototype.toJSON = function() {
        return (0, _utils.dropUndefinedKeys)({
            sid: "" + this.sid,
            init: this.init,
            // Make sure that sec is converted to ms for date constructor
            started: new Date(this.started * 1000).toISOString(),
            timestamp: new Date(this.timestamp * 1000).toISOString(),
            status: this.status,
            errors: this.errors,
            did: typeof this.did === "number" || typeof this.did === "string" ? "" + this.did : undefined,
            duration: this.duration,
            attrs: (0, _utils.dropUndefinedKeys)({
                release: this.release,
                environment: this.environment,
                ip_address: this.ipAddress,
                user_agent: this.userAgent
            })
        });
    };
    return Session1;
}();

},{"@sentry/types":"emufg","@sentry/utils":"5auop","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"emufg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "LogLevel", ()=>(0, _loglevel.LogLevel));
parcelHelpers.export(exports, "SessionStatus", ()=>(0, _session.SessionStatus));
parcelHelpers.export(exports, "RequestSessionStatus", ()=>(0, _session.RequestSessionStatus));
parcelHelpers.export(exports, "Severity", ()=>(0, _severity.Severity));
parcelHelpers.export(exports, "Status", ()=>(0, _status.Status));
parcelHelpers.export(exports, "TransactionSamplingMethod", ()=>(0, _transaction.TransactionSamplingMethod));
var _loglevel = require("./loglevel");
var _session = require("./session");
var _severity = require("./severity");
var _status = require("./status");
var _transaction = require("./transaction");

},{"./loglevel":"g4YxY","./session":"b5QxY","./severity":"8fBGs","./status":"fjZWx","./transaction":"j8mPU","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"g4YxY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "LogLevel", ()=>LogLevel);
var LogLevel;
(function(LogLevel1) {
    /** No logs will be generated. */ LogLevel1[LogLevel1["None"] = 0] = "None";
    /** Only SDK internal errors will be logged. */ LogLevel1[LogLevel1["Error"] = 1] = "Error";
    /** Information useful for debugging the SDK will be logged. */ LogLevel1[LogLevel1["Debug"] = 2] = "Debug";
    /** All SDK actions will be logged. */ LogLevel1[LogLevel1["Verbose"] = 3] = "Verbose";
})(LogLevel || (LogLevel = {}));

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"b5QxY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SessionStatus", ()=>SessionStatus);
parcelHelpers.export(exports, "RequestSessionStatus", ()=>RequestSessionStatus);
var SessionStatus;
(function(SessionStatus1) {
    /** JSDoc */ SessionStatus1["Ok"] = "ok";
    /** JSDoc */ SessionStatus1["Exited"] = "exited";
    /** JSDoc */ SessionStatus1["Crashed"] = "crashed";
    /** JSDoc */ SessionStatus1["Abnormal"] = "abnormal";
})(SessionStatus || (SessionStatus = {}));
var RequestSessionStatus;
(function(RequestSessionStatus1) {
    /** JSDoc */ RequestSessionStatus1["Ok"] = "ok";
    /** JSDoc */ RequestSessionStatus1["Errored"] = "errored";
    /** JSDoc */ RequestSessionStatus1["Crashed"] = "crashed";
})(RequestSessionStatus || (RequestSessionStatus = {}));

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8fBGs":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Severity", ()=>Severity);
var Severity;
(function(Severity1) {
    /** JSDoc */ Severity1["Fatal"] = "fatal";
    /** JSDoc */ Severity1["Error"] = "error";
    /** JSDoc */ Severity1["Warning"] = "warning";
    /** JSDoc */ Severity1["Log"] = "log";
    /** JSDoc */ Severity1["Info"] = "info";
    /** JSDoc */ Severity1["Debug"] = "debug";
    /** JSDoc */ Severity1["Critical"] = "critical";
})(Severity || (Severity = {}));
// eslint-disable-next-line @typescript-eslint/no-namespace, import/export
(function(Severity2) {
    /**
     * Converts a string-based level into a {@link Severity}.
     *
     * @param level string representation of Severity
     * @returns Severity
     */ function fromString(level) {
        switch(level){
            case "debug":
                return Severity2.Debug;
            case "info":
                return Severity2.Info;
            case "warn":
            case "warning":
                return Severity2.Warning;
            case "error":
                return Severity2.Error;
            case "fatal":
                return Severity2.Fatal;
            case "critical":
                return Severity2.Critical;
            case "log":
            default:
                return Severity2.Log;
        }
    }
    Severity2.fromString = fromString;
})(Severity || (Severity = {}));

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fjZWx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Status", ()=>Status);
var Status;
(function(Status1) {
    /** The status could not be determined. */ Status1["Unknown"] = "unknown";
    /** The event was skipped due to configuration or callbacks. */ Status1["Skipped"] = "skipped";
    /** The event was sent to Sentry successfully. */ Status1["Success"] = "success";
    /** The client is currently rate limited and will try again later. */ Status1["RateLimit"] = "rate_limit";
    /** The event could not be processed. */ Status1["Invalid"] = "invalid";
    /** A server-side error ocurred during submission. */ Status1["Failed"] = "failed";
})(Status || (Status = {}));
// eslint-disable-next-line @typescript-eslint/no-namespace, import/export
(function(Status2) {
    /**
     * Converts a HTTP status code into a {@link Status}.
     *
     * @param code The HTTP response status code.
     * @returns The send status or {@link Status.Unknown}.
     */ function fromHttpCode(code) {
        if (code >= 200 && code < 300) return Status2.Success;
        if (code === 429) return Status2.RateLimit;
        if (code >= 400 && code < 500) return Status2.Invalid;
        if (code >= 500) return Status2.Failed;
        return Status2.Unknown;
    }
    Status2.fromHttpCode = fromHttpCode;
})(Status || (Status = {}));

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"j8mPU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "TransactionSamplingMethod", ()=>TransactionSamplingMethod);
var TransactionSamplingMethod;
(function(TransactionSamplingMethod1) {
    TransactionSamplingMethod1["Explicit"] = "explicitly_set";
    TransactionSamplingMethod1["Sampler"] = "client_sampler";
    TransactionSamplingMethod1["Rate"] = "client_rate";
    TransactionSamplingMethod1["Inheritance"] = "inheritance";
})(TransactionSamplingMethod || (TransactionSamplingMethod = {}));

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jVHDe":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SessionFlusher", ()=>SessionFlusher);
var _types = require("@sentry/types");
var _utils = require("@sentry/utils");
var _hub = require("./hub");
/**
 * @inheritdoc
 */ var SessionFlusher = /** @class */ function() {
    function SessionFlusher1(transport, attrs) {
        var _this = this;
        this.flushTimeout = 60;
        this._pendingAggregates = {};
        this._isEnabled = true;
        this._transport = transport;
        // Call to setInterval, so that flush is called every 60 seconds
        this._intervalId = setInterval(function() {
            return _this.flush();
        }, this.flushTimeout * 1000);
        this._sessionAttrs = attrs;
    }
    /** Sends session aggregates to Transport */ SessionFlusher1.prototype.sendSessionAggregates = function(sessionAggregates) {
        if (!this._transport.sendSession) {
            (0, _utils.logger).warn("Dropping session because custom transport doesn't implement sendSession");
            return;
        }
        this._transport.sendSession(sessionAggregates).then(null, function(reason) {
            (0, _utils.logger).error("Error while sending session: " + reason);
        });
    };
    /** Checks if `pendingAggregates` has entries, and if it does flushes them by calling `sendSessions` */ SessionFlusher1.prototype.flush = function() {
        var sessionAggregates = this.getSessionAggregates();
        if (sessionAggregates.aggregates.length === 0) return;
        this._pendingAggregates = {};
        this.sendSessionAggregates(sessionAggregates);
    };
    /** Massages the entries in `pendingAggregates` and returns aggregated sessions */ SessionFlusher1.prototype.getSessionAggregates = function() {
        var _this = this;
        var aggregates = Object.keys(this._pendingAggregates).map(function(key) {
            return _this._pendingAggregates[parseInt(key)];
        });
        var sessionAggregates = {
            attrs: this._sessionAttrs,
            aggregates: aggregates
        };
        return (0, _utils.dropUndefinedKeys)(sessionAggregates);
    };
    /** JSDoc */ SessionFlusher1.prototype.close = function() {
        clearInterval(this._intervalId);
        this._isEnabled = false;
        this.flush();
    };
    /**
     * Wrapper function for _incrementSessionStatusCount that checks if the instance of SessionFlusher is enabled then
     * fetches the session status of the request from `Scope.getRequestSession().status` on the scope and passes them to
     * `_incrementSessionStatusCount` along with the start date
     */ SessionFlusher1.prototype.incrementSessionStatusCount = function() {
        var _a, _b;
        if (!this._isEnabled) return;
        var scope = (0, _hub.getCurrentHub)().getScope();
        var requestSession = (_a = scope) === null || _a === void 0 ? void 0 : _a.getRequestSession();
        if (requestSession && requestSession.status) {
            this._incrementSessionStatusCount(requestSession.status, new Date());
            // This is not entirely necessarily but is added as a safe guard to indicate the bounds of a request and so in
            // case captureRequestSession is called more than once to prevent double count
            (_b = scope) === null || _b === void 0 || _b.setRequestSession(undefined);
        /* eslint-enable @typescript-eslint/no-unsafe-member-access */ }
    };
    /**
     * Increments status bucket in pendingAggregates buffer (internal state) corresponding to status of
     * the session received
     */ SessionFlusher1.prototype._incrementSessionStatusCount = function(status, date) {
        // Truncate minutes and seconds on Session Started attribute to have one minute bucket keys
        var sessionStartedTrunc = new Date(date).setSeconds(0, 0);
        this._pendingAggregates[sessionStartedTrunc] = this._pendingAggregates[sessionStartedTrunc] || {};
        // corresponds to aggregated sessions in one specific minute bucket
        // for example, {"started":"2021-03-16T08:00:00.000Z","exited":4, "errored": 1}
        var aggregationCounts = this._pendingAggregates[sessionStartedTrunc];
        if (!aggregationCounts.started) aggregationCounts.started = new Date(sessionStartedTrunc).toISOString();
        switch(status){
            case (0, _types.RequestSessionStatus).Errored:
                aggregationCounts.errored = (aggregationCounts.errored || 0) + 1;
                return aggregationCounts.errored;
            case (0, _types.RequestSessionStatus).Ok:
                aggregationCounts.exited = (aggregationCounts.exited || 0) + 1;
                return aggregationCounts.exited;
            case (0, _types.RequestSessionStatus).Crashed:
                aggregationCounts.crashed = (aggregationCounts.crashed || 0) + 1;
                return aggregationCounts.crashed;
        }
    };
    return SessionFlusher1;
}();

},{"@sentry/types":"emufg","@sentry/utils":"5auop","./hub":"80DzD","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"80DzD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "API_VERSION", ()=>API_VERSION);
parcelHelpers.export(exports, "Hub", ()=>Hub);
/**
 * Returns the global shim registry.
 *
 * FIXME: This function is problematic, because despite always returning a valid Carrier,
 * it has an optional `__SENTRY__` property, which then in turn requires us to always perform an unnecessary check
 * at the call-site. We always access the carrier through this function, so we can guarantee that `__SENTRY__` is there.
 **/ parcelHelpers.export(exports, "getMainCarrier", ()=>getMainCarrier);
/**
 * Replaces the current main hub with the passed one on the global object
 *
 * @returns The old replaced hub
 */ parcelHelpers.export(exports, "makeMain", ()=>makeMain);
/**
 * Returns the default hub instance.
 *
 * If a hub is already registered in the global carrier but this module
 * contains a more recent version, it replaces the registered version.
 * Otherwise, the currently registered hub will be returned.
 */ parcelHelpers.export(exports, "getCurrentHub", ()=>getCurrentHub);
/**
 * Returns the active domain, if one exists
 * @deprecated No longer used; remove in v7
 * @returns The domain, or undefined if there is no active domain
 */ // eslint-disable-next-line deprecation/deprecation
parcelHelpers.export(exports, "getActiveDomain", ()=>getActiveDomain);
/**
 * This will create a new {@link Hub} and add to the passed object on
 * __SENTRY__.hub.
 * @param carrier object
 * @hidden
 */ parcelHelpers.export(exports, "getHubFromCarrier", ()=>getHubFromCarrier);
/**
 * This will set passed {@link Hub} on the passed object's __SENTRY__.hub attribute
 * @param carrier object
 * @param hub Hub
 * @returns A boolean indicating success or failure
 */ parcelHelpers.export(exports, "setHubOnCarrier", ()=>setHubOnCarrier);
var _tslib = require("tslib");
/* eslint-disable max-lines */ var _types = require("@sentry/types");
var _utils = require("@sentry/utils");
var _scope = require("./scope");
var _session = require("./session");
var API_VERSION = 4;
/**
 * Default maximum number of breadcrumbs added to an event. Can be overwritten
 * with {@link Options.maxBreadcrumbs}.
 */ var DEFAULT_BREADCRUMBS = 100;
/**
 * @inheritDoc
 */ var Hub = /** @class */ function() {
    /**
     * Creates a new instance of the hub, will push one {@link Layer} into the
     * internal stack on creation.
     *
     * @param client bound to the hub.
     * @param scope bound to the hub.
     * @param version number, higher number means higher priority.
     */ function Hub1(client, scope, _version) {
        if (scope === void 0) scope = new (0, _scope.Scope)();
        if (_version === void 0) _version = API_VERSION;
        this._version = _version;
        /** Is a {@link Layer}[] containing the client and scope */ this._stack = [
            {}
        ];
        this.getStackTop().scope = scope;
        this.bindClient(client);
    }
    /**
     * @inheritDoc
     */ Hub1.prototype.isOlderThan = function(version) {
        return this._version < version;
    };
    /**
     * @inheritDoc
     */ Hub1.prototype.bindClient = function(client) {
        var top = this.getStackTop();
        top.client = client;
        if (client && client.setupIntegrations) client.setupIntegrations();
    };
    /**
     * @inheritDoc
     */ Hub1.prototype.pushScope = function() {
        // We want to clone the content of prev scope
        var scope = (0, _scope.Scope).clone(this.getScope());
        this.getStack().push({
            client: this.getClient(),
            scope: scope
        });
        return scope;
    };
    /**
     * @inheritDoc
     */ Hub1.prototype.popScope = function() {
        if (this.getStack().length <= 1) return false;
        return !!this.getStack().pop();
    };
    /**
     * @inheritDoc
     */ Hub1.prototype.withScope = function(callback) {
        var scope = this.pushScope();
        try {
            callback(scope);
        } finally{
            this.popScope();
        }
    };
    /**
     * @inheritDoc
     */ Hub1.prototype.getClient = function() {
        return this.getStackTop().client;
    };
    /** Returns the scope of the top stack. */ Hub1.prototype.getScope = function() {
        return this.getStackTop().scope;
    };
    /** Returns the scope stack for domains or the process. */ Hub1.prototype.getStack = function() {
        return this._stack;
    };
    /** Returns the topmost scope layer in the order domain > local > process. */ Hub1.prototype.getStackTop = function() {
        return this._stack[this._stack.length - 1];
    };
    /**
     * @inheritDoc
     */ // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types
    Hub1.prototype.captureException = function(exception, hint) {
        var eventId = this._lastEventId = (0, _utils.uuid4)();
        var finalHint = hint;
        // If there's no explicit hint provided, mimick the same thing that would happen
        // in the minimal itself to create a consistent behavior.
        // We don't do this in the client, as it's the lowest level API, and doing this,
        // would prevent user from having full control over direct calls.
        if (!hint) {
            var syntheticException = void 0;
            try {
                throw new Error("Sentry syntheticException");
            } catch (exception1) {
                syntheticException = exception1;
            }
            finalHint = {
                originalException: exception,
                syntheticException: syntheticException
            };
        }
        this._invokeClient("captureException", exception, (0, _tslib.__assign)((0, _tslib.__assign)({}, finalHint), {
            event_id: eventId
        }));
        return eventId;
    };
    /**
     * @inheritDoc
     */ Hub1.prototype.captureMessage = function(message, level, hint) {
        var eventId = this._lastEventId = (0, _utils.uuid4)();
        var finalHint = hint;
        // If there's no explicit hint provided, mimick the same thing that would happen
        // in the minimal itself to create a consistent behavior.
        // We don't do this in the client, as it's the lowest level API, and doing this,
        // would prevent user from having full control over direct calls.
        if (!hint) {
            var syntheticException = void 0;
            try {
                throw new Error(message);
            } catch (exception) {
                syntheticException = exception;
            }
            finalHint = {
                originalException: message,
                syntheticException: syntheticException
            };
        }
        this._invokeClient("captureMessage", message, level, (0, _tslib.__assign)((0, _tslib.__assign)({}, finalHint), {
            event_id: eventId
        }));
        return eventId;
    };
    /**
     * @inheritDoc
     */ Hub1.prototype.captureEvent = function(event, hint) {
        var eventId = this._lastEventId = (0, _utils.uuid4)();
        this._invokeClient("captureEvent", event, (0, _tslib.__assign)((0, _tslib.__assign)({}, hint), {
            event_id: eventId
        }));
        return eventId;
    };
    /**
     * @inheritDoc
     */ Hub1.prototype.lastEventId = function() {
        return this._lastEventId;
    };
    /**
     * @inheritDoc
     */ Hub1.prototype.addBreadcrumb = function(breadcrumb, hint) {
        var _a = this.getStackTop(), scope = _a.scope, client = _a.client;
        if (!scope || !client) return;
        // eslint-disable-next-line @typescript-eslint/unbound-method
        var _b = client.getOptions && client.getOptions() || {}, _c = _b.beforeBreadcrumb, beforeBreadcrumb = _c === void 0 ? null : _c, _d = _b.maxBreadcrumbs, maxBreadcrumbs = _d === void 0 ? DEFAULT_BREADCRUMBS : _d;
        if (maxBreadcrumbs <= 0) return;
        var timestamp = (0, _utils.dateTimestampInSeconds)();
        var mergedBreadcrumb = (0, _tslib.__assign)({
            timestamp: timestamp
        }, breadcrumb);
        var finalBreadcrumb = beforeBreadcrumb ? (0, _utils.consoleSandbox)(function() {
            return beforeBreadcrumb(mergedBreadcrumb, hint);
        }) : mergedBreadcrumb;
        if (finalBreadcrumb === null) return;
        scope.addBreadcrumb(finalBreadcrumb, maxBreadcrumbs);
    };
    /**
     * @inheritDoc
     */ Hub1.prototype.setUser = function(user) {
        var scope = this.getScope();
        if (scope) scope.setUser(user);
    };
    /**
     * @inheritDoc
     */ Hub1.prototype.setTags = function(tags) {
        var scope = this.getScope();
        if (scope) scope.setTags(tags);
    };
    /**
     * @inheritDoc
     */ Hub1.prototype.setExtras = function(extras) {
        var scope = this.getScope();
        if (scope) scope.setExtras(extras);
    };
    /**
     * @inheritDoc
     */ Hub1.prototype.setTag = function(key, value) {
        var scope = this.getScope();
        if (scope) scope.setTag(key, value);
    };
    /**
     * @inheritDoc
     */ Hub1.prototype.setExtra = function(key, extra) {
        var scope = this.getScope();
        if (scope) scope.setExtra(key, extra);
    };
    /**
     * @inheritDoc
     */ // eslint-disable-next-line @typescript-eslint/no-explicit-any
    Hub1.prototype.setContext = function(name, context) {
        var scope = this.getScope();
        if (scope) scope.setContext(name, context);
    };
    /**
     * @inheritDoc
     */ Hub1.prototype.configureScope = function(callback) {
        var _a = this.getStackTop(), scope = _a.scope, client = _a.client;
        if (scope && client) callback(scope);
    };
    /**
     * @inheritDoc
     */ Hub1.prototype.run = function(callback) {
        var oldHub = makeMain(this);
        try {
            callback(this);
        } finally{
            makeMain(oldHub);
        }
    };
    /**
     * @inheritDoc
     */ Hub1.prototype.getIntegration = function(integration) {
        var client = this.getClient();
        if (!client) return null;
        try {
            return client.getIntegration(integration);
        } catch (_oO) {
            (0, _utils.logger).warn("Cannot retrieve integration " + integration.id + " from the current Hub");
            return null;
        }
    };
    /**
     * @inheritDoc
     */ Hub1.prototype.startSpan = function(context) {
        return this._callExtensionMethod("startSpan", context);
    };
    /**
     * @inheritDoc
     */ Hub1.prototype.startTransaction = function(context, customSamplingContext) {
        return this._callExtensionMethod("startTransaction", context, customSamplingContext);
    };
    /**
     * @inheritDoc
     */ Hub1.prototype.traceHeaders = function() {
        return this._callExtensionMethod("traceHeaders");
    };
    /**
     * @inheritDoc
     */ Hub1.prototype.captureSession = function(endSession) {
        if (endSession === void 0) endSession = false;
        // both send the update and pull the session from the scope
        if (endSession) return this.endSession();
        // only send the update
        this._sendSessionUpdate();
    };
    /**
     * @inheritDoc
     */ Hub1.prototype.endSession = function() {
        var _a, _b, _c, _d, _e;
        (_c = (_b = (_a = this.getStackTop()) === null || _a === void 0 ? void 0 : _a.scope) === null || _b === void 0 ? void 0 : _b.getSession()) === null || _c === void 0 || _c.close();
        this._sendSessionUpdate();
        // the session is over; take it off of the scope
        (_e = (_d = this.getStackTop()) === null || _d === void 0 ? void 0 : _d.scope) === null || _e === void 0 || _e.setSession();
    };
    /**
     * @inheritDoc
     */ Hub1.prototype.startSession = function(context) {
        var _a = this.getStackTop(), scope = _a.scope, client = _a.client;
        var _b = client && client.getOptions() || {}, release = _b.release, environment = _b.environment;
        // Will fetch userAgent if called from browser sdk
        var global = (0, _utils.getGlobalObject)();
        var userAgent = (global.navigator || {}).userAgent;
        var session = new (0, _session.Session)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)({
            release: release,
            environment: environment
        }, scope && {
            user: scope.getUser()
        }), userAgent && {
            userAgent: userAgent
        }), context));
        if (scope) {
            // End existing session if there's one
            var currentSession = scope.getSession && scope.getSession();
            if (currentSession && currentSession.status === (0, _types.SessionStatus).Ok) currentSession.update({
                status: (0, _types.SessionStatus).Exited
            });
            this.endSession();
            // Afterwards we set the new session on the scope
            scope.setSession(session);
        }
        return session;
    };
    /**
     * Sends the current Session on the scope
     */ Hub1.prototype._sendSessionUpdate = function() {
        var _a = this.getStackTop(), scope = _a.scope, client = _a.client;
        if (!scope) return;
        var session = scope.getSession && scope.getSession();
        if (session) {
            if (client && client.captureSession) client.captureSession(session);
        }
    };
    /**
     * Internal helper function to call a method on the top client if it exists.
     *
     * @param method The method to call on the client.
     * @param args Arguments to pass to the client function.
     */ // eslint-disable-next-line @typescript-eslint/no-explicit-any
    Hub1.prototype._invokeClient = function(method) {
        var _a;
        var args = [];
        for(var _i = 1; _i < arguments.length; _i++)args[_i - 1] = arguments[_i];
        var _b = this.getStackTop(), scope = _b.scope, client = _b.client;
        if (client && client[method]) // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-explicit-any
        (_a = client)[method].apply(_a, (0, _tslib.__spread)(args, [
            scope
        ]));
    };
    /**
     * Calls global extension method and binding current instance to the function call
     */ // @ts-ignore Function lacks ending return statement and return type does not include 'undefined'. ts(2366)
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    Hub1.prototype._callExtensionMethod = function(method) {
        var args = [];
        for(var _i = 1; _i < arguments.length; _i++)args[_i - 1] = arguments[_i];
        var carrier = getMainCarrier();
        var sentry = carrier.__SENTRY__;
        if (sentry && sentry.extensions && typeof sentry.extensions[method] === "function") return sentry.extensions[method].apply(this, args);
        (0, _utils.logger).warn("Extension method " + method + " couldn't be found, doing nothing.");
    };
    return Hub1;
}();
function getMainCarrier() {
    var carrier = (0, _utils.getGlobalObject)();
    carrier.__SENTRY__ = carrier.__SENTRY__ || {
        extensions: {},
        hub: undefined
    };
    return carrier;
}
function makeMain(hub) {
    var registry = getMainCarrier();
    var oldHub = getHubFromCarrier(registry);
    setHubOnCarrier(registry, hub);
    return oldHub;
}
function getCurrentHub() {
    // Get main carrier (global for every environment)
    var registry = getMainCarrier();
    // If there's no hub, or its an old API, assign a new one
    if (!hasHubOnCarrier(registry) || getHubFromCarrier(registry).isOlderThan(API_VERSION)) setHubOnCarrier(registry, new Hub());
    // Prefer domains over global if they are there (applicable only to Node environment)
    if ((0, _utils.isNodeEnv)()) return getHubFromActiveDomain(registry);
    // Return hub that lives on a global object
    return getHubFromCarrier(registry);
}
function getActiveDomain() {
    (0, _utils.logger).warn("Function `getActiveDomain` is deprecated and will be removed in a future version.");
    var sentry = getMainCarrier().__SENTRY__;
    return sentry && sentry.extensions && sentry.extensions.domain && sentry.extensions.domain.active;
}
/**
 * Try to read the hub from an active domain, and fallback to the registry if one doesn't exist
 * @returns discovered hub
 */ function getHubFromActiveDomain(registry) {
    var _a, _b, _c;
    try {
        var activeDomain = (_c = (_b = (_a = getMainCarrier().__SENTRY__) === null || _a === void 0 ? void 0 : _a.extensions) === null || _b === void 0 ? void 0 : _b.domain) === null || _c === void 0 ? void 0 : _c.active;
        // If there's no active domain, just return global hub
        if (!activeDomain) return getHubFromCarrier(registry);
        // If there's no hub on current domain, or it's an old API, assign a new one
        if (!hasHubOnCarrier(activeDomain) || getHubFromCarrier(activeDomain).isOlderThan(API_VERSION)) {
            var registryHubTopStack = getHubFromCarrier(registry).getStackTop();
            setHubOnCarrier(activeDomain, new Hub(registryHubTopStack.client, (0, _scope.Scope).clone(registryHubTopStack.scope)));
        }
        // Return hub that lives on a domain
        return getHubFromCarrier(activeDomain);
    } catch (_Oo) {
        // Return hub that lives on a global object
        return getHubFromCarrier(registry);
    }
}
/**
 * This will tell whether a carrier has a hub on it or not
 * @param carrier object
 */ function hasHubOnCarrier(carrier) {
    return !!(carrier && carrier.__SENTRY__ && carrier.__SENTRY__.hub);
}
function getHubFromCarrier(carrier) {
    if (carrier && carrier.__SENTRY__ && carrier.__SENTRY__.hub) return carrier.__SENTRY__.hub;
    carrier.__SENTRY__ = carrier.__SENTRY__ || {};
    carrier.__SENTRY__.hub = new Hub();
    return carrier.__SENTRY__.hub;
}
function setHubOnCarrier(carrier, hub) {
    if (!carrier) return false;
    carrier.__SENTRY__ = carrier.__SENTRY__ || {};
    carrier.__SENTRY__.hub = hub;
    return true;
}

},{"tslib":"lRdW5","@sentry/types":"emufg","@sentry/utils":"5auop","./scope":"dlu4O","./session":"5hcrL","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1ZWIK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Captures an exception event and sends it to Sentry.
 *
 * @param exception An exception-like object.
 * @returns The generated eventId.
 */ // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types
parcelHelpers.export(exports, "captureException", ()=>captureException);
/**
 * Captures a message event and sends it to Sentry.
 *
 * @param message The message to send to Sentry.
 * @param level Define the level of the message.
 * @returns The generated eventId.
 */ parcelHelpers.export(exports, "captureMessage", ()=>captureMessage);
/**
 * Captures a manually created event and sends it to Sentry.
 *
 * @param event The event to send to Sentry.
 * @returns The generated eventId.
 */ parcelHelpers.export(exports, "captureEvent", ()=>captureEvent);
/**
 * Callback to set context information onto the scope.
 * @param callback Callback function that receives Scope.
 */ parcelHelpers.export(exports, "configureScope", ()=>configureScope);
/**
 * Records a new breadcrumb which will be attached to future events.
 *
 * Breadcrumbs will be added to subsequent events to provide more context on
 * user's actions prior to an error or crash.
 *
 * @param breadcrumb The breadcrumb to record.
 */ parcelHelpers.export(exports, "addBreadcrumb", ()=>addBreadcrumb);
/**
 * Sets context data with the given name.
 * @param name of the context
 * @param context Any kind of data. This data will be normalized.
 */ // eslint-disable-next-line @typescript-eslint/no-explicit-any
parcelHelpers.export(exports, "setContext", ()=>setContext);
/**
 * Set an object that will be merged sent as extra data with the event.
 * @param extras Extras object to merge into current context.
 */ parcelHelpers.export(exports, "setExtras", ()=>setExtras);
/**
 * Set an object that will be merged sent as tags data with the event.
 * @param tags Tags context object to merge into current context.
 */ parcelHelpers.export(exports, "setTags", ()=>setTags);
/**
 * Set key:value that will be sent as extra data with the event.
 * @param key String of extra
 * @param extra Any kind of data. This data will be normalized.
 */ parcelHelpers.export(exports, "setExtra", ()=>setExtra);
/**
 * Set key:value that will be sent as tags data with the event.
 *
 * Can also be used to unset a tag, by passing `undefined`.
 *
 * @param key String key of tag
 * @param value Value of tag
 */ parcelHelpers.export(exports, "setTag", ()=>setTag);
/**
 * Updates user context information for future events.
 *
 * @param user User context object to be set in the current context. Pass `null` to unset the user.
 */ parcelHelpers.export(exports, "setUser", ()=>setUser);
/**
 * Creates a new scope with and executes the given operation within.
 * The scope is automatically removed once the operation
 * finishes or throws.
 *
 * This is essentially a convenience function for:
 *
 *     pushScope();
 *     callback();
 *     popScope();
 *
 * @param callback that will be enclosed into push/popScope.
 */ parcelHelpers.export(exports, "withScope", ()=>withScope);
/**
 * Calls a function on the latest client. Use this with caution, it's meant as
 * in "internal" helper so we don't need to expose every possible function in
 * the shim. It is not guaranteed that the client actually implements the
 * function.
 *
 * @param method The method to call on the client/client.
 * @param args Arguments to pass to the client/fontend.
 * @hidden
 */ // eslint-disable-next-line @typescript-eslint/no-explicit-any
parcelHelpers.export(exports, "_callOnClient", ()=>_callOnClient);
/**
 * Starts a new `Transaction` and returns it. This is the entry point to manual tracing instrumentation.
 *
 * A tree structure can be built by adding child spans to the transaction, and child spans to other spans. To start a
 * new child span within the transaction or any span, call the respective `.startChild()` method.
 *
 * Every child span must be finished before the transaction is finished, otherwise the unfinished spans are discarded.
 *
 * The transaction must be finished with a call to its `.finish()` method, at which point the transaction with all its
 * finished child spans will be sent to Sentry.
 *
 * @param context Properties of the new `Transaction`.
 * @param customSamplingContext Information given to the transaction sampling function (along with context-dependent
 * default values). See {@link Options.tracesSampler}.
 *
 * @returns The transaction which was just started
 */ parcelHelpers.export(exports, "startTransaction", ()=>startTransaction);
var _tslib = require("tslib");
var _hub = require("@sentry/hub");
/**
 * This calls a function on the current hub.
 * @param method function to call on hub.
 * @param args to pass to function.
 */ // eslint-disable-next-line @typescript-eslint/no-explicit-any
function callOnHub(method) {
    var args = [];
    for(var _i = 1; _i < arguments.length; _i++)args[_i - 1] = arguments[_i];
    var hub = (0, _hub.getCurrentHub)();
    if (hub && hub[method]) // eslint-disable-next-line @typescript-eslint/no-explicit-any
    return hub[method].apply(hub, (0, _tslib.__spread)(args));
    throw new Error("No hub defined or " + method + " was not found on the hub, please open a bug report.");
}
function captureException(exception, captureContext) {
    var syntheticException;
    try {
        throw new Error("Sentry syntheticException");
    } catch (exception1) {
        syntheticException = exception1;
    }
    return callOnHub("captureException", exception, {
        captureContext: captureContext,
        originalException: exception,
        syntheticException: syntheticException
    });
}
function captureMessage(message, captureContext) {
    var syntheticException;
    try {
        throw new Error(message);
    } catch (exception) {
        syntheticException = exception;
    }
    // This is necessary to provide explicit scopes upgrade, without changing the original
    // arity of the `captureMessage(message, level)` method.
    var level = typeof captureContext === "string" ? captureContext : undefined;
    var context = typeof captureContext !== "string" ? {
        captureContext: captureContext
    } : undefined;
    return callOnHub("captureMessage", message, level, (0, _tslib.__assign)({
        originalException: message,
        syntheticException: syntheticException
    }, context));
}
function captureEvent(event) {
    return callOnHub("captureEvent", event);
}
function configureScope(callback) {
    callOnHub("configureScope", callback);
}
function addBreadcrumb(breadcrumb) {
    callOnHub("addBreadcrumb", breadcrumb);
}
function setContext(name, context) {
    callOnHub("setContext", name, context);
}
function setExtras(extras) {
    callOnHub("setExtras", extras);
}
function setTags(tags) {
    callOnHub("setTags", tags);
}
function setExtra(key, extra) {
    callOnHub("setExtra", key, extra);
}
function setTag(key, value) {
    callOnHub("setTag", key, value);
}
function setUser(user) {
    callOnHub("setUser", user);
}
function withScope(callback) {
    callOnHub("withScope", callback);
}
function _callOnClient(method) {
    var args = [];
    for(var _i = 1; _i < arguments.length; _i++)args[_i - 1] = arguments[_i];
    callOnHub.apply(void 0, (0, _tslib.__spread)([
        "_invokeClient",
        method
    ], args));
}
function startTransaction(context, customSamplingContext) {
    return callOnHub("startTransaction", (0, _tslib.__assign)({}, context), customSamplingContext);
}

},{"tslib":"lRdW5","@sentry/hub":"cqx4p","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lBZIO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "API", ()=>API);
var _utils = require("@sentry/utils");
var SENTRY_API_VERSION = "7";
/**
 * Helper class to provide urls, headers and metadata that can be used to form
 * different types of requests to Sentry endpoints.
 * Supports both envelopes and regular event requests.
 **/ var API = /** @class */ function() {
    /** Create a new instance of API */ function API1(dsn, metadata, tunnel) {
        if (metadata === void 0) metadata = {};
        this.dsn = dsn;
        this._dsnObject = new (0, _utils.Dsn)(dsn);
        this.metadata = metadata;
        this._tunnel = tunnel;
    }
    /** Returns the Dsn object. */ API1.prototype.getDsn = function() {
        return this._dsnObject;
    };
    /** Does this transport force envelopes? */ API1.prototype.forceEnvelope = function() {
        return !!this._tunnel;
    };
    /** Returns the prefix to construct Sentry ingestion API endpoints. */ API1.prototype.getBaseApiEndpoint = function() {
        var dsn = this.getDsn();
        var protocol = dsn.protocol ? dsn.protocol + ":" : "";
        var port = dsn.port ? ":" + dsn.port : "";
        return protocol + "//" + dsn.host + port + (dsn.path ? "/" + dsn.path : "") + "/api/";
    };
    /** Returns the store endpoint URL. */ API1.prototype.getStoreEndpoint = function() {
        return this._getIngestEndpoint("store");
    };
    /**
     * Returns the store endpoint URL with auth in the query string.
     *
     * Sending auth as part of the query string and not as custom HTTP headers avoids CORS preflight requests.
     */ API1.prototype.getStoreEndpointWithUrlEncodedAuth = function() {
        return this.getStoreEndpoint() + "?" + this._encodedAuth();
    };
    /**
     * Returns the envelope endpoint URL with auth in the query string.
     *
     * Sending auth as part of the query string and not as custom HTTP headers avoids CORS preflight requests.
     */ API1.prototype.getEnvelopeEndpointWithUrlEncodedAuth = function() {
        if (this.forceEnvelope()) return this._tunnel;
        return this._getEnvelopeEndpoint() + "?" + this._encodedAuth();
    };
    /** Returns only the path component for the store endpoint. */ API1.prototype.getStoreEndpointPath = function() {
        var dsn = this.getDsn();
        return (dsn.path ? "/" + dsn.path : "") + "/api/" + dsn.projectId + "/store/";
    };
    /**
     * Returns an object that can be used in request headers.
     * This is needed for node and the old /store endpoint in sentry
     */ API1.prototype.getRequestHeaders = function(clientName, clientVersion) {
        // CHANGE THIS to use metadata but keep clientName and clientVersion compatible
        var dsn = this.getDsn();
        var header = [
            "Sentry sentry_version=" + SENTRY_API_VERSION
        ];
        header.push("sentry_client=" + clientName + "/" + clientVersion);
        header.push("sentry_key=" + dsn.publicKey);
        if (dsn.pass) header.push("sentry_secret=" + dsn.pass);
        return {
            "Content-Type": "application/json",
            "X-Sentry-Auth": header.join(", ")
        };
    };
    /** Returns the url to the report dialog endpoint. */ API1.prototype.getReportDialogEndpoint = function(dialogOptions) {
        if (dialogOptions === void 0) dialogOptions = {};
        var dsn = this.getDsn();
        var endpoint = this.getBaseApiEndpoint() + "embed/error-page/";
        var encodedOptions = [];
        encodedOptions.push("dsn=" + dsn.toString());
        for(var key in dialogOptions){
            if (key === "dsn") continue;
            if (key === "user") {
                if (!dialogOptions.user) continue;
                if (dialogOptions.user.name) encodedOptions.push("name=" + encodeURIComponent(dialogOptions.user.name));
                if (dialogOptions.user.email) encodedOptions.push("email=" + encodeURIComponent(dialogOptions.user.email));
            } else encodedOptions.push(encodeURIComponent(key) + "=" + encodeURIComponent(dialogOptions[key]));
        }
        if (encodedOptions.length) return endpoint + "?" + encodedOptions.join("&");
        return endpoint;
    };
    /** Returns the envelope endpoint URL. */ API1.prototype._getEnvelopeEndpoint = function() {
        return this._getIngestEndpoint("envelope");
    };
    /** Returns the ingest API endpoint for target. */ API1.prototype._getIngestEndpoint = function(target) {
        if (this._tunnel) return this._tunnel;
        var base = this.getBaseApiEndpoint();
        var dsn = this.getDsn();
        return "" + base + dsn.projectId + "/" + target + "/";
    };
    /** Returns a URL-encoded string with auth config suitable for a query string. */ API1.prototype._encodedAuth = function() {
        var dsn = this.getDsn();
        var auth = {
            // We send only the minimum set of required information. See
            // https://github.com/getsentry/sentry-javascript/issues/2572.
            sentry_key: dsn.publicKey,
            sentry_version: SENTRY_API_VERSION
        };
        return (0, _utils.urlEncode)(auth);
    };
    return API1;
}();

},{"@sentry/utils":"5auop","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"blPmr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "BaseClient", ()=>BaseClient);
var _tslib = require("tslib");
/* eslint-disable max-lines */ var _hub = require("@sentry/hub");
var _types = require("@sentry/types");
var _utils = require("@sentry/utils");
var _integration = require("./integration");
/**
 * Base implementation for all JavaScript SDK clients.
 *
 * Call the constructor with the corresponding backend constructor and options
 * specific to the client subclass. To access these options later, use
 * {@link Client.getOptions}. Also, the Backend instance is available via
 * {@link Client.getBackend}.
 *
 * If a Dsn is specified in the options, it will be parsed and stored. Use
 * {@link Client.getDsn} to retrieve the Dsn at any moment. In case the Dsn is
 * invalid, the constructor will throw a {@link SentryException}. Note that
 * without a valid Dsn, the SDK will not send any events to Sentry.
 *
 * Before sending an event via the backend, it is passed through
 * {@link BaseClient._prepareEvent} to add SDK information and scope data
 * (breadcrumbs and context). To add more custom information, override this
 * method and extend the resulting prepared event.
 *
 * To issue automatically created events (e.g. via instrumentation), use
 * {@link Client.captureEvent}. It will prepare the event and pass it through
 * the callback lifecycle. To issue auto-breadcrumbs, use
 * {@link Client.addBreadcrumb}.
 *
 * @example
 * class NodeClient extends BaseClient<NodeBackend, NodeOptions> {
 *   public constructor(options: NodeOptions) {
 *     super(NodeBackend, options);
 *   }
 *
 *   // ...
 * }
 */ var BaseClient = /** @class */ function() {
    /**
     * Initializes this client instance.
     *
     * @param backendClass A constructor function to create the backend.
     * @param options Options for the client.
     */ function BaseClient1(backendClass, options) {
        /** Array of used integrations. */ this._integrations = {};
        /** Number of calls being processed */ this._numProcessing = 0;
        this._backend = new backendClass(options);
        this._options = options;
        if (options.dsn) this._dsn = new (0, _utils.Dsn)(options.dsn);
    }
    /**
     * @inheritDoc
     */ // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types
    BaseClient1.prototype.captureException = function(exception, hint, scope) {
        var _this = this;
        var eventId = hint && hint.event_id;
        this._process(this._getBackend().eventFromException(exception, hint).then(function(event) {
            return _this._captureEvent(event, hint, scope);
        }).then(function(result) {
            eventId = result;
        }));
        return eventId;
    };
    /**
     * @inheritDoc
     */ BaseClient1.prototype.captureMessage = function(message, level, hint, scope) {
        var _this = this;
        var eventId = hint && hint.event_id;
        var promisedEvent = (0, _utils.isPrimitive)(message) ? this._getBackend().eventFromMessage(String(message), level, hint) : this._getBackend().eventFromException(message, hint);
        this._process(promisedEvent.then(function(event) {
            return _this._captureEvent(event, hint, scope);
        }).then(function(result) {
            eventId = result;
        }));
        return eventId;
    };
    /**
     * @inheritDoc
     */ BaseClient1.prototype.captureEvent = function(event, hint, scope) {
        var eventId = hint && hint.event_id;
        this._process(this._captureEvent(event, hint, scope).then(function(result) {
            eventId = result;
        }));
        return eventId;
    };
    /**
     * @inheritDoc
     */ BaseClient1.prototype.captureSession = function(session) {
        if (!this._isEnabled()) {
            (0, _utils.logger).warn("SDK not enabled, will not capture session.");
            return;
        }
        if (!(typeof session.release === "string")) (0, _utils.logger).warn("Discarded session because of missing or non-string release");
        else {
            this._sendSession(session);
            // After sending, we set init false to indicate it's not the first occurrence
            session.update({
                init: false
            });
        }
    };
    /**
     * @inheritDoc
     */ BaseClient1.prototype.getDsn = function() {
        return this._dsn;
    };
    /**
     * @inheritDoc
     */ BaseClient1.prototype.getOptions = function() {
        return this._options;
    };
    /**
     * @inheritDoc
     */ BaseClient1.prototype.flush = function(timeout) {
        var _this = this;
        return this._isClientDoneProcessing(timeout).then(function(clientFinished) {
            return _this._getBackend().getTransport().close(timeout).then(function(transportFlushed) {
                return clientFinished && transportFlushed;
            });
        });
    };
    /**
     * @inheritDoc
     */ BaseClient1.prototype.close = function(timeout) {
        var _this = this;
        return this.flush(timeout).then(function(result) {
            _this.getOptions().enabled = false;
            return result;
        });
    };
    /**
     * Sets up the integrations
     */ BaseClient1.prototype.setupIntegrations = function() {
        if (this._isEnabled()) this._integrations = (0, _integration.setupIntegrations)(this._options);
    };
    /**
     * @inheritDoc
     */ BaseClient1.prototype.getIntegration = function(integration) {
        try {
            return this._integrations[integration.id] || null;
        } catch (_oO) {
            (0, _utils.logger).warn("Cannot retrieve integration " + integration.id + " from the current Client");
            return null;
        }
    };
    /** Updates existing session based on the provided event */ BaseClient1.prototype._updateSessionFromEvent = function(session, event) {
        var e_1, _a;
        var crashed = false;
        var errored = false;
        var exceptions = event.exception && event.exception.values;
        if (exceptions) {
            errored = true;
            try {
                for(var exceptions_1 = (0, _tslib.__values)(exceptions), exceptions_1_1 = exceptions_1.next(); !exceptions_1_1.done; exceptions_1_1 = exceptions_1.next()){
                    var ex = exceptions_1_1.value;
                    var mechanism = ex.mechanism;
                    if (mechanism && mechanism.handled === false) {
                        crashed = true;
                        break;
                    }
                }
            } catch (e_1_1) {
                e_1 = {
                    error: e_1_1
                };
            } finally{
                try {
                    if (exceptions_1_1 && !exceptions_1_1.done && (_a = exceptions_1.return)) _a.call(exceptions_1);
                } finally{
                    if (e_1) throw e_1.error;
                }
            }
        }
        // A session is updated and that session update is sent in only one of the two following scenarios:
        // 1. Session with non terminal status and 0 errors + an error occurred -> Will set error count to 1 and send update
        // 2. Session with non terminal status and 1 error + a crash occurred -> Will set status crashed and send update
        var sessionNonTerminal = session.status === (0, _types.SessionStatus).Ok;
        var shouldUpdateAndSend = sessionNonTerminal && session.errors === 0 || sessionNonTerminal && crashed;
        if (shouldUpdateAndSend) {
            session.update((0, _tslib.__assign)((0, _tslib.__assign)({}, crashed && {
                status: (0, _types.SessionStatus).Crashed
            }), {
                errors: session.errors || Number(errored || crashed)
            }));
            this.captureSession(session);
        }
    };
    /** Deliver captured session to Sentry */ BaseClient1.prototype._sendSession = function(session) {
        this._getBackend().sendSession(session);
    };
    /**
     * Determine if the client is finished processing. Returns a promise because it will wait `timeout` ms before saying
     * "no" (resolving to `false`) in order to give the client a chance to potentially finish first.
     *
     * @param timeout The time, in ms, after which to resolve to `false` if the client is still busy. Passing `0` (or not
     * passing anything) will make the promise wait as long as it takes for processing to finish before resolving to
     * `true`.
     * @returns A promise which will resolve to `true` if processing is already done or finishes before the timeout, and
     * `false` otherwise
     */ BaseClient1.prototype._isClientDoneProcessing = function(timeout) {
        var _this = this;
        return new (0, _utils.SyncPromise)(function(resolve) {
            var ticked = 0;
            var tick = 1;
            var interval = setInterval(function() {
                if (_this._numProcessing == 0) {
                    clearInterval(interval);
                    resolve(true);
                } else {
                    ticked += tick;
                    if (timeout && ticked >= timeout) {
                        clearInterval(interval);
                        resolve(false);
                    }
                }
            }, tick);
        });
    };
    /** Returns the current backend. */ BaseClient1.prototype._getBackend = function() {
        return this._backend;
    };
    /** Determines whether this SDK is enabled and a valid Dsn is present. */ BaseClient1.prototype._isEnabled = function() {
        return this.getOptions().enabled !== false && this._dsn !== undefined;
    };
    /**
     * Adds common information to events.
     *
     * The information includes release and environment from `options`,
     * breadcrumbs and context (extra, tags and user) from the scope.
     *
     * Information that is already present in the event is never overwritten. For
     * nested objects, such as the context, keys are merged.
     *
     * @param event The original event.
     * @param hint May contain additional information about the original exception.
     * @param scope A scope containing event metadata.
     * @returns A new event with more information.
     */ BaseClient1.prototype._prepareEvent = function(event, scope, hint) {
        var _this = this;
        var _a = this.getOptions().normalizeDepth, normalizeDepth = _a === void 0 ? 3 : _a;
        var prepared = (0, _tslib.__assign)((0, _tslib.__assign)({}, event), {
            event_id: event.event_id || (hint && hint.event_id ? hint.event_id : (0, _utils.uuid4)()),
            timestamp: event.timestamp || (0, _utils.dateTimestampInSeconds)()
        });
        this._applyClientOptions(prepared);
        this._applyIntegrationsMetadata(prepared);
        // If we have scope given to us, use it as the base for further modifications.
        // This allows us to prevent unnecessary copying of data if `captureContext` is not provided.
        var finalScope = scope;
        if (hint && hint.captureContext) finalScope = (0, _hub.Scope).clone(finalScope).update(hint.captureContext);
        // We prepare the result here with a resolved Event.
        var result = (0, _utils.SyncPromise).resolve(prepared);
        // This should be the last thing called, since we want that
        // {@link Hub.addEventProcessor} gets the finished prepared event.
        if (finalScope) // In case we have a hub we reassign it.
        result = finalScope.applyToEvent(prepared, hint);
        return result.then(function(evt) {
            if (typeof normalizeDepth === "number" && normalizeDepth > 0) return _this._normalizeEvent(evt, normalizeDepth);
            return evt;
        });
    };
    /**
     * Applies `normalize` function on necessary `Event` attributes to make them safe for serialization.
     * Normalized keys:
     * - `breadcrumbs.data`
     * - `user`
     * - `contexts`
     * - `extra`
     * @param event Event
     * @returns Normalized event
     */ BaseClient1.prototype._normalizeEvent = function(event, depth) {
        if (!event) return null;
        var normalized = (0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)({}, event), event.breadcrumbs && {
            breadcrumbs: event.breadcrumbs.map(function(b) {
                return (0, _tslib.__assign)((0, _tslib.__assign)({}, b), b.data && {
                    data: (0, _utils.normalize)(b.data, depth)
                });
            })
        }), event.user && {
            user: (0, _utils.normalize)(event.user, depth)
        }), event.contexts && {
            contexts: (0, _utils.normalize)(event.contexts, depth)
        }), event.extra && {
            extra: (0, _utils.normalize)(event.extra, depth)
        });
        // event.contexts.trace stores information about a Transaction. Similarly,
        // event.spans[] stores information about child Spans. Given that a
        // Transaction is conceptually a Span, normalization should apply to both
        // Transactions and Spans consistently.
        // For now the decision is to skip normalization of Transactions and Spans,
        // so this block overwrites the normalized event to add back the original
        // Transaction information prior to normalization.
        if (event.contexts && event.contexts.trace) // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
        normalized.contexts.trace = event.contexts.trace;
        var _a = this.getOptions()._experiments, _experiments = _a === void 0 ? {} : _a;
        if (_experiments.ensureNoCircularStructures) return (0, _utils.normalize)(normalized);
        return normalized;
    };
    /**
     *  Enhances event using the client configuration.
     *  It takes care of all "static" values like environment, release and `dist`,
     *  as well as truncating overly long values.
     * @param event event instance to be enhanced
     */ BaseClient1.prototype._applyClientOptions = function(event) {
        var options = this.getOptions();
        var environment = options.environment, release = options.release, dist = options.dist, _a = options.maxValueLength, maxValueLength = _a === void 0 ? 250 : _a;
        if (!("environment" in event)) event.environment = "environment" in options ? environment : "production";
        if (event.release === undefined && release !== undefined) event.release = release;
        if (event.dist === undefined && dist !== undefined) event.dist = dist;
        if (event.message) event.message = (0, _utils.truncate)(event.message, maxValueLength);
        var exception = event.exception && event.exception.values && event.exception.values[0];
        if (exception && exception.value) exception.value = (0, _utils.truncate)(exception.value, maxValueLength);
        var request = event.request;
        if (request && request.url) request.url = (0, _utils.truncate)(request.url, maxValueLength);
    };
    /**
     * This function adds all used integrations to the SDK info in the event.
     * @param event The event that will be filled with all integrations.
     */ BaseClient1.prototype._applyIntegrationsMetadata = function(event) {
        var integrationsArray = Object.keys(this._integrations);
        if (integrationsArray.length > 0) {
            event.sdk = event.sdk || {};
            event.sdk.integrations = (0, _tslib.__spread)(event.sdk.integrations || [], integrationsArray);
        }
    };
    /**
     * Tells the backend to send this event
     * @param event The Sentry event to send
     */ BaseClient1.prototype._sendEvent = function(event) {
        this._getBackend().sendEvent(event);
    };
    /**
     * Processes the event and logs an error in case of rejection
     * @param event
     * @param hint
     * @param scope
     */ BaseClient1.prototype._captureEvent = function(event, hint, scope) {
        return this._processEvent(event, hint, scope).then(function(finalEvent) {
            return finalEvent.event_id;
        }, function(reason) {
            (0, _utils.logger).error(reason);
            return undefined;
        });
    };
    /**
     * Processes an event (either error or message) and sends it to Sentry.
     *
     * This also adds breadcrumbs and context information to the event. However,
     * platform specific meta data (such as the User's IP address) must be added
     * by the SDK implementor.
     *
     *
     * @param event The event to send to Sentry.
     * @param hint May contain additional information about the original exception.
     * @param scope A scope containing event metadata.
     * @returns A SyncPromise that resolves with the event or rejects in case event was/will not be send.
     */ BaseClient1.prototype._processEvent = function(event, hint, scope) {
        var _this = this;
        // eslint-disable-next-line @typescript-eslint/unbound-method
        var _a = this.getOptions(), beforeSend = _a.beforeSend, sampleRate = _a.sampleRate;
        if (!this._isEnabled()) return (0, _utils.SyncPromise).reject(new (0, _utils.SentryError)("SDK not enabled, will not capture event."));
        var isTransaction = event.type === "transaction";
        // 1.0 === 100% events are sent
        // 0.0 === 0% events are sent
        // Sampling for transaction happens somewhere else
        if (!isTransaction && typeof sampleRate === "number" && Math.random() > sampleRate) return (0, _utils.SyncPromise).reject(new (0, _utils.SentryError)("Discarding event because it's not included in the random sample (sampling rate = " + sampleRate + ")"));
        return this._prepareEvent(event, scope, hint).then(function(prepared) {
            if (prepared === null) throw new (0, _utils.SentryError)("An event processor returned null, will not send event.");
            var isInternalException = hint && hint.data && hint.data.__sentry__ === true;
            if (isInternalException || isTransaction || !beforeSend) return prepared;
            var beforeSendResult = beforeSend(prepared, hint);
            return _this._ensureBeforeSendRv(beforeSendResult);
        }).then(function(processedEvent) {
            if (processedEvent === null) throw new (0, _utils.SentryError)("`beforeSend` returned `null`, will not send event.");
            var session = scope && scope.getSession && scope.getSession();
            if (!isTransaction && session) _this._updateSessionFromEvent(session, processedEvent);
            _this._sendEvent(processedEvent);
            return processedEvent;
        }).then(null, function(reason) {
            if (reason instanceof (0, _utils.SentryError)) throw reason;
            _this.captureException(reason, {
                data: {
                    __sentry__: true
                },
                originalException: reason
            });
            throw new (0, _utils.SentryError)("Event processing pipeline threw an error, original event will not be sent. Details have been sent as a new event.\nReason: " + reason);
        });
    };
    /**
     * Occupies the client with processing and event
     */ BaseClient1.prototype._process = function(promise) {
        var _this = this;
        this._numProcessing += 1;
        promise.then(function(value) {
            _this._numProcessing -= 1;
            return value;
        }, function(reason) {
            _this._numProcessing -= 1;
            return reason;
        });
    };
    /**
     * Verifies that return value of configured `beforeSend` is of expected type.
     */ BaseClient1.prototype._ensureBeforeSendRv = function(rv) {
        var nullErr = "`beforeSend` method has to return `null` or a valid event.";
        if ((0, _utils.isThenable)(rv)) return rv.then(function(event) {
            if (!((0, _utils.isPlainObject)(event) || event === null)) throw new (0, _utils.SentryError)(nullErr);
            return event;
        }, function(e) {
            throw new (0, _utils.SentryError)("beforeSend rejected with " + e);
        });
        else if (!((0, _utils.isPlainObject)(rv) || rv === null)) throw new (0, _utils.SentryError)(nullErr);
        return rv;
    };
    return BaseClient1;
}();

},{"tslib":"lRdW5","@sentry/hub":"cqx4p","@sentry/types":"emufg","@sentry/utils":"5auop","./integration":"5FQsm","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5FQsm":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "installedIntegrations", ()=>installedIntegrations);
/** Gets integration to install */ parcelHelpers.export(exports, "getIntegrationsToSetup", ()=>getIntegrationsToSetup);
/** Setup given integration */ parcelHelpers.export(exports, "setupIntegration", ()=>setupIntegration);
/**
 * Given a list of integration instances this installs them all. When `withDefaults` is set to `true` then all default
 * integrations are added unless they were already provided before.
 * @param integrations array of integration instances
 * @param withDefault should enable default integrations
 */ parcelHelpers.export(exports, "setupIntegrations", ()=>setupIntegrations);
var _tslib = require("tslib");
var _hub = require("@sentry/hub");
var _utils = require("@sentry/utils");
var installedIntegrations = [];
/**
 * @private
 */ function filterDuplicates(integrations1) {
    return integrations1.reduce(function(acc, integrations) {
        if (acc.every(function(accIntegration) {
            return integrations.name !== accIntegration.name;
        })) acc.push(integrations);
        return acc;
    }, []);
}
function getIntegrationsToSetup(options) {
    var defaultIntegrations = options.defaultIntegrations && (0, _tslib.__spread)(options.defaultIntegrations) || [];
    var userIntegrations = options.integrations;
    var integrations2 = (0, _tslib.__spread)(filterDuplicates(defaultIntegrations));
    if (Array.isArray(userIntegrations)) // Filter out integrations that are also included in user options
    integrations2 = (0, _tslib.__spread)(integrations2.filter(function(integrations) {
        return userIntegrations.every(function(userIntegration) {
            return userIntegration.name !== integrations.name;
        });
    }), filterDuplicates(userIntegrations));
    else if (typeof userIntegrations === "function") {
        integrations2 = userIntegrations(integrations2);
        integrations2 = Array.isArray(integrations2) ? integrations2 : [
            integrations2
        ];
    }
    // Make sure that if present, `Debug` integration will always run last
    var integrationsNames = integrations2.map(function(i) {
        return i.name;
    });
    var alwaysLastToRun = "Debug";
    if (integrationsNames.indexOf(alwaysLastToRun) !== -1) integrations2.push.apply(integrations2, (0, _tslib.__spread)(integrations2.splice(integrationsNames.indexOf(alwaysLastToRun), 1)));
    return integrations2;
}
function setupIntegration(integration) {
    if (installedIntegrations.indexOf(integration.name) !== -1) return;
    integration.setupOnce((0, _hub.addGlobalEventProcessor), (0, _hub.getCurrentHub));
    installedIntegrations.push(integration.name);
    (0, _utils.logger).log("Integration installed: " + integration.name);
}
function setupIntegrations(options) {
    var integrations = {};
    getIntegrationsToSetup(options).forEach(function(integration) {
        integrations[integration.name] = integration;
        setupIntegration(integration);
    });
    return integrations;
}

},{"tslib":"lRdW5","@sentry/hub":"cqx4p","@sentry/utils":"5auop","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ku9SA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "BaseBackend", ()=>BaseBackend);
var _utils = require("@sentry/utils");
var _noop = require("./transports/noop");
/**
 * This is the base implemention of a Backend.
 * @hidden
 */ var BaseBackend = /** @class */ function() {
    /** Creates a new backend instance. */ function BaseBackend1(options) {
        this._options = options;
        if (!this._options.dsn) (0, _utils.logger).warn("No DSN provided, backend will not do anything.");
        this._transport = this._setupTransport();
    }
    /**
     * @inheritDoc
     */ // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types
    BaseBackend1.prototype.eventFromException = function(_exception, _hint) {
        throw new (0, _utils.SentryError)("Backend has to implement `eventFromException` method");
    };
    /**
     * @inheritDoc
     */ BaseBackend1.prototype.eventFromMessage = function(_message, _level, _hint) {
        throw new (0, _utils.SentryError)("Backend has to implement `eventFromMessage` method");
    };
    /**
     * @inheritDoc
     */ BaseBackend1.prototype.sendEvent = function(event) {
        this._transport.sendEvent(event).then(null, function(reason) {
            (0, _utils.logger).error("Error while sending event: " + reason);
        });
    };
    /**
     * @inheritDoc
     */ BaseBackend1.prototype.sendSession = function(session) {
        if (!this._transport.sendSession) {
            (0, _utils.logger).warn("Dropping session because custom transport doesn't implement sendSession");
            return;
        }
        this._transport.sendSession(session).then(null, function(reason) {
            (0, _utils.logger).error("Error while sending session: " + reason);
        });
    };
    /**
     * @inheritDoc
     */ BaseBackend1.prototype.getTransport = function() {
        return this._transport;
    };
    /**
     * Sets up the transport so it can be used later to send requests.
     */ BaseBackend1.prototype._setupTransport = function() {
        return new (0, _noop.NoopTransport)();
    };
    return BaseBackend1;
}();

},{"@sentry/utils":"5auop","./transports/noop":"3bQdV","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3bQdV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "NoopTransport", ()=>NoopTransport);
var _types = require("@sentry/types");
var _utils = require("@sentry/utils");
/** Noop transport */ var NoopTransport = /** @class */ function() {
    function NoopTransport1() {}
    /**
     * @inheritDoc
     */ NoopTransport1.prototype.sendEvent = function(_) {
        return (0, _utils.SyncPromise).resolve({
            reason: "NoopTransport: Event has been skipped because no Dsn is configured.",
            status: (0, _types.Status).Skipped
        });
    };
    /**
     * @inheritDoc
     */ NoopTransport1.prototype.close = function(_) {
        return (0, _utils.SyncPromise).resolve(true);
    };
    return NoopTransport1;
}();

},{"@sentry/types":"emufg","@sentry/utils":"5auop","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kNswP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/** Creates a SentryRequest from a Session. */ parcelHelpers.export(exports, "sessionToSentryRequest", ()=>sessionToSentryRequest);
/** Creates a SentryRequest from an event. */ parcelHelpers.export(exports, "eventToSentryRequest", ()=>eventToSentryRequest);
var _tslib = require("tslib");
/** Extract sdk info from from the API metadata */ function getSdkMetadataForEnvelopeHeader(api) {
    if (!api.metadata || !api.metadata.sdk) return;
    var _a = api.metadata.sdk, name = _a.name, version = _a.version;
    return {
        name: name,
        version: version
    };
}
/**
 * Apply SdkInfo (name, version, packages, integrations) to the corresponding event key.
 * Merge with existing data if any.
 **/ function enhanceEventWithSdkInfo(event, sdkInfo) {
    if (!sdkInfo) return event;
    event.sdk = event.sdk || {};
    event.sdk.name = event.sdk.name || sdkInfo.name;
    event.sdk.version = event.sdk.version || sdkInfo.version;
    event.sdk.integrations = (0, _tslib.__spread)(event.sdk.integrations || [], sdkInfo.integrations || []);
    event.sdk.packages = (0, _tslib.__spread)(event.sdk.packages || [], sdkInfo.packages || []);
    return event;
}
function sessionToSentryRequest(session, api) {
    var sdkInfo = getSdkMetadataForEnvelopeHeader(api);
    var envelopeHeaders = JSON.stringify((0, _tslib.__assign)((0, _tslib.__assign)({
        sent_at: new Date().toISOString()
    }, sdkInfo && {
        sdk: sdkInfo
    }), api.forceEnvelope() && {
        dsn: api.getDsn().toString()
    }));
    // I know this is hacky but we don't want to add `session` to request type since it's never rate limited
    var type = "aggregates" in session ? "sessions" : "session";
    var itemHeaders = JSON.stringify({
        type: type
    });
    return {
        body: envelopeHeaders + "\n" + itemHeaders + "\n" + JSON.stringify(session),
        type: type,
        url: api.getEnvelopeEndpointWithUrlEncodedAuth()
    };
}
function eventToSentryRequest(event, api) {
    var sdkInfo = getSdkMetadataForEnvelopeHeader(api);
    var eventType = event.type || "event";
    var useEnvelope = eventType === "transaction" || api.forceEnvelope();
    var _a = event.debug_meta || {}, transactionSampling = _a.transactionSampling, metadata = (0, _tslib.__rest)(_a, [
        "transactionSampling"
    ]);
    var _b = transactionSampling || {}, samplingMethod = _b.method, sampleRate = _b.rate;
    if (Object.keys(metadata).length === 0) delete event.debug_meta;
    else event.debug_meta = metadata;
    var req = {
        body: JSON.stringify(sdkInfo ? enhanceEventWithSdkInfo(event, api.metadata.sdk) : event),
        type: eventType,
        url: useEnvelope ? api.getEnvelopeEndpointWithUrlEncodedAuth() : api.getStoreEndpointWithUrlEncodedAuth()
    };
    // https://develop.sentry.dev/sdk/envelopes/
    // Since we don't need to manipulate envelopes nor store them, there is no
    // exported concept of an Envelope with operations including serialization and
    // deserialization. Instead, we only implement a minimal subset of the spec to
    // serialize events inline here.
    if (useEnvelope) {
        var envelopeHeaders = JSON.stringify((0, _tslib.__assign)((0, _tslib.__assign)({
            event_id: event.event_id,
            sent_at: new Date().toISOString()
        }, sdkInfo && {
            sdk: sdkInfo
        }), api.forceEnvelope() && {
            dsn: api.getDsn().toString()
        }));
        var itemHeaders = JSON.stringify({
            type: eventType,
            // TODO: Right now, sampleRate may or may not be defined (it won't be in the cases of inheritance and
            // explicitly-set sampling decisions). Are we good with that?
            sample_rates: [
                {
                    id: samplingMethod,
                    rate: sampleRate
                }
            ]
        });
        // The trailing newline is optional. We intentionally don't send it to avoid
        // sending unnecessary bytes.
        //
        // const envelope = `${envelopeHeaders}\n${itemHeaders}\n${req.body}\n`;
        var envelope = envelopeHeaders + "\n" + itemHeaders + "\n" + req.body;
        req.body = envelope;
    }
    return req;
}

},{"tslib":"lRdW5","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"c4En9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Internal function to create a new SDK client instance. The client is
 * installed and then bound to the current scope.
 *
 * @param clientClass The client class to instantiate.
 * @param options Options to pass to the client.
 */ parcelHelpers.export(exports, "initAndBind", ()=>initAndBind);
var _hub = require("@sentry/hub");
var _utils = require("@sentry/utils");
function initAndBind(clientClass, options) {
    var _a;
    if (options.debug === true) (0, _utils.logger).enable();
    var hub = (0, _hub.getCurrentHub)();
    (_a = hub.getScope()) === null || _a === void 0 || _a.update(options.initialScope);
    var client = new clientClass(options);
    hub.bindClient(client);
}

},{"@sentry/hub":"cqx4p","@sentry/utils":"5auop","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1zT0P":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SDK_VERSION", ()=>SDK_VERSION);
var SDK_VERSION = "6.10.0";

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hvGYe":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "GlobalHandlers", ()=>(0, _globalhandlers.GlobalHandlers));
parcelHelpers.export(exports, "TryCatch", ()=>(0, _trycatch.TryCatch));
parcelHelpers.export(exports, "Breadcrumbs", ()=>(0, _breadcrumbs.Breadcrumbs));
parcelHelpers.export(exports, "LinkedErrors", ()=>(0, _linkederrors.LinkedErrors));
parcelHelpers.export(exports, "UserAgent", ()=>(0, _useragent.UserAgent));
parcelHelpers.export(exports, "Dedupe", ()=>(0, _dedupe.Dedupe));
var _globalhandlers = require("./globalhandlers");
var _trycatch = require("./trycatch");
var _breadcrumbs = require("./breadcrumbs");
var _linkederrors = require("./linkederrors");
var _useragent = require("./useragent");
var _dedupe = require("./dedupe");

},{"./globalhandlers":"9vNC8","./trycatch":"iBoZn","./breadcrumbs":"bPO5J","./linkederrors":"4LOto","./useragent":"9jhaK","./dedupe":"gb2cH","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9vNC8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "GlobalHandlers", ()=>GlobalHandlers);
var _tslib = require("tslib");
/* eslint-disable @typescript-eslint/no-unsafe-member-access */ var _core = require("@sentry/core");
var _types = require("@sentry/types");
var _utils = require("@sentry/utils");
var _eventbuilder = require("../eventbuilder");
var _helpers = require("../helpers");
/** Global handlers */ var GlobalHandlers = /** @class */ function() {
    /** JSDoc */ function GlobalHandlers1(options) {
        /**
         * @inheritDoc
         */ this.name = GlobalHandlers1.id;
        /** JSDoc */ this._onErrorHandlerInstalled = false;
        /** JSDoc */ this._onUnhandledRejectionHandlerInstalled = false;
        this._options = (0, _tslib.__assign)({
            onerror: true,
            onunhandledrejection: true
        }, options);
    }
    /**
     * @inheritDoc
     */ GlobalHandlers1.prototype.setupOnce = function() {
        Error.stackTraceLimit = 50;
        if (this._options.onerror) {
            (0, _utils.logger).log("Global Handler attached: onerror");
            this._installGlobalOnErrorHandler();
        }
        if (this._options.onunhandledrejection) {
            (0, _utils.logger).log("Global Handler attached: onunhandledrejection");
            this._installGlobalOnUnhandledRejectionHandler();
        }
    };
    /** JSDoc */ GlobalHandlers1.prototype._installGlobalOnErrorHandler = function() {
        var _this = this;
        if (this._onErrorHandlerInstalled) return;
        (0, _utils.addInstrumentationHandler)({
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            callback: function(data) {
                var error = data.error;
                var currentHub = (0, _core.getCurrentHub)();
                var hasIntegration = currentHub.getIntegration(GlobalHandlers1);
                var isFailedOwnDelivery = error && error.__sentry_own_request__ === true;
                if (!hasIntegration || (0, _helpers.shouldIgnoreOnError)() || isFailedOwnDelivery) return;
                var client = currentHub.getClient();
                var event = error === undefined && (0, _utils.isString)(data.msg) ? _this._eventFromIncompleteOnError(data.msg, data.url, data.line, data.column) : _this._enhanceEventWithInitialFrame((0, _eventbuilder.eventFromUnknownInput)(error || data.msg, undefined, {
                    attachStacktrace: client && client.getOptions().attachStacktrace,
                    rejection: false
                }), data.url, data.line, data.column);
                (0, _utils.addExceptionMechanism)(event, {
                    handled: false,
                    type: "onerror"
                });
                currentHub.captureEvent(event, {
                    originalException: error
                });
            },
            type: "error"
        });
        this._onErrorHandlerInstalled = true;
    };
    /** JSDoc */ GlobalHandlers1.prototype._installGlobalOnUnhandledRejectionHandler = function() {
        var _this = this;
        if (this._onUnhandledRejectionHandlerInstalled) return;
        (0, _utils.addInstrumentationHandler)({
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            callback: function(e) {
                var error = e;
                // dig the object of the rejection out of known event types
                try {
                    // PromiseRejectionEvents store the object of the rejection under 'reason'
                    // see https://developer.mozilla.org/en-US/docs/Web/API/PromiseRejectionEvent
                    if ("reason" in e) error = e.reason;
                    else if ("detail" in e && "reason" in e.detail) error = e.detail.reason;
                } catch (_oO) {
                // no-empty
                }
                var currentHub = (0, _core.getCurrentHub)();
                var hasIntegration = currentHub.getIntegration(GlobalHandlers1);
                var isFailedOwnDelivery = error && error.__sentry_own_request__ === true;
                if (!hasIntegration || (0, _helpers.shouldIgnoreOnError)() || isFailedOwnDelivery) return true;
                var client = currentHub.getClient();
                var event = (0, _utils.isPrimitive)(error) ? _this._eventFromRejectionWithPrimitive(error) : (0, _eventbuilder.eventFromUnknownInput)(error, undefined, {
                    attachStacktrace: client && client.getOptions().attachStacktrace,
                    rejection: true
                });
                event.level = (0, _types.Severity).Error;
                (0, _utils.addExceptionMechanism)(event, {
                    handled: false,
                    type: "onunhandledrejection"
                });
                currentHub.captureEvent(event, {
                    originalException: error
                });
                return;
            },
            type: "unhandledrejection"
        });
        this._onUnhandledRejectionHandlerInstalled = true;
    };
    /**
     * This function creates a stack from an old, error-less onerror handler.
     */ // eslint-disable-next-line @typescript-eslint/no-explicit-any
    GlobalHandlers1.prototype._eventFromIncompleteOnError = function(msg, url, line, column) {
        var ERROR_TYPES_RE = /^(?:[Uu]ncaught (?:exception: )?)?(?:((?:Eval|Internal|Range|Reference|Syntax|Type|URI|)Error): )?(.*)$/i;
        // If 'message' is ErrorEvent, get real message from inside
        var message = (0, _utils.isErrorEvent)(msg) ? msg.message : msg;
        var name;
        var groups = message.match(ERROR_TYPES_RE);
        if (groups) {
            name = groups[1];
            message = groups[2];
        }
        var event = {
            exception: {
                values: [
                    {
                        type: name || "Error",
                        value: message
                    }, 
                ]
            }
        };
        return this._enhanceEventWithInitialFrame(event, url, line, column);
    };
    /**
     * Create an event from a promise rejection where the `reason` is a primitive.
     *
     * @param reason: The `reason` property of the promise rejection
     * @returns An Event object with an appropriate `exception` value
     */ GlobalHandlers1.prototype._eventFromRejectionWithPrimitive = function(reason) {
        return {
            exception: {
                values: [
                    {
                        type: "UnhandledRejection",
                        // String() is needed because the Primitive type includes symbols (which can't be automatically stringified)
                        value: "Non-Error promise rejection captured with value: " + String(reason)
                    }, 
                ]
            }
        };
    };
    /** JSDoc */ // eslint-disable-next-line @typescript-eslint/no-explicit-any
    GlobalHandlers1.prototype._enhanceEventWithInitialFrame = function(event, url, line, column) {
        event.exception = event.exception || {};
        event.exception.values = event.exception.values || [];
        event.exception.values[0] = event.exception.values[0] || {};
        event.exception.values[0].stacktrace = event.exception.values[0].stacktrace || {};
        event.exception.values[0].stacktrace.frames = event.exception.values[0].stacktrace.frames || [];
        var colno = isNaN(parseInt(column, 10)) ? undefined : column;
        var lineno = isNaN(parseInt(line, 10)) ? undefined : line;
        var filename = (0, _utils.isString)(url) && url.length > 0 ? url : (0, _utils.getLocationHref)();
        if (event.exception.values[0].stacktrace.frames.length === 0) event.exception.values[0].stacktrace.frames.push({
            colno: colno,
            filename: filename,
            function: "?",
            in_app: true,
            lineno: lineno
        });
        return event;
    };
    /**
     * @inheritDoc
     */ GlobalHandlers1.id = "GlobalHandlers";
    return GlobalHandlers1;
}();

},{"tslib":"lRdW5","@sentry/core":"bWm3H","@sentry/types":"emufg","@sentry/utils":"5auop","../eventbuilder":"25Jer","../helpers":"6P1BD","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"25Jer":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Builds and Event from a Exception
 * @hidden
 */ parcelHelpers.export(exports, "eventFromException", ()=>eventFromException);
/**
 * Builds and Event from a Message
 * @hidden
 */ parcelHelpers.export(exports, "eventFromMessage", ()=>eventFromMessage);
/**
 * @hidden
 */ parcelHelpers.export(exports, "eventFromUnknownInput", ()=>eventFromUnknownInput);
/**
 * @hidden
 */ parcelHelpers.export(exports, "eventFromString", ()=>eventFromString);
var _tslib = require("tslib");
var _types = require("@sentry/types");
var _utils = require("@sentry/utils");
var _parsers = require("./parsers");
var _tracekit = require("./tracekit");
function eventFromException(options, exception, hint) {
    var syntheticException = hint && hint.syntheticException || undefined;
    var event = eventFromUnknownInput(exception, syntheticException, {
        attachStacktrace: options.attachStacktrace
    });
    (0, _utils.addExceptionMechanism)(event, {
        handled: true,
        type: "generic"
    });
    event.level = (0, _types.Severity).Error;
    if (hint && hint.event_id) event.event_id = hint.event_id;
    return (0, _utils.SyncPromise).resolve(event);
}
function eventFromMessage(options, message, level, hint) {
    if (level === void 0) level = (0, _types.Severity).Info;
    var syntheticException = hint && hint.syntheticException || undefined;
    var event = eventFromString(message, syntheticException, {
        attachStacktrace: options.attachStacktrace
    });
    event.level = level;
    if (hint && hint.event_id) event.event_id = hint.event_id;
    return (0, _utils.SyncPromise).resolve(event);
}
function eventFromUnknownInput(exception, syntheticException, options) {
    if (options === void 0) options = {};
    var event;
    if ((0, _utils.isErrorEvent)(exception) && exception.error) {
        // If it is an ErrorEvent with `error` property, extract it to get actual Error
        var errorEvent = exception;
        // eslint-disable-next-line no-param-reassign
        exception = errorEvent.error;
        event = (0, _parsers.eventFromStacktrace)((0, _tracekit.computeStackTrace)(exception));
        return event;
    }
    if ((0, _utils.isDOMError)(exception) || (0, _utils.isDOMException)(exception)) {
        // If it is a DOMError or DOMException (which are legacy APIs, but still supported in some browsers)
        // then we just extract the name, code, and message, as they don't provide anything else
        // https://developer.mozilla.org/en-US/docs/Web/API/DOMError
        // https://developer.mozilla.org/en-US/docs/Web/API/DOMException
        var domException = exception;
        var name_1 = domException.name || ((0, _utils.isDOMError)(domException) ? "DOMError" : "DOMException");
        var message = domException.message ? name_1 + ": " + domException.message : name_1;
        event = eventFromString(message, syntheticException, options);
        (0, _utils.addExceptionTypeValue)(event, message);
        if ("code" in domException) event.tags = (0, _tslib.__assign)((0, _tslib.__assign)({}, event.tags), {
            "DOMException.code": "" + domException.code
        });
        return event;
    }
    if ((0, _utils.isError)(exception)) {
        // we have a real Error object, do nothing
        event = (0, _parsers.eventFromStacktrace)((0, _tracekit.computeStackTrace)(exception));
        return event;
    }
    if ((0, _utils.isPlainObject)(exception) || (0, _utils.isEvent)(exception)) {
        // If it is plain Object or Event, serialize it manually and extract options
        // This will allow us to group events based on top-level keys
        // which is much better than creating new group when any key/value change
        var objectException = exception;
        event = (0, _parsers.eventFromPlainObject)(objectException, syntheticException, options.rejection);
        (0, _utils.addExceptionMechanism)(event, {
            synthetic: true
        });
        return event;
    }
    // If none of previous checks were valid, then it means that it's not:
    // - an instance of DOMError
    // - an instance of DOMException
    // - an instance of Event
    // - an instance of Error
    // - a valid ErrorEvent (one with an error property)
    // - a plain Object
    //
    // So bail out and capture it as a simple message:
    event = eventFromString(exception, syntheticException, options);
    (0, _utils.addExceptionTypeValue)(event, "" + exception, undefined);
    (0, _utils.addExceptionMechanism)(event, {
        synthetic: true
    });
    return event;
}
function eventFromString(input, syntheticException, options) {
    if (options === void 0) options = {};
    var event = {
        message: input
    };
    if (options.attachStacktrace && syntheticException) {
        var stacktrace = (0, _tracekit.computeStackTrace)(syntheticException);
        var frames_1 = (0, _parsers.prepareFramesForEvent)(stacktrace.stack);
        event.stacktrace = {
            frames: frames_1
        };
    }
    return event;
}

},{"tslib":"lRdW5","@sentry/types":"emufg","@sentry/utils":"5auop","./parsers":"jKM5d","./tracekit":"gGxmj","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jKM5d":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * This function creates an exception from an TraceKitStackTrace
 * @param stacktrace TraceKitStackTrace that will be converted to an exception
 * @hidden
 */ parcelHelpers.export(exports, "exceptionFromStacktrace", ()=>exceptionFromStacktrace);
/**
 * @hidden
 */ parcelHelpers.export(exports, "eventFromPlainObject", ()=>eventFromPlainObject);
/**
 * @hidden
 */ parcelHelpers.export(exports, "eventFromStacktrace", ()=>eventFromStacktrace);
/**
 * @hidden
 */ parcelHelpers.export(exports, "prepareFramesForEvent", ()=>prepareFramesForEvent);
var _utils = require("@sentry/utils");
var _tracekit = require("./tracekit");
var STACKTRACE_LIMIT = 50;
function exceptionFromStacktrace(stacktrace) {
    var frames = prepareFramesForEvent(stacktrace.stack);
    var exception = {
        type: stacktrace.name,
        value: stacktrace.message
    };
    if (frames && frames.length) exception.stacktrace = {
        frames: frames
    };
    if (exception.type === undefined && exception.value === "") exception.value = "Unrecoverable error caught";
    return exception;
}
function eventFromPlainObject(exception, syntheticException, rejection) {
    var event = {
        exception: {
            values: [
                {
                    type: (0, _utils.isEvent)(exception) ? exception.constructor.name : rejection ? "UnhandledRejection" : "Error",
                    value: "Non-Error " + (rejection ? "promise rejection" : "exception") + " captured with keys: " + (0, _utils.extractExceptionKeysForMessage)(exception)
                }, 
            ]
        },
        extra: {
            __serialized__: (0, _utils.normalizeToSize)(exception)
        }
    };
    if (syntheticException) {
        var stacktrace = (0, _tracekit.computeStackTrace)(syntheticException);
        var frames_1 = prepareFramesForEvent(stacktrace.stack);
        event.stacktrace = {
            frames: frames_1
        };
    }
    return event;
}
function eventFromStacktrace(stacktrace) {
    var exception = exceptionFromStacktrace(stacktrace);
    return {
        exception: {
            values: [
                exception
            ]
        }
    };
}
function prepareFramesForEvent(stack) {
    if (!stack || !stack.length) return [];
    var localStack = stack;
    var firstFrameFunction = localStack[0].func || "";
    var lastFrameFunction = localStack[localStack.length - 1].func || "";
    // If stack starts with one of our API calls, remove it (starts, meaning it's the top of the stack - aka last call)
    if (firstFrameFunction.indexOf("captureMessage") !== -1 || firstFrameFunction.indexOf("captureException") !== -1) localStack = localStack.slice(1);
    // If stack ends with one of our internal API calls, remove it (ends, meaning it's the bottom of the stack - aka top-most call)
    if (lastFrameFunction.indexOf("sentryWrapped") !== -1) localStack = localStack.slice(0, -1);
    // The frame where the crash happened, should be the last entry in the array
    return localStack.slice(0, STACKTRACE_LIMIT).map(function(frame) {
        return {
            colno: frame.column === null ? undefined : frame.column,
            filename: frame.url || localStack[0].url,
            function: frame.func || "?",
            in_app: true,
            lineno: frame.line === null ? undefined : frame.line
        };
    }).reverse();
}

},{"@sentry/utils":"5auop","./tracekit":"gGxmj","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gGxmj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/** JSDoc */ // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types
parcelHelpers.export(exports, "computeStackTrace", ()=>computeStackTrace);
/**
 * This was originally forked from https://github.com/occ/TraceKit, but has since been
 * largely modified and is now maintained as part of Sentry JS SDK.
 */ var _tslib = require("tslib");
// global reference to slice
var UNKNOWN_FUNCTION = "?";
// Chromium based browsers: Chrome, Brave, new Opera, new Edge
var chrome = /^\s*at (?:(.*?) ?\()?((?:file|https?|blob|chrome-extension|address|native|eval|webpack|<anonymous>|[-a-z]+:|.*bundle|\/).*?)(?::(\d+))?(?::(\d+))?\)?\s*$/i;
// gecko regex: `(?:bundle|\d+\.js)`: `bundle` is for react native, `\d+\.js` also but specifically for ram bundles because it
// generates filenames without a prefix like `file://` the filenames in the stacktrace are just 42.js
// We need this specific case for now because we want no other regex to match.
var gecko = /^\s*(.*?)(?:\((.*?)\))?(?:^|@)?((?:file|https?|blob|chrome|webpack|resource|moz-extension|capacitor).*?:\/.*?|\[native code\]|[^@]*(?:bundle|\d+\.js)|\/[\w\-. /=]+)(?::(\d+))?(?::(\d+))?\s*$/i;
var winjs = /^\s*at (?:((?:\[object object\])?.+) )?\(?((?:file|ms-appx|https?|webpack|blob):.*?):(\d+)(?::(\d+))?\)?\s*$/i;
var geckoEval = /(\S+) line (\d+)(?: > eval line \d+)* > eval/i;
var chromeEval = /\((\S*)(?::(\d+))(?::(\d+))\)/;
// Based on our own mapping pattern - https://github.com/getsentry/sentry/blob/9f08305e09866c8bd6d0c24f5b0aabdd7dd6c59c/src/sentry/lang/javascript/errormapping.py#L83-L108
var reactMinifiedRegexp = /Minified React error #\d+;/i;
function computeStackTrace(ex) {
    var stack = null;
    var popSize = 0;
    if (ex) {
        if (typeof ex.framesToPop === "number") popSize = ex.framesToPop;
        else if (reactMinifiedRegexp.test(ex.message)) popSize = 1;
    }
    try {
        // This must be tried first because Opera 10 *destroys*
        // its stacktrace property if you try to access the stack
        // property first!!
        stack = computeStackTraceFromStacktraceProp(ex);
        if (stack) return popFrames(stack, popSize);
    } catch (e) {
    // no-empty
    }
    try {
        stack = computeStackTraceFromStackProp(ex);
        if (stack) return popFrames(stack, popSize);
    } catch (e1) {
    // no-empty
    }
    return {
        message: extractMessage(ex),
        name: ex && ex.name,
        stack: [],
        failed: true
    };
}
/** JSDoc */ // eslint-disable-next-line @typescript-eslint/no-explicit-any, complexity
function computeStackTraceFromStackProp(ex) {
    if (!ex || !ex.stack) return null;
    var stack = [];
    var lines = ex.stack.split("\n");
    var isEval;
    var submatch;
    var parts;
    var element;
    for(var i = 0; i < lines.length; ++i){
        if (parts = chrome.exec(lines[i])) {
            var isNative = parts[2] && parts[2].indexOf("native") === 0; // start of line
            isEval = parts[2] && parts[2].indexOf("eval") === 0; // start of line
            if (isEval && (submatch = chromeEval.exec(parts[2]))) {
                // throw out eval line/column and use top-most line/column number
                parts[2] = submatch[1]; // url
                parts[3] = submatch[2]; // line
                parts[4] = submatch[3]; // column
            }
            // Arpad: Working with the regexp above is super painful. it is quite a hack, but just stripping the `address at `
            // prefix here seems like the quickest solution for now.
            var url = parts[2] && parts[2].indexOf("address at ") === 0 ? parts[2].substr(11) : parts[2];
            // Kamil: One more hack won't hurt us right? Understanding and adding more rules on top of these regexps right now
            // would be way too time consuming. (TODO: Rewrite whole RegExp to be more readable)
            var func = parts[1] || UNKNOWN_FUNCTION;
            var isSafariExtension = func.indexOf("safari-extension") !== -1;
            var isSafariWebExtension = func.indexOf("safari-web-extension") !== -1;
            if (isSafariExtension || isSafariWebExtension) {
                func = func.indexOf("@") !== -1 ? func.split("@")[0] : UNKNOWN_FUNCTION;
                url = isSafariExtension ? "safari-extension:" + url : "safari-web-extension:" + url;
            }
            element = {
                url: url,
                func: func,
                args: isNative ? [
                    parts[2]
                ] : [],
                line: parts[3] ? +parts[3] : null,
                column: parts[4] ? +parts[4] : null
            };
        } else if (parts = winjs.exec(lines[i])) element = {
            url: parts[2],
            func: parts[1] || UNKNOWN_FUNCTION,
            args: [],
            line: +parts[3],
            column: parts[4] ? +parts[4] : null
        };
        else if (parts = gecko.exec(lines[i])) {
            isEval = parts[3] && parts[3].indexOf(" > eval") > -1;
            if (isEval && (submatch = geckoEval.exec(parts[3]))) {
                // throw out eval line/column and use top-most line number
                parts[1] = parts[1] || "eval";
                parts[3] = submatch[1];
                parts[4] = submatch[2];
                parts[5] = ""; // no column when eval
            } else if (i === 0 && !parts[5] && ex.columnNumber !== void 0) // FireFox uses this awesome columnNumber property for its top frame
            // Also note, Firefox's column number is 0-based and everything else expects 1-based,
            // so adding 1
            // NOTE: this hack doesn't work if top-most frame is eval
            stack[0].column = ex.columnNumber + 1;
            element = {
                url: parts[3],
                func: parts[1] || UNKNOWN_FUNCTION,
                args: parts[2] ? parts[2].split(",") : [],
                line: parts[4] ? +parts[4] : null,
                column: parts[5] ? +parts[5] : null
            };
        } else continue;
        if (!element.func && element.line) element.func = UNKNOWN_FUNCTION;
        stack.push(element);
    }
    if (!stack.length) return null;
    return {
        message: extractMessage(ex),
        name: ex.name,
        stack: stack
    };
}
/** JSDoc */ // eslint-disable-next-line @typescript-eslint/no-explicit-any
function computeStackTraceFromStacktraceProp(ex) {
    if (!ex || !ex.stacktrace) return null;
    // Access and store the stacktrace property before doing ANYTHING
    // else to it because Opera is not very good at providing it
    // reliably in other circumstances.
    var stacktrace = ex.stacktrace;
    var opera10Regex = / line (\d+).*script (?:in )?(\S+)(?:: in function (\S+))?$/i;
    var opera11Regex = / line (\d+), column (\d+)\s*(?:in (?:<anonymous function: ([^>]+)>|([^)]+))\((.*)\))? in (.*):\s*$/i;
    var lines = stacktrace.split("\n");
    var stack = [];
    var parts;
    for(var line = 0; line < lines.length; line += 2){
        var element = null;
        if (parts = opera10Regex.exec(lines[line])) element = {
            url: parts[2],
            func: parts[3],
            args: [],
            line: +parts[1],
            column: null
        };
        else if (parts = opera11Regex.exec(lines[line])) element = {
            url: parts[6],
            func: parts[3] || parts[4],
            args: parts[5] ? parts[5].split(",") : [],
            line: +parts[1],
            column: +parts[2]
        };
        if (element) {
            if (!element.func && element.line) element.func = UNKNOWN_FUNCTION;
            stack.push(element);
        }
    }
    if (!stack.length) return null;
    return {
        message: extractMessage(ex),
        name: ex.name,
        stack: stack
    };
}
/** Remove N number of frames from the stack */ function popFrames(stacktrace, popSize) {
    try {
        return (0, _tslib.__assign)((0, _tslib.__assign)({}, stacktrace), {
            stack: stacktrace.stack.slice(popSize)
        });
    } catch (e) {
        return stacktrace;
    }
}
/**
 * There are cases where stacktrace.message is an Event object
 * https://github.com/getsentry/sentry-javascript/issues/1949
 * In this specific case we try to extract stacktrace.message.error.message
 */ // eslint-disable-next-line @typescript-eslint/no-explicit-any
function extractMessage(ex) {
    var message = ex && ex.message;
    if (!message) return "No error message";
    if (message.error && typeof message.error.message === "string") return message.error.message;
    return message;
}

},{"tslib":"lRdW5","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6P1BD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @hidden
 */ parcelHelpers.export(exports, "shouldIgnoreOnError", ()=>shouldIgnoreOnError);
/**
 * @hidden
 */ parcelHelpers.export(exports, "ignoreNextOnError", ()=>ignoreNextOnError);
/**
 * Instruments the given function and sends an event to Sentry every time the
 * function throws an exception.
 *
 * @param fn A function to wrap.
 * @returns The wrapped function.
 * @hidden
 */ parcelHelpers.export(exports, "wrap", ()=>wrap);
/**
 * Injects the Report Dialog script
 * @hidden
 */ parcelHelpers.export(exports, "injectReportDialog", ()=>injectReportDialog);
var _tslib = require("tslib");
var _core = require("@sentry/core");
var _utils = require("@sentry/utils");
var ignoreOnError = 0;
function shouldIgnoreOnError() {
    return ignoreOnError > 0;
}
function ignoreNextOnError() {
    // onerror should trigger before setTimeout
    ignoreOnError += 1;
    setTimeout(function() {
        ignoreOnError -= 1;
    });
}
function wrap(fn, options, before) {
    if (options === void 0) options = {};
    if (typeof fn !== "function") return fn;
    try {
        // We don't wanna wrap it twice
        if (fn.__sentry__) return fn;
        // If this has already been wrapped in the past, return that wrapped function
        if (fn.__sentry_wrapped__) return fn.__sentry_wrapped__;
    } catch (e) {
        // Just accessing custom props in some Selenium environments
        // can cause a "Permission denied" exception (see raven-js#495).
        // Bail on wrapping and return the function as-is (defers to window.onerror).
        return fn;
    }
    /* eslint-disable prefer-rest-params */ // eslint-disable-next-line @typescript-eslint/no-explicit-any
    var sentryWrapped = function() {
        var args = Array.prototype.slice.call(arguments);
        try {
            if (before && typeof before === "function") before.apply(this, arguments);
            // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access
            var wrappedArguments = args.map(function(arg) {
                return wrap(arg, options);
            });
            if (fn.handleEvent) // Attempt to invoke user-land function
            // NOTE: If you are a Sentry user, and you are seeing this stack frame, it
            //       means the sentry.javascript SDK caught an error invoking your application code. This
            //       is expected behavior and NOT indicative of a bug with sentry.javascript.
            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
            return fn.handleEvent.apply(this, wrappedArguments);
            // Attempt to invoke user-land function
            // NOTE: If you are a Sentry user, and you are seeing this stack frame, it
            //       means the sentry.javascript SDK caught an error invoking your application code. This
            //       is expected behavior and NOT indicative of a bug with sentry.javascript.
            return fn.apply(this, wrappedArguments);
        } catch (ex) {
            ignoreNextOnError();
            (0, _core.withScope)(function(scope) {
                scope.addEventProcessor(function(event) {
                    var processedEvent = (0, _tslib.__assign)({}, event);
                    if (options.mechanism) {
                        (0, _utils.addExceptionTypeValue)(processedEvent, undefined, undefined);
                        (0, _utils.addExceptionMechanism)(processedEvent, options.mechanism);
                    }
                    processedEvent.extra = (0, _tslib.__assign)((0, _tslib.__assign)({}, processedEvent.extra), {
                        arguments: args
                    });
                    return processedEvent;
                });
                (0, _core.captureException)(ex);
            });
            throw ex;
        }
    };
    /* eslint-enable prefer-rest-params */ // Accessing some objects may throw
    // ref: https://github.com/getsentry/sentry-javascript/issues/1168
    try {
        for(var property in fn)if (Object.prototype.hasOwnProperty.call(fn, property)) sentryWrapped[property] = fn[property];
    } catch (_oO) {} // eslint-disable-line no-empty
    fn.prototype = fn.prototype || {};
    sentryWrapped.prototype = fn.prototype;
    Object.defineProperty(fn, "__sentry_wrapped__", {
        enumerable: false,
        value: sentryWrapped
    });
    // Signal that this function has been wrapped/filled already
    // for both debugging and to prevent it to being wrapped/filled twice
    Object.defineProperties(sentryWrapped, {
        __sentry__: {
            enumerable: false,
            value: true
        },
        __sentry_original__: {
            enumerable: false,
            value: fn
        }
    });
    // Restore original function name (not all browsers allow that)
    try {
        var descriptor = Object.getOwnPropertyDescriptor(sentryWrapped, "name");
        if (descriptor.configurable) Object.defineProperty(sentryWrapped, "name", {
            get: function() {
                return fn.name;
            }
        });
    // eslint-disable-next-line no-empty
    } catch (_oO1) {}
    return sentryWrapped;
}
function injectReportDialog(options) {
    if (options === void 0) options = {};
    if (!options.eventId) {
        (0, _utils.logger).error("Missing eventId option in showReportDialog call");
        return;
    }
    if (!options.dsn) {
        (0, _utils.logger).error("Missing dsn option in showReportDialog call");
        return;
    }
    var script = document.createElement("script");
    script.async = true;
    script.src = new (0, _core.API)(options.dsn).getReportDialogEndpoint(options);
    if (options.onLoad) // eslint-disable-next-line @typescript-eslint/unbound-method
    script.onload = options.onLoad;
    (document.head || document.body).appendChild(script);
}

},{"tslib":"lRdW5","@sentry/core":"bWm3H","@sentry/utils":"5auop","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iBoZn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "TryCatch", ()=>TryCatch);
var _tslib = require("tslib");
var _utils = require("@sentry/utils");
var _helpers = require("../helpers");
var DEFAULT_EVENT_TARGET = [
    "EventTarget",
    "Window",
    "Node",
    "ApplicationCache",
    "AudioTrackList",
    "ChannelMergerNode",
    "CryptoOperation",
    "EventSource",
    "FileReader",
    "HTMLUnknownElement",
    "IDBDatabase",
    "IDBRequest",
    "IDBTransaction",
    "KeyOperation",
    "MediaController",
    "MessagePort",
    "ModalWindow",
    "Notification",
    "SVGElementInstance",
    "Screen",
    "TextTrack",
    "TextTrackCue",
    "TextTrackList",
    "WebSocket",
    "WebSocketWorker",
    "Worker",
    "XMLHttpRequest",
    "XMLHttpRequestEventTarget",
    "XMLHttpRequestUpload", 
];
/** Wrap timer functions and event targets to catch errors and provide better meta data */ var TryCatch = /** @class */ function() {
    /**
     * @inheritDoc
     */ function TryCatch1(options) {
        /**
         * @inheritDoc
         */ this.name = TryCatch1.id;
        this._options = (0, _tslib.__assign)({
            XMLHttpRequest: true,
            eventTarget: true,
            requestAnimationFrame: true,
            setInterval: true,
            setTimeout: true
        }, options);
    }
    /**
     * Wrap timer functions and event targets to catch errors
     * and provide better metadata.
     */ TryCatch1.prototype.setupOnce = function() {
        var global = (0, _utils.getGlobalObject)();
        if (this._options.setTimeout) (0, _utils.fill)(global, "setTimeout", this._wrapTimeFunction.bind(this));
        if (this._options.setInterval) (0, _utils.fill)(global, "setInterval", this._wrapTimeFunction.bind(this));
        if (this._options.requestAnimationFrame) (0, _utils.fill)(global, "requestAnimationFrame", this._wrapRAF.bind(this));
        if (this._options.XMLHttpRequest && "XMLHttpRequest" in global) (0, _utils.fill)(XMLHttpRequest.prototype, "send", this._wrapXHR.bind(this));
        if (this._options.eventTarget) {
            var eventTarget = Array.isArray(this._options.eventTarget) ? this._options.eventTarget : DEFAULT_EVENT_TARGET;
            eventTarget.forEach(this._wrapEventTarget.bind(this));
        }
    };
    /** JSDoc */ TryCatch1.prototype._wrapTimeFunction = function(original) {
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        return function() {
            var args = [];
            for(var _i = 0; _i < arguments.length; _i++)args[_i] = arguments[_i];
            var originalCallback = args[0];
            args[0] = (0, _helpers.wrap)(originalCallback, {
                mechanism: {
                    data: {
                        function: (0, _utils.getFunctionName)(original)
                    },
                    handled: true,
                    type: "instrument"
                }
            });
            return original.apply(this, args);
        };
    };
    /** JSDoc */ // eslint-disable-next-line @typescript-eslint/no-explicit-any
    TryCatch1.prototype._wrapRAF = function(original) {
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        return function(callback) {
            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
            return original.call(this, (0, _helpers.wrap)(callback, {
                mechanism: {
                    data: {
                        function: "requestAnimationFrame",
                        handler: (0, _utils.getFunctionName)(original)
                    },
                    handled: true,
                    type: "instrument"
                }
            }));
        };
    };
    /** JSDoc */ TryCatch1.prototype._wrapEventTarget = function(target) {
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        var global = (0, _utils.getGlobalObject)();
        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
        var proto = global[target] && global[target].prototype;
        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
        if (!proto || !proto.hasOwnProperty || !proto.hasOwnProperty("addEventListener")) return;
        (0, _utils.fill)(proto, "addEventListener", function(original) {
            return function(eventName, fn, options) {
                try {
                    if (typeof fn.handleEvent === "function") fn.handleEvent = (0, _helpers.wrap)(fn.handleEvent.bind(fn), {
                        mechanism: {
                            data: {
                                function: "handleEvent",
                                handler: (0, _utils.getFunctionName)(fn),
                                target: target
                            },
                            handled: true,
                            type: "instrument"
                        }
                    });
                } catch (err) {
                // can sometimes get 'Permission denied to access property "handle Event'
                }
                return original.call(this, eventName, // eslint-disable-next-line @typescript-eslint/no-explicit-any
                (0, _helpers.wrap)(fn, {
                    mechanism: {
                        data: {
                            function: "addEventListener",
                            handler: (0, _utils.getFunctionName)(fn),
                            target: target
                        },
                        handled: true,
                        type: "instrument"
                    }
                }), options);
            };
        });
        (0, _utils.fill)(proto, "removeEventListener", function(originalRemoveEventListener) {
            return function(eventName, fn, options) {
                var _a;
                /**
                 * There are 2 possible scenarios here:
                 *
                 * 1. Someone passes a callback, which was attached prior to Sentry initialization, or by using unmodified
                 * method, eg. `document.addEventListener.call(el, name, handler). In this case, we treat this function
                 * as a pass-through, and call original `removeEventListener` with it.
                 *
                 * 2. Someone passes a callback, which was attached after Sentry was initialized, which means that it was using
                 * our wrapped version of `addEventListener`, which internally calls `wrap` helper.
                 * This helper "wraps" whole callback inside a try/catch statement, and attached appropriate metadata to it,
                 * in order for us to make a distinction between wrapped/non-wrapped functions possible.
                 * If a function was wrapped, it has additional property of `__sentry_wrapped__`, holding the handler.
                 *
                 * When someone adds a handler prior to initialization, and then do it again, but after,
                 * then we have to detach both of them. Otherwise, if we'd detach only wrapped one, it'd be impossible
                 * to get rid of the initial handler and it'd stick there forever.
                 */ var wrappedEventHandler = fn;
                try {
                    var originalEventHandler = (_a = wrappedEventHandler) === null || _a === void 0 ? void 0 : _a.__sentry_wrapped__;
                    if (originalEventHandler) originalRemoveEventListener.call(this, eventName, originalEventHandler, options);
                } catch (e) {
                // ignore, accessing __sentry_wrapped__ will throw in some Selenium environments
                }
                return originalRemoveEventListener.call(this, eventName, wrappedEventHandler, options);
            };
        });
    };
    /** JSDoc */ TryCatch1.prototype._wrapXHR = function(originalSend) {
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        return function() {
            var args = [];
            for(var _i = 0; _i < arguments.length; _i++)args[_i] = arguments[_i];
            // eslint-disable-next-line @typescript-eslint/no-this-alias
            var xhr = this;
            var xmlHttpRequestProps = [
                "onload",
                "onerror",
                "onprogress",
                "onreadystatechange"
            ];
            xmlHttpRequestProps.forEach(function(prop) {
                if (prop in xhr && typeof xhr[prop] === "function") // eslint-disable-next-line @typescript-eslint/no-explicit-any
                (0, _utils.fill)(xhr, prop, function(original) {
                    var wrapOptions = {
                        mechanism: {
                            data: {
                                function: prop,
                                handler: (0, _utils.getFunctionName)(original)
                            },
                            handled: true,
                            type: "instrument"
                        }
                    };
                    // If Instrument integration has been called before TryCatch, get the name of original function
                    if (original.__sentry_original__) wrapOptions.mechanism.data.handler = (0, _utils.getFunctionName)(original.__sentry_original__);
                    // Otherwise wrap directly
                    return (0, _helpers.wrap)(original, wrapOptions);
                });
            });
            return originalSend.apply(this, args);
        };
    };
    /**
     * @inheritDoc
     */ TryCatch1.id = "TryCatch";
    return TryCatch1;
}();

},{"tslib":"lRdW5","@sentry/utils":"5auop","../helpers":"6P1BD","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bPO5J":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Breadcrumbs", ()=>Breadcrumbs);
var _tslib = require("tslib");
/* eslint-disable @typescript-eslint/no-unsafe-member-access */ /* eslint-disable max-lines */ var _core = require("@sentry/core");
var _types = require("@sentry/types");
var _utils = require("@sentry/utils");
/**
 * Default Breadcrumbs instrumentations
 * TODO: Deprecated - with v6, this will be renamed to `Instrument`
 */ var Breadcrumbs = /** @class */ function() {
    /**
     * @inheritDoc
     */ function Breadcrumbs1(options) {
        /**
         * @inheritDoc
         */ this.name = Breadcrumbs1.id;
        this._options = (0, _tslib.__assign)({
            console: true,
            dom: true,
            fetch: true,
            history: true,
            sentry: true,
            xhr: true
        }, options);
    }
    /**
     * Create a breadcrumb of `sentry` from the events themselves
     */ Breadcrumbs1.prototype.addSentryBreadcrumb = function(event) {
        if (!this._options.sentry) return;
        (0, _core.getCurrentHub)().addBreadcrumb({
            category: "sentry." + (event.type === "transaction" ? "transaction" : "event"),
            event_id: event.event_id,
            level: event.level,
            message: (0, _utils.getEventDescription)(event)
        }, {
            event: event
        });
    };
    /**
     * Instrument browser built-ins w/ breadcrumb capturing
     *  - Console API
     *  - DOM API (click/typing)
     *  - XMLHttpRequest API
     *  - Fetch API
     *  - History API
     */ Breadcrumbs1.prototype.setupOnce = function() {
        var _this = this;
        if (this._options.console) (0, _utils.addInstrumentationHandler)({
            callback: function() {
                var args = [];
                for(var _i = 0; _i < arguments.length; _i++)args[_i] = arguments[_i];
                _this._consoleBreadcrumb.apply(_this, (0, _tslib.__spread)(args));
            },
            type: "console"
        });
        if (this._options.dom) (0, _utils.addInstrumentationHandler)({
            callback: function() {
                var args = [];
                for(var _i = 0; _i < arguments.length; _i++)args[_i] = arguments[_i];
                _this._domBreadcrumb.apply(_this, (0, _tslib.__spread)(args));
            },
            type: "dom"
        });
        if (this._options.xhr) (0, _utils.addInstrumentationHandler)({
            callback: function() {
                var args = [];
                for(var _i = 0; _i < arguments.length; _i++)args[_i] = arguments[_i];
                _this._xhrBreadcrumb.apply(_this, (0, _tslib.__spread)(args));
            },
            type: "xhr"
        });
        if (this._options.fetch) (0, _utils.addInstrumentationHandler)({
            callback: function() {
                var args = [];
                for(var _i = 0; _i < arguments.length; _i++)args[_i] = arguments[_i];
                _this._fetchBreadcrumb.apply(_this, (0, _tslib.__spread)(args));
            },
            type: "fetch"
        });
        if (this._options.history) (0, _utils.addInstrumentationHandler)({
            callback: function() {
                var args = [];
                for(var _i = 0; _i < arguments.length; _i++)args[_i] = arguments[_i];
                _this._historyBreadcrumb.apply(_this, (0, _tslib.__spread)(args));
            },
            type: "history"
        });
    };
    /**
     * Creates breadcrumbs from console API calls
     */ // eslint-disable-next-line @typescript-eslint/no-explicit-any
    Breadcrumbs1.prototype._consoleBreadcrumb = function(handlerData) {
        var breadcrumb = {
            category: "console",
            data: {
                arguments: handlerData.args,
                logger: "console"
            },
            level: (0, _types.Severity).fromString(handlerData.level),
            message: (0, _utils.safeJoin)(handlerData.args, " ")
        };
        if (handlerData.level === "assert") {
            if (handlerData.args[0] === false) {
                breadcrumb.message = "Assertion failed: " + ((0, _utils.safeJoin)(handlerData.args.slice(1), " ") || "console.assert");
                breadcrumb.data.arguments = handlerData.args.slice(1);
            } else // Don't capture a breadcrumb for passed assertions
            return;
        }
        (0, _core.getCurrentHub)().addBreadcrumb(breadcrumb, {
            input: handlerData.args,
            level: handlerData.level
        });
    };
    /**
     * Creates breadcrumbs from DOM API calls
     */ // eslint-disable-next-line @typescript-eslint/no-explicit-any
    Breadcrumbs1.prototype._domBreadcrumb = function(handlerData) {
        var target;
        var keyAttrs = typeof this._options.dom === "object" ? this._options.dom.serializeAttribute : undefined;
        if (typeof keyAttrs === "string") keyAttrs = [
            keyAttrs
        ];
        // Accessing event.target can throw (see getsentry/raven-js#838, #768)
        try {
            target = handlerData.event.target ? (0, _utils.htmlTreeAsString)(handlerData.event.target, keyAttrs) : (0, _utils.htmlTreeAsString)(handlerData.event, keyAttrs);
        } catch (e) {
            target = "<unknown>";
        }
        if (target.length === 0) return;
        (0, _core.getCurrentHub)().addBreadcrumb({
            category: "ui." + handlerData.name,
            message: target
        }, {
            event: handlerData.event,
            name: handlerData.name,
            global: handlerData.global
        });
    };
    /**
     * Creates breadcrumbs from XHR API calls
     */ // eslint-disable-next-line @typescript-eslint/no-explicit-any
    Breadcrumbs1.prototype._xhrBreadcrumb = function(handlerData) {
        if (handlerData.endTimestamp) {
            // We only capture complete, non-sentry requests
            if (handlerData.xhr.__sentry_own_request__) return;
            var _a = handlerData.xhr.__sentry_xhr__ || {}, method = _a.method, url = _a.url, status_code = _a.status_code, body = _a.body;
            (0, _core.getCurrentHub)().addBreadcrumb({
                category: "xhr",
                data: {
                    method: method,
                    url: url,
                    status_code: status_code
                },
                type: "http"
            }, {
                xhr: handlerData.xhr,
                input: body
            });
            return;
        }
    };
    /**
     * Creates breadcrumbs from fetch API calls
     */ // eslint-disable-next-line @typescript-eslint/no-explicit-any
    Breadcrumbs1.prototype._fetchBreadcrumb = function(handlerData) {
        // We only capture complete fetch requests
        if (!handlerData.endTimestamp) return;
        if (handlerData.fetchData.url.match(/sentry_key/) && handlerData.fetchData.method === "POST") // We will not create breadcrumbs for fetch requests that contain `sentry_key` (internal sentry requests)
        return;
        if (handlerData.error) (0, _core.getCurrentHub)().addBreadcrumb({
            category: "fetch",
            data: handlerData.fetchData,
            level: (0, _types.Severity).Error,
            type: "http"
        }, {
            data: handlerData.error,
            input: handlerData.args
        });
        else (0, _core.getCurrentHub)().addBreadcrumb({
            category: "fetch",
            data: (0, _tslib.__assign)((0, _tslib.__assign)({}, handlerData.fetchData), {
                status_code: handlerData.response.status
            }),
            type: "http"
        }, {
            input: handlerData.args,
            response: handlerData.response
        });
    };
    /**
     * Creates breadcrumbs from history API calls
     */ // eslint-disable-next-line @typescript-eslint/no-explicit-any
    Breadcrumbs1.prototype._historyBreadcrumb = function(handlerData) {
        var global = (0, _utils.getGlobalObject)();
        var from = handlerData.from;
        var to = handlerData.to;
        var parsedLoc = (0, _utils.parseUrl)(global.location.href);
        var parsedFrom = (0, _utils.parseUrl)(from);
        var parsedTo = (0, _utils.parseUrl)(to);
        // Initial pushState doesn't provide `from` information
        if (!parsedFrom.path) parsedFrom = parsedLoc;
        // Use only the path component of the URL if the URL matches the current
        // document (almost all the time when using pushState)
        if (parsedLoc.protocol === parsedTo.protocol && parsedLoc.host === parsedTo.host) to = parsedTo.relative;
        if (parsedLoc.protocol === parsedFrom.protocol && parsedLoc.host === parsedFrom.host) from = parsedFrom.relative;
        (0, _core.getCurrentHub)().addBreadcrumb({
            category: "navigation",
            data: {
                from: from,
                to: to
            }
        });
    };
    /**
     * @inheritDoc
     */ Breadcrumbs1.id = "Breadcrumbs";
    return Breadcrumbs1;
}();

},{"tslib":"lRdW5","@sentry/core":"bWm3H","@sentry/types":"emufg","@sentry/utils":"5auop","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4LOto":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "LinkedErrors", ()=>LinkedErrors);
var _tslib = require("tslib");
var _core = require("@sentry/core");
var _utils = require("@sentry/utils");
var _parsers = require("../parsers");
var _tracekit = require("../tracekit");
var DEFAULT_KEY = "cause";
var DEFAULT_LIMIT = 5;
/** Adds SDK info to an event. */ var LinkedErrors = /** @class */ function() {
    /**
     * @inheritDoc
     */ function LinkedErrors1(options) {
        if (options === void 0) options = {};
        /**
         * @inheritDoc
         */ this.name = LinkedErrors1.id;
        this._key = options.key || DEFAULT_KEY;
        this._limit = options.limit || DEFAULT_LIMIT;
    }
    /**
     * @inheritDoc
     */ LinkedErrors1.prototype.setupOnce = function() {
        (0, _core.addGlobalEventProcessor)(function(event, hint) {
            var self = (0, _core.getCurrentHub)().getIntegration(LinkedErrors1);
            if (self) return self._handler(event, hint);
            return event;
        });
    };
    /**
     * @inheritDoc
     */ LinkedErrors1.prototype._handler = function(event, hint) {
        if (!event.exception || !event.exception.values || !hint || !(0, _utils.isInstanceOf)(hint.originalException, Error)) return event;
        var linkedErrors = this._walkErrorTree(hint.originalException, this._key);
        event.exception.values = (0, _tslib.__spread)(linkedErrors, event.exception.values);
        return event;
    };
    /**
     * @inheritDoc
     */ LinkedErrors1.prototype._walkErrorTree = function(error, key, stack) {
        if (stack === void 0) stack = [];
        if (!(0, _utils.isInstanceOf)(error[key], Error) || stack.length + 1 >= this._limit) return stack;
        var stacktrace = (0, _tracekit.computeStackTrace)(error[key]);
        var exception = (0, _parsers.exceptionFromStacktrace)(stacktrace);
        return this._walkErrorTree(error[key], key, (0, _tslib.__spread)([
            exception
        ], stack));
    };
    /**
     * @inheritDoc
     */ LinkedErrors1.id = "LinkedErrors";
    return LinkedErrors1;
}();

},{"tslib":"lRdW5","@sentry/core":"bWm3H","@sentry/utils":"5auop","../parsers":"jKM5d","../tracekit":"gGxmj","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9jhaK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "UserAgent", ()=>UserAgent);
var _tslib = require("tslib");
var _core = require("@sentry/core");
var _utils = require("@sentry/utils");
var global = (0, _utils.getGlobalObject)();
/** UserAgent */ var UserAgent = /** @class */ function() {
    function UserAgent1() {
        /**
         * @inheritDoc
         */ this.name = UserAgent1.id;
    }
    /**
     * @inheritDoc
     */ UserAgent1.prototype.setupOnce = function() {
        (0, _core.addGlobalEventProcessor)(function(event) {
            var _a, _b, _c;
            if ((0, _core.getCurrentHub)().getIntegration(UserAgent1)) {
                // if none of the information we want exists, don't bother
                if (!global.navigator && !global.location && !global.document) return event;
                // grab as much info as exists and add it to the event
                var url = ((_a = event.request) === null || _a === void 0 ? void 0 : _a.url) || ((_b = global.location) === null || _b === void 0 ? void 0 : _b.href);
                var referrer = (global.document || {}).referrer;
                var userAgent = (global.navigator || {}).userAgent;
                var headers = (0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)({}, (_c = event.request) === null || _c === void 0 ? void 0 : _c.headers), referrer && {
                    Referer: referrer
                }), userAgent && {
                    "User-Agent": userAgent
                });
                var request = (0, _tslib.__assign)((0, _tslib.__assign)({}, url && {
                    url: url
                }), {
                    headers: headers
                });
                return (0, _tslib.__assign)((0, _tslib.__assign)({}, event), {
                    request: request
                });
            }
            return event;
        });
    };
    /**
     * @inheritDoc
     */ UserAgent1.id = "UserAgent";
    return UserAgent1;
}();

},{"tslib":"lRdW5","@sentry/core":"bWm3H","@sentry/utils":"5auop","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gb2cH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Dedupe", ()=>Dedupe);
/** Deduplication filter */ var Dedupe = /** @class */ function() {
    function Dedupe1() {
        /**
         * @inheritDoc
         */ this.name = Dedupe1.id;
    }
    /**
     * @inheritDoc
     */ Dedupe1.prototype.setupOnce = function(addGlobalEventProcessor, getCurrentHub) {
        addGlobalEventProcessor(function(currentEvent) {
            var self = getCurrentHub().getIntegration(Dedupe1);
            if (self) {
                // Juuust in case something goes wrong
                try {
                    if (self._shouldDropEvent(currentEvent, self._previousEvent)) return null;
                } catch (_oO) {
                    return self._previousEvent = currentEvent;
                }
                return self._previousEvent = currentEvent;
            }
            return currentEvent;
        });
    };
    /** JSDoc */ Dedupe1.prototype._shouldDropEvent = function(currentEvent, previousEvent) {
        if (!previousEvent) return false;
        if (this._isSameMessageEvent(currentEvent, previousEvent)) return true;
        if (this._isSameExceptionEvent(currentEvent, previousEvent)) return true;
        return false;
    };
    /** JSDoc */ Dedupe1.prototype._isSameMessageEvent = function(currentEvent, previousEvent) {
        var currentMessage = currentEvent.message;
        var previousMessage = previousEvent.message;
        // If neither event has a message property, they were both exceptions, so bail out
        if (!currentMessage && !previousMessage) return false;
        // If only one event has a stacktrace, but not the other one, they are not the same
        if (currentMessage && !previousMessage || !currentMessage && previousMessage) return false;
        if (currentMessage !== previousMessage) return false;
        if (!this._isSameFingerprint(currentEvent, previousEvent)) return false;
        if (!this._isSameStacktrace(currentEvent, previousEvent)) return false;
        return true;
    };
    /** JSDoc */ Dedupe1.prototype._getFramesFromEvent = function(event) {
        var exception = event.exception;
        if (exception) try {
            // @ts-ignore Object could be undefined
            return exception.values[0].stacktrace.frames;
        } catch (_oO) {
            return undefined;
        }
        else if (event.stacktrace) return event.stacktrace.frames;
        return undefined;
    };
    /** JSDoc */ Dedupe1.prototype._isSameStacktrace = function(currentEvent, previousEvent) {
        var currentFrames = this._getFramesFromEvent(currentEvent);
        var previousFrames = this._getFramesFromEvent(previousEvent);
        // If neither event has a stacktrace, they are assumed to be the same
        if (!currentFrames && !previousFrames) return true;
        // If only one event has a stacktrace, but not the other one, they are not the same
        if (currentFrames && !previousFrames || !currentFrames && previousFrames) return false;
        currentFrames;
        previousFrames;
        // If number of frames differ, they are not the same
        if (previousFrames.length !== currentFrames.length) return false;
        // Otherwise, compare the two
        for(var i = 0; i < previousFrames.length; i++){
            var frameA = previousFrames[i];
            var frameB = currentFrames[i];
            if (frameA.filename !== frameB.filename || frameA.lineno !== frameB.lineno || frameA.colno !== frameB.colno || frameA.function !== frameB.function) return false;
        }
        return true;
    };
    /** JSDoc */ Dedupe1.prototype._getExceptionFromEvent = function(event) {
        return event.exception && event.exception.values && event.exception.values[0];
    };
    /** JSDoc */ Dedupe1.prototype._isSameExceptionEvent = function(currentEvent, previousEvent) {
        var previousException = this._getExceptionFromEvent(previousEvent);
        var currentException = this._getExceptionFromEvent(currentEvent);
        if (!previousException || !currentException) return false;
        if (previousException.type !== currentException.type || previousException.value !== currentException.value) return false;
        if (!this._isSameFingerprint(currentEvent, previousEvent)) return false;
        if (!this._isSameStacktrace(currentEvent, previousEvent)) return false;
        return true;
    };
    /** JSDoc */ Dedupe1.prototype._isSameFingerprint = function(currentEvent, previousEvent) {
        var currentFingerprint = currentEvent.fingerprint;
        var previousFingerprint = previousEvent.fingerprint;
        // If neither event has a fingerprint, they are assumed to be the same
        if (!currentFingerprint && !previousFingerprint) return true;
        // If only one event has a fingerprint, but not the other one, they are not the same
        if (currentFingerprint && !previousFingerprint || !currentFingerprint && previousFingerprint) return false;
        currentFingerprint;
        previousFingerprint;
        // Otherwise, compare the two
        try {
            return !!(currentFingerprint.join("") === previousFingerprint.join(""));
        } catch (_oO) {
            return false;
        }
    };
    /**
     * @inheritDoc
     */ Dedupe1.id = "Dedupe";
    return Dedupe1;
}();

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kqSAw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "BaseTransport", ()=>(0, _base.BaseTransport));
parcelHelpers.export(exports, "FetchTransport", ()=>(0, _fetch.FetchTransport));
parcelHelpers.export(exports, "XHRTransport", ()=>(0, _xhr.XHRTransport));
var _base = require("./base");
var _fetch = require("./fetch");
var _xhr = require("./xhr");

},{"./base":"lsDD9","./fetch":"4jMAn","./xhr":"9GDaB","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lsDD9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "BaseTransport", ()=>BaseTransport);
var _tslib = require("tslib");
var _core = require("@sentry/core");
var _types = require("@sentry/types");
var _utils = require("@sentry/utils");
var CATEGORY_MAPPING = {
    event: "error",
    transaction: "transaction",
    session: "session",
    attachment: "attachment"
};
/** Base Transport class implementation */ var BaseTransport = /** @class */ function() {
    function BaseTransport1(options) {
        this.options = options;
        /** A simple buffer holding all requests. */ this._buffer = new (0, _utils.PromiseBuffer)(30);
        /** Locks transport after receiving rate limits in a response */ this._rateLimits = {};
        this._api = new (0, _core.API)(options.dsn, options._metadata, options.tunnel);
        // eslint-disable-next-line deprecation/deprecation
        this.url = this._api.getStoreEndpointWithUrlEncodedAuth();
    }
    /**
     * @inheritDoc
     */ BaseTransport1.prototype.sendEvent = function(_) {
        throw new (0, _utils.SentryError)("Transport Class has to implement `sendEvent` method");
    };
    /**
     * @inheritDoc
     */ BaseTransport1.prototype.close = function(timeout) {
        return this._buffer.drain(timeout);
    };
    /**
     * Handle Sentry repsonse for promise-based transports.
     */ BaseTransport1.prototype._handleResponse = function(_a) {
        var requestType = _a.requestType, response = _a.response, headers = _a.headers, resolve = _a.resolve, reject = _a.reject;
        var status = (0, _types.Status).fromHttpCode(response.status);
        /**
         * "The name is case-insensitive."
         * https://developer.mozilla.org/en-US/docs/Web/API/Headers/get
         */ var limited = this._handleRateLimit(headers);
        if (limited) (0, _utils.logger).warn("Too many " + requestType + " requests, backing off until: " + this._disabledUntil(requestType));
        if (status === (0, _types.Status).Success) {
            resolve({
                status: status
            });
            return;
        }
        reject(response);
    };
    /**
     * Gets the time that given category is disabled until for rate limiting
     */ BaseTransport1.prototype._disabledUntil = function(requestType) {
        var category = CATEGORY_MAPPING[requestType];
        return this._rateLimits[category] || this._rateLimits.all;
    };
    /**
     * Checks if a category is rate limited
     */ BaseTransport1.prototype._isRateLimited = function(requestType) {
        return this._disabledUntil(requestType) > new Date(Date.now());
    };
    /**
     * Sets internal _rateLimits from incoming headers. Returns true if headers contains a non-empty rate limiting header.
     */ BaseTransport1.prototype._handleRateLimit = function(headers) {
        var e_1, _a, e_2, _b;
        var now = Date.now();
        var rlHeader = headers["x-sentry-rate-limits"];
        var raHeader = headers["retry-after"];
        if (rlHeader) {
            try {
                // rate limit headers are of the form
                //     <header>,<header>,..
                // where each <header> is of the form
                //     <retry_after>: <categories>: <scope>: <reason_code>
                // where
                //     <retry_after> is a delay in ms
                //     <categories> is the event type(s) (error, transaction, etc) being rate limited and is of the form
                //         <category>;<category>;...
                //     <scope> is what's being limited (org, project, or key) - ignored by SDK
                //     <reason_code> is an arbitrary string like "org_quota" - ignored by SDK
                for(var _c = (0, _tslib.__values)(rlHeader.trim().split(",")), _d = _c.next(); !_d.done; _d = _c.next()){
                    var limit = _d.value;
                    var parameters = limit.split(":", 2);
                    var headerDelay = parseInt(parameters[0], 10);
                    var delay = (!isNaN(headerDelay) ? headerDelay : 60) * 1000; // 60sec default
                    try {
                        for(var _e = (e_2 = void 0, (0, _tslib.__values)(parameters[1].split(";"))), _f = _e.next(); !_f.done; _f = _e.next()){
                            var category = _f.value;
                            this._rateLimits[category || "all"] = new Date(now + delay);
                        }
                    } catch (e_2_1) {
                        e_2 = {
                            error: e_2_1
                        };
                    } finally{
                        try {
                            if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
                        } finally{
                            if (e_2) throw e_2.error;
                        }
                    }
                }
            } catch (e_1_1) {
                e_1 = {
                    error: e_1_1
                };
            } finally{
                try {
                    if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
                } finally{
                    if (e_1) throw e_1.error;
                }
            }
            return true;
        } else if (raHeader) {
            this._rateLimits.all = new Date(now + (0, _utils.parseRetryAfterHeader)(now, raHeader));
            return true;
        }
        return false;
    };
    return BaseTransport1;
}();

},{"tslib":"lRdW5","@sentry/core":"bWm3H","@sentry/types":"emufg","@sentry/utils":"5auop","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4jMAn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "FetchTransport", ()=>FetchTransport);
var _tslib = require("tslib");
var _core = require("@sentry/core");
var _utils = require("@sentry/utils");
var _base = require("./base");
/**
 * A special usecase for incorrectly wrapped Fetch APIs in conjunction with ad-blockers.
 * Whenever someone wraps the Fetch API and returns the wrong promise chain,
 * this chain becomes orphaned and there is no possible way to capture it's rejections
 * other than allowing it bubble up to this very handler. eg.
 *
 * const f = window.fetch;
 * window.fetch = function () {
 *   const p = f.apply(this, arguments);
 *
 *   p.then(function() {
 *     console.log('hi.');
 *   });
 *
 *   return p;
 * }
 *
 * `p.then(function () { ... })` is producing a completely separate promise chain,
 * however, what's returned is `p` - the result of original `fetch` call.
 *
 * This mean, that whenever we use the Fetch API to send our own requests, _and_
 * some ad-blocker blocks it, this orphaned chain will _always_ reject,
 * effectively causing another event to be captured.
 * This makes a whole process become an infinite loop, which we need to somehow
 * deal with, and break it in one way or another.
 *
 * To deal with this issue, we are making sure that we _always_ use the real
 * browser Fetch API, instead of relying on what `window.fetch` exposes.
 * The only downside to this would be missing our own requests as breadcrumbs,
 * but because we are already not doing this, it should be just fine.
 *
 * Possible failed fetch error messages per-browser:
 *
 * Chrome:  Failed to fetch
 * Edge:    Failed to Fetch
 * Firefox: NetworkError when attempting to fetch resource
 * Safari:  resource blocked by content blocker
 */ function getNativeFetchImplementation() {
    /* eslint-disable @typescript-eslint/unbound-method */ var _a, _b;
    // Fast path to avoid DOM I/O
    var global = (0, _utils.getGlobalObject)();
    if ((0, _utils.isNativeFetch)(global.fetch)) return global.fetch.bind(global);
    var document = global.document;
    var fetchImpl = global.fetch;
    // eslint-disable-next-line deprecation/deprecation
    if (typeof ((_a = document) === null || _a === void 0 ? void 0 : _a.createElement) === "function") try {
        var sandbox = document.createElement("iframe");
        sandbox.hidden = true;
        document.head.appendChild(sandbox);
        if ((_b = sandbox.contentWindow) === null || _b === void 0 ? void 0 : _b.fetch) fetchImpl = sandbox.contentWindow.fetch;
        document.head.removeChild(sandbox);
    } catch (e) {
        (0, _utils.logger).warn("Could not create sandbox iframe for pure fetch check, bailing to window.fetch: ", e);
    }
    return fetchImpl.bind(global);
/* eslint-enable @typescript-eslint/unbound-method */ }
/** `fetch` based transport */ var FetchTransport = /** @class */ function(_super) {
    (0, _tslib.__extends)(FetchTransport1, _super);
    function FetchTransport1(options, fetchImpl) {
        if (fetchImpl === void 0) fetchImpl = getNativeFetchImplementation();
        var _this = _super.call(this, options) || this;
        _this._fetch = fetchImpl;
        return _this;
    }
    /**
     * @inheritDoc
     */ FetchTransport1.prototype.sendEvent = function(event) {
        return this._sendRequest((0, _core.eventToSentryRequest)(event, this._api), event);
    };
    /**
     * @inheritDoc
     */ FetchTransport1.prototype.sendSession = function(session) {
        return this._sendRequest((0, _core.sessionToSentryRequest)(session, this._api), session);
    };
    /**
     * @param sentryRequest Prepared SentryRequest to be delivered
     * @param originalPayload Original payload used to create SentryRequest
     */ FetchTransport1.prototype._sendRequest = function(sentryRequest, originalPayload) {
        var _this = this;
        if (this._isRateLimited(sentryRequest.type)) return Promise.reject({
            event: originalPayload,
            type: sentryRequest.type,
            reason: "Transport for " + sentryRequest.type + " requests locked till " + this._disabledUntil(sentryRequest.type) + " due to too many requests.",
            status: 429
        });
        var options = {
            body: sentryRequest.body,
            method: "POST",
            // Despite all stars in the sky saying that Edge supports old draft syntax, aka 'never', 'always', 'origin' and 'default
            // https://caniuse.com/#feat=referrer-policy
            // It doesn't. And it throw exception instead of ignoring this parameter...
            // REF: https://github.com/getsentry/raven-js/issues/1233
            referrerPolicy: (0, _utils.supportsReferrerPolicy)() ? "origin" : ""
        };
        if (this.options.fetchParameters !== undefined) Object.assign(options, this.options.fetchParameters);
        if (this.options.headers !== undefined) options.headers = this.options.headers;
        return this._buffer.add(function() {
            return new (0, _utils.SyncPromise)(function(resolve, reject) {
                _this._fetch(sentryRequest.url, options).then(function(response) {
                    var headers = {
                        "x-sentry-rate-limits": response.headers.get("X-Sentry-Rate-Limits"),
                        "retry-after": response.headers.get("Retry-After")
                    };
                    _this._handleResponse({
                        requestType: sentryRequest.type,
                        response: response,
                        headers: headers,
                        resolve: resolve,
                        reject: reject
                    });
                }).catch(reject);
            });
        });
    };
    return FetchTransport1;
}((0, _base.BaseTransport));

},{"tslib":"lRdW5","@sentry/core":"bWm3H","@sentry/utils":"5auop","./base":"lsDD9","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9GDaB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "XHRTransport", ()=>XHRTransport);
var _tslib = require("tslib");
var _core = require("@sentry/core");
var _utils = require("@sentry/utils");
var _base = require("./base");
/** `XHR` based transport */ var XHRTransport = /** @class */ function(_super) {
    (0, _tslib.__extends)(XHRTransport1, _super);
    function XHRTransport1() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @inheritDoc
     */ XHRTransport1.prototype.sendEvent = function(event) {
        return this._sendRequest((0, _core.eventToSentryRequest)(event, this._api), event);
    };
    /**
     * @inheritDoc
     */ XHRTransport1.prototype.sendSession = function(session) {
        return this._sendRequest((0, _core.sessionToSentryRequest)(session, this._api), session);
    };
    /**
     * @param sentryRequest Prepared SentryRequest to be delivered
     * @param originalPayload Original payload used to create SentryRequest
     */ XHRTransport1.prototype._sendRequest = function(sentryRequest, originalPayload) {
        var _this = this;
        if (this._isRateLimited(sentryRequest.type)) return Promise.reject({
            event: originalPayload,
            type: sentryRequest.type,
            reason: "Transport for " + sentryRequest.type + " requests locked till " + this._disabledUntil(sentryRequest.type) + " due to too many requests.",
            status: 429
        });
        return this._buffer.add(function() {
            return new (0, _utils.SyncPromise)(function(resolve, reject) {
                var request = new XMLHttpRequest();
                request.onreadystatechange = function() {
                    if (request.readyState === 4) {
                        var headers = {
                            "x-sentry-rate-limits": request.getResponseHeader("X-Sentry-Rate-Limits"),
                            "retry-after": request.getResponseHeader("Retry-After")
                        };
                        _this._handleResponse({
                            requestType: sentryRequest.type,
                            response: request,
                            headers: headers,
                            resolve: resolve,
                            reject: reject
                        });
                    }
                };
                request.open("POST", sentryRequest.url);
                for(var header in _this.options.headers)if (_this.options.headers.hasOwnProperty(header)) request.setRequestHeader(header, _this.options.headers[header]);
                request.send(sentryRequest.body);
            });
        });
    };
    return XHRTransport1;
}((0, _base.BaseTransport));

},{"tslib":"lRdW5","@sentry/core":"bWm3H","@sentry/utils":"5auop","./base":"lsDD9","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"85sHY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Severity", ()=>(0, _types.Severity));
parcelHelpers.export(exports, "Status", ()=>(0, _types.Status));
parcelHelpers.export(exports, "addGlobalEventProcessor", ()=>(0, _core.addGlobalEventProcessor));
parcelHelpers.export(exports, "addBreadcrumb", ()=>(0, _core.addBreadcrumb));
parcelHelpers.export(exports, "captureException", ()=>(0, _core.captureException));
parcelHelpers.export(exports, "captureEvent", ()=>(0, _core.captureEvent));
parcelHelpers.export(exports, "captureMessage", ()=>(0, _core.captureMessage));
parcelHelpers.export(exports, "configureScope", ()=>(0, _core.configureScope));
parcelHelpers.export(exports, "getHubFromCarrier", ()=>(0, _core.getHubFromCarrier));
parcelHelpers.export(exports, "getCurrentHub", ()=>(0, _core.getCurrentHub));
parcelHelpers.export(exports, "Hub", ()=>(0, _core.Hub));
parcelHelpers.export(exports, "makeMain", ()=>(0, _core.makeMain));
parcelHelpers.export(exports, "Scope", ()=>(0, _core.Scope));
parcelHelpers.export(exports, "startTransaction", ()=>(0, _core.startTransaction));
parcelHelpers.export(exports, "SDK_VERSION", ()=>(0, _core.SDK_VERSION));
parcelHelpers.export(exports, "setContext", ()=>(0, _core.setContext));
parcelHelpers.export(exports, "setExtra", ()=>(0, _core.setExtra));
parcelHelpers.export(exports, "setExtras", ()=>(0, _core.setExtras));
parcelHelpers.export(exports, "setTag", ()=>(0, _core.setTag));
parcelHelpers.export(exports, "setTags", ()=>(0, _core.setTags));
parcelHelpers.export(exports, "setUser", ()=>(0, _core.setUser));
parcelHelpers.export(exports, "withScope", ()=>(0, _core.withScope));
parcelHelpers.export(exports, "BrowserClient", ()=>(0, _client.BrowserClient));
parcelHelpers.export(exports, "injectReportDialog", ()=>(0, _helpers.injectReportDialog));
parcelHelpers.export(exports, "eventFromException", ()=>(0, _eventbuilder.eventFromException));
parcelHelpers.export(exports, "eventFromMessage", ()=>(0, _eventbuilder.eventFromMessage));
parcelHelpers.export(exports, "defaultIntegrations", ()=>(0, _sdk.defaultIntegrations));
parcelHelpers.export(exports, "forceLoad", ()=>(0, _sdk.forceLoad));
parcelHelpers.export(exports, "init", ()=>(0, _sdk.init));
parcelHelpers.export(exports, "lastEventId", ()=>(0, _sdk.lastEventId));
parcelHelpers.export(exports, "onLoad", ()=>(0, _sdk.onLoad));
parcelHelpers.export(exports, "showReportDialog", ()=>(0, _sdk.showReportDialog));
parcelHelpers.export(exports, "flush", ()=>(0, _sdk.flush));
parcelHelpers.export(exports, "close", ()=>(0, _sdk.close));
parcelHelpers.export(exports, "wrap", ()=>(0, _sdk.wrap));
parcelHelpers.export(exports, "SDK_NAME", ()=>(0, _version.SDK_NAME));
var _types = require("@sentry/types");
var _core = require("@sentry/core");
var _client = require("./client");
var _helpers = require("./helpers");
var _eventbuilder = require("./eventbuilder");
var _sdk = require("./sdk");
var _version = require("./version");

},{"@sentry/types":"emufg","@sentry/core":"bWm3H","./client":"4xM5l","./helpers":"6P1BD","./eventbuilder":"25Jer","./sdk":"2StSn","./version":"bt2HM","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4xM5l":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "BrowserClient", ()=>BrowserClient);
var _tslib = require("tslib");
var _core = require("@sentry/core");
var _utils = require("@sentry/utils");
var _backend = require("./backend");
var _helpers = require("./helpers");
var _integrations = require("./integrations");
/**
 * The Sentry Browser SDK Client.
 *
 * @see BrowserOptions for documentation on configuration options.
 * @see SentryClient for usage documentation.
 */ var BrowserClient = /** @class */ function(_super) {
    (0, _tslib.__extends)(BrowserClient1, _super);
    /**
     * Creates a new Browser SDK instance.
     *
     * @param options Configuration options for this SDK.
     */ function BrowserClient1(options) {
        if (options === void 0) options = {};
        var _this = this;
        options._metadata = options._metadata || {};
        options._metadata.sdk = options._metadata.sdk || {
            name: "sentry.javascript.browser",
            packages: [
                {
                    name: "npm:@sentry/browser",
                    version: (0, _core.SDK_VERSION)
                }, 
            ],
            version: (0, _core.SDK_VERSION)
        };
        _this = _super.call(this, (0, _backend.BrowserBackend), options) || this;
        return _this;
    }
    /**
     * Show a report dialog to the user to send feedback to a specific event.
     *
     * @param options Set individual options for the dialog
     */ BrowserClient1.prototype.showReportDialog = function(options) {
        if (options === void 0) options = {};
        // doesn't work without a document (React Native)
        var document = (0, _utils.getGlobalObject)().document;
        if (!document) return;
        if (!this._isEnabled()) {
            (0, _utils.logger).error("Trying to call showReportDialog with Sentry Client disabled");
            return;
        }
        (0, _helpers.injectReportDialog)((0, _tslib.__assign)((0, _tslib.__assign)({}, options), {
            dsn: options.dsn || this.getDsn()
        }));
    };
    /**
     * @inheritDoc
     */ BrowserClient1.prototype._prepareEvent = function(event, scope, hint) {
        event.platform = event.platform || "javascript";
        return _super.prototype._prepareEvent.call(this, event, scope, hint);
    };
    /**
     * @inheritDoc
     */ BrowserClient1.prototype._sendEvent = function(event) {
        var integration = this.getIntegration((0, _integrations.Breadcrumbs));
        if (integration) integration.addSentryBreadcrumb(event);
        _super.prototype._sendEvent.call(this, event);
    };
    return BrowserClient1;
}((0, _core.BaseClient));

},{"tslib":"lRdW5","@sentry/core":"bWm3H","@sentry/utils":"5auop","./backend":"cSVC2","./helpers":"6P1BD","./integrations":"hvGYe","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cSVC2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "BrowserBackend", ()=>BrowserBackend);
var _tslib = require("tslib");
var _core = require("@sentry/core");
var _types = require("@sentry/types");
var _utils = require("@sentry/utils");
var _eventbuilder = require("./eventbuilder");
var _transports = require("./transports");
/**
 * The Sentry Browser SDK Backend.
 * @hidden
 */ var BrowserBackend = /** @class */ function(_super) {
    (0, _tslib.__extends)(BrowserBackend1, _super);
    function BrowserBackend1() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @inheritDoc
     */ BrowserBackend1.prototype.eventFromException = function(exception, hint) {
        return (0, _eventbuilder.eventFromException)(this._options, exception, hint);
    };
    /**
     * @inheritDoc
     */ BrowserBackend1.prototype.eventFromMessage = function(message, level, hint) {
        if (level === void 0) level = (0, _types.Severity).Info;
        return (0, _eventbuilder.eventFromMessage)(this._options, message, level, hint);
    };
    /**
     * @inheritDoc
     */ BrowserBackend1.prototype._setupTransport = function() {
        if (!this._options.dsn) // We return the noop transport here in case there is no Dsn.
        return _super.prototype._setupTransport.call(this);
        var transportOptions = (0, _tslib.__assign)((0, _tslib.__assign)({}, this._options.transportOptions), {
            dsn: this._options.dsn,
            tunnel: this._options.tunnel,
            _metadata: this._options._metadata
        });
        if (this._options.transport) return new this._options.transport(transportOptions);
        if ((0, _utils.supportsFetch)()) return new (0, _transports.FetchTransport)(transportOptions);
        return new (0, _transports.XHRTransport)(transportOptions);
    };
    return BrowserBackend1;
}((0, _core.BaseBackend));

},{"tslib":"lRdW5","@sentry/core":"bWm3H","@sentry/types":"emufg","@sentry/utils":"5auop","./eventbuilder":"25Jer","./transports":"kqSAw","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2StSn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "defaultIntegrations", ()=>defaultIntegrations);
/**
 * The Sentry Browser SDK Client.
 *
 * To use this SDK, call the {@link init} function as early as possible when
 * loading the web page. To set context information or send manual events, use
 * the provided methods.
 *
 * @example
 *
 * ```
 *
 * import { init } from '@sentry/browser';
 *
 * init({
 *   dsn: '__DSN__',
 *   // ...
 * });
 * ```
 *
 * @example
 * ```
 *
 * import { configureScope } from '@sentry/browser';
 * configureScope((scope: Scope) => {
 *   scope.setExtra({ battery: 0.7 });
 *   scope.setTag({ user_mode: 'admin' });
 *   scope.setUser({ id: '4711' });
 * });
 * ```
 *
 * @example
 * ```
 *
 * import { addBreadcrumb } from '@sentry/browser';
 * addBreadcrumb({
 *   message: 'My Breadcrumb',
 *   // ...
 * });
 * ```
 *
 * @example
 *
 * ```
 *
 * import * as Sentry from '@sentry/browser';
 * Sentry.captureMessage('Hello, world!');
 * Sentry.captureException(new Error('Good bye'));
 * Sentry.captureEvent({
 *   message: 'Manual',
 *   stacktrace: [
 *     // ...
 *   ],
 * });
 * ```
 *
 * @see {@link BrowserOptions} for documentation on configuration options.
 */ parcelHelpers.export(exports, "init", ()=>init);
/**
 * Present the user with a report dialog.
 *
 * @param options Everything is optional, we try to fetch all info need from the global scope.
 */ parcelHelpers.export(exports, "showReportDialog", ()=>showReportDialog);
/**
 * This is the getter for lastEventId.
 *
 * @returns The last event id of a captured event.
 */ parcelHelpers.export(exports, "lastEventId", ()=>lastEventId);
/**
 * This function is here to be API compatible with the loader.
 * @hidden
 */ parcelHelpers.export(exports, "forceLoad", ()=>forceLoad);
/**
 * This function is here to be API compatible with the loader.
 * @hidden
 */ parcelHelpers.export(exports, "onLoad", ()=>onLoad);
/**
 * A promise that resolves when all current events have been sent.
 * If you provide a timeout and the queue takes longer to drain the promise returns false.
 *
 * @param timeout Maximum time in ms the client should wait.
 */ parcelHelpers.export(exports, "flush", ()=>flush);
/**
 * A promise that resolves when all current events have been sent.
 * If you provide a timeout and the queue takes longer to drain the promise returns false.
 *
 * @param timeout Maximum time in ms the client should wait.
 */ parcelHelpers.export(exports, "close", ()=>close);
/**
 * Wrap code within a try/catch block so the SDK is able to capture errors.
 *
 * @param fn A function to wrap.
 *
 * @returns The result of wrapped function call.
 */ // eslint-disable-next-line @typescript-eslint/no-explicit-any
parcelHelpers.export(exports, "wrap", ()=>wrap);
var _tslib = require("tslib");
var _core = require("@sentry/core");
var _utils = require("@sentry/utils");
var _client = require("./client");
var _helpers = require("./helpers");
var _integrations = require("./integrations");
var defaultIntegrations = [
    new (0, _core.Integrations).InboundFilters(),
    new (0, _core.Integrations).FunctionToString(),
    new (0, _integrations.TryCatch)(),
    new (0, _integrations.Breadcrumbs)(),
    new (0, _integrations.GlobalHandlers)(),
    new (0, _integrations.LinkedErrors)(),
    new (0, _integrations.Dedupe)(),
    new (0, _integrations.UserAgent)(), 
];
function init(options) {
    if (options === void 0) options = {};
    if (options.defaultIntegrations === undefined) options.defaultIntegrations = defaultIntegrations;
    if (options.release === undefined) {
        var window_1 = (0, _utils.getGlobalObject)();
        // This supports the variable that sentry-webpack-plugin injects
        if (window_1.SENTRY_RELEASE && window_1.SENTRY_RELEASE.id) options.release = window_1.SENTRY_RELEASE.id;
    }
    if (options.autoSessionTracking === undefined) options.autoSessionTracking = true;
    (0, _core.initAndBind)((0, _client.BrowserClient), options);
    if (options.autoSessionTracking) startSessionTracking();
}
function showReportDialog(options) {
    if (options === void 0) options = {};
    var hub = (0, _core.getCurrentHub)();
    var scope = hub.getScope();
    if (scope) options.user = (0, _tslib.__assign)((0, _tslib.__assign)({}, scope.getUser()), options.user);
    if (!options.eventId) options.eventId = hub.lastEventId();
    var client = hub.getClient();
    if (client) client.showReportDialog(options);
}
function lastEventId() {
    return (0, _core.getCurrentHub)().lastEventId();
}
function forceLoad() {
// Noop
}
function onLoad(callback) {
    callback();
}
function flush(timeout) {
    var client = (0, _core.getCurrentHub)().getClient();
    if (client) return client.flush(timeout);
    return (0, _utils.SyncPromise).reject(false);
}
function close(timeout) {
    var client = (0, _core.getCurrentHub)().getClient();
    if (client) return client.close(timeout);
    return (0, _utils.SyncPromise).reject(false);
}
function wrap(fn) {
    return (0, _helpers.wrap)(fn)();
}
/**
 * Enable automatic Session Tracking for the initial page load.
 */ function startSessionTracking() {
    var window = (0, _utils.getGlobalObject)();
    var document = window.document;
    if (typeof document === "undefined") {
        (0, _utils.logger).warn("Session tracking in non-browser environment with @sentry/browser is not supported.");
        return;
    }
    var hub = (0, _core.getCurrentHub)();
    // The only way for this to be false is for there to be a version mismatch between @sentry/browser (>= 6.0.0) and
    // @sentry/hub (< 5.27.0). In the simple case, there won't ever be such a mismatch, because the two packages are
    // pinned at the same version in package.json, but there are edge cases where it's possible. See
    // https://github.com/getsentry/sentry-javascript/issues/3207 and
    // https://github.com/getsentry/sentry-javascript/issues/3234 and
    // https://github.com/getsentry/sentry-javascript/issues/3278.
    if (typeof hub.startSession !== "function" || typeof hub.captureSession !== "function") return;
    // The session duration for browser sessions does not track a meaningful
    // concept that can be used as a metric.
    // Automatically captured sessions are akin to page views, and thus we
    // discard their duration.
    hub.startSession({
        ignoreDuration: true
    });
    hub.captureSession();
    // We want to create a session for every navigation as well
    (0, _utils.addInstrumentationHandler)({
        callback: function(_a) {
            var from = _a.from, to = _a.to;
            // Don't create an additional session for the initial route or if the location did not change
            if (from === undefined || from === to) return;
            hub.startSession({
                ignoreDuration: true
            });
            hub.captureSession();
        },
        type: "history"
    });
}

},{"tslib":"lRdW5","@sentry/core":"bWm3H","@sentry/utils":"5auop","./client":"4xM5l","./helpers":"6P1BD","./integrations":"hvGYe","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bt2HM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SDK_NAME", ()=>SDK_NAME);
var SDK_NAME = "sentry.javascript.browser";

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5Y5vD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Inits the Vue SDK
 */ parcelHelpers.export(exports, "init", ()=>init);
var _tslib = require("tslib");
var _browser = require("@sentry/browser");
var _utils = require("@sentry/utils");
var _errorhandler = require("./errorhandler");
var _tracing = require("./tracing");
var DEFAULT_CONFIG = {
    Vue: (0, _utils.getGlobalObject)().Vue,
    attachProps: true,
    logErrors: false,
    hooks: [
        "activate",
        "mount",
        "update"
    ],
    timeout: 2000,
    trackComponents: false,
    _metadata: {
        sdk: {
            name: "sentry.javascript.vue",
            packages: [
                {
                    name: "npm:@sentry/vue",
                    version: (0, _browser.SDK_VERSION)
                }, 
            ],
            version: (0, _browser.SDK_VERSION)
        }
    }
};
function init(config) {
    if (config === void 0) config = {};
    var options = (0, _tslib.__assign)((0, _tslib.__assign)({}, DEFAULT_CONFIG), config);
    (0, _browser.init)(options);
    if (!options.Vue && !options.app) {
        (0, _utils.logger).warn("Misconfigured SDK. Vue specific errors will not be captured.\nUpdate your `Sentry.init` call with an appropriate config option:\n`app` (Application Instance - Vue 3) or `Vue` (Vue Constructor - Vue 2).");
        return;
    }
    if (options.Vue) vueInit(options.Vue, options);
    else if (options.app) {
        var apps = Array.isArray(options.app) ? options.app : [
            options.app
        ];
        apps.forEach(function(app) {
            return vueInit(app, options);
        });
    }
}
var vueInit = function(app, options) {
    (0, _errorhandler.attachErrorHandler)(app, options);
    if ("tracesSampleRate" in options || "tracesSampler" in options) app.mixin((0, _tracing.createTracingMixins)((0, _tslib.__assign)((0, _tslib.__assign)({}, options), options.tracingOptions)));
};

},{"tslib":"lRdW5","@sentry/browser":"lFFil","@sentry/utils":"5auop","./errorhandler":"giaP9","./tracing":"5sNMy","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"giaP9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "attachErrorHandler", ()=>attachErrorHandler);
var _browser = require("@sentry/browser");
var _components = require("./components");
var attachErrorHandler = function(app, options) {
    var _a = app.config, errorHandler = _a.errorHandler, warnHandler = _a.warnHandler, silent = _a.silent;
    app.config.errorHandler = function(error, vm, lifecycleHook) {
        var componentName = (0, _components.formatComponentName)(vm, false);
        var trace = vm ? (0, _components.generateComponentTrace)(vm) : "";
        var metadata = {
            componentName: componentName,
            lifecycleHook: lifecycleHook,
            trace: trace
        };
        if (options.attachProps) // Vue2 - $options.propsData
        // Vue3 - $props
        metadata.propsData = vm.$options.propsData || vm.$props;
        // Capture exception in the next event loop, to make sure that all breadcrumbs are recorded in time.
        setTimeout(function() {
            (0, _browser.getCurrentHub)().withScope(function(scope) {
                scope.setContext("vue", metadata);
                (0, _browser.getCurrentHub)().captureException(error);
            });
        });
        if (typeof errorHandler === "function") errorHandler.call(app, error, vm, lifecycleHook);
        if (options.logErrors) {
            var hasConsole = typeof console !== "undefined";
            var message = "Error in " + lifecycleHook + ': "' + (error && error.toString()) + '"';
            if (warnHandler) warnHandler.call(null, message, vm, trace);
            else if (hasConsole && !silent) // eslint-disable-next-line no-console
            console.error("[Vue warn]: " + message + trace);
        }
    };
};

},{"@sentry/browser":"lFFil","./components":"kNTR2","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kNTR2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "formatComponentName", ()=>formatComponentName);
parcelHelpers.export(exports, "generateComponentTrace", ()=>generateComponentTrace);
// Vendored directly from https://github.com/vuejs/vue/blob/master/src/core/util/debug.js with types only changes.
var classifyRE = /(?:^|[-_])(\w)/g;
var classify = function(str) {
    return str.replace(classifyRE, function(c) {
        return c.toUpperCase();
    }).replace(/[-_]/g, "");
};
var ROOT_COMPONENT_NAME = "<Root>";
var ANONYMOUS_COMPONENT_NAME = "<Anonymous>";
var repeat = function(str, n) {
    var res = "";
    while(n){
        if (n % 2 === 1) res += str;
        if (n > 1) str += str; // eslint-disable-line no-param-reassign
        n >>= 1; // eslint-disable-line no-bitwise, no-param-reassign
    }
    return res;
};
var formatComponentName = function(vm, includeFile) {
    if (!vm) return ANONYMOUS_COMPONENT_NAME;
    if (vm.$root === vm) return ROOT_COMPONENT_NAME;
    var options = vm.$options;
    var name = options.name || options._componentTag;
    var file = options.__file;
    if (!name && file) {
        var match = file.match(/([^/\\]+)\.vue$/);
        if (match) name = match[1];
    }
    return (name ? "<" + classify(name) + ">" : ANONYMOUS_COMPONENT_NAME) + (file && includeFile !== false ? " at " + file : "");
};
var generateComponentTrace = function(vm1) {
    var _a, _b;
    if (((_a = vm1) === null || _a === void 0 ? void 0 : _a._isVue) && ((_b = vm1) === null || _b === void 0 ? void 0 : _b.$parent)) {
        var tree = [];
        var currentRecursiveSequence = 0;
        while(vm1){
            if (tree.length > 0) {
                var last = tree[tree.length - 1];
                if (last.constructor === vm1.constructor) {
                    currentRecursiveSequence += 1;
                    vm1 = vm1.$parent; // eslint-disable-line no-param-reassign
                    continue;
                } else if (currentRecursiveSequence > 0) {
                    tree[tree.length - 1] = [
                        last,
                        currentRecursiveSequence
                    ];
                    currentRecursiveSequence = 0;
                }
            }
            tree.push(vm1);
            vm1 = vm1.$parent; // eslint-disable-line no-param-reassign
        }
        var formattedTree = tree.map(function(vm, i) {
            return "" + ((i === 0 ? "---> " : repeat(" ", 5 + i * 2)) + (Array.isArray(vm) ? formatComponentName(vm[0]) + "... (" + vm[1] + " recursive calls)" : formatComponentName(vm)));
        }).join("\n");
        return "\n\nfound in\n\n" + formattedTree;
    }
    return "\n\n(found in " + formatComponentName(vm1) + ")";
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5sNMy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createTracingMixins", ()=>createTracingMixins);
var _tslib = require("tslib");
var _browser = require("@sentry/browser");
var _utils = require("@sentry/utils");
var _components = require("./components");
// Mappings from operation to corresponding lifecycle hook.
var HOOKS = {
    activate: [
        "activated",
        "deactivated"
    ],
    create: [
        "beforeCreate",
        "created"
    ],
    destroy: [
        "beforeDestroy",
        "destroyed"
    ],
    mount: [
        "beforeMount",
        "mounted"
    ],
    update: [
        "beforeUpdate",
        "updated"
    ]
};
var ROOT_SPAN_TIMER;
/** Grabs active transaction off scope, if any */ function getActiveTransaction() {
    var _a;
    return (_a = (0, _browser.getCurrentHub)().getScope()) === null || _a === void 0 ? void 0 : _a.getTransaction();
}
/** Finish top-level span and activity with a debounce configured using `timeout` option */ function finishRootSpan(vm, timestamp, timeout) {
    if (ROOT_SPAN_TIMER) clearTimeout(ROOT_SPAN_TIMER);
    ROOT_SPAN_TIMER = setTimeout(function() {
        var _a;
        if ((_a = vm.$root) === null || _a === void 0 ? void 0 : _a.$_sentryRootSpan) {
            vm.$root.$_sentryRootSpan.finish(timestamp);
            vm.$root.$_sentryRootSpan = undefined;
        }
    }, timeout);
}
var createTracingMixins = function(options) {
    var e_1, _a1;
    var hooks = options.hooks;
    var mixins = {};
    var _loop_1 = function(operation) {
        var e_2, _a2;
        // Retrieve corresponding hooks from Vue lifecycle.
        // eg. mount => ['beforeMount', 'mounted']
        var internalHooks = HOOKS[operation];
        if (!internalHooks) {
            (0, _utils.logger).warn("Unknown hook: " + operation);
            return "continue";
        }
        try {
            for(var internalHooks_1 = (e_2 = void 0, (0, _tslib.__values)(internalHooks)), internalHooks_1_1 = internalHooks_1.next(); !internalHooks_1_1.done; internalHooks_1_1 = internalHooks_1.next()){
                var internalHook = internalHooks_1_1.value;
                mixins[internalHook] = function() {
                    var _a;
                    var isRoot = this.$root === this;
                    if (isRoot) {
                        var activeTransaction = getActiveTransaction();
                        if (activeTransaction) this.$_sentryRootSpan = this.$_sentryRootSpan || activeTransaction.startChild({
                            description: "Application Render",
                            op: "Vue"
                        });
                    }
                    // Skip components that we don't want to track to minimize the noise and give a more granular control to the user
                    var name = (0, _components.formatComponentName)(this, false);
                    var shouldTrack = Array.isArray(options.trackComponents) ? options.trackComponents.includes(name) : options.trackComponents;
                    // We always want to track root component
                    if (!isRoot && !shouldTrack) return;
                    this.$_sentrySpans = this.$_sentrySpans || {};
                    // On the first handler call (before), it'll be undefined, as `$once` will add it in the future.
                    // However, on the second call (after), it'll be already in place.
                    var span = this.$_sentrySpans[operation];
                    if (span) {
                        span.finish();
                        finishRootSpan(this, (0, _utils.timestampInSeconds)(), options.timeout);
                    } else {
                        var activeTransaction = ((_a = this.$root) === null || _a === void 0 ? void 0 : _a.$_sentryRootSpan) || getActiveTransaction();
                        if (activeTransaction) this.$_sentrySpans[operation] = activeTransaction.startChild({
                            description: "Vue <" + name + ">",
                            op: operation
                        });
                    }
                };
            }
        } catch (e_2_1) {
            e_2 = {
                error: e_2_1
            };
        } finally{
            try {
                if (internalHooks_1_1 && !internalHooks_1_1.done && (_a2 = internalHooks_1.return)) _a2.call(internalHooks_1);
            } finally{
                if (e_2) throw e_2.error;
            }
        }
    };
    try {
        for(var hooks_1 = (0, _tslib.__values)(hooks), hooks_1_1 = hooks_1.next(); !hooks_1_1.done; hooks_1_1 = hooks_1.next()){
            var operation1 = hooks_1_1.value;
            _loop_1(operation1);
        }
    } catch (e_1_1) {
        e_1 = {
            error: e_1_1
        };
    } finally{
        try {
            if (hooks_1_1 && !hooks_1_1.done && (_a1 = hooks_1.return)) _a1.call(hooks_1);
        } finally{
            if (e_1) throw e_1.error;
        }
    }
    return mixins;
};

},{"tslib":"lRdW5","@sentry/browser":"lFFil","@sentry/utils":"5auop","./components":"kNTR2","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gdUB3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Creates routing instrumentation for Vue Router v2
 *
 * @param router The Vue Router instance that is used
 */ parcelHelpers.export(exports, "vueRouterInstrumentation", ()=>vueRouterInstrumentation);
var _browser = require("@sentry/browser");
function vueRouterInstrumentation(router) {
    return function(startTransaction, startTransactionOnPageLoad, startTransactionOnLocationChange) {
        if (startTransactionOnPageLoad === void 0) startTransactionOnPageLoad = true;
        if (startTransactionOnLocationChange === void 0) startTransactionOnLocationChange = true;
        router.onError(function(error) {
            return (0, _browser.captureException)(error);
        });
        router.beforeEach(function(to, from, next) {
            // According to docs we could use `from === VueRouter.START_LOCATION` but I couldnt get it working for Vue 2
            // https://router.vuejs.org/api/#router-start-location
            // https://next.router.vuejs.org/api/#start-location
            // Vue2 - null
            // Vue3 - undefined
            var isPageLoadNavigation = from.name == null && from.matched.length === 0;
            var tags = {
                "routing.instrumentation": "vue-router"
            };
            var data = {
                params: to.params,
                query: to.query
            };
            if (startTransactionOnPageLoad && isPageLoadNavigation) startTransaction({
                name: to.name || to.path,
                op: "pageload",
                tags: tags,
                data: data
            });
            if (startTransactionOnLocationChange && !isPageLoadNavigation) startTransaction({
                name: to.name || to.matched[0].path || to.path,
                op: "navigation",
                tags: tags,
                data: data
            });
            next();
        });
    };
}

},{"@sentry/browser":"lFFil","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lAvZa":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Integrations", ()=>Integrations);
parcelHelpers.export(exports, "Span", ()=>(0, _span.Span));
parcelHelpers.export(exports, "Transaction", ()=>(0, _transaction.Transaction));
parcelHelpers.export(exports, "registerRequestInstrumentation", ()=>(0, _browser.instrumentOutgoingRequests));
parcelHelpers.export(exports, "defaultRequestInstrumentationOptions", ()=>(0, _browser.defaultRequestInstrumentationOptions));
parcelHelpers.export(exports, "SpanStatus", ()=>(0, _spanstatus.SpanStatus));
parcelHelpers.export(exports, "IdleTransaction", ()=>(0, _idletransaction.IdleTransaction));
parcelHelpers.export(exports, "startIdleTransaction", ()=>(0, _hubextensions.startIdleTransaction));
parcelHelpers.export(exports, "addExtensionMethods", ()=>(0, _hubextensions.addExtensionMethods));
parcelHelpers.export(exports, "extractTraceparentData", ()=>(0, _utils.extractTraceparentData));
parcelHelpers.export(exports, "getActiveTransaction", ()=>(0, _utils.getActiveTransaction));
parcelHelpers.export(exports, "hasTracingEnabled", ()=>(0, _utils.hasTracingEnabled));
parcelHelpers.export(exports, "stripUrlQueryAndFragment", ()=>(0, _utils.stripUrlQueryAndFragment));
parcelHelpers.export(exports, "TRACEPARENT_REGEXP", ()=>(0, _utils.TRACEPARENT_REGEXP));
var _tslib = require("tslib");
var _browser = require("./browser");
var _hubextensions = require("./hubextensions");
var _integrations = require("./integrations");
var _span = require("./span");
var _transaction = require("./transaction");
var _spanstatus = require("./spanstatus");
var _idletransaction = require("./idletransaction");
var _utils = require("./utils");
var Integrations = (0, _tslib.__assign)((0, _tslib.__assign)({}, _integrations), {
    BrowserTracing: (0, _browser.BrowserTracing)
});
// We are patching the global object with our hub extension methods
(0, _hubextensions.addExtensionMethods)();

},{"tslib":"lRdW5","./browser":"7Jl38","./hubextensions":"bB3S9","./integrations":"cG90K","./span":"dERgR","./transaction":"1MuRG","./spanstatus":"exKzR","./idletransaction":"hP3gF","./utils":"2Y12I","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7Jl38":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "BrowserTracing", ()=>(0, _browsertracing.BrowserTracing));
parcelHelpers.export(exports, "instrumentOutgoingRequests", ()=>(0, _request.instrumentOutgoingRequests));
parcelHelpers.export(exports, "defaultRequestInstrumentationOptions", ()=>(0, _request.defaultRequestInstrumentationOptions));
var _browsertracing = require("./browsertracing");
var _request = require("./request");

},{"./browsertracing":"Lemwj","./request":"WiNZM","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"Lemwj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DEFAULT_MAX_TRANSACTION_DURATION_SECONDS", ()=>DEFAULT_MAX_TRANSACTION_DURATION_SECONDS);
parcelHelpers.export(exports, "BrowserTracing", ()=>BrowserTracing);
/**
 * Gets transaction context from a sentry-trace meta.
 *
 * @returns Transaction context data from the header or undefined if there's no header or the header is malformed
 */ parcelHelpers.export(exports, "getHeaderContext", ()=>getHeaderContext);
/** Returns the value of a meta tag */ parcelHelpers.export(exports, "getMetaContent", ()=>getMetaContent);
var _tslib = require("tslib");
var _utils = require("@sentry/utils");
var _hubextensions = require("../hubextensions");
var _idletransaction = require("../idletransaction");
var _spanstatus = require("../spanstatus");
var _utils1 = require("../utils");
var _backgroundtab = require("./backgroundtab");
var _metrics = require("./metrics");
var _request = require("./request");
var _router = require("./router");
var DEFAULT_MAX_TRANSACTION_DURATION_SECONDS = 600;
var DEFAULT_BROWSER_TRACING_OPTIONS = (0, _tslib.__assign)({
    idleTimeout: (0, _idletransaction.DEFAULT_IDLE_TIMEOUT),
    markBackgroundTransactions: true,
    maxTransactionDuration: DEFAULT_MAX_TRANSACTION_DURATION_SECONDS,
    routingInstrumentation: (0, _router.instrumentRoutingWithDefaults),
    startTransactionOnLocationChange: true,
    startTransactionOnPageLoad: true
}, (0, _request.defaultRequestInstrumentationOptions));
/**
 * The Browser Tracing integration automatically instruments browser pageload/navigation
 * actions as transactions, and captures requests, metrics and errors as spans.
 *
 * The integration can be configured with a variety of options, and can be extended to use
 * any routing library. This integration uses {@see IdleTransaction} to create transactions.
 */ var BrowserTracing = /** @class */ function() {
    function BrowserTracing1(_options) {
        /**
         * @inheritDoc
         */ this.name = BrowserTracing1.id;
        this._metrics = new (0, _metrics.MetricsInstrumentation)();
        this._emitOptionsWarning = false;
        var tracingOrigins = (0, _request.defaultRequestInstrumentationOptions).tracingOrigins;
        // NOTE: Logger doesn't work in constructors, as it's initialized after integrations instances
        if (_options && _options.tracingOrigins && Array.isArray(_options.tracingOrigins) && _options.tracingOrigins.length !== 0) tracingOrigins = _options.tracingOrigins;
        else this._emitOptionsWarning = true;
        this.options = (0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)({}, DEFAULT_BROWSER_TRACING_OPTIONS), _options), {
            tracingOrigins: tracingOrigins
        });
    }
    /**
     * @inheritDoc
     */ BrowserTracing1.prototype.setupOnce = function(_, getCurrentHub) {
        var _this = this;
        this._getCurrentHub = getCurrentHub;
        if (this._emitOptionsWarning) {
            (0, _utils.logger).warn("[Tracing] You need to define `tracingOrigins` in the options. Set an array of urls or patterns to trace.");
            (0, _utils.logger).warn("[Tracing] We added a reasonable default for you: " + (0, _request.defaultRequestInstrumentationOptions).tracingOrigins);
        }
        // eslint-disable-next-line @typescript-eslint/unbound-method
        var _a = this.options, instrumentRouting = _a.routingInstrumentation, startTransactionOnLocationChange = _a.startTransactionOnLocationChange, startTransactionOnPageLoad = _a.startTransactionOnPageLoad, markBackgroundTransactions = _a.markBackgroundTransactions, traceFetch = _a.traceFetch, traceXHR = _a.traceXHR, tracingOrigins = _a.tracingOrigins, shouldCreateSpanForRequest = _a.shouldCreateSpanForRequest;
        instrumentRouting(function(context) {
            return _this._createRouteTransaction(context);
        }, startTransactionOnPageLoad, startTransactionOnLocationChange);
        if (markBackgroundTransactions) (0, _backgroundtab.registerBackgroundTabDetection)();
        (0, _request.instrumentOutgoingRequests)({
            traceFetch: traceFetch,
            traceXHR: traceXHR,
            tracingOrigins: tracingOrigins,
            shouldCreateSpanForRequest: shouldCreateSpanForRequest
        });
    };
    /** Create routing idle transaction. */ BrowserTracing1.prototype._createRouteTransaction = function(context) {
        var _this = this;
        if (!this._getCurrentHub) {
            (0, _utils.logger).warn("[Tracing] Did not create " + context.op + " transaction because _getCurrentHub is invalid.");
            return undefined;
        }
        // eslint-disable-next-line @typescript-eslint/unbound-method
        var _a = this.options, beforeNavigate = _a.beforeNavigate, idleTimeout = _a.idleTimeout, maxTransactionDuration = _a.maxTransactionDuration;
        var parentContextFromHeader = context.op === "pageload" ? getHeaderContext() : undefined;
        var expandedContext = (0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)({}, context), parentContextFromHeader), {
            trimEnd: true
        });
        var modifiedContext = typeof beforeNavigate === "function" ? beforeNavigate(expandedContext) : expandedContext;
        // For backwards compatibility reasons, beforeNavigate can return undefined to "drop" the transaction (prevent it
        // from being sent to Sentry).
        var finalContext = modifiedContext === undefined ? (0, _tslib.__assign)((0, _tslib.__assign)({}, expandedContext), {
            sampled: false
        }) : modifiedContext;
        if (finalContext.sampled === false) (0, _utils.logger).log("[Tracing] Will not send " + finalContext.op + " transaction because of beforeNavigate.");
        (0, _utils.logger).log("[Tracing] Starting " + finalContext.op + " transaction on scope");
        var hub = this._getCurrentHub();
        var location = (0, _utils.getGlobalObject)().location;
        var idleTransaction = (0, _hubextensions.startIdleTransaction)(hub, finalContext, idleTimeout, true, {
            location: location
        });
        idleTransaction.registerBeforeFinishCallback(function(transaction, endTimestamp) {
            _this._metrics.addPerformanceEntries(transaction);
            adjustTransactionDuration((0, _utils1.secToMs)(maxTransactionDuration), transaction, endTimestamp);
        });
        return idleTransaction;
    };
    /**
     * @inheritDoc
     */ BrowserTracing1.id = "BrowserTracing";
    return BrowserTracing1;
}();
function getHeaderContext() {
    var header = getMetaContent("sentry-trace");
    if (header) return (0, _utils1.extractTraceparentData)(header);
    return undefined;
}
function getMetaContent(metaName) {
    var el = document.querySelector("meta[name=" + metaName + "]");
    return el ? el.getAttribute("content") : null;
}
/** Adjusts transaction value based on max transaction duration */ function adjustTransactionDuration(maxDuration, transaction, endTimestamp) {
    var diff = endTimestamp - transaction.startTimestamp;
    var isOutdatedTransaction = endTimestamp && (diff > maxDuration || diff < 0);
    if (isOutdatedTransaction) {
        transaction.setStatus((0, _spanstatus.SpanStatus).DeadlineExceeded);
        transaction.setTag("maxTransactionDurationExceeded", "true");
    }
}

},{"tslib":"lRdW5","@sentry/utils":"5auop","../hubextensions":"bB3S9","../idletransaction":"hP3gF","../spanstatus":"exKzR","../utils":"2Y12I","./backgroundtab":"fmtgn","./metrics":"fWbAH","./request":"WiNZM","./router":"dqsGC","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bB3S9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Create new idle transaction.
 */ parcelHelpers.export(exports, "startIdleTransaction", ()=>startIdleTransaction);
/**
 * @private
 */ parcelHelpers.export(exports, "_addTracingExtensions", ()=>_addTracingExtensions);
/**
 * This patches the global object and injects the Tracing extensions methods
 */ parcelHelpers.export(exports, "addExtensionMethods", ()=>addExtensionMethods);
var _tslib = require("tslib");
var _hub = require("@sentry/hub");
var _types = require("@sentry/types");
var _utils = require("@sentry/utils");
var _errors = require("./errors");
var _idletransaction = require("./idletransaction");
var _transaction = require("./transaction");
var _utils1 = require("./utils");
/** Returns all trace headers that are currently on the top scope. */ function traceHeaders() {
    var scope = this.getScope();
    if (scope) {
        var span = scope.getSpan();
        if (span) return {
            "sentry-trace": span.toTraceparent()
        };
    }
    return {};
}
/**
 * Makes a sampling decision for the given transaction and stores it on the transaction.
 *
 * Called every time a transaction is created. Only transactions which emerge with a `sampled` value of `true` will be
 * sent to Sentry.
 *
 * @param hub: The hub off of which to read config options
 * @param transaction: The transaction needing a sampling decision
 * @param samplingContext: Default and user-provided data which may be used to help make the decision
 *
 * @returns The given transaction with its `sampled` value set
 */ function sample(transaction, options, samplingContext) {
    // nothing to do if tracing is not enabled
    if (!(0, _utils1.hasTracingEnabled)()) {
        transaction.sampled = false;
        return transaction;
    }
    // if the user has forced a sampling decision by passing a `sampled` value in their transaction context, go with that
    if (transaction.sampled !== undefined) {
        transaction.setMetadata({
            transactionSampling: {
                method: (0, _types.TransactionSamplingMethod).Explicit
            }
        });
        return transaction;
    }
    // we would have bailed already if neither `tracesSampler` nor `tracesSampleRate` were defined, so one of these should
    // work; prefer the hook if so
    var sampleRate;
    if (typeof options.tracesSampler === "function") {
        sampleRate = options.tracesSampler(samplingContext);
        transaction.setMetadata({
            transactionSampling: {
                method: (0, _types.TransactionSamplingMethod).Sampler,
                // cast to number in case it's a boolean
                rate: Number(sampleRate)
            }
        });
    } else if (samplingContext.parentSampled !== undefined) {
        sampleRate = samplingContext.parentSampled;
        transaction.setMetadata({
            transactionSampling: {
                method: (0, _types.TransactionSamplingMethod).Inheritance
            }
        });
    } else {
        sampleRate = options.tracesSampleRate;
        transaction.setMetadata({
            transactionSampling: {
                method: (0, _types.TransactionSamplingMethod).Rate,
                // cast to number in case it's a boolean
                rate: Number(sampleRate)
            }
        });
    }
    // Since this is coming from the user (or from a function provided by the user), who knows what we might get. (The
    // only valid values are booleans or numbers between 0 and 1.)
    if (!isValidSampleRate(sampleRate)) {
        (0, _utils.logger).warn("[Tracing] Discarding transaction because of invalid sample rate.");
        transaction.sampled = false;
        return transaction;
    }
    // if the function returned 0 (or false), or if `tracesSampleRate` is 0, it's a sign the transaction should be dropped
    if (!sampleRate) {
        (0, _utils.logger).log("[Tracing] Discarding transaction because " + (typeof options.tracesSampler === "function" ? "tracesSampler returned 0 or false" : "a negative sampling decision was inherited or tracesSampleRate is set to 0"));
        transaction.sampled = false;
        return transaction;
    }
    // Now we roll the dice. Math.random is inclusive of 0, but not of 1, so strict < is safe here. In case sampleRate is
    // a boolean, the < comparison will cause it to be automatically cast to 1 if it's true and 0 if it's false.
    transaction.sampled = Math.random() < sampleRate;
    // if we're not going to keep it, we're done
    if (!transaction.sampled) {
        (0, _utils.logger).log("[Tracing] Discarding transaction because it's not included in the random sample (sampling rate = " + Number(sampleRate) + ")");
        return transaction;
    }
    (0, _utils.logger).log("[Tracing] starting " + transaction.op + " transaction - " + transaction.name);
    return transaction;
}
/**
 * Checks the given sample rate to make sure it is valid type and value (a boolean, or a number between 0 and 1).
 */ function isValidSampleRate(rate) {
    // we need to check NaN explicitly because it's of type 'number' and therefore wouldn't get caught by this typecheck
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    if (isNaN(rate) || !(typeof rate === "number" || typeof rate === "boolean")) {
        (0, _utils.logger).warn("[Tracing] Given sample rate is invalid. Sample rate must be a boolean or a number between 0 and 1. Got " + JSON.stringify(rate) + " of type " + JSON.stringify(typeof rate) + ".");
        return false;
    }
    // in case sampleRate is a boolean, it will get automatically cast to 1 if it's true and 0 if it's false
    if (rate < 0 || rate > 1) {
        (0, _utils.logger).warn("[Tracing] Given sample rate is invalid. Sample rate must be between 0 and 1. Got " + rate + ".");
        return false;
    }
    return true;
}
/**
 * Creates a new transaction and adds a sampling decision if it doesn't yet have one.
 *
 * The Hub.startTransaction method delegates to this method to do its work, passing the Hub instance in as `this`, as if
 * it had been called on the hub directly. Exists as a separate function so that it can be injected into the class as an
 * "extension method."
 *
 * @param this: The Hub starting the transaction
 * @param transactionContext: Data used to configure the transaction
 * @param CustomSamplingContext: Optional data to be provided to the `tracesSampler` function (if any)
 *
 * @returns The new transaction
 *
 * @see {@link Hub.startTransaction}
 */ function _startTransaction(transactionContext, customSamplingContext) {
    var _a, _b;
    var options = ((_a = this.getClient()) === null || _a === void 0 ? void 0 : _a.getOptions()) || {};
    var transaction = new (0, _transaction.Transaction)(transactionContext, this);
    transaction = sample(transaction, options, (0, _tslib.__assign)({
        parentSampled: transactionContext.parentSampled,
        transactionContext: transactionContext
    }, customSamplingContext));
    if (transaction.sampled) transaction.initSpanRecorder((_b = options._experiments) === null || _b === void 0 ? void 0 : _b.maxSpans);
    return transaction;
}
function startIdleTransaction(hub, transactionContext, idleTimeout, onScope, customSamplingContext) {
    var _a, _b;
    var options = ((_a = hub.getClient()) === null || _a === void 0 ? void 0 : _a.getOptions()) || {};
    var transaction = new (0, _idletransaction.IdleTransaction)(transactionContext, hub, idleTimeout, onScope);
    transaction = sample(transaction, options, (0, _tslib.__assign)({
        parentSampled: transactionContext.parentSampled,
        transactionContext: transactionContext
    }, customSamplingContext));
    if (transaction.sampled) transaction.initSpanRecorder((_b = options._experiments) === null || _b === void 0 ? void 0 : _b.maxSpans);
    return transaction;
}
function _addTracingExtensions() {
    var carrier = (0, _hub.getMainCarrier)();
    if (!carrier.__SENTRY__) return;
    carrier.__SENTRY__.extensions = carrier.__SENTRY__.extensions || {};
    if (!carrier.__SENTRY__.extensions.startTransaction) carrier.__SENTRY__.extensions.startTransaction = _startTransaction;
    if (!carrier.__SENTRY__.extensions.traceHeaders) carrier.__SENTRY__.extensions.traceHeaders = traceHeaders;
}
/**
 * @private
 */ function _autoloadDatabaseIntegrations() {
    var carrier = (0, _hub.getMainCarrier)();
    if (!carrier.__SENTRY__) return;
    var packageToIntegrationMapping = {
        mongodb: function() {
            var integration = (0, _utils.dynamicRequire)(module, "./integrations/mongo");
            return new integration.Mongo();
        },
        mongoose: function() {
            var integration = (0, _utils.dynamicRequire)(module, "./integrations/mongo");
            return new integration.Mongo({
                mongoose: true
            });
        },
        mysql: function() {
            var integration = (0, _utils.dynamicRequire)(module, "./integrations/mysql");
            return new integration.Mysql();
        },
        pg: function() {
            var integration = (0, _utils.dynamicRequire)(module, "./integrations/postgres");
            return new integration.Postgres();
        }
    };
    var mappedPackages = Object.keys(packageToIntegrationMapping).filter(function(moduleName) {
        return !!(0, _utils.loadModule)(moduleName);
    }).map(function(pkg) {
        try {
            return packageToIntegrationMapping[pkg]();
        } catch (e) {
            return undefined;
        }
    }).filter(function(p) {
        return p;
    });
    if (mappedPackages.length > 0) carrier.__SENTRY__.integrations = (0, _tslib.__spread)(carrier.__SENTRY__.integrations || [], mappedPackages);
}
function addExtensionMethods() {
    _addTracingExtensions();
    // Detect and automatically load specified integrations.
    if ((0, _utils.isNodeEnv)()) _autoloadDatabaseIntegrations();
    // If an error happens globally, we should make sure transaction status is set to error.
    (0, _errors.registerErrorInstrumentation)();
}

},{"tslib":"lRdW5","@sentry/hub":"cqx4p","@sentry/types":"emufg","@sentry/utils":"5auop","./errors":"6KyvA","./idletransaction":"hP3gF","./transaction":"1MuRG","./utils":"2Y12I","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6KyvA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Configures global error listeners
 */ parcelHelpers.export(exports, "registerErrorInstrumentation", ()=>registerErrorInstrumentation);
var _utils = require("@sentry/utils");
var _spanstatus = require("./spanstatus");
var _utils1 = require("./utils");
function registerErrorInstrumentation() {
    (0, _utils.addInstrumentationHandler)({
        callback: errorCallback,
        type: "error"
    });
    (0, _utils.addInstrumentationHandler)({
        callback: errorCallback,
        type: "unhandledrejection"
    });
}
/**
 * If an error or unhandled promise occurs, we mark the active transaction as failed
 */ function errorCallback() {
    var activeTransaction = (0, _utils1.getActiveTransaction)();
    if (activeTransaction) {
        (0, _utils.logger).log("[Tracing] Transaction: " + (0, _spanstatus.SpanStatus).InternalError + " -> Global error occured");
        activeTransaction.setStatus((0, _spanstatus.SpanStatus).InternalError);
    }
}

},{"@sentry/utils":"5auop","./spanstatus":"exKzR","./utils":"2Y12I","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"exKzR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SpanStatus", ()=>SpanStatus);
var SpanStatus;
(function(SpanStatus1) {
    /** The operation completed successfully. */ SpanStatus1["Ok"] = "ok";
    /** Deadline expired before operation could complete. */ SpanStatus1["DeadlineExceeded"] = "deadline_exceeded";
    /** 401 Unauthorized (actually does mean unauthenticated according to RFC 7235) */ SpanStatus1["Unauthenticated"] = "unauthenticated";
    /** 403 Forbidden */ SpanStatus1["PermissionDenied"] = "permission_denied";
    /** 404 Not Found. Some requested entity (file or directory) was not found. */ SpanStatus1["NotFound"] = "not_found";
    /** 429 Too Many Requests */ SpanStatus1["ResourceExhausted"] = "resource_exhausted";
    /** Client specified an invalid argument. 4xx. */ SpanStatus1["InvalidArgument"] = "invalid_argument";
    /** 501 Not Implemented */ SpanStatus1["Unimplemented"] = "unimplemented";
    /** 503 Service Unavailable */ SpanStatus1["Unavailable"] = "unavailable";
    /** Other/generic 5xx. */ SpanStatus1["InternalError"] = "internal_error";
    /** Unknown. Any non-standard HTTP status code. */ SpanStatus1["UnknownError"] = "unknown_error";
    /** The operation was cancelled (typically by the user). */ SpanStatus1["Cancelled"] = "cancelled";
    /** Already exists (409) */ SpanStatus1["AlreadyExists"] = "already_exists";
    /** Operation was rejected because the system is not in a state required for the operation's */ SpanStatus1["FailedPrecondition"] = "failed_precondition";
    /** The operation was aborted, typically due to a concurrency issue. */ SpanStatus1["Aborted"] = "aborted";
    /** Operation was attempted past the valid range. */ SpanStatus1["OutOfRange"] = "out_of_range";
    /** Unrecoverable data loss or corruption */ SpanStatus1["DataLoss"] = "data_loss";
})(SpanStatus || (SpanStatus = {}));
// eslint-disable-next-line @typescript-eslint/no-namespace, import/export
(function(SpanStatus2) {
    /**
     * Converts a HTTP status code into a {@link SpanStatus}.
     *
     * @param httpStatus The HTTP response status code.
     * @returns The span status or {@link SpanStatus.UnknownError}.
     */ function fromHttpCode(httpStatus) {
        if (httpStatus < 400) return SpanStatus2.Ok;
        if (httpStatus >= 400 && httpStatus < 500) switch(httpStatus){
            case 401:
                return SpanStatus2.Unauthenticated;
            case 403:
                return SpanStatus2.PermissionDenied;
            case 404:
                return SpanStatus2.NotFound;
            case 409:
                return SpanStatus2.AlreadyExists;
            case 413:
                return SpanStatus2.FailedPrecondition;
            case 429:
                return SpanStatus2.ResourceExhausted;
            default:
                return SpanStatus2.InvalidArgument;
        }
        if (httpStatus >= 500 && httpStatus < 600) switch(httpStatus){
            case 501:
                return SpanStatus2.Unimplemented;
            case 503:
                return SpanStatus2.Unavailable;
            case 504:
                return SpanStatus2.DeadlineExceeded;
            default:
                return SpanStatus2.InternalError;
        }
        return SpanStatus2.UnknownError;
    }
    SpanStatus2.fromHttpCode = fromHttpCode;
})(SpanStatus || (SpanStatus = {}));

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2Y12I":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "TRACEPARENT_REGEXP", ()=>TRACEPARENT_REGEXP);
/**
 * Determines if tracing is currently enabled.
 *
 * Tracing is enabled when at least one of `tracesSampleRate` and `tracesSampler` is defined in the SDK config.
 */ parcelHelpers.export(exports, "hasTracingEnabled", ()=>hasTracingEnabled);
/**
 * Extract transaction context data from a `sentry-trace` header.
 *
 * @param traceparent Traceparent string
 *
 * @returns Object containing data from the header, or undefined if traceparent string is malformed
 */ parcelHelpers.export(exports, "extractTraceparentData", ()=>extractTraceparentData);
/** Grabs active transaction off scope, if any */ parcelHelpers.export(exports, "getActiveTransaction", ()=>getActiveTransaction);
/**
 * Converts from milliseconds to seconds
 * @param time time in ms
 */ parcelHelpers.export(exports, "msToSec", ()=>msToSec);
/**
 * Converts from seconds to milliseconds
 * @param time time in seconds
 */ parcelHelpers.export(exports, "secToMs", ()=>secToMs);
// so it can be used in manual instrumentation without necessitating a hard dependency on @sentry/utils
parcelHelpers.export(exports, "stripUrlQueryAndFragment", ()=>(0, _utils.stripUrlQueryAndFragment));
var _hub = require("@sentry/hub");
var _utils = require("@sentry/utils");
var TRACEPARENT_REGEXP = new RegExp("^[ \\t]*([0-9a-f]{32})?-?([0-9a-f]{16})?-?([01])?[ \\t]*$");
function hasTracingEnabled(options) {
    if (options === void 0) options = (_a = (0, _hub.getCurrentHub)().getClient()) === null || _a === void 0 ? void 0 : _a.getOptions();
    var _a;
    if (!options) return false;
    return "tracesSampleRate" in options || "tracesSampler" in options;
}
function extractTraceparentData(traceparent) {
    var matches = traceparent.match(TRACEPARENT_REGEXP);
    if (matches) {
        var parentSampled = void 0;
        if (matches[3] === "1") parentSampled = true;
        else if (matches[3] === "0") parentSampled = false;
        return {
            traceId: matches[1],
            parentSampled: parentSampled,
            parentSpanId: matches[2]
        };
    }
    return undefined;
}
function getActiveTransaction(hub) {
    if (hub === void 0) hub = (0, _hub.getCurrentHub)();
    var _a, _b;
    return (_b = (_a = hub) === null || _a === void 0 ? void 0 : _a.getScope()) === null || _b === void 0 ? void 0 : _b.getTransaction();
}
function msToSec(time) {
    return time / 1000;
}
function secToMs(time) {
    return time * 1000;
}

},{"@sentry/hub":"cqx4p","@sentry/utils":"5auop","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hP3gF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DEFAULT_IDLE_TIMEOUT", ()=>DEFAULT_IDLE_TIMEOUT);
parcelHelpers.export(exports, "IdleTransactionSpanRecorder", ()=>IdleTransactionSpanRecorder);
parcelHelpers.export(exports, "IdleTransaction", ()=>IdleTransaction);
var _tslib = require("tslib");
var _utils = require("@sentry/utils");
var _span = require("./span");
var _spanstatus = require("./spanstatus");
var _transaction = require("./transaction");
var DEFAULT_IDLE_TIMEOUT = 1000;
/**
 * @inheritDoc
 */ var IdleTransactionSpanRecorder = /** @class */ function(_super) {
    (0, _tslib.__extends)(IdleTransactionSpanRecorder1, _super);
    function IdleTransactionSpanRecorder1(_pushActivity, _popActivity, transactionSpanId, maxlen) {
        if (transactionSpanId === void 0) transactionSpanId = "";
        var _this = _super.call(this, maxlen) || this;
        _this._pushActivity = _pushActivity;
        _this._popActivity = _popActivity;
        _this.transactionSpanId = transactionSpanId;
        return _this;
    }
    /**
     * @inheritDoc
     */ IdleTransactionSpanRecorder1.prototype.add = function(span) {
        var _this = this;
        // We should make sure we do not push and pop activities for
        // the transaction that this span recorder belongs to.
        if (span.spanId !== this.transactionSpanId) {
            // We patch span.finish() to pop an activity after setting an endTimestamp.
            span.finish = function(endTimestamp) {
                span.endTimestamp = typeof endTimestamp === "number" ? endTimestamp : (0, _utils.timestampWithMs)();
                _this._popActivity(span.spanId);
            };
            // We should only push new activities if the span does not have an end timestamp.
            if (span.endTimestamp === undefined) this._pushActivity(span.spanId);
        }
        _super.prototype.add.call(this, span);
    };
    return IdleTransactionSpanRecorder1;
}((0, _span.SpanRecorder));
/**
 * An IdleTransaction is a transaction that automatically finishes. It does this by tracking child spans as activities.
 * You can have multiple IdleTransactions active, but if the `onScope` option is specified, the idle transaction will
 * put itself on the scope on creation.
 */ var IdleTransaction = /** @class */ function(_super) {
    (0, _tslib.__extends)(IdleTransaction1, _super);
    function IdleTransaction1(transactionContext, _idleHub, // The time to wait in ms until the idle transaction will be finished. Default: 1000
    _idleTimeout, // If an idle transaction should be put itself on and off the scope automatically.
    _onScope) {
        if (_idleTimeout === void 0) _idleTimeout = DEFAULT_IDLE_TIMEOUT;
        if (_onScope === void 0) _onScope = false;
        var _this = _super.call(this, transactionContext, _idleHub) || this;
        _this._idleHub = _idleHub;
        _this._idleTimeout = _idleTimeout;
        _this._onScope = _onScope;
        // Activities store a list of active spans
        _this.activities = {};
        // Stores reference to the timeout that calls _beat().
        _this._heartbeatTimer = 0;
        // Amount of times heartbeat has counted. Will cause transaction to finish after 3 beats.
        _this._heartbeatCounter = 0;
        // We should not use heartbeat if we finished a transaction
        _this._finished = false;
        _this._beforeFinishCallbacks = [];
        if (_idleHub && _onScope) {
            // There should only be one active transaction on the scope
            clearActiveTransaction(_idleHub);
            // We set the transaction here on the scope so error events pick up the trace
            // context and attach it to the error.
            (0, _utils.logger).log("Setting idle transaction on scope. Span ID: " + _this.spanId);
            _idleHub.configureScope(function(scope) {
                return scope.setSpan(_this);
            });
        }
        _this._initTimeout = setTimeout(function() {
            if (!_this._finished) _this.finish();
        }, _this._idleTimeout);
        return _this;
    }
    /** {@inheritDoc} */ IdleTransaction1.prototype.finish = function(endTimestamp) {
        var e_1, _a;
        var _this = this;
        if (endTimestamp === void 0) endTimestamp = (0, _utils.timestampWithMs)();
        this._finished = true;
        this.activities = {};
        if (this.spanRecorder) {
            (0, _utils.logger).log("[Tracing] finishing IdleTransaction", new Date(endTimestamp * 1000).toISOString(), this.op);
            try {
                for(var _b = (0, _tslib.__values)(this._beforeFinishCallbacks), _c = _b.next(); !_c.done; _c = _b.next()){
                    var callback = _c.value;
                    callback(this, endTimestamp);
                }
            } catch (e_1_1) {
                e_1 = {
                    error: e_1_1
                };
            } finally{
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                } finally{
                    if (e_1) throw e_1.error;
                }
            }
            this.spanRecorder.spans = this.spanRecorder.spans.filter(function(span) {
                // If we are dealing with the transaction itself, we just return it
                if (span.spanId === _this.spanId) return true;
                // We cancel all pending spans with status "cancelled" to indicate the idle transaction was finished early
                if (!span.endTimestamp) {
                    span.endTimestamp = endTimestamp;
                    span.setStatus((0, _spanstatus.SpanStatus).Cancelled);
                    (0, _utils.logger).log("[Tracing] cancelling span since transaction ended early", JSON.stringify(span, undefined, 2));
                }
                var keepSpan = span.startTimestamp < endTimestamp;
                if (!keepSpan) (0, _utils.logger).log("[Tracing] discarding Span since it happened after Transaction was finished", JSON.stringify(span, undefined, 2));
                return keepSpan;
            });
            (0, _utils.logger).log("[Tracing] flushing IdleTransaction");
        } else (0, _utils.logger).log("[Tracing] No active IdleTransaction");
        // this._onScope is true if the transaction was previously on the scope.
        if (this._onScope) clearActiveTransaction(this._idleHub);
        return _super.prototype.finish.call(this, endTimestamp);
    };
    /**
     * Register a callback function that gets excecuted before the transaction finishes.
     * Useful for cleanup or if you want to add any additional spans based on current context.
     *
     * This is exposed because users have no other way of running something before an idle transaction
     * finishes.
     */ IdleTransaction1.prototype.registerBeforeFinishCallback = function(callback) {
        this._beforeFinishCallbacks.push(callback);
    };
    /**
     * @inheritDoc
     */ IdleTransaction1.prototype.initSpanRecorder = function(maxlen) {
        var _this = this;
        if (!this.spanRecorder) {
            var pushActivity = function(id) {
                if (_this._finished) return;
                _this._pushActivity(id);
            };
            var popActivity = function(id) {
                if (_this._finished) return;
                _this._popActivity(id);
            };
            this.spanRecorder = new IdleTransactionSpanRecorder(pushActivity, popActivity, this.spanId, maxlen);
            // Start heartbeat so that transactions do not run forever.
            (0, _utils.logger).log("Starting heartbeat");
            this._pingHeartbeat();
        }
        this.spanRecorder.add(this);
    };
    /**
     * Start tracking a specific activity.
     * @param spanId The span id that represents the activity
     */ IdleTransaction1.prototype._pushActivity = function(spanId) {
        if (this._initTimeout) {
            clearTimeout(this._initTimeout);
            this._initTimeout = undefined;
        }
        (0, _utils.logger).log("[Tracing] pushActivity: " + spanId);
        this.activities[spanId] = true;
        (0, _utils.logger).log("[Tracing] new activities count", Object.keys(this.activities).length);
    };
    /**
     * Remove an activity from usage
     * @param spanId The span id that represents the activity
     */ IdleTransaction1.prototype._popActivity = function(spanId) {
        var _this = this;
        if (this.activities[spanId]) {
            (0, _utils.logger).log("[Tracing] popActivity " + spanId);
            // eslint-disable-next-line @typescript-eslint/no-dynamic-delete
            delete this.activities[spanId];
            (0, _utils.logger).log("[Tracing] new activities count", Object.keys(this.activities).length);
        }
        if (Object.keys(this.activities).length === 0) {
            var timeout = this._idleTimeout;
            // We need to add the timeout here to have the real endtimestamp of the transaction
            // Remember timestampWithMs is in seconds, timeout is in ms
            var end_1 = (0, _utils.timestampWithMs)() + timeout / 1000;
            setTimeout(function() {
                if (!_this._finished) _this.finish(end_1);
            }, timeout);
        }
    };
    /**
     * Checks when entries of this.activities are not changing for 3 beats.
     * If this occurs we finish the transaction.
     */ IdleTransaction1.prototype._beat = function() {
        clearTimeout(this._heartbeatTimer);
        // We should not be running heartbeat if the idle transaction is finished.
        if (this._finished) return;
        var keys = Object.keys(this.activities);
        var heartbeatString = keys.length ? keys.reduce(function(prev, current) {
            return prev + current;
        }) : "";
        if (heartbeatString === this._prevHeartbeatString) this._heartbeatCounter += 1;
        else this._heartbeatCounter = 1;
        this._prevHeartbeatString = heartbeatString;
        if (this._heartbeatCounter >= 3) {
            (0, _utils.logger).log("[Tracing] Transaction finished because of no change for 3 heart beats");
            this.setStatus((0, _spanstatus.SpanStatus).DeadlineExceeded);
            this.setTag("heartbeat", "failed");
            this.finish();
        } else this._pingHeartbeat();
    };
    /**
     * Pings the heartbeat
     */ IdleTransaction1.prototype._pingHeartbeat = function() {
        var _this = this;
        (0, _utils.logger).log("pinging Heartbeat -> current counter: " + this._heartbeatCounter);
        this._heartbeatTimer = setTimeout(function() {
            _this._beat();
        }, 5000);
    };
    return IdleTransaction1;
}((0, _transaction.Transaction));
/**
 * Reset active transaction on scope
 */ function clearActiveTransaction(hub) {
    if (hub) {
        var scope = hub.getScope();
        if (scope) {
            var transaction = scope.getTransaction();
            if (transaction) scope.setSpan(undefined);
        }
    }
}

},{"tslib":"lRdW5","@sentry/utils":"5auop","./span":"dERgR","./spanstatus":"exKzR","./transaction":"1MuRG","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dERgR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SpanRecorder", ()=>SpanRecorder);
parcelHelpers.export(exports, "Span", ()=>Span);
var _tslib = require("tslib");
var _utils = require("@sentry/utils");
var _spanstatus = require("./spanstatus");
/**
 * Keeps track of finished spans for a given transaction
 * @internal
 * @hideconstructor
 * @hidden
 */ var SpanRecorder = /** @class */ function() {
    function SpanRecorder1(maxlen) {
        if (maxlen === void 0) maxlen = 1000;
        this.spans = [];
        this._maxlen = maxlen;
    }
    /**
     * This is just so that we don't run out of memory while recording a lot
     * of spans. At some point we just stop and flush out the start of the
     * trace tree (i.e.the first n spans with the smallest
     * start_timestamp).
     */ SpanRecorder1.prototype.add = function(span) {
        if (this.spans.length > this._maxlen) span.spanRecorder = undefined;
        else this.spans.push(span);
    };
    return SpanRecorder1;
}();
/**
 * Span contains all data about a span
 */ var Span = /** @class */ function() {
    /**
     * You should never call the constructor manually, always use `Sentry.startTransaction()`
     * or call `startChild()` on an existing span.
     * @internal
     * @hideconstructor
     * @hidden
     */ function Span1(spanContext) {
        /**
         * @inheritDoc
         */ this.traceId = (0, _utils.uuid4)();
        /**
         * @inheritDoc
         */ this.spanId = (0, _utils.uuid4)().substring(16);
        /**
         * Timestamp in seconds when the span was created.
         */ this.startTimestamp = (0, _utils.timestampWithMs)();
        /**
         * @inheritDoc
         */ this.tags = {};
        /**
         * @inheritDoc
         */ // eslint-disable-next-line @typescript-eslint/no-explicit-any
        this.data = {};
        if (!spanContext) return this;
        if (spanContext.traceId) this.traceId = spanContext.traceId;
        if (spanContext.spanId) this.spanId = spanContext.spanId;
        if (spanContext.parentSpanId) this.parentSpanId = spanContext.parentSpanId;
        // We want to include booleans as well here
        if ("sampled" in spanContext) this.sampled = spanContext.sampled;
        if (spanContext.op) this.op = spanContext.op;
        if (spanContext.description) this.description = spanContext.description;
        if (spanContext.data) this.data = spanContext.data;
        if (spanContext.tags) this.tags = spanContext.tags;
        if (spanContext.status) this.status = spanContext.status;
        if (spanContext.startTimestamp) this.startTimestamp = spanContext.startTimestamp;
        if (spanContext.endTimestamp) this.endTimestamp = spanContext.endTimestamp;
    }
    /**
     * @inheritDoc
     * @deprecated
     */ Span1.prototype.child = function(spanContext) {
        return this.startChild(spanContext);
    };
    /**
     * @inheritDoc
     */ Span1.prototype.startChild = function(spanContext) {
        var childSpan = new Span1((0, _tslib.__assign)((0, _tslib.__assign)({}, spanContext), {
            parentSpanId: this.spanId,
            sampled: this.sampled,
            traceId: this.traceId
        }));
        childSpan.spanRecorder = this.spanRecorder;
        if (childSpan.spanRecorder) childSpan.spanRecorder.add(childSpan);
        childSpan.transaction = this.transaction;
        return childSpan;
    };
    /**
     * @inheritDoc
     */ Span1.prototype.setTag = function(key, value) {
        var _a;
        this.tags = (0, _tslib.__assign)((0, _tslib.__assign)({}, this.tags), (_a = {}, _a[key] = value, _a));
        return this;
    };
    /**
     * @inheritDoc
     */ // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types
    Span1.prototype.setData = function(key, value) {
        var _a;
        this.data = (0, _tslib.__assign)((0, _tslib.__assign)({}, this.data), (_a = {}, _a[key] = value, _a));
        return this;
    };
    /**
     * @inheritDoc
     */ Span1.prototype.setStatus = function(value) {
        this.status = value;
        return this;
    };
    /**
     * @inheritDoc
     */ Span1.prototype.setHttpStatus = function(httpStatus) {
        this.setTag("http.status_code", String(httpStatus));
        var spanStatus = (0, _spanstatus.SpanStatus).fromHttpCode(httpStatus);
        if (spanStatus !== (0, _spanstatus.SpanStatus).UnknownError) this.setStatus(spanStatus);
        return this;
    };
    /**
     * @inheritDoc
     */ Span1.prototype.isSuccess = function() {
        return this.status === (0, _spanstatus.SpanStatus).Ok;
    };
    /**
     * @inheritDoc
     */ Span1.prototype.finish = function(endTimestamp) {
        this.endTimestamp = typeof endTimestamp === "number" ? endTimestamp : (0, _utils.timestampWithMs)();
    };
    /**
     * @inheritDoc
     */ Span1.prototype.toTraceparent = function() {
        var sampledString = "";
        if (this.sampled !== undefined) sampledString = this.sampled ? "-1" : "-0";
        return this.traceId + "-" + this.spanId + sampledString;
    };
    /**
     * @inheritDoc
     */ Span1.prototype.toContext = function() {
        return (0, _utils.dropUndefinedKeys)({
            data: this.data,
            description: this.description,
            endTimestamp: this.endTimestamp,
            op: this.op,
            parentSpanId: this.parentSpanId,
            sampled: this.sampled,
            spanId: this.spanId,
            startTimestamp: this.startTimestamp,
            status: this.status,
            tags: this.tags,
            traceId: this.traceId
        });
    };
    /**
     * @inheritDoc
     */ Span1.prototype.updateWithContext = function(spanContext) {
        var _a, _b, _c, _d, _e;
        this.data = (_a = spanContext.data, _a !== null && _a !== void 0 ? _a : {});
        this.description = spanContext.description;
        this.endTimestamp = spanContext.endTimestamp;
        this.op = spanContext.op;
        this.parentSpanId = spanContext.parentSpanId;
        this.sampled = spanContext.sampled;
        this.spanId = (_b = spanContext.spanId, _b !== null && _b !== void 0 ? _b : this.spanId);
        this.startTimestamp = (_c = spanContext.startTimestamp, _c !== null && _c !== void 0 ? _c : this.startTimestamp);
        this.status = spanContext.status;
        this.tags = (_d = spanContext.tags, _d !== null && _d !== void 0 ? _d : {});
        this.traceId = (_e = spanContext.traceId, _e !== null && _e !== void 0 ? _e : this.traceId);
        return this;
    };
    /**
     * @inheritDoc
     */ Span1.prototype.getTraceContext = function() {
        return (0, _utils.dropUndefinedKeys)({
            data: Object.keys(this.data).length > 0 ? this.data : undefined,
            description: this.description,
            op: this.op,
            parent_span_id: this.parentSpanId,
            span_id: this.spanId,
            status: this.status,
            tags: Object.keys(this.tags).length > 0 ? this.tags : undefined,
            trace_id: this.traceId
        });
    };
    /**
     * @inheritDoc
     */ Span1.prototype.toJSON = function() {
        return (0, _utils.dropUndefinedKeys)({
            data: Object.keys(this.data).length > 0 ? this.data : undefined,
            description: this.description,
            op: this.op,
            parent_span_id: this.parentSpanId,
            span_id: this.spanId,
            start_timestamp: this.startTimestamp,
            status: this.status,
            tags: Object.keys(this.tags).length > 0 ? this.tags : undefined,
            timestamp: this.endTimestamp,
            trace_id: this.traceId
        });
    };
    return Span1;
}();

},{"tslib":"lRdW5","@sentry/utils":"5auop","./spanstatus":"exKzR","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1MuRG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Transaction", ()=>Transaction);
var _tslib = require("tslib");
var _hub = require("@sentry/hub");
var _utils = require("@sentry/utils");
var _span = require("./span");
/** JSDoc */ var Transaction = /** @class */ function(_super) {
    (0, _tslib.__extends)(Transaction1, _super);
    /**
     * This constructor should never be called manually. Those instrumenting tracing should use
     * `Sentry.startTransaction()`, and internal methods should use `hub.startTransaction()`.
     * @internal
     * @hideconstructor
     * @hidden
     */ function Transaction1(transactionContext, hub) {
        var _this = _super.call(this, transactionContext) || this;
        _this._measurements = {};
        /**
         * The reference to the current hub.
         */ _this._hub = (0, _hub.getCurrentHub)();
        if ((0, _utils.isInstanceOf)(hub, (0, _hub.Hub))) _this._hub = hub;
        _this.name = transactionContext.name || "";
        _this.metadata = transactionContext.metadata || {};
        _this._trimEnd = transactionContext.trimEnd;
        // this is because transactions are also spans, and spans have a transaction pointer
        _this.transaction = _this;
        return _this;
    }
    /**
     * JSDoc
     */ Transaction1.prototype.setName = function(name) {
        this.name = name;
    };
    /**
     * Attaches SpanRecorder to the span itself
     * @param maxlen maximum number of spans that can be recorded
     */ Transaction1.prototype.initSpanRecorder = function(maxlen) {
        if (maxlen === void 0) maxlen = 1000;
        if (!this.spanRecorder) this.spanRecorder = new (0, _span.SpanRecorder)(maxlen);
        this.spanRecorder.add(this);
    };
    /**
     * Set observed measurements for this transaction.
     * @hidden
     */ Transaction1.prototype.setMeasurements = function(measurements) {
        this._measurements = (0, _tslib.__assign)({}, measurements);
    };
    /**
     * Set metadata for this transaction.
     * @hidden
     */ Transaction1.prototype.setMetadata = function(newMetadata) {
        this.metadata = (0, _tslib.__assign)((0, _tslib.__assign)({}, this.metadata), newMetadata);
    };
    /**
     * @inheritDoc
     */ Transaction1.prototype.finish = function(endTimestamp) {
        var _this = this;
        // This transaction is already finished, so we should not flush it again.
        if (this.endTimestamp !== undefined) return undefined;
        if (!this.name) {
            (0, _utils.logger).warn("Transaction has no name, falling back to `<unlabeled transaction>`.");
            this.name = "<unlabeled transaction>";
        }
        // just sets the end timestamp
        _super.prototype.finish.call(this, endTimestamp);
        if (this.sampled !== true) {
            // At this point if `sampled !== true` we want to discard the transaction.
            (0, _utils.logger).log("[Tracing] Discarding transaction because its trace was not chosen to be sampled.");
            return undefined;
        }
        var finishedSpans = this.spanRecorder ? this.spanRecorder.spans.filter(function(s) {
            return s !== _this && s.endTimestamp;
        }) : [];
        if (this._trimEnd && finishedSpans.length > 0) this.endTimestamp = finishedSpans.reduce(function(prev, current) {
            if (prev.endTimestamp && current.endTimestamp) return prev.endTimestamp > current.endTimestamp ? prev : current;
            return prev;
        }).endTimestamp;
        var transaction = {
            contexts: {
                trace: this.getTraceContext()
            },
            spans: finishedSpans,
            start_timestamp: this.startTimestamp,
            tags: this.tags,
            timestamp: this.endTimestamp,
            transaction: this.name,
            type: "transaction",
            debug_meta: this.metadata
        };
        var hasMeasurements = Object.keys(this._measurements).length > 0;
        if (hasMeasurements) {
            (0, _utils.logger).log("[Measurements] Adding measurements to transaction", JSON.stringify(this._measurements, undefined, 2));
            transaction.measurements = this._measurements;
        }
        (0, _utils.logger).log("[Tracing] Finishing " + this.op + " transaction: " + this.name + ".");
        return this._hub.captureEvent(transaction);
    };
    /**
     * @inheritDoc
     */ Transaction1.prototype.toContext = function() {
        var spanContext = _super.prototype.toContext.call(this);
        return (0, _utils.dropUndefinedKeys)((0, _tslib.__assign)((0, _tslib.__assign)({}, spanContext), {
            name: this.name,
            trimEnd: this._trimEnd
        }));
    };
    /**
     * @inheritDoc
     */ Transaction1.prototype.updateWithContext = function(transactionContext) {
        var _a;
        _super.prototype.updateWithContext.call(this, transactionContext);
        this.name = (_a = transactionContext.name, _a !== null && _a !== void 0 ? _a : "");
        this._trimEnd = transactionContext.trimEnd;
        return this;
    };
    return Transaction1;
}((0, _span.Span));

},{"tslib":"lRdW5","@sentry/hub":"cqx4p","@sentry/utils":"5auop","./span":"dERgR","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fmtgn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Add a listener that cancels and finishes a transaction when the global
 * document is hidden.
 */ parcelHelpers.export(exports, "registerBackgroundTabDetection", ()=>registerBackgroundTabDetection);
var _utils = require("@sentry/utils");
var _spanstatus = require("../spanstatus");
var _utils1 = require("../utils");
var global = (0, _utils.getGlobalObject)();
function registerBackgroundTabDetection() {
    if (global && global.document) global.document.addEventListener("visibilitychange", function() {
        var activeTransaction = (0, _utils1.getActiveTransaction)();
        if (global.document.hidden && activeTransaction) {
            (0, _utils.logger).log("[Tracing] Transaction: " + (0, _spanstatus.SpanStatus).Cancelled + " -> since tab moved to the background, op: " + activeTransaction.op);
            // We should not set status if it is already set, this prevent important statuses like
            // error or data loss from being overwritten on transaction.
            if (!activeTransaction.status) activeTransaction.setStatus((0, _spanstatus.SpanStatus).Cancelled);
            activeTransaction.setTag("visibilitychange", "document.hidden");
            activeTransaction.finish();
        }
    });
    else (0, _utils.logger).warn("[Tracing] Could not set up background tab detection due to lack of global document");
}

},{"@sentry/utils":"5auop","../spanstatus":"exKzR","../utils":"2Y12I","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fWbAH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "MetricsInstrumentation", ()=>MetricsInstrumentation);
/** Create resource-related spans */ parcelHelpers.export(exports, "addResourceSpans", ()=>addResourceSpans);
/**
 * Helper function to start child on transactions. This function will make sure that the transaction will
 * use the start timestamp of the created child span if it is earlier than the transactions actual
 * start timestamp.
 */ parcelHelpers.export(exports, "_startChild", ()=>_startChild);
var _tslib = require("tslib");
var _utils = require("@sentry/utils");
var _utils1 = require("../utils");
var _getCLS = require("./web-vitals/getCLS");
var _getFID = require("./web-vitals/getFID");
var _getLCP = require("./web-vitals/getLCP");
var _getVisibilityWatcher = require("./web-vitals/lib/getVisibilityWatcher");
var global = (0, _utils.getGlobalObject)();
/** Class tracking metrics  */ var MetricsInstrumentation = /** @class */ function() {
    function MetricsInstrumentation1() {
        var _a;
        this._measurements = {};
        this._performanceCursor = 0;
        if (!(0, _utils.isNodeEnv)() && ((_a = global) === null || _a === void 0 ? void 0 : _a.performance)) {
            if (global.performance.mark) global.performance.mark("sentry-tracing-init");
            this._trackCLS();
            this._trackLCP();
            this._trackFID();
        }
    }
    /** Add performance related spans to a transaction */ MetricsInstrumentation1.prototype.addPerformanceEntries = function(transaction) {
        var _this = this;
        if (!global || !global.performance || !global.performance.getEntries || !(0, _utils.browserPerformanceTimeOrigin)) // Gatekeeper if performance API not available
        return;
        (0, _utils.logger).log("[Tracing] Adding & adjusting spans using Performance API");
        var timeOrigin = (0, _utils1.msToSec)((0, _utils.browserPerformanceTimeOrigin));
        var entryScriptSrc;
        if (global.document && global.document.scripts) {
            // eslint-disable-next-line @typescript-eslint/prefer-for-of
            for(var i = 0; i < global.document.scripts.length; i++)// We go through all scripts on the page and look for 'data-entry'
            // We remember the name and measure the time between this script finished loading and
            // our mark 'sentry-tracing-init'
            if (global.document.scripts[i].dataset.entry === "true") {
                entryScriptSrc = global.document.scripts[i].src;
                break;
            }
        }
        var entryScriptStartTimestamp;
        var tracingInitMarkStartTime;
        var responseStartTimestamp;
        var requestStartTimestamp;
        global.performance.getEntries().slice(this._performanceCursor).forEach(function(entry) {
            var startTime = (0, _utils1.msToSec)(entry.startTime);
            var duration = (0, _utils1.msToSec)(entry.duration);
            if (transaction.op === "navigation" && timeOrigin + startTime < transaction.startTimestamp) return;
            switch(entry.entryType){
                case "navigation":
                    addNavigationSpans(transaction, entry, timeOrigin);
                    responseStartTimestamp = timeOrigin + (0, _utils1.msToSec)(entry.responseStart);
                    requestStartTimestamp = timeOrigin + (0, _utils1.msToSec)(entry.requestStart);
                    break;
                case "mark":
                case "paint":
                case "measure":
                    var startTimestamp = addMeasureSpans(transaction, entry, startTime, duration, timeOrigin);
                    if (tracingInitMarkStartTime === undefined && entry.name === "sentry-tracing-init") tracingInitMarkStartTime = startTimestamp;
                    // capture web vitals
                    var firstHidden = (0, _getVisibilityWatcher.getVisibilityWatcher)();
                    // Only report if the page wasn't hidden prior to the web vital.
                    var shouldRecord = entry.startTime < firstHidden.firstHiddenTime;
                    if (entry.name === "first-paint" && shouldRecord) {
                        (0, _utils.logger).log("[Measurements] Adding FP");
                        _this._measurements["fp"] = {
                            value: entry.startTime
                        };
                        _this._measurements["mark.fp"] = {
                            value: startTimestamp
                        };
                    }
                    if (entry.name === "first-contentful-paint" && shouldRecord) {
                        (0, _utils.logger).log("[Measurements] Adding FCP");
                        _this._measurements["fcp"] = {
                            value: entry.startTime
                        };
                        _this._measurements["mark.fcp"] = {
                            value: startTimestamp
                        };
                    }
                    break;
                case "resource":
                    var resourceName = entry.name.replace(window.location.origin, "");
                    var endTimestamp = addResourceSpans(transaction, entry, resourceName, startTime, duration, timeOrigin);
                    // We remember the entry script end time to calculate the difference to the first init mark
                    if (entryScriptStartTimestamp === undefined && (entryScriptSrc || "").indexOf(resourceName) > -1) entryScriptStartTimestamp = endTimestamp;
                    break;
                default:
            }
        });
        if (entryScriptStartTimestamp !== undefined && tracingInitMarkStartTime !== undefined) _startChild(transaction, {
            description: "evaluation",
            endTimestamp: tracingInitMarkStartTime,
            op: "script",
            startTimestamp: entryScriptStartTimestamp
        });
        this._performanceCursor = Math.max(performance.getEntries().length - 1, 0);
        this._trackNavigator(transaction);
        // Measurements are only available for pageload transactions
        if (transaction.op === "pageload") {
            // normalize applicable web vital values to be relative to transaction.startTimestamp
            var timeOrigin_1 = (0, _utils1.msToSec)((0, _utils.browserPerformanceTimeOrigin));
            // Generate TTFB (Time to First Byte), which measured as the time between the beginning of the transaction and the
            // start of the response in milliseconds
            if (typeof responseStartTimestamp === "number") {
                (0, _utils.logger).log("[Measurements] Adding TTFB");
                this._measurements["ttfb"] = {
                    value: (responseStartTimestamp - transaction.startTimestamp) * 1000
                };
                if (typeof requestStartTimestamp === "number" && requestStartTimestamp <= responseStartTimestamp) // Capture the time spent making the request and receiving the first byte of the response.
                // This is the time between the start of the request and the start of the response in milliseconds.
                this._measurements["ttfb.requestTime"] = {
                    value: (responseStartTimestamp - requestStartTimestamp) * 1000
                };
            }
            [
                "fcp",
                "fp",
                "lcp"
            ].forEach(function(name) {
                if (!_this._measurements[name] || timeOrigin_1 >= transaction.startTimestamp) return;
                // The web vitals, fcp, fp, lcp, and ttfb, all measure relative to timeOrigin.
                // Unfortunately, timeOrigin is not captured within the transaction span data, so these web vitals will need
                // to be adjusted to be relative to transaction.startTimestamp.
                var oldValue = _this._measurements[name].value;
                var measurementTimestamp = timeOrigin_1 + (0, _utils1.msToSec)(oldValue);
                // normalizedValue should be in milliseconds
                var normalizedValue = Math.abs((measurementTimestamp - transaction.startTimestamp) * 1000);
                var delta = normalizedValue - oldValue;
                (0, _utils.logger).log("[Measurements] Normalized " + name + " from " + oldValue + " to " + normalizedValue + " (" + delta + ")");
                _this._measurements[name].value = normalizedValue;
            });
            if (this._measurements["mark.fid"] && this._measurements["fid"]) // create span for FID
            _startChild(transaction, {
                description: "first input delay",
                endTimestamp: this._measurements["mark.fid"].value + (0, _utils1.msToSec)(this._measurements["fid"].value),
                op: "web.vitals",
                startTimestamp: this._measurements["mark.fid"].value
            });
            // If FCP is not recorded we should not record the cls value
            // according to the new definition of CLS.
            if (!("fcp" in this._measurements)) delete this._measurements.cls;
            transaction.setMeasurements(this._measurements);
            this._tagMetricInfo(transaction);
        }
    };
    /** Add LCP / CLS data to transaction to allow debugging */ MetricsInstrumentation1.prototype._tagMetricInfo = function(transaction) {
        if (this._lcpEntry) {
            (0, _utils.logger).log("[Measurements] Adding LCP Data");
            // Capture Properties of the LCP element that contributes to the LCP.
            if (this._lcpEntry.element) transaction.setTag("lcp.element", (0, _utils.htmlTreeAsString)(this._lcpEntry.element));
            if (this._lcpEntry.id) transaction.setTag("lcp.id", this._lcpEntry.id);
            if (this._lcpEntry.url) // Trim URL to the first 200 characters.
            transaction.setTag("lcp.url", this._lcpEntry.url.trim().slice(0, 200));
            transaction.setTag("lcp.size", this._lcpEntry.size);
        }
        // See: https://developer.mozilla.org/en-US/docs/Web/API/LayoutShift
        if (this._clsEntry && this._clsEntry.sources) {
            (0, _utils.logger).log("[Measurements] Adding CLS Data");
            this._clsEntry.sources.forEach(function(source, index) {
                return transaction.setTag("cls.source." + (index + 1), (0, _utils.htmlTreeAsString)(source.node));
            });
        }
    };
    /** Starts tracking the Cumulative Layout Shift on the current page. */ MetricsInstrumentation1.prototype._trackCLS = function() {
        var _this = this;
        // See:
        // https://web.dev/evolving-cls/
        // https://web.dev/cls-web-tooling/
        (0, _getCLS.getCLS)(function(metric) {
            var entry = metric.entries.pop();
            if (!entry) return;
            (0, _utils.logger).log("[Measurements] Adding CLS");
            _this._measurements["cls"] = {
                value: metric.value
            };
            _this._clsEntry = entry;
        });
    };
    /**
     * Capture the information of the user agent.
     */ MetricsInstrumentation1.prototype._trackNavigator = function(transaction) {
        var navigator = global.navigator;
        if (!navigator) return;
        // track network connectivity
        var connection = navigator.connection;
        if (connection) {
            if (connection.effectiveType) transaction.setTag("effectiveConnectionType", connection.effectiveType);
            if (connection.type) transaction.setTag("connectionType", connection.type);
            if (isMeasurementValue(connection.rtt)) this._measurements["connection.rtt"] = {
                value: connection.rtt
            };
            if (isMeasurementValue(connection.downlink)) this._measurements["connection.downlink"] = {
                value: connection.downlink
            };
        }
        if (isMeasurementValue(navigator.deviceMemory)) transaction.setTag("deviceMemory", String(navigator.deviceMemory));
        if (isMeasurementValue(navigator.hardwareConcurrency)) transaction.setTag("hardwareConcurrency", String(navigator.hardwareConcurrency));
    };
    /** Starts tracking the Largest Contentful Paint on the current page. */ MetricsInstrumentation1.prototype._trackLCP = function() {
        var _this = this;
        (0, _getLCP.getLCP)(function(metric) {
            var entry = metric.entries.pop();
            if (!entry) return;
            var timeOrigin = (0, _utils1.msToSec)((0, _utils.browserPerformanceTimeOrigin));
            var startTime = (0, _utils1.msToSec)(entry.startTime);
            (0, _utils.logger).log("[Measurements] Adding LCP");
            _this._measurements["lcp"] = {
                value: metric.value
            };
            _this._measurements["mark.lcp"] = {
                value: timeOrigin + startTime
            };
            _this._lcpEntry = entry;
        });
    };
    /** Starts tracking the First Input Delay on the current page. */ MetricsInstrumentation1.prototype._trackFID = function() {
        var _this = this;
        (0, _getFID.getFID)(function(metric) {
            var entry = metric.entries.pop();
            if (!entry) return;
            var timeOrigin = (0, _utils1.msToSec)((0, _utils.browserPerformanceTimeOrigin));
            var startTime = (0, _utils1.msToSec)(entry.startTime);
            (0, _utils.logger).log("[Measurements] Adding FID");
            _this._measurements["fid"] = {
                value: metric.value
            };
            _this._measurements["mark.fid"] = {
                value: timeOrigin + startTime
            };
        });
    };
    return MetricsInstrumentation1;
}();
/** Instrument navigation entries */ function addNavigationSpans(transaction, entry, timeOrigin) {
    addPerformanceNavigationTiming({
        transaction: transaction,
        entry: entry,
        event: "unloadEvent",
        timeOrigin: timeOrigin
    });
    addPerformanceNavigationTiming({
        transaction: transaction,
        entry: entry,
        event: "redirect",
        timeOrigin: timeOrigin
    });
    addPerformanceNavigationTiming({
        transaction: transaction,
        entry: entry,
        event: "domContentLoadedEvent",
        timeOrigin: timeOrigin
    });
    addPerformanceNavigationTiming({
        transaction: transaction,
        entry: entry,
        event: "loadEvent",
        timeOrigin: timeOrigin
    });
    addPerformanceNavigationTiming({
        transaction: transaction,
        entry: entry,
        event: "connect",
        timeOrigin: timeOrigin
    });
    addPerformanceNavigationTiming({
        transaction: transaction,
        entry: entry,
        event: "secureConnection",
        timeOrigin: timeOrigin,
        eventEnd: "connectEnd",
        description: "TLS/SSL"
    });
    addPerformanceNavigationTiming({
        transaction: transaction,
        entry: entry,
        event: "fetch",
        timeOrigin: timeOrigin,
        eventEnd: "domainLookupStart",
        description: "cache"
    });
    addPerformanceNavigationTiming({
        transaction: transaction,
        entry: entry,
        event: "domainLookup",
        timeOrigin: timeOrigin,
        description: "DNS"
    });
    addRequest(transaction, entry, timeOrigin);
}
/** Create measure related spans */ function addMeasureSpans(transaction, entry, startTime, duration, timeOrigin) {
    var measureStartTimestamp = timeOrigin + startTime;
    var measureEndTimestamp = measureStartTimestamp + duration;
    _startChild(transaction, {
        description: entry.name,
        endTimestamp: measureEndTimestamp,
        op: entry.entryType,
        startTimestamp: measureStartTimestamp
    });
    return measureStartTimestamp;
}
function addResourceSpans(transaction, entry, resourceName, startTime, duration, timeOrigin) {
    // we already instrument based on fetch and xhr, so we don't need to
    // duplicate spans here.
    if (entry.initiatorType === "xmlhttprequest" || entry.initiatorType === "fetch") return undefined;
    var data = {};
    if ("transferSize" in entry) data["Transfer Size"] = entry.transferSize;
    if ("encodedBodySize" in entry) data["Encoded Body Size"] = entry.encodedBodySize;
    if ("decodedBodySize" in entry) data["Decoded Body Size"] = entry.decodedBodySize;
    var startTimestamp = timeOrigin + startTime;
    var endTimestamp = startTimestamp + duration;
    _startChild(transaction, {
        description: resourceName,
        endTimestamp: endTimestamp,
        op: entry.initiatorType ? "resource." + entry.initiatorType : "resource",
        startTimestamp: startTimestamp,
        data: data
    });
    return endTimestamp;
}
/** Create performance navigation related spans */ function addPerformanceNavigationTiming(props) {
    var transaction = props.transaction, entry = props.entry, event = props.event, timeOrigin = props.timeOrigin, eventEnd = props.eventEnd, description = props.description;
    var end = eventEnd ? entry[eventEnd] : entry[event + "End"];
    var start = entry[event + "Start"];
    if (!start || !end) return;
    _startChild(transaction, {
        op: "browser",
        description: description !== null && description !== void 0 ? description : event,
        startTimestamp: timeOrigin + (0, _utils1.msToSec)(start),
        endTimestamp: timeOrigin + (0, _utils1.msToSec)(end)
    });
}
/** Create request and response related spans */ function addRequest(transaction, entry, timeOrigin) {
    _startChild(transaction, {
        op: "browser",
        description: "request",
        startTimestamp: timeOrigin + (0, _utils1.msToSec)(entry.requestStart),
        endTimestamp: timeOrigin + (0, _utils1.msToSec)(entry.responseEnd)
    });
    _startChild(transaction, {
        op: "browser",
        description: "response",
        startTimestamp: timeOrigin + (0, _utils1.msToSec)(entry.responseStart),
        endTimestamp: timeOrigin + (0, _utils1.msToSec)(entry.responseEnd)
    });
}
function _startChild(transaction, _a) {
    var startTimestamp = _a.startTimestamp, ctx = (0, _tslib.__rest)(_a, [
        "startTimestamp"
    ]);
    if (startTimestamp && transaction.startTimestamp > startTimestamp) transaction.startTimestamp = startTimestamp;
    return transaction.startChild((0, _tslib.__assign)({
        startTimestamp: startTimestamp
    }, ctx));
}
/**
 * Checks if a given value is a valid measurement value.
 */ function isMeasurementValue(value) {
    return typeof value === "number" && isFinite(value);
}

},{"tslib":"lRdW5","@sentry/utils":"5auop","../utils":"2Y12I","./web-vitals/getCLS":"1TRZR","./web-vitals/getFID":"i8bTa","./web-vitals/getLCP":"k3wrr","./web-vitals/lib/getVisibilityWatcher":"jVxaE","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1TRZR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getCLS", ()=>getCLS);
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var _bindReporter = require("./lib/bindReporter");
var _initMetric = require("./lib/initMetric");
var _observe = require("./lib/observe");
var _onHidden = require("./lib/onHidden");
var getCLS = function(onReport, reportAllChanges) {
    var metric = (0, _initMetric.initMetric)("CLS", 0);
    var report;
    var sessionValue = 0;
    var sessionEntries = [];
    var entryHandler = function(entry) {
        // Only count layout shifts without recent user input.
        // TODO: Figure out why entry can be undefined
        if (entry && !entry.hadRecentInput) {
            var firstSessionEntry = sessionEntries[0];
            var lastSessionEntry = sessionEntries[sessionEntries.length - 1];
            // If the entry occurred less than 1 second after the previous entry and
            // less than 5 seconds after the first entry in the session, include the
            // entry in the current session. Otherwise, start a new session.
            if (sessionValue && sessionEntries.length !== 0 && entry.startTime - lastSessionEntry.startTime < 1000 && entry.startTime - firstSessionEntry.startTime < 5000) {
                sessionValue += entry.value;
                sessionEntries.push(entry);
            } else {
                sessionValue = entry.value;
                sessionEntries = [
                    entry
                ];
            }
            // If the current session value is larger than the current CLS value,
            // update CLS and the entries contributing to it.
            if (sessionValue > metric.value) {
                metric.value = sessionValue;
                metric.entries = sessionEntries;
                if (report) report();
            }
        }
    };
    var po = (0, _observe.observe)("layout-shift", entryHandler);
    if (po) {
        report = (0, _bindReporter.bindReporter)(onReport, metric, reportAllChanges);
        (0, _onHidden.onHidden)(function() {
            po.takeRecords().map(entryHandler);
            report(true);
        });
    }
};

},{"./lib/bindReporter":"hJI3E","./lib/initMetric":"cLAH7","./lib/observe":"7SFJ8","./lib/onHidden":"lE5Ua","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hJI3E":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "bindReporter", ()=>bindReporter);
var bindReporter = function(callback, metric, reportAllChanges) {
    var prevValue;
    return function(forceReport) {
        if (metric.value >= 0) {
            if (forceReport || reportAllChanges) {
                metric.delta = metric.value - (prevValue || 0);
                // Report the metric if there's a non-zero delta or if no previous
                // value exists (which can happen in the case of the document becoming
                // hidden when the metric value is 0).
                // See: https://github.com/GoogleChrome/web-vitals/issues/14
                if (metric.delta || prevValue === undefined) {
                    prevValue = metric.value;
                    callback(metric);
                }
            }
        }
    };
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cLAH7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "initMetric", ()=>initMetric);
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var _generateUniqueID = require("./generateUniqueID");
var initMetric = function(name, value) {
    return {
        name: name,
        value: value !== null && value !== void 0 ? value : -1,
        delta: 0,
        entries: [],
        id: (0, _generateUniqueID.generateUniqueID)()
    };
};

},{"./generateUniqueID":"2Wlve","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2Wlve":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "generateUniqueID", ()=>generateUniqueID);
var generateUniqueID = function() {
    return "v2-" + Date.now() + "-" + (Math.floor(Math.random() * (9e12 - 1)) + 1e12);
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7SFJ8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "observe", ()=>observe);
var observe = function(type, callback) {
    try {
        if (PerformanceObserver.supportedEntryTypes.includes(type)) {
            // More extensive feature detect needed for Firefox due to:
            // https://github.com/GoogleChrome/web-vitals/issues/142
            if (type === "first-input" && !("PerformanceEventTiming" in self)) return;
            var po = new PerformanceObserver(function(l) {
                return l.getEntries().map(callback);
            });
            po.observe({
                type: type,
                buffered: true
            });
            return po;
        }
    } catch (e) {
    // Do nothing.
    }
    return;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lE5Ua":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "onHidden", ()=>onHidden);
var onHidden = function(cb, once) {
    var onHiddenOrPageHide = function(event) {
        if (event.type === "pagehide" || document.visibilityState === "hidden") {
            cb(event);
            if (once) {
                removeEventListener("visibilitychange", onHiddenOrPageHide, true);
                removeEventListener("pagehide", onHiddenOrPageHide, true);
            }
        }
    };
    addEventListener("visibilitychange", onHiddenOrPageHide, true);
    // Some browsers have buggy implementations of visibilitychange,
    // so we use pagehide in addition, just to be safe.
    addEventListener("pagehide", onHiddenOrPageHide, true);
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"i8bTa":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getFID", ()=>getFID);
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var _bindReporter = require("./lib/bindReporter");
var _getVisibilityWatcher = require("./lib/getVisibilityWatcher");
var _initMetric = require("./lib/initMetric");
var _observe = require("./lib/observe");
var _onHidden = require("./lib/onHidden");
var getFID = function(onReport, reportAllChanges) {
    var visibilityWatcher = (0, _getVisibilityWatcher.getVisibilityWatcher)();
    var metric = (0, _initMetric.initMetric)("FID");
    var report;
    var entryHandler = function(entry) {
        // Only report if the page wasn't hidden prior to the first input.
        if (report && entry.startTime < visibilityWatcher.firstHiddenTime) {
            metric.value = entry.processingStart - entry.startTime;
            metric.entries.push(entry);
            report(true);
        }
    };
    var po = (0, _observe.observe)("first-input", entryHandler);
    if (po) {
        report = (0, _bindReporter.bindReporter)(onReport, metric, reportAllChanges);
        (0, _onHidden.onHidden)(function() {
            po.takeRecords().map(entryHandler);
            po.disconnect();
        }, true);
    }
};

},{"./lib/bindReporter":"hJI3E","./lib/getVisibilityWatcher":"jVxaE","./lib/initMetric":"cLAH7","./lib/observe":"7SFJ8","./lib/onHidden":"lE5Ua","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jVxaE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getVisibilityWatcher", ()=>getVisibilityWatcher);
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var _onHidden = require("./onHidden");
var firstHiddenTime = -1;
var initHiddenTime = function() {
    return document.visibilityState === "hidden" ? 0 : Infinity;
};
var trackChanges = function() {
    // Update the time if/when the document becomes hidden.
    (0, _onHidden.onHidden)(function(_a) {
        var timeStamp = _a.timeStamp;
        firstHiddenTime = timeStamp;
    }, true);
};
var getVisibilityWatcher = function() {
    if (firstHiddenTime < 0) {
        // If the document is hidden when this code runs, assume it was hidden
        // since navigation start. This isn't a perfect heuristic, but it's the
        // best we can do until an API is available to support querying past
        // visibilityState.
        firstHiddenTime = initHiddenTime();
        trackChanges();
    }
    return {
        get firstHiddenTime () {
            return firstHiddenTime;
        }
    };
};

},{"./onHidden":"lE5Ua","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"k3wrr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getLCP", ()=>getLCP);
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var _bindReporter = require("./lib/bindReporter");
var _getVisibilityWatcher = require("./lib/getVisibilityWatcher");
var _initMetric = require("./lib/initMetric");
var _observe = require("./lib/observe");
var _onHidden = require("./lib/onHidden");
var reportedMetricIDs = {};
var getLCP = function(onReport, reportAllChanges) {
    var visibilityWatcher = (0, _getVisibilityWatcher.getVisibilityWatcher)();
    var metric = (0, _initMetric.initMetric)("LCP");
    var report;
    var entryHandler = function(entry) {
        // The startTime attribute returns the value of the renderTime if it is not 0,
        // and the value of the loadTime otherwise.
        var value = entry.startTime;
        // If the page was hidden prior to paint time of the entry,
        // ignore it and mark the metric as final, otherwise add the entry.
        if (value < visibilityWatcher.firstHiddenTime) {
            metric.value = value;
            metric.entries.push(entry);
        }
        if (report) report();
    };
    var po = (0, _observe.observe)("largest-contentful-paint", entryHandler);
    if (po) {
        report = (0, _bindReporter.bindReporter)(onReport, metric, reportAllChanges);
        var stopListening_1 = function() {
            if (!reportedMetricIDs[metric.id]) {
                po.takeRecords().map(entryHandler);
                po.disconnect();
                reportedMetricIDs[metric.id] = true;
                report(true);
            }
        };
        // Stop listening after input. Note: while scrolling is an input that
        // stop LCP observation, it's unreliable since it can be programmatically
        // generated. See: https://github.com/GoogleChrome/web-vitals/issues/75
        [
            "keydown",
            "click"
        ].forEach(function(type) {
            addEventListener(type, stopListening_1, {
                once: true,
                capture: true
            });
        });
        (0, _onHidden.onHidden)(stopListening_1, true);
    }
};

},{"./lib/bindReporter":"hJI3E","./lib/getVisibilityWatcher":"jVxaE","./lib/initMetric":"cLAH7","./lib/observe":"7SFJ8","./lib/onHidden":"lE5Ua","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"WiNZM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DEFAULT_TRACING_ORIGINS", ()=>DEFAULT_TRACING_ORIGINS);
parcelHelpers.export(exports, "defaultRequestInstrumentationOptions", ()=>defaultRequestInstrumentationOptions);
/** Registers span creators for xhr and fetch requests  */ parcelHelpers.export(exports, "instrumentOutgoingRequests", ()=>instrumentOutgoingRequests);
/**
 * Create and track fetch request spans
 */ parcelHelpers.export(exports, "fetchCallback", ()=>fetchCallback);
/**
 * Create and track xhr request spans
 */ parcelHelpers.export(exports, "xhrCallback", ()=>xhrCallback);
var _tslib = require("tslib");
var _utils = require("@sentry/utils");
var _spanstatus = require("../spanstatus");
var _utils1 = require("../utils");
var DEFAULT_TRACING_ORIGINS = [
    "localhost",
    /^\//
];
var defaultRequestInstrumentationOptions = {
    traceFetch: true,
    traceXHR: true,
    tracingOrigins: DEFAULT_TRACING_ORIGINS
};
function instrumentOutgoingRequests(_options) {
    // eslint-disable-next-line @typescript-eslint/unbound-method
    var _a = (0, _tslib.__assign)((0, _tslib.__assign)({}, defaultRequestInstrumentationOptions), _options), traceFetch = _a.traceFetch, traceXHR = _a.traceXHR, tracingOrigins = _a.tracingOrigins, shouldCreateSpanForRequest = _a.shouldCreateSpanForRequest;
    // We should cache url -> decision so that we don't have to compute
    // regexp everytime we create a request.
    var urlMap = {};
    var defaultShouldCreateSpan = function(url) {
        if (urlMap[url]) return urlMap[url];
        var origins = tracingOrigins;
        urlMap[url] = origins.some(function(origin) {
            return (0, _utils.isMatchingPattern)(url, origin);
        }) && !(0, _utils.isMatchingPattern)(url, "sentry_key");
        return urlMap[url];
    };
    // We want that our users don't have to re-implement shouldCreateSpanForRequest themselves
    // That's why we filter out already unwanted Spans from tracingOrigins
    var shouldCreateSpan = defaultShouldCreateSpan;
    if (typeof shouldCreateSpanForRequest === "function") shouldCreateSpan = function(url) {
        return defaultShouldCreateSpan(url) && shouldCreateSpanForRequest(url);
    };
    var spans = {};
    if (traceFetch) (0, _utils.addInstrumentationHandler)({
        callback: function(handlerData) {
            fetchCallback(handlerData, shouldCreateSpan, spans);
        },
        type: "fetch"
    });
    if (traceXHR) (0, _utils.addInstrumentationHandler)({
        callback: function(handlerData) {
            xhrCallback(handlerData, shouldCreateSpan, spans);
        },
        type: "xhr"
    });
}
function fetchCallback(handlerData, shouldCreateSpan, spans) {
    if (!(0, _utils1.hasTracingEnabled)() || !(handlerData.fetchData && shouldCreateSpan(handlerData.fetchData.url))) return;
    if (handlerData.endTimestamp && handlerData.fetchData.__span) {
        var span = spans[handlerData.fetchData.__span];
        if (span) {
            if (handlerData.response) // TODO (kmclb) remove this once types PR goes through
            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
            span.setHttpStatus(handlerData.response.status);
            else if (handlerData.error) span.setStatus((0, _spanstatus.SpanStatus).InternalError);
            span.finish();
            // eslint-disable-next-line @typescript-eslint/no-dynamic-delete
            delete spans[handlerData.fetchData.__span];
        }
        return;
    }
    var activeTransaction = (0, _utils1.getActiveTransaction)();
    if (activeTransaction) {
        var span = activeTransaction.startChild({
            data: (0, _tslib.__assign)((0, _tslib.__assign)({}, handlerData.fetchData), {
                type: "fetch"
            }),
            description: handlerData.fetchData.method + " " + handlerData.fetchData.url,
            op: "http.client"
        });
        handlerData.fetchData.__span = span.spanId;
        spans[span.spanId] = span;
        var request = handlerData.args[0] = handlerData.args[0];
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        var options = handlerData.args[1] = handlerData.args[1] || {};
        var headers = options.headers;
        if ((0, _utils.isInstanceOf)(request, Request)) headers = request.headers;
        if (headers) {
            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
            if (typeof headers.append === "function") // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
            headers.append("sentry-trace", span.toTraceparent());
            else if (Array.isArray(headers)) headers = (0, _tslib.__spread)(headers, [
                [
                    "sentry-trace",
                    span.toTraceparent()
                ]
            ]);
            else headers = (0, _tslib.__assign)((0, _tslib.__assign)({}, headers), {
                "sentry-trace": span.toTraceparent()
            });
        } else headers = {
            "sentry-trace": span.toTraceparent()
        };
        options.headers = headers;
    }
}
function xhrCallback(handlerData, shouldCreateSpan, spans) {
    var _a, _b;
    if (!(0, _utils1.hasTracingEnabled)() || ((_a = handlerData.xhr) === null || _a === void 0 ? void 0 : _a.__sentry_own_request__) || !(((_b = handlerData.xhr) === null || _b === void 0 ? void 0 : _b.__sentry_xhr__) && shouldCreateSpan(handlerData.xhr.__sentry_xhr__.url))) return;
    var xhr = handlerData.xhr.__sentry_xhr__;
    // check first if the request has finished and is tracked by an existing span which should now end
    if (handlerData.endTimestamp && handlerData.xhr.__sentry_xhr_span_id__) {
        var span = spans[handlerData.xhr.__sentry_xhr_span_id__];
        if (span) {
            span.setHttpStatus(xhr.status_code);
            span.finish();
            // eslint-disable-next-line @typescript-eslint/no-dynamic-delete
            delete spans[handlerData.xhr.__sentry_xhr_span_id__];
        }
        return;
    }
    // if not, create a new span to track it
    var activeTransaction = (0, _utils1.getActiveTransaction)();
    if (activeTransaction) {
        var span = activeTransaction.startChild({
            data: (0, _tslib.__assign)((0, _tslib.__assign)({}, xhr.data), {
                type: "xhr",
                method: xhr.method,
                url: xhr.url
            }),
            description: xhr.method + " " + xhr.url,
            op: "http.client"
        });
        handlerData.xhr.__sentry_xhr_span_id__ = span.spanId;
        spans[handlerData.xhr.__sentry_xhr_span_id__] = span;
        if (handlerData.xhr.setRequestHeader) try {
            handlerData.xhr.setRequestHeader("sentry-trace", span.toTraceparent());
        } catch (_) {
        // Error: InvalidStateError: Failed to execute 'setRequestHeader' on 'XMLHttpRequest': The object's state must be OPENED.
        }
    }
}

},{"tslib":"lRdW5","@sentry/utils":"5auop","../spanstatus":"exKzR","../utils":"2Y12I","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dqsGC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Default function implementing pageload and navigation transactions
 */ parcelHelpers.export(exports, "instrumentRoutingWithDefaults", ()=>instrumentRoutingWithDefaults);
var _utils = require("@sentry/utils");
var global = (0, _utils.getGlobalObject)();
function instrumentRoutingWithDefaults(customStartTransaction, startTransactionOnPageLoad, startTransactionOnLocationChange) {
    if (startTransactionOnPageLoad === void 0) startTransactionOnPageLoad = true;
    if (startTransactionOnLocationChange === void 0) startTransactionOnLocationChange = true;
    if (!global || !global.location) {
        (0, _utils.logger).warn("Could not initialize routing instrumentation due to invalid location");
        return;
    }
    var startingUrl = global.location.href;
    var activeTransaction;
    if (startTransactionOnPageLoad) activeTransaction = customStartTransaction({
        name: global.location.pathname,
        op: "pageload"
    });
    if (startTransactionOnLocationChange) (0, _utils.addInstrumentationHandler)({
        callback: function(_a) {
            var to = _a.to, from = _a.from;
            /**
                 * This early return is there to account for some cases where a navigation transaction starts right after
                 * long-running pageload. We make sure that if `from` is undefined and a valid `startingURL` exists, we don't
                 * create an uneccessary navigation transaction.
                 *
                 * This was hard to duplicate, but this behavior stopped as soon as this fix was applied. This issue might also
                 * only be caused in certain development environments where the usage of a hot module reloader is causing
                 * errors.
                 */ if (from === undefined && startingUrl && startingUrl.indexOf(to) !== -1) {
                startingUrl = undefined;
                return;
            }
            if (from !== to) {
                startingUrl = undefined;
                if (activeTransaction) {
                    (0, _utils.logger).log("[Tracing] Finishing current transaction with op: " + activeTransaction.op);
                    // If there's an open transaction on the scope, we need to finish it before creating an new one.
                    activeTransaction.finish();
                }
                activeTransaction = customStartTransaction({
                    name: global.location.pathname,
                    op: "navigation"
                });
            }
        },
        type: "history"
    });
}

},{"@sentry/utils":"5auop","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cG90K":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Express", ()=>(0, _express.Express));
parcelHelpers.export(exports, "Postgres", ()=>(0, _postgres.Postgres));
parcelHelpers.export(exports, "Mysql", ()=>(0, _mysql.Mysql));
parcelHelpers.export(exports, "Mongo", ()=>(0, _mongo.Mongo));
var _express = require("./express");
var _postgres = require("./postgres");
var _mysql = require("./mysql");
var _mongo = require("./mongo");

},{"./express":"9F8H3","./postgres":"1YnVd","./mysql":"dfHzq","./mongo":"8k9QX","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9F8H3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Express", ()=>Express);
var _tslib = require("tslib");
var _utils = require("@sentry/utils");
/**
 * Express integration
 *
 * Provides an request and error handler for Express framework as well as tracing capabilities
 */ var Express = /** @class */ function() {
    /**
     * @inheritDoc
     */ function Express1(options) {
        if (options === void 0) options = {};
        /**
         * @inheritDoc
         */ this.name = Express1.id;
        this._router = options.router || options.app;
        this._methods = (Array.isArray(options.methods) ? options.methods : []).concat("use");
    }
    /**
     * @inheritDoc
     */ Express1.prototype.setupOnce = function() {
        if (!this._router) {
            (0, _utils.logger).error("ExpressIntegration is missing an Express instance");
            return;
        }
        instrumentMiddlewares(this._router, this._methods);
    };
    /**
     * @inheritDoc
     */ Express1.id = "Express";
    return Express1;
}();
/**
 * Wraps original middleware function in a tracing call, which stores the info about the call as a span,
 * and finishes it once the middleware is done invoking.
 *
 * Express middlewares have 3 various forms, thus we have to take care of all of them:
 * // sync
 * app.use(function (req, res) { ... })
 * // async
 * app.use(function (req, res, next) { ... })
 * // error handler
 * app.use(function (err, req, res, next) { ... })
 *
 * They all internally delegate to the `router[method]` of the given application instance.
 */ // eslint-disable-next-line @typescript-eslint/ban-types, @typescript-eslint/no-explicit-any
function wrap(fn, method) {
    var arity = fn.length;
    switch(arity){
        case 2:
            return function(req, res) {
                var transaction = res.__sentry_transaction;
                if (transaction) {
                    var span_1 = transaction.startChild({
                        description: fn.name,
                        op: "middleware." + method
                    });
                    res.once("finish", function() {
                        span_1.finish();
                    });
                }
                return fn.call(this, req, res);
            };
        case 3:
            return function(req, res, next) {
                var _a1;
                var transaction = res.__sentry_transaction;
                var span = (_a1 = transaction) === null || _a1 === void 0 ? void 0 : _a1.startChild({
                    description: fn.name,
                    op: "middleware." + method
                });
                fn.call(this, req, res, function() {
                    var args = [];
                    for(var _i = 0; _i < arguments.length; _i++)args[_i] = arguments[_i];
                    var _a;
                    (_a = span) === null || _a === void 0 || _a.finish();
                    next.call.apply(next, (0, _tslib.__spread)([
                        this
                    ], args));
                });
            };
        case 4:
            return function(err, req, res, next) {
                var _a2;
                var transaction = res.__sentry_transaction;
                var span = (_a2 = transaction) === null || _a2 === void 0 ? void 0 : _a2.startChild({
                    description: fn.name,
                    op: "middleware." + method
                });
                fn.call(this, err, req, res, function() {
                    var args = [];
                    for(var _i = 0; _i < arguments.length; _i++)args[_i] = arguments[_i];
                    var _a;
                    (_a = span) === null || _a === void 0 || _a.finish();
                    next.call.apply(next, (0, _tslib.__spread)([
                        this
                    ], args));
                });
            };
        default:
            throw new Error("Express middleware takes 2-4 arguments. Got: " + arity);
    }
}
/**
 * Takes all the function arguments passed to the original `app` or `router` method, eg. `app.use` or `router.use`
 * and wraps every function, as well as array of functions with a call to our `wrap` method.
 * We have to take care of the arrays as well as iterate over all of the arguments,
 * as `app.use` can accept middlewares in few various forms.
 *
 * app.use([<path>], <fn>)
 * app.use([<path>], <fn>, ...<fn>)
 * app.use([<path>], ...<fn>[])
 */ function wrapMiddlewareArgs(args, method) {
    return args.map(function(arg) {
        if (typeof arg === "function") return wrap(arg, method);
        if (Array.isArray(arg)) return arg.map(function(a) {
            if (typeof a === "function") return wrap(a, method);
            return a;
        });
        return arg;
    });
}
/**
 * Patches original router to utilize our tracing functionality
 */ function patchMiddleware(router, method) {
    var originalCallback = router[method];
    router[method] = function() {
        var args = [];
        for(var _i = 0; _i < arguments.length; _i++)args[_i] = arguments[_i];
        return originalCallback.call.apply(originalCallback, (0, _tslib.__spread)([
            this
        ], wrapMiddlewareArgs(args, method)));
    };
    return router;
}
/**
 * Patches original router methods
 */ function instrumentMiddlewares(router, methods) {
    if (methods === void 0) methods = [];
    methods.forEach(function(method) {
        return patchMiddleware(router, method);
    });
}

},{"tslib":"lRdW5","@sentry/utils":"5auop","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1YnVd":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Postgres", ()=>Postgres);
var _utils = require("@sentry/utils");
/** Tracing integration for node-postgres package */ var Postgres = /** @class */ function() {
    function Postgres1() {
        /**
         * @inheritDoc
         */ this.name = Postgres1.id;
    }
    /**
     * @inheritDoc
     */ Postgres1.prototype.setupOnce = function(_, getCurrentHub) {
        var pkg = (0, _utils.loadModule)("pg");
        if (!pkg) {
            (0, _utils.logger).error("Postgres Integration was unable to require `pg` package.");
            return;
        }
        /**
         * function (query, callback) => void
         * function (query, params, callback) => void
         * function (query) => Promise
         * function (query, params) => Promise
         * function (pg.Cursor) => pg.Cursor
         */ (0, _utils.fill)(pkg.Client.prototype, "query", function(orig) {
            return function(config, values, callback) {
                var _a1, _b, _c;
                var scope = getCurrentHub().getScope();
                var parentSpan = (_a1 = scope) === null || _a1 === void 0 ? void 0 : _a1.getSpan();
                var span = (_b = parentSpan) === null || _b === void 0 ? void 0 : _b.startChild({
                    description: typeof config === "string" ? config : config.text,
                    op: "db"
                });
                if (typeof callback === "function") return orig.call(this, config, values, function(err, result) {
                    var _a;
                    (_a = span) === null || _a === void 0 || _a.finish();
                    callback(err, result);
                });
                if (typeof values === "function") return orig.call(this, config, function(err, result) {
                    var _a;
                    (_a = span) === null || _a === void 0 || _a.finish();
                    values(err, result);
                });
                var rv = typeof values !== "undefined" ? orig.call(this, config, values) : orig.call(this, config);
                if ((0, _utils.isThenable)(rv)) return rv.then(function(res) {
                    var _a;
                    (_a = span) === null || _a === void 0 || _a.finish();
                    return res;
                });
                (_c = span) === null || _c === void 0 || _c.finish();
                return rv;
            };
        });
    };
    /**
     * @inheritDoc
     */ Postgres1.id = "Postgres";
    return Postgres1;
}();

},{"@sentry/utils":"5auop","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dfHzq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Mysql", ()=>Mysql);
var _utils = require("@sentry/utils");
/** Tracing integration for node-mysql package */ var Mysql = /** @class */ function() {
    function Mysql1() {
        /**
         * @inheritDoc
         */ this.name = Mysql1.id;
    }
    /**
     * @inheritDoc
     */ Mysql1.prototype.setupOnce = function(_, getCurrentHub) {
        var pkg = (0, _utils.loadModule)("mysql/lib/Connection.js");
        if (!pkg) {
            (0, _utils.logger).error("Mysql Integration was unable to require `mysql` package.");
            return;
        }
        // The original function will have one of these signatures:
        //    function (callback) => void
        //    function (options, callback) => void
        //    function (options, values, callback) => void
        (0, _utils.fill)(pkg, "createQuery", function(orig) {
            return function(options, values, callback) {
                var _a1, _b;
                var scope = getCurrentHub().getScope();
                var parentSpan = (_a1 = scope) === null || _a1 === void 0 ? void 0 : _a1.getSpan();
                var span = (_b = parentSpan) === null || _b === void 0 ? void 0 : _b.startChild({
                    description: typeof options === "string" ? options : options.sql,
                    op: "db"
                });
                if (typeof callback === "function") return orig.call(this, options, values, function(err, result, fields) {
                    var _a;
                    (_a = span) === null || _a === void 0 || _a.finish();
                    callback(err, result, fields);
                });
                if (typeof values === "function") return orig.call(this, options, function(err, result, fields) {
                    var _a;
                    (_a = span) === null || _a === void 0 || _a.finish();
                    values(err, result, fields);
                });
                return orig.call(this, options, values, callback);
            };
        });
    };
    /**
     * @inheritDoc
     */ Mysql1.id = "Mysql";
    return Mysql1;
}();

},{"@sentry/utils":"5auop","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8k9QX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Mongo", ()=>Mongo);
var _tslib = require("tslib");
var _utils = require("@sentry/utils");
var OPERATIONS = [
    "aggregate",
    "bulkWrite",
    "countDocuments",
    "createIndex",
    "createIndexes",
    "deleteMany",
    "deleteOne",
    "distinct",
    "drop",
    "dropIndex",
    "dropIndexes",
    "estimatedDocumentCount",
    "find",
    "findOne",
    "findOneAndDelete",
    "findOneAndReplace",
    "findOneAndUpdate",
    "indexes",
    "indexExists",
    "indexInformation",
    "initializeOrderedBulkOp",
    "insertMany",
    "insertOne",
    "isCapped",
    "mapReduce",
    "options",
    "parallelCollectionScan",
    "rename",
    "replaceOne",
    "stats",
    "updateMany",
    "updateOne", 
];
// All of the operations above take `options` and `callback` as their final parameters, but some of them
// take additional parameters as well. For those operations, this is a map of
// { <operation name>:  [<names of additional parameters>] }, as a way to know what to call the operation's
// positional arguments when we add them to the span's `data` object later
var OPERATION_SIGNATURES = {
    // aggregate intentionally not included because `pipeline` arguments are too complex to serialize well
    // see https://github.com/getsentry/sentry-javascript/pull/3102
    bulkWrite: [
        "operations"
    ],
    countDocuments: [
        "query"
    ],
    createIndex: [
        "fieldOrSpec"
    ],
    createIndexes: [
        "indexSpecs"
    ],
    deleteMany: [
        "filter"
    ],
    deleteOne: [
        "filter"
    ],
    distinct: [
        "key",
        "query"
    ],
    dropIndex: [
        "indexName"
    ],
    find: [
        "query"
    ],
    findOne: [
        "query"
    ],
    findOneAndDelete: [
        "filter"
    ],
    findOneAndReplace: [
        "filter",
        "replacement"
    ],
    findOneAndUpdate: [
        "filter",
        "update"
    ],
    indexExists: [
        "indexes"
    ],
    insertMany: [
        "docs"
    ],
    insertOne: [
        "doc"
    ],
    mapReduce: [
        "map",
        "reduce"
    ],
    rename: [
        "newName"
    ],
    replaceOne: [
        "filter",
        "doc"
    ],
    updateMany: [
        "filter",
        "update"
    ],
    updateOne: [
        "filter",
        "update"
    ]
};
/** Tracing integration for mongo package */ var Mongo = /** @class */ function() {
    /**
     * @inheritDoc
     */ function Mongo1(options) {
        if (options === void 0) options = {};
        /**
         * @inheritDoc
         */ this.name = Mongo1.id;
        this._operations = Array.isArray(options.operations) ? options.operations : OPERATIONS;
        this._describeOperations = "describeOperations" in options ? options.describeOperations : true;
        this._useMongoose = !!options.useMongoose;
    }
    /**
     * @inheritDoc
     */ Mongo1.prototype.setupOnce = function(_, getCurrentHub) {
        var moduleName = this._useMongoose ? "mongoose" : "mongodb";
        var pkg = (0, _utils.loadModule)(moduleName);
        if (!pkg) {
            (0, _utils.logger).error("Mongo Integration was unable to require `" + moduleName + "` package.");
            return;
        }
        this._instrumentOperations(pkg.Collection, this._operations, getCurrentHub);
    };
    /**
     * Patches original collection methods
     */ Mongo1.prototype._instrumentOperations = function(collection, operations, getCurrentHub) {
        var _this = this;
        operations.forEach(function(operation) {
            return _this._patchOperation(collection, operation, getCurrentHub);
        });
    };
    /**
     * Patches original collection to utilize our tracing functionality
     */ Mongo1.prototype._patchOperation = function(collection, operation, getCurrentHub) {
        if (!(operation in collection.prototype)) return;
        var getSpanContext = this._getSpanContextFromOperationArguments.bind(this);
        (0, _utils.fill)(collection.prototype, operation, function(orig) {
            return function() {
                var args = [];
                for(var _i = 0; _i < arguments.length; _i++)args[_i] = arguments[_i];
                var _a1, _b, _c, _d;
                var lastArg = args[args.length - 1];
                var scope = getCurrentHub().getScope();
                var parentSpan = (_a1 = scope) === null || _a1 === void 0 ? void 0 : _a1.getSpan();
                // Check if the operation was passed a callback. (mapReduce requires a different check, as
                // its (non-callback) arguments can also be functions.)
                if (typeof lastArg !== "function" || operation === "mapReduce" && args.length === 2) {
                    var span_1 = (_b = parentSpan) === null || _b === void 0 ? void 0 : _b.startChild(getSpanContext(this, operation, args));
                    var maybePromise = orig.call.apply(orig, (0, _tslib.__spread)([
                        this
                    ], args));
                    if ((0, _utils.isThenable)(maybePromise)) return maybePromise.then(function(res) {
                        var _a;
                        (_a = span_1) === null || _a === void 0 || _a.finish();
                        return res;
                    });
                    else {
                        (_c = span_1) === null || _c === void 0 || _c.finish();
                        return maybePromise;
                    }
                }
                var span = (_d = parentSpan) === null || _d === void 0 ? void 0 : _d.startChild(getSpanContext(this, operation, args.slice(0, -1)));
                return orig.call.apply(orig, (0, _tslib.__spread)([
                    this
                ], args.slice(0, -1), [
                    function(err, result) {
                        var _a;
                        (_a = span) === null || _a === void 0 || _a.finish();
                        lastArg(err, result);
                    }
                ]));
            };
        });
    };
    /**
     * Form a SpanContext based on the user input to a given operation.
     */ Mongo1.prototype._getSpanContextFromOperationArguments = function(collection, operation, args) {
        var data = {
            collectionName: collection.collectionName,
            dbName: collection.dbName,
            namespace: collection.namespace
        };
        var spanContext = {
            op: "db",
            description: operation,
            data: data
        };
        // If the operation takes no arguments besides `options` and `callback`, or if argument
        // collection is disabled for this operation, just return early.
        var signature = OPERATION_SIGNATURES[operation];
        var shouldDescribe = Array.isArray(this._describeOperations) ? this._describeOperations.includes(operation) : this._describeOperations;
        if (!signature || !shouldDescribe) return spanContext;
        try {
            // Special case for `mapReduce`, as the only one accepting functions as arguments.
            if (operation === "mapReduce") {
                var _a = (0, _tslib.__read)(args, 2), map = _a[0], reduce = _a[1];
                data[signature[0]] = typeof map === "string" ? map : map.name || "<anonymous>";
                data[signature[1]] = typeof reduce === "string" ? reduce : reduce.name || "<anonymous>";
            } else for(var i = 0; i < signature.length; i++)data[signature[i]] = JSON.stringify(args[i]);
        } catch (_oO) {
        // no-empty
        }
        return spanContext;
    };
    /**
     * @inheritDoc
     */ Mongo1.id = "Mongo";
    return Mongo1;
}();

},{"tslib":"lRdW5","@sentry/utils":"5auop","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}]},["6NI8C","8lOnX"], "8lOnX", "parcelRequirecf05")

//# sourceMappingURL=index.js.map
